/** GameLevelDataController  *	---------------------------------------------------------------------------- *  *	@desc:  *		Data controller class to load required data for the game level  *		from the server.  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */	package com.boogabooga.controller.gamelevel	{		import flash.events.Event;		import flash.events.EventDispatcher;		import flash.events.IOErrorEvent;		import flash.events.FullScreenEvent;		import flash.events.ProgressEvent;		import flash.external.ExternalInterface;		import flash.net.URLLoader;		import flash.net.URLRequest;		import flash.net.URLRequestMethod;		import flash.net.URLVariables;				import com.adobe.serialization.json.JSONDecoder;		import com.adobe.serialization.json.JSONEncoder;		import com.avatarlabs.utils.cache.HashTable;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;				import com.boogabooga.controller.BaseDataController;		import com.boogabooga.controller.gamelevel.*;		import com.boogabooga.controller.maingame.*;		import com.boogabooga.data.gamelevel.GameLevelDataIndex;		import com.boogabooga.data.gamelevel.Weapon;		import com.boogabooga.data.maingame.*;		import com.boogabooga.data.gamelevel.AnimationObject;		import com.boogabooga.data.gamelevel.GameLevel;		import com.boogabooga.data.gamelevel.SlotMachine;		import com.boogabooga.data.gamelevel.EnvironmentObject;		import com.boogabooga.data.gamelevel.DiggingMap;		import com.boogabooga.data.gamelevel.DiggingSpots;		import com.boogabooga.data.gamelevel.GameLevelEnvironmentObject;		import com.boogabooga.data.gamelevel.GameLevelVillagerObject;		import com.boogabooga.data.challengelevel.ChallengeLevel;				public class GameLevelDataController extends BaseDataController		{						/** Constructor			  *	---------------------------------------------------------------------- */				public function GameLevelDataController()				{					super();										_debug = true;									}											/** loadGameLevels			  *	---------------------------------------------------------------------- */				public function loadGameLevels( gameLevelIds:Array, userId:int ):void				{					var dataObject:Object = new Object();						dataObject.ids = gameLevelIds;						dataObject.user_id = userId;										var data:URLVariables = new URLVariables();						data.url = "gamelevels/getGameLevels";						data.data = new JSONEncoder(dataObject).getString();										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleLoadGameLevelsComplete, handleLoadGameLevelsError );				}							/** handleLoadGameLevelsComplete			  *	---------------------------------------------------------------------- */				private function handleLoadGameLevelsComplete( event:Event ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "GameLevelDataController", "handleLoadGameLevelsComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleLoadGameLevelsComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleLoadGameLevelsError );										//trace( event.currentTarget.data );										//try					//{						var data = new JSONDecoder(event.currentTarget.data).getValue();												if( data.status )						{							var gameLevelsData = data.result;							var environment:EnvironmentObject;							var gameLevel:GameLevel;							var ids:Array = new Array();							var village:Village;							var j:int, k:int;							var levelAssigned:Boolean = false;							var properties:Array;							var environmentObjects:Array;							var environmentObjectsData:Array;							var gameLevelEnvironmentObject:GameLevelEnvironmentObject;							var environmentObject:EnvironmentObject;							var villagerObjects:Array;							var gameLevelVillagerObject:GameLevelVillagerObject;														for( var i:int=0; i<gameLevelsData.length; ++i )							{								gameLevel = new GameLevel();								gameLevel.id = gameLevelsData[i]["id"];								gameLevel.name = gameLevelsData[i]["name"];								gameLevel.level = gameLevelsData[i]["level"];								gameLevel.startingChicken = gameLevelsData[i]["starting_chicken"];								gameLevel.chickenSpawnRateMin = gameLevelsData[i]["chicken_spawn_rate"].split(',')[0];								gameLevel.chickenSpawnRateMax = gameLevelsData[i]["chicken_spawn_rate"].split(',')[1];								gameLevel.gateHealth = gameLevelsData[i]["gate_health"];								gameLevel.createdBy = gameLevelsData[i]["created_by"];								gameLevel.buyChickenEnabled = (gameLevelsData[i]["buy_chicken_enabled"] == "1");								gameLevel.slotEnabled = (gameLevelsData[i]["slot_enabled"] == "1");								gameLevel.slotWinningProbability = gameLevelsData[i]["slot_winning_probability"];								gameLevel.gameLevelBackgroundId = gameLevelsData[i]['game_level_background_id'];								gameLevel.gameLevelBackgroundAssetURL = gameLevelsData[i]['game_level_background_asset_url'];								gameLevel.gameLevelBackgroundLinkageId = gameLevelsData[i]['game_level_background_linkage_id'];								gameLevel.deserialize( gameLevelsData[i]["wavezones"], gameLevelsData[i]["paths"], gameLevelsData[i]['spawn_points'], gameLevelsData[i]['chicken_movement_areas'] );								//gameLevel.diggingMap = new DiggingMap();								gameLevel.diggingSpots = new DiggingSpots();																if( gameLevelsData[i]["digging_spots"] != null )								{									//gameLevel.diggingMap.deserializeDiggingSpots( gameLevelsData[i]["digging_spots"] );									gameLevel.diggingSpots.deserialize( gameLevelsData[i]["digging_spots"] );								}																environmentObjectsData = gameLevelsData[i]['environment_objects_data'];								for( j=0; j<environmentObjectsData.length; ++j )								{									environmentObject = new EnvironmentObject();									environmentObject.id = environmentObjectsData[j]['id'];									environmentObject.name = environmentObjectsData[j]['name'];									//environmentObject.linkageId = environmentObjectsData[j]['linkage_id'];									environmentObject.assetURL = environmentObjectsData[j]['asset_url'];																		GameLevelDataIndex.getInstance().addEnvironmentObject( environmentObject );								}																environmentObjects = gameLevelsData[i]["environment_objects"];								//trace( "environment_objects length: "+environmentObjects.length );								for( j=0; j<environmentObjects.length; ++j )								{									gameLevelEnvironmentObject = new GameLevelEnvironmentObject();									gameLevelEnvironmentObject.id = environmentObjects[j]['id'];									gameLevelEnvironmentObject.environmentObjectId = environmentObjects[j]['environment_object_id'];									gameLevelEnvironmentObject.positionX = environmentObjects[j]['position_x'];									gameLevelEnvironmentObject.positionY = environmentObjects[j]['position_y'];									gameLevelEnvironmentObject.row = environmentObjects[j]['row'];									gameLevelEnvironmentObject.column = environmentObjects[j]['col'];									gameLevelEnvironmentObject.layer = environmentObjects[j]['layer'];																		gameLevel.environmentObjects.push( gameLevelEnvironmentObject );								}																environmentObjects = gameLevelsData[i]['village_objects'];								//trace( "village_objects length: "+environmentObjects.length );								for( j=0; j<environmentObjects.length; ++j )								{									gameLevelEnvironmentObject = new GameLevelEnvironmentObject();									gameLevelEnvironmentObject.id = environmentObjects[j]['id'];									gameLevelEnvironmentObject.environmentObjectId = environmentObjects[j]['environment_object_id'];									gameLevelEnvironmentObject.positionX = environmentObjects[j]['position_x'];									gameLevelEnvironmentObject.positionY = environmentObjects[j]['position_y'];									gameLevelEnvironmentObject.row = environmentObjects[j]['row'];									gameLevelEnvironmentObject.column = environmentObjects[j]['col'];									gameLevelEnvironmentObject.layer = environmentObjects[j]['layer'];																		gameLevel.villageObjects.push( gameLevelEnvironmentObject );								}																villagerObjects = gameLevelsData[i]['villagers'];								for( j=0; j<villagerObjects.length; ++j )								{									gameLevelVillagerObject = new GameLevelVillagerObject();									gameLevelVillagerObject.id = villagerObjects[j]['id'];									gameLevelVillagerObject.villagerId = villagerObjects[j]['villager_id'];									gameLevelVillagerObject.positionX = villagerObjects[j]['position_x'];									gameLevelVillagerObject.positionY = villagerObjects[j]['position_y'];									gameLevelVillagerObject.row = villagerObjects[j]['row'];									gameLevelVillagerObject.column = villagerObjects[j]['col'];									gameLevelVillagerObject.layer = villagerObjects[j]['layer'];																		gameLevel.villagerObjects.push( gameLevelVillagerObject );								}																properties = new JSONDecoder(data.result[i]['properties']).getValue();								for( j=0; j<properties.length; ++j )								{									gameLevel.addProperty( HashTable.getInstance().getHash(properties[j]) );								}																//if( gameLevel.slotEnabled ) gameLevel.slotMachine = new SlotMachine();								//trace( gameLevelData["wavezones"] );								//trace( gameLevelData["paths"] );																//trace( "adding game level "+gameLevel.id );								GameLevelDataIndex.getInstance().addGameLevel( gameLevel );																ids.push( gameLevel.id );																for( j=0; j<MainGameDataIndex.getInstance().islandsCount; ++j )								{									for( k=0; k<MainGameDataIndex.getInstance().islands[j].villages.length; ++k )									{										if( MainGameDataIndex.getInstance().islands[j].villages[k].gameLevelId == gameLevel.id )										{											gameLevel.level = MainGameDataIndex.getInstance().islands[j].villages[k].level;											levelAssigned = true;											break;										}									}																		if( levelAssigned )									{										levelAssigned = false;										break;									}								}							}														//trace( "chicken_spawn_rate: "+gameLevelData["chicken_spawn_rate"] );							//trace( "chickenSpawnRateMin: "+gameLevel.chickenSpawnRateMin );							//trace( "chickenSpawnRateMax: "+gameLevel.chickenSpawnRateMax );							//trace( "env object 0 id: "+environmentObjects[0].environment_object_id );							//trace( "env object 0 row: "+environmentObjects[0].row+", col: "+environmentObjects[0].col );														//var gameLevels:Array = GameLevelDataIndex.getInstance().gameLevels;							//trace( gameLevels );														dispatchEvent( new CustomEvent("onComplete", {ids:ids}) );						}						else						{							dispatchEvent( new CustomEvent("onError", {error:data.error}) );						}					/*}					catch( e:Error )					{						ConsoleBroadcaster.broadcast( "GameLevelDataController", "Error in parsing data, "+e.message );						ConsoleBroadcaster.broadcast( "GameLevelDataController", "event.currentTarget.data: "+event.currentTarget.data );												dispatchEvent( new CustomEvent("onError", {error:data.error}) );					}*/				}							/** handleLoadGameLevelsError			  *	---------------------------------------------------------------------- */				private function handleLoadGameLevelsError( event:IOErrorEvent ):void				{					event.currentTarget.removeEventListener( Event.COMPLETE, handleLoadGameLevelsComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleLoadGameLevelsError );										dispatchEvent( new CustomEvent("onError") );				}							/** saveGameLevel			  *	---------------------------------------------------------------------- */				public function saveGameLevel( gameLevel:GameLevel ):void				{					var data:URLVariables = new URLVariables();						data.url = "gamelevels/saveGameLevel";						data.data = gameLevel.serialize();										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleSaveGameLevelComplete, handleSaveGameLevelError );				}							/** handleSaveGameLevelComplete			  *	---------------------------------------------------------------------- */				protected function handleSaveGameLevelComplete( event:Event ):void				{					ConsoleBroadcaster.broadcast( "GameLevelDataController", "handleSaveGameLevelComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleSaveGameLevelComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleSaveGameLevelError );										trace( event.currentTarget.data );										try					{						var data = new JSONDecoder( event.currentTarget.data ).getValue();												if( data.status )						{							//dispatchEvent( new CustomEvent("onComplete", {id:data.id, resultEnvironmentObjects:data.result_environment_objects, resultVillageObjects:data.result_village_objects}) );							dispatchEvent( new CustomEvent("onComplete", {id:data.id}) );						}						else						{							dispatchEvent( new CustomEvent("onError") );						}					}					catch( e:Error )					{						ConsoleBroadcaster.broadcast( "GameLevelDataController", "Error in parsing data "+e.message );						ConsoleBroadcaster.broadcast( "GameLevelDataController", "data: "+event.currentTarget.data );												dispatchEvent( new CustomEvent("onError") );					}				}							/** handleSaveGameLevelError			  *	---------------------------------------------------------------------- */				protected function handleSaveGameLevelError( event:Event ):void				{					event.currentTarget.removeEventListener( Event.COMPLETE, handleSaveGameLevelComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleSaveGameLevelError );				}							/** loadGameLevelEnvironmentObjects			  *	---------------------------------------------------------------------- */				public function loadGameLevelEnvironmentObjects( gameLevelId:int ):void				{					var dataObject:Object = new Object();						dataObject.game_level_id = gameLevelId;										var data:URLVariables = new URLVariables();						data.url = "gamelevels/getGameLevelEnvironmentObjects";						data.data = new JSONEncoder(dataObject).getString();										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleLoadGameLevelEnvironmentObjectsComplete, handleLoadGameLevelEnvironmentObjectsError );				}							/** handleLoadGameLevelEnvironmentObjectsComplete			  *	---------------------------------------------------------------------- */				private function handleLoadGameLevelEnvironmentObjectsComplete( event:Event ):void				{					event.currentTarget.removeEventListener( Event.COMPLETE, handleLoadGameLevelEnvironmentObjectsComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleLoadGameLevelEnvironmentObjectsError );										trace( event.currentTarget.data );										try					{						var data = new JSONDecoder( event.currentTarget.data ).getValue();												if( data.status )						{							dispatchEvent( new CustomEvent("onComplete", {environmentObjects:data.result}) );						}						else						{							dispatchEvent( new CustomEvent("onError") );						}					}					catch( e:Error )					{						ConsoleBroadcaster.broadcast( "GameLevelDataController", "Error in parsing data, "+e.message );						ConsoleBroadcaster.broadcast( "GameLevelDataController", "data: "+event.currentTarget.data );												dispatchEvent( new CustomEvent("onError", {error:data.error}) );					}				}							/** handleLoadGameLevelEnvironmentObjectsError			  *	---------------------------------------------------------------------- */				private function handleLoadGameLevelEnvironmentObjectsError( event:Event ):void				{					event.currentTarget.removeEventListener( Event.COMPLETE, handleLoadGameLevelEnvironmentObjectsComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleLoadGameLevelEnvironmentObjectsError );										dispatchEvent( new CustomEvent("onError") );				}							/** saveGameLevelEnvironmentObject			  *	---------------------------------------------------------------------- */				//public function saveGameLevelEnvironmentObject( id:int, gameLevelId:int, environmentObjectId:int, positionX:int, positionY:int, row:int, col:int, layer:int ):void				public function saveGameLevelEnvironmentObject( gameLevelEnvironmentObject:GameLevelEnvironmentObject ):void				{					var dataObject:Object = new Object();						dataObject.id = gameLevelEnvironmentObject.id;						dataObject.game_level_id = gameLevelEnvironmentObject.gameLevelId;						dataObject.environment_object_id = gameLevelEnvironmentObject.environmentObjectId;						dataObject.position_x = gameLevelEnvironmentObject.positionX;						dataObject.position_y = gameLevelEnvironmentObject.positionY;						dataObject.row = gameLevelEnvironmentObject.row;						dataObject.col = gameLevelEnvironmentObject.column;						dataObject.layer = gameLevelEnvironmentObject.layer;										var data:URLVariables = new URLVariables();						data.url = "gamelevels/saveGameLevelEnvironmentObject";						data.data = new JSONEncoder(dataObject).getString();										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleSaveGameLevelEnvironmentObjectComplete, handleSaveGameLevelEnvironmentObjectError );				}								protected function handleSaveGameLevelEnvironmentObjectComplete( event:Event ):void				{					ConsoleBroadcaster.broadcast( "GameLevelDataController", "handleSaveGameLevelEnvironmentObjectComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleSaveGameLevelEnvironmentObjectComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleSaveGameLevelEnvironmentObjectError );										trace( event.currentTarget.data );										try					{						var data = new JSONDecoder(event.currentTarget.data).getValue();												if( data.status )						{							dispatchEvent( new CustomEvent("onComplete", {id:data.id}) );						}						else						{							dispatchEvent( new CustomEvent("onError") );						}					}					catch( e:Error )					{						dispatchEvent( new CustomEvent("onError") );					}				}								protected function handleSaveGameLevelEnvironmentObjectError( event:IOErrorEvent ):void				{					ConsoleBroadcaster.broadcast( "GameLevelDataController", "handleSaveGameLevelEnvironmentObjectError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleSaveGameLevelEnvironmentObjectComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleSaveGameLevelEnvironmentObjectError );										dispatchEvent( new CustomEvent("onError") );				}							/** deleteGameLevelEnvironmentObject			  *	---------------------------------------------------------------------- */				public function deleteGameLevelEnvironmentObject( id:int ):void				{					var dataObject:Object = new Object();						dataObject.id = id;										var data:URLVariables = new URLVariables();						data.url = "gamelevels/deleteGameLevelEnvironmentObject";						data.data = new JSONEncoder(dataObject).getString();										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleDeleteGameLevelEnvironmentObjectComplete, handleDeleteGameLevelEnvironmentObjectError );				}								protected function handleDeleteGameLevelEnvironmentObjectComplete( event:Event ):void				{					ConsoleBroadcaster.broadcast( "GameLevelDataController", "handleDeleteGameLevelEnvironmentObjectComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleDeleteGameLevelEnvironmentObjectComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleDeleteGameLevelEnvironmentObjectError );										trace( event.currentTarget.data );				}								protected function handleDeleteGameLevelEnvironmentObjectError( event:IOErrorEvent ):void				{					ConsoleBroadcaster.broadcast( "GameLevelDataController", "handleDeleteGameLevelEnvironmentObjectError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleDeleteGameLevelEnvironmentObjectComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleDeleteGameLevelEnvironmentObjectError );				}							/** saveGameLevelVillageObject			  *	---------------------------------------------------------------------- */				public function saveGameLevelVillageObject( gameLevelEnvironmentObject:GameLevelEnvironmentObject ):void				{					var dataObject:Object = new Object();						dataObject.id = gameLevelEnvironmentObject.id;						dataObject.game_level_id = gameLevelEnvironmentObject.gameLevelId;						dataObject.environment_object_id = gameLevelEnvironmentObject.environmentObjectId;						dataObject.position_x = gameLevelEnvironmentObject.positionX;						dataObject.position_y = gameLevelEnvironmentObject.positionY;						dataObject.row = gameLevelEnvironmentObject.row;						dataObject.col = gameLevelEnvironmentObject.column;						dataObject.layer = gameLevelEnvironmentObject.layer;										var data:URLVariables = new URLVariables();						data.url = "gamelevels/saveGameLevelVillageObject";						data.data = new JSONEncoder(dataObject).getString();										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleSaveGameLevelVillageObjectComplete, handleSaveGameLevelVillageObjectError );				}								protected function handleSaveGameLevelVillageObjectComplete( event:Event ):void				{					ConsoleBroadcaster.broadcast( "GameLevelDataController", "handleSaveGameLevelVillageObjectComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleSaveGameLevelVillageObjectComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleSaveGameLevelVillageObjectError );										trace( event.currentTarget.data );										try					{						var data = new JSONDecoder(event.currentTarget.data).getValue();												if( data.status )						{							dispatchEvent( new CustomEvent("onComplete", {id:data.id}) );						}						else						{							dispatchEvent( new CustomEvent("onError") );						}					}					catch( e:Error )					{						dispatchEvent( new CustomEvent("onError") );					}				}								protected function handleSaveGameLevelVillageObjectError( event:IOErrorEvent ):void				{					ConsoleBroadcaster.broadcast( "GameLevelDataController", "handleSaveGameLevelVillageObjectError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleSaveGameLevelVillageObjectComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleSaveGameLevelVillageObjectError );										dispatchEvent( new CustomEvent("onError") );				}							/** deleteGameLevelVillageObject			  *	---------------------------------------------------------------------- */				public function deleteGameLevelVillageObject( id:int ):void				{					var dataObject:Object = new Object();						dataObject.id = id;										var data:URLVariables = new URLVariables();						data.url = "gamelevels/deleteGameLevelVillageObject";						data.data = new JSONEncoder(dataObject).getString();										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleDeleteGameLevelVillageObjectComplete, handleDeleteGameLevelVillageObjectError );				}								protected function handleDeleteGameLevelVillageObjectComplete( event:Event ):void				{					ConsoleBroadcaster.broadcast( "GameLevelDataController", "handleDeleteGameLevelVillageObjectComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleDeleteGameLevelVillageObjectComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleDeleteGameLevelVillageObjectError );										trace( event.currentTarget.data );				}								protected function handleDeleteGameLevelVillageObjectError( event:IOErrorEvent ):void				{					ConsoleBroadcaster.broadcast( "GameLevelDataController", "handleDeleteGameLevelVillageObjectError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleDeleteGameLevelVillageObjectComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleDeleteGameLevelVillageObjectError );				}											/** saveGameLevelVillagerObject			  *	---------------------------------------------------------------------- */				public function saveGameLevelVillagerObject( gameLevelVillagerObject:GameLevelVillagerObject ):void				{					var dataObject:Object = new Object();						dataObject.id = gameLevelVillagerObject.id;						dataObject.game_level_id = gameLevelVillagerObject.gameLevelId;						dataObject.villager_id = gameLevelVillagerObject.villagerId;						dataObject.position_x = gameLevelVillagerObject.positionX;						dataObject.position_y = gameLevelVillagerObject.positionY;						dataObject.row = gameLevelVillagerObject.row;						dataObject.col = gameLevelVillagerObject.column;						dataObject.layer = gameLevelVillagerObject.layer;										var data:URLVariables = new URLVariables();						data.url = "gamelevels/saveGameLevelVillagerObject";						data.data = new JSONEncoder(dataObject).getString();										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleSaveGameLevelVillagerObjectComplete, handleSaveGameLevelVillagerObjectError );				}								protected function handleSaveGameLevelVillagerObjectComplete( event:Event ):void				{					ConsoleBroadcaster.broadcast( "GameLevelDataController", "handleSaveGameLevelVillagerObjectComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleSaveGameLevelVillagerObjectComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleSaveGameLevelVillagerObjectError );										trace( event.currentTarget.data );										try					{						var data = new JSONDecoder(event.currentTarget.data).getValue();												if( data.status )						{							dispatchEvent( new CustomEvent("onComplete", {id:data.id}) );						}						else						{							dispatchEvent( new CustomEvent("onError") );						}					}					catch( e:Error )					{						dispatchEvent( new CustomEvent('onError') );					}				}								protected function handleSaveGameLevelVillagerObjectError( event:IOErrorEvent ):void				{					ConsoleBroadcaster.broadcast( "GameLevelDataController", "handleSaveGameLevelVillagerObjectError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleSaveGameLevelVillagerObjectComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleSaveGameLevelVillagerObjectError );										dispatchEvent( new CustomEvent("onError") );				}							/** deleteGameLevelVillagerObject			  *	---------------------------------------------------------------------- */				public function deleteGameLevelVillagerObject( id:int ):void				{					var dataObject:Object = new Object();						dataObject.id = id;										var data:URLVariables = new URLVariables();						data.url = "gamelevels/deleteGameLevelVillagerObject";						data.data = new JSONEncoder(dataObject).getString();										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleDeleteGameLevelVillagerObjectComplete, handleDeleteGameLevelVillagerObjectError );				}								protected function handleDeleteGameLevelVillagerObjectComplete( event:Event ):void				{					ConsoleBroadcaster.broadcast( "GameLevelDataController", "handleDeleteGameLevelVillagerObjectComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleDeleteGameLevelVillagerObjectComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleDeleteGameLevelVillagerObjectError );				}								protected function handleDeleteGameLevelVillagerObjectError( event:Event ):void				{					ConsoleBroadcaster.broadcast( "GameLevelDataController", "handleDeleteGameLevelVillagerObjectError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleDeleteGameLevelVillagerObjectComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleDeleteGameLevelVillagerObjectError );				}											/** loadChallengeLevels			  *	---------------------------------------------------------------------- */				public function loadChallengeLevels( challengeLevelIds:Array ):void				{					var dataObject:Object = new Object();						dataObject.ids = gameLevelIds;										var data:URLVariables = new URLVariables();						data.url = "challengelevels/getChallengeLevels";						data.data = new JSONEncoder(dataObject).getString();										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleLoadChallengeLevelsComplete, handleLoadChallengeLevelsError );				}								protected function handleLoadChallengeLevelsComplete( event:Event ):void				{					event.currentTarget.removeEventListener( Event.COMPLETE, handleLoadChallengeLevelsComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleLoadChallengeLevelsError );										var data = new JSONDecoder(event.currentTarget.data).getValue();										if( data.status )					{						var challengeLevelsData = data.result;						var environment:EnvironmentObject;						var challengeLevel:ChallengeLevel;						var ids:Array = new Array();						var village:Village;						var i:int, j:int, k:int;						var properties:Array;						var environmentObjects:Array;						var environmentObjectsData:Array;						var gameLevelEnvironmentObject:GameLevelEnvironmentObject;						var environmentObject:EnvironmentObject;						var villagerObjects:Array;						var gameLevelVillagerObject:GameLevelVillagerObject;												for( i=0; i<challengeLevelsData.length; ++i )						{							challengeLevel = new ChallengeLevel();							challengeLevel.id = challengeLevelsData[i]['id'];							challengeLevel.name = challengeLevelsData[i]['name'];							challengeLevel.description = challengeLevelsData[i]['description'];							challengeLevel.createdBy = challengeLevelsData[i]['created_by'];							challengeLevel.gateHealth = challengeLevelsData[i]['gate_health'];							challengeLevel.buyChickenEnabled = (challengeLevelsData[i]['buy_chicken_enabled'] == '1');							challengeLevel.slotEnabled = (challengeLevelsData[i]['slot_enabled'] == '1');							challengeLevel.gameLevelBackgroundId = challengeLevelsData[i]['challenge_level_background_id'];							challengeLevel.gameLevelBackgroundAssetURL = challengeLevelsData[i]['challenge_level_background_asset_url'];							challengeLevel.gameLevelBackgroundLinkageId = challengeLevelsData[i]['challenge_level_background_linkage_id'];														//TODO:							//	Still need to complete this challenge level data !!							environmentObjectsData = challengeLevelsData[i]['environment_objects_data'];							for( j=0; j<environmentObjectsData.length; ++j )							{								environmentObject = new EnvironmentObject();								environmentObject.id = environmentObjectsData[j]['id'];								environmentObject.name = environmentObjectsData[j]['name'];								environmentObject.assetURL = environmentObjectsData[j]['asset_url'];																GameLevelDataIndex.getInstance().addEnvironmentObject( environmentObject );							}														environmentObjects = challengeLevelsData[i]['environment_objects'];							for( j=0; j<environmentObjects.length; ++j )							{								gameLevelEnvironmentObject = new GameLevelEnvironmentObject();								gameLevelEnvironmentObject.id = environmentObjects[j]['id'];								gameLevelEnvironmentObject.environmentObjectId = environmentObjects[j]['environment_object_id'];								gameLevelEnvironmentObject.positionX = environmentObjects[j]['position_x'];								gameLevelEnvironmentObject.positionY = environmentObjects[j]['position_y'];								gameLevelEnvironmentObject.row = environmentObjects[j]['row'];								gameLevelEnvironmentObject.column = environmentObjects[j]['col'];								gameLevelEnvironmentObject.layer = environmentObjects[j]['layer'];																challengeLevel.environmentObjects.push( gameLevelEnvironmentObject );							}														environmentObjects = challengeLevelsData[i]['village_objects'];							for( j=0; j<environmentObjects.length; ++j )							{								gameLevelEnvironmentObject = new GameLevelEnvironmentObject();								gameLevelEnvironmentObject.id = environmentObjects[j]['id'];								gameLevelEnvironmentObject.environmentObjectId = environmentObjects[j]['environment_object_id'];								gameLevelEnvironmentObject.positionX = environmentObjects[j]['position_x'];								gameLevelEnvironmentObject.positionY = environmentObjects[j]['position_y'];								gameLevelEnvironmentObject.row = environmentObjects[j]['row'];								gameLevelEnvironmentObject.column = environmentObjects[j]['col'];								gameLevelEnvironmentObject.layer = environmentObjects[j]['layer'];																challengeLevel.villageObjects.push( gameLevelEnvironmentObject );							}														villagerObjects = challengeLevelsData[i]['villagers'];							for( j=0; j<villagerObjects.length; ++j )							{								gameLevelVillagerObject = new GameLevelVillagerObject();								gameLevelVillagerObject.id = villagerObjects[j]['id'];								gameLevelVillagerObject.villagerId = villagerObjects[j]['villager_id'];								gameLevelVillagerObject.positionX = villagerObjects[j]['position_x'];								gameLevelVillagerObject.positionY = villagerObjects[j]['position_y'];								gameLevelVillagerObject.row = villagerObjects[j]['row'];								gameLevelVillagerObject.column = villagerObjects[j]['col'];								gameLevelVillagerObject.layer = villagerObjects[j]['layer'];																challengeLevel.villagerObjects.push( gameLevelVillagerObject );							}														properties = new JSONDecoder(challengeLevelsData[i]['properties']).getValue();							for( j=0; j<properties.length; ++j )							{								challengeLevel.addProperty( HashTable.getInstance().getHash(properties[i]) );							}														GameLevelDataIndex.getInstance().addChallengeLevel( challengeLevel );														ids.push( challengeLevel.id );						}												dispatchEvent( new CustomEvent("onComplete", {ids:ids}) );					}					else					{						dispatchEvent( new CustomEvent("onError") );					}				}								protected function handleLoadChallengeLevelsError( event:Event ):void				{					event.currentTarget.removeEventListener( Event.COMPLETE, handleLoadChallengeLevelsComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleLoadChallengeLevelsError );										dispatchEvent( new CustomEvent("onError") );				}		}			}