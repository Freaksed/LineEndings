/** WaveZoneController  *	---------------------------------------------------------------------------- *  *	@desc:  *		Thils class controls all the chickens that are currently on the board,  *		active or non active.  *	  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */	package com.boogabooga.controller.gamelevel	{		import flash.display.MovieClip;		import flash.events.*;		import flash.errors.*;		import flash.geom.Point;		import flash.utils.getQualifiedClassName;		import flash.utils.getDefinitionByName;		import flash.utils.Timer;				import com.avatarlabs.utils.UtilFunctions;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.timers.CustomTimer;		import org.osflash.signals.Signal;				import com.boogabooga.controller.gamelevel.DisplayObjectController;		import com.boogabooga.data.gamelevel.Chicken;		import com.boogabooga.ui.gamelevel.ChickenDisplayObject;		import com.boogabooga.ui.gamelevel.Gameboard;		import com.boogabooga.ui.gamelevel.GameboardTile;		import com.boogabooga.ui.gamelevel.weapons.WeaponDisplayObject;		import com.boogabooga.data.gamelevel.GameLevelDataIndex;		import com.boogabooga.data.gamelevel.Wave;		import com.boogabooga.data.gamelevel.WaveZone;		import com.boogabooga.data.gamelevel.Enemy;				public class WaveZoneController extends DisplayObjectController		{			//protected var _waves:Array;			protected var _waveZone:WaveZone;			protected var _spawnTimer:CustomTimer;			protected var _waveTimer:CustomTimer;			protected var _startDelayTimer:CustomTimer;			protected var _ended:Boolean;						protected var _enemiesLeft:Array;			protected var _enemiesLeftLength:uint;			protected var _currentWaveIndex:int;						public var onEnemySpawned:Signal;						/** Constructor			  *	---------------------------------------------------------------------------- */			 	public function WaveZoneController()				{					init();				}							/** set/get waveZone			  *	---------------------------------------------------------------------------- */				public function set waveZone( w:WaveZone ):void { _waveZone = w; }				public function get waveZone():WaveZone { return _waveZone; }								public function get ended():Boolean { return _ended; }							/** init			  *	---------------------------------------------------------------------------- */				override public function init():void				{					super.init();										_debug = true;					_currentWaveIndex = -1;					_ended = false;										onEnemySpawned = new Signal( WaveZone, Enemy, int );				}							/** pause			  *	---------------------------------------------------------------------------- */				override public function pause():void				{					if( _debug ) ConsoleBroadcaster.broadcast( "WaveZoneController", "pause();" );										if( _startDelayTimer != null && _startDelayTimer.isRunning )						_startDelayTimer.pause();										if( _spawnTimer != null && _spawnTimer.isRunning )						_spawnTimer.pause();											if( _waveTimer != null && _waveTimer.isRunning )						_waveTimer.pause();				}							/** unpause			  *	---------------------------------------------------------------------------- */				override public function unpause():void				{					if( _debug ) ConsoleBroadcaster.broadcast( "WaveZoneController", "unpause();" );										if( _startDelayTimer != null && _startDelayTimer.isRunning )						_startDelayTimer.unpause();										if( _spawnTimer != null && _spawnTimer.isRunning )						_spawnTimer.unpause();										if( _waveTimer != null && _waveTimer.isRunning )						_waveTimer.unpause();				}							/** kill			  *	---------------------------------------------------------------------------- */				override public function kill():void				{					if( _debug ) ConsoleBroadcaster.broadcast( "WaveZoneController", "kill();" );										if( _startDelayTimer != null )					{						if( _startDelayTimer.isRunning )							_startDelayTimer.stop();												//_startDelayTimer.removeEventListener( TimerEvent.TIMER_COMPLETE, handleStartDelayTimerCompleted );						_startDelayTimer.onTimerCompleted.remove( handleStartDelayTimerCompleted );						_startDelayTimer.kill();						_startDelayTimer = null;					}										if( _waveTimer != null )					{						if( _waveTimer.isRunning )							_waveTimer.stop();												//_waveTimer.removeEventListener( TimerEvent.TIMER_COMPLETE, handleWaveTimerCompleted );						_waveTimer.onTimerCompleted.remove( handleWaveTimerCompleted );						_waveTimer.kill();						_waveTimer = null;					}										if( _spawnTimer != null )					{						if( _spawnTimer.isRunning )							_spawnTimer.stop();												//_spawnTimer.removeEventListener( TimerEvent.TIMER_COMPLETE, handleSpawnTimerCompleted );						_spawnTimer.onTimerCompleted.remove( handleSpawnTimerCompleted );						_spawnTimer.kill();						_spawnTimer = null;					}										onEnemySpawned = null;				}							/** startWaveZone			  *	---------------------------------------------------------------------------- */				public function startWaveZone():void				{					if( _debug ) ConsoleBroadcaster.broadcast( "WaveZoneController", "startWaveZone();" );										//trace( "_waveZone.totalNumberOfEnemies: "+_waveZone.totalNumberOfEnemies );										if( _waveZone.totalNumberOfEnemies > 0 )					{						_currentWaveIndex = 0;												_startDelayTimer = new CustomTimer( _waveZone.startDelayInterval, 1 );						//_startDelayTimer.addEventListener( TimerEvent.TIMER_COMPLETE, handleStartDelayTimerCompleted, false, 0, true );						_startDelayTimer.onTimerCompleted.add( handleStartDelayTimerCompleted );						_startDelayTimer.start();					}					else					{						//TODO:						//	No enemies in this wavezone, do something						endWaveZone();					}				}							/** endWaveZone			  *	---------------------------------------------------------------------------- */				public function endWaveZone():void				{					if( _debug ) ConsoleBroadcaster.broadcast( "WaveZoneController", "endWaveZone();" );										_ended = true;										//dispatchEvent( new CustomEvent("onWaveZoneEnds", {waveZoneId:_waveZone.id}) );				}							/** spawnEnemy			  *	---------------------------------------------------------------------------- */				protected function spawnEnemy():void				{					if( _debug ) ConsoleBroadcaster.broadcast( "WaveZoneController", "spawnEnemy();" );										var enemy:Enemy = (_enemiesLeft.splice( uint(Math.random() * _enemiesLeftLength), 1 ))[0];										_enemiesLeftLength = _enemiesLeft.length;										//trace( "enemy spawned: "+enemy );					//trace( "remaining enemies: "+_enemiesLeftLength );					//trace( "remaining enemies in wave: "+Wave(_waveZone.waves[_currentWaveIndex]).enemies.length );										//var randomPath										//dispatchEvent( new CustomEvent("onEnemySpawned", {waveZone:_waveZone, enemy:enemy, pathIndex:uint(Math.random()*_waveZone.paths.length)}) );					onEnemySpawned.dispatch( waveZone, enemy, uint(Math.random()*_waveZone.paths.length) );										if( _spawnTimer == null )					{						_spawnTimer = new CustomTimer( _waveZone.spawnInterval, 1 );						//_spawnTimer.addEventListener( TimerEvent.TIMER_COMPLETE, handleSpawnTimerCompleted, false, 0, true );						_spawnTimer.onTimerCompleted.add( handleSpawnTimerCompleted );					}										if( _enemiesLeftLength > 0 )					{						_spawnTimer.start();					}					else					{						//TODO:						//	No more enemies in this wave, continue on to the next wave if there is any												if( ++_currentWaveIndex < _waveZone.waves.length )						{							if( _waveTimer == null )							{								_waveTimer = new CustomTimer( _waveZone.waveInterval, 1 );								//_waveTimer.addEventListener( TimerEvent.TIMER_COMPLETE, handleWaveTimerCompleted, false, 0, true );								_waveTimer.onTimerCompleted.add( handleWaveTimerCompleted );							}														_waveTimer.start();						}						else						{							endWaveZone();						}					}				}							/** handleStartDelayTimerCompleted			  *	---------------------------------------------------------------------------- */				protected function handleStartDelayTimerCompleted( timer:CustomTimer ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "WaveZoneController", "handleStartDelayTimerCompleted();" );										_startDelayTimer.reset();					//_startDelayTimer.removeEventListener( TimerEvent.TIMER_COMPLETE, handleStartDelayTimerCompleted );					_startDelayTimer.onTimerCompleted.remove( handleStartDelayTimerCompleted );					_startDelayTimer = null;										_enemiesLeft = new Array();										var i:uint, j:uint;										for( i=0; i<Wave(_waveZone.waves[_currentWaveIndex]).enemies.length; ++i )					{						for( j=0; j<Wave(_waveZone.waves[_currentWaveIndex]).enemies[i].quantity; ++j )						{							_enemiesLeft.push( GameLevelDataIndex.getInstance().getEnemy( Wave(_waveZone.waves[_currentWaveIndex]).enemies[i].enemy ) );						}					}					//_enemiesLeft = Wave(_waveZone.waves[_currentWaveIndex]).enemies;					_enemiesLeftLength = _enemiesLeft.length;										if( _enemiesLeftLength > 0 )						spawnEnemy();					else						endWaveZone();									}							/** handleWaveTimerCompleted			  *	---------------------------------------------------------------------------- */				protected function handleWaveTimerCompleted( timer:CustomTimer ):void				{					_waveTimer.reset();										_enemiesLeft = new Array();										var i:uint, j:uint;										for( i=0; i<Wave(_waveZone.waves[_currentWaveIndex]).enemies.length; ++i )					{						for( j=0; j<Wave(_waveZone.waves[_currentWaveIndex]).enemies[i].quantity; ++j )						{							_enemiesLeft.push( GameLevelDataIndex.getInstance().getEnemy( Wave(_waveZone.waves[_currentWaveIndex]).enemies[i].enemy ) );						}					}					//_enemiesLeft = Wave(_waveZone.waves[_currentWaveIndex]).enemies;					_enemiesLeftLength = _enemiesLeft.length;										if( _enemiesLeftLength > 0 )						spawnEnemy();					else						endWaveZone();				}							/** handleSpawnTimerCompleted			  *	---------------------------------------------------------------------------- */				protected function handleSpawnTimerCompleted( timer:CustomTimer ):void				{					_spawnTimer.reset();										spawnEnemy();				}						}	}