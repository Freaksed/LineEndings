/** GodDataController  *	---------------------------------------------------------------------------- *  *	@desc:  *		Data controller class to load god data from the server.  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */	package com.boogabooga.controller.gamelevel	{		import flash.events.Event;		import flash.events.EventDispatcher;		import flash.events.IOErrorEvent;		import flash.events.FullScreenEvent;		import flash.events.ProgressEvent;		import flash.external.ExternalInterface;		import flash.net.URLLoader;		import flash.net.URLRequest;		import flash.net.URLRequestMethod;		import flash.net.URLVariables;				import com.adobe.serialization.json.JSONDecoder;		import com.adobe.serialization.json.JSONEncoder;		import com.avatarlabs.utils.cache.HashTable;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;				import com.boogabooga.controller.BaseDataController;		import com.boogabooga.data.gamelevel.GameLevelDataIndex;		import com.boogabooga.data.gamelevel.God;		import com.boogabooga.data.maingame.*;		import com.boogabooga.data.gamelevel.AbstractGameObject;		import com.boogabooga.data.gamelevel.AnimationObject;				public class GodDataController extends BaseDataController		{						/** Constructor			  *	---------------------------------------------------------------------- */				public function GodDataController()				{					super();										_debug = true;									}							/** loadGods			  *	---------------------------------------------------------------------- */				public function loadGods():void				{					var data:URLVariables = new URLVariables();						data.url = "gods/getAllPublishedGods";										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleLoadAllPublishedGodsComplete, handleLoadAllPublishedGodsError );				}							/** handleLoadAllPublishedGodsComplete			  *	---------------------------------------------------------------------- */				private function handleLoadAllPublishedGodsComplete( event:Event ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "GodDataController", "handleAllPublishedEnemiesComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleLoadAllPublishedGodsComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleLoadAllPublishedGodsError );										try					{						//trace( event.currentTarget.data );												var data = new JSONDecoder(event.currentTarget.data).getValue();												if( data.status )						{							var god:God;							var animationObject:AnimationObject;							var j:int;							var properties:Array;							var soundDataIds:Array;														for( var i:uint=0; i<data.result.length; ++i )							{								god = new God();								god.id = data.result[i]["id"];								god.name = data.result[i]["name"];								god.description = data.result[i]["description"];								god.consumable = data.result[i]["consumable"] == "1";								god.availableOnLevel = data.result[i]["available_on_level"];								god.power = data.result[i]["power"];								god.range = data.result[i]["range"];								god.additionalAttackValue = data.result[i]['additional_attack_value'];								god.cost = data.result[i]["cost"];								god.earlyUnlockCost = data.result[i]["early_unlock_cost"];								god.usageOnUnlock = data.result[i]['usage_on_unlock'];								//god.linkageId = data.result[i]["linkage_id"];								god.assetURL = data.result[i]["asset_url"];								god.iconURL = data.result[i]["icon_url"];								god.cacheIconId = "God_"+god.id+"_icon";								//god.createdBy = data.result[i]["created_by"];								god.attackParticleAnimationObjectId = data.result[i]['attack_particle_animation_object_id'];																//trace( "god.id: "+god.id );								//trace( "attackParticleAnimationObjectId: "+god.attackParticleAnimationObjectId );																if( god.consumable )								{									for( j=0; j<data.result[i]['prices'].length; ++j )									{										god.prices.push({ id:data.result[i]['prices'][j]['id'], quantity:data.result[i]['prices'][j]['quantity'], price:data.result[i]['prices'][j]['price'] });									}								}																if( data.result[i]['hit_sound_ids'] != '0' )								{									god.hitSoundDataIds = data.result[i]['hit_sound_ids'].split('|');								}																properties = new JSONDecoder(data.result[i]["attack_properties"]).getValue();								for( j=0; j<properties.length; ++j )								{									god.addAttackProperty( HashTable.getInstance().getHash(properties[j]) );								}																if( data.result[i]['animation_object_id'] != null )								{									animationObject = new AnimationObject();									animationObject.id = data.result[i]['animation_object_id'];									animationObject.tileWidth = data.result[i]['animation_object_tile_width'];									animationObject.tileHeight = data.result[i]['animation_object_tile_height'];									animationObject.animationCount = data.result[i]['animation_object_animation_count'];									animationObject.animationEvent = data.result[i]['animation_object_animation_event'];									animationObject.assetURL = data.result[i]['animation_object_asset_url'];									animationObject.cacheId = "God_"+god.id+"_"+AbstractGameObject.WALK_DOWN;									animationObject.soundEvent = data.result[i]['animation_object_sound_event'];									if( data.result[i]['animation_object_sound_ids'] != '0' )									{										soundDataIds = data.result[i]['animation_object_sound_ids'].split('|');										for( j=0; j<soundDataIds.length; ++j )										{											animationObject.soundDataIds.push( Number(soundDataIds[j]) );										}									}																		god.animationObject = animationObject;								}																//trace( "god.power: "+god.power );								//trace( god.name+" linkageId: "+god.linkageId );								//trace( god.name+" animation sound event "+god.animationObject.soundEvent );								//trace( god.animationObject.soundDataIds );																god.collectUniqueSoundDataIds();																GameLevelDataIndex.getInstance().addGod( god );							}														dispatchEvent( new CustomEvent("onComplete") );						}						else						{							dispatchEvent( new CustomEvent("onError") );						}					}					catch( e:Error )					{						ConsoleBroadcaster.broadcast( "GodDataController", "Error in parsing data, "+event.currentTarget.data );												dispatchEvent( new CustomEvent("onError") );					}				}							/** handleLoadAllPublishedGodsError			  *	---------------------------------------------------------------------- */				private function handleLoadAllPublishedGodsError( event:IOErrorEvent ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "GodDataController", "handleAllPublishedEnemiesError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleLoadAllPublishedGodsComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleLoadAllPublishedGodsError );										dispatchEvent( new CustomEvent("onError") );				}							/** addUnlockedGods			  *	---------------------------------------------------------------------- */				public function addUnlockedGods( userId:int, godIds:Array ):void				{					var dataObject:Object = new Object();						dataObject.user_id = userId;						dataObject.god_ids = godIds;											var data:URLVariables = new URLVariables();						data.url = "gods/addUnlockedGods";						data.data = new JSONEncoder(dataObject).getString();										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleAddUnlockedGodsComplete, handleAddUnlockedGodsError );				}							/** handleAddUnlockedGodsComplete			  *	---------------------------------------------------------------------- */				private function handleAddUnlockedGodsComplete( event:Event ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "GodDataController", "handleAddUnlockedGodsComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleAddUnlockedGodsComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleAddUnlockedGodsError );										//trace( event.currentTarget.data );										try					{						var data = new JSONDecoder(event.currentTarget.data).getValue();												if( data.status )						{							dispatchEvent( new CustomEvent("onComplete", {unlockedGods:data.unlocked_gods}) );						}						else						{							dispatchEvent( new CustomEvent("onError") );						}					}					catch( e:Error )					{						ConsoleBroadcaster.broadcast( "GodDataController", "Error in parsing data, "+event.currentTarget.data );						dispatchEvent( new CustomEvent("onError") );					}				}							/** handleAddUnlockedGodsError			  *	---------------------------------------------------------------------- */				private function handleAddUnlockedGodsError( event:IOErrorEvent ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "GodDataController", "handleAddUnlockedGodsError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleAddUnlockedGodsComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleAddUnlockedGodsError );										dispatchEvent( new CustomEvent("onError") );				}							/** loadUnlockedGods			  *	---------------------------------------------------------------------- */				public function loadUnlockedGods( userId:int ):void				{					var dataObject:Object = new Object();						dataObject.user_id = userId;										var data:URLVariables = new URLVariables();						data.url = "gods/getUnlockedGods";						data.data = new JSONEncoder(dataObject).getString();										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleLoadUnlockedGodsComplete, handleLoadUnlockedGodsError );				}							/** handleLoadUnlockedGodsComplete			  *	---------------------------------------------------------------------- */				private function handleLoadUnlockedGodsComplete( event:Event ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "GodDataController", "handleLoadUnlockedGodsComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleLoadUnlockedGodsComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleLoadUnlockedGodsError );										try					{						var data = new JSONDecoder(event.currentTarget.data).getValue();												trace( "data.status: "+data.status );						trace( event.currentTarget.data );												if( data.status )						{							trace( "dispatching the event onComplete" );							dispatchEvent( new CustomEvent("onComplete", {result:data.result}) );						}						else						{							dispatchEvent( new CustomEvent("onError") );						}					}					catch( e:Error )					{						ConsoleBroadcaster.broadcast( "GodDataController", "Error in parsing data, "+event.currentTarget.data );						dispatchEvent( new CustomEvent("onError") );					}									}							/** handleLoadUnlockedGodsError			  *	---------------------------------------------------------------------- */				private function handleLoadUnlockedGodsError( event:IOErrorEvent ):void				{					event.currentTarget.removeEventListener( Event.COMPLETE, handleLoadUnlockedGodsComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleLoadUnlockedGodsError );										dispatchEvent( new CustomEvent("onError") );				}							/** updateUseCount			  *	---------------------------------------------------------------------- */				public function updateUseCount( userId:int, godId:int, useCount:int ):void				{					var dataObject:Object = new Object();						dataObject.user_id = userId;						dataObject.god_id = godId;						dataObject.use_count = useCount;										var data:URLVariables = new URLVariables();						data.url = "gods/updateUseCount";						data.data = new JSONEncoder(dataObject).getString();										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleUpdateUseCountComplete, handleUpdateUseCountError );				}								private function handleUpdateUseCountComplete( event:Event ):void				{				 	if( _debug ) ConsoleBroadcaster.broadcast( "GodDataController", "handleUpdateUseCountComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleUpdateUseCountComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleUpdateUseCountError );										trace( event.currentTarget.data );										try					{						var data = new JSONDecoder(event.currentTarget.data).getValue();												if( data.status )						{							dispatchEvent( new CustomEvent("onComplete", {result:data.result}) );						}						else						{													}					}					catch( e:Error )					{						ConsoleBroadcaster.broadcast( "GodDataController", "Error in parsing data, "+event.currentTarget.data );						dispatchEvent( new CustomEvent("onError") );					}				}								private function handleUpdateUseCountError( event:IOErrorEvent ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "GodDataController", "handleUpdateUserCountError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleUpdateUseCountComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleUpdateUseCountError );										dispatchEvent( new CustomEvent("onError") );				}						}			}