/** EnvironmentDataController  *	---------------------------------------------------------------------------- *  *	@desc:  *		Data controller class to load environment data from the server.  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */	package com.boogabooga.controller.gamelevel	{		import flash.events.Event;		import flash.events.EventDispatcher;		import flash.events.IOErrorEvent;		import flash.events.FullScreenEvent;		import flash.events.ProgressEvent;		import flash.external.ExternalInterface;		import flash.net.URLLoader;		import flash.net.URLRequest;		import flash.net.URLRequestMethod;		import flash.net.URLVariables;				import com.adobe.serialization.json.JSONDecoder;		import com.adobe.serialization.json.JSONEncoder;		import com.avatarlabs.utils.cache.HashTable;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;				import com.boogabooga.controller.BaseDataController;		import com.boogabooga.data.gamelevel.AbstractGameObject;		import com.boogabooga.data.gamelevel.AnimationObject;		import com.boogabooga.data.gamelevel.EnvironmentObject;		import com.boogabooga.data.gamelevel.GameLevelDataIndex;		import com.boogabooga.data.maingame.*;		import com.boogabooga.utils.GameLevelUtil;				public class EnvironmentDataController extends BaseDataController		{						/** Constructor			  *	---------------------------------------------------------------------- */				public function EnvironmentDataController()				{					super();										_debug = true;									}							/** loadEnvironments			  *	---------------------------------------------------------------------- */				public function loadEnvironments():void				{					var data:URLVariables = new URLVariables();						data.url = "environments/getAllPublishedEnvironments";										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleLoadAllPublishedEnvironmentsComplete, handleLoadAllPublishedEnvironmentsError );				}							/** handleLoadAllPublishedEnvironmentsComplete			  *	---------------------------------------------------------------------- */				private function handleLoadAllPublishedEnvironmentsComplete( event:Event ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "EnvironmentDataController", "handleLoadAllPublishedEnvironmentsComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleLoadAllPublishedEnvironmentsComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleLoadAllPublishedEnvironmentsError );										try					{						//trace( event.currentTarget.data );												var data = new JSONDecoder(event.currentTarget.data).getValue();												if( data.status )						{							var environment:EnvironmentObject;							var animationObject:AnimationObject;							var attackProperties:Array;							var j:int;														for( var i:uint=0; i<data.result.length; ++i )							{								environment = new EnvironmentObject();								environment.id = data.result[i]["id"];								environment.name = data.result[i]["name"];								//environment.linkageId = data.result[i]["linkage_id"];								environment.assetURL = data.result[i]["asset_url"];								//environment.createdBy = data.result[i]["created_by"];																//trace( "environment.linkageId: "+environment.linkageId );																GameLevelDataIndex.getInstance().addEnvironmentObject( environment );							}														dispatchEvent( new CustomEvent("onComplete") );						}						else						{							dispatchEvent( new CustomEvent("onError") );						}					}					catch( e:Error )					{						ConsoleBroadcaster.broadcast( "EnvironmentDataController", "Error in parsing data, "+event.currentTarget.data );												dispatchEvent( new CustomEvent("onError") );					}				}							/** handleLoadAllPublishedEnvironmentsError			  *	---------------------------------------------------------------------- */				private function handleLoadAllPublishedEnvironmentsError( event:IOErrorEvent ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "EnvironmentDataController", "handleLoadAllPublishedEnvironmentsError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleLoadAllPublishedEnvironmentsComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleLoadAllPublishedEnvironmentsError );										dispatchEvent( new CustomEvent("onError") );				}						}			}