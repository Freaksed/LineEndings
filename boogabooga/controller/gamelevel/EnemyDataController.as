/** EnemyDataController  *	---------------------------------------------------------------------------- *  *	@desc:  *		Data controller class to load enemy data from the server.  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */	package com.boogabooga.controller.gamelevel	{		import flash.events.Event;		import flash.events.EventDispatcher;		import flash.events.IOErrorEvent;		import flash.events.FullScreenEvent;		import flash.events.ProgressEvent;		import flash.external.ExternalInterface;		import flash.geom.Point;		import flash.net.URLLoader;		import flash.net.URLRequest;		import flash.net.URLRequestMethod;		import flash.net.URLVariables;				import com.adobe.serialization.json.JSONDecoder;		import com.adobe.serialization.json.JSONEncoder;		import com.avatarlabs.utils.cache.HashTable;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;				import com.boogabooga.controller.BaseDataController;		import com.boogabooga.data.gamelevel.AbstractGameObject;		import com.boogabooga.data.gamelevel.AnimationObject;		import com.boogabooga.data.gamelevel.Enemy;		import com.boogabooga.data.gamelevel.GameLevelDataIndex;		import com.boogabooga.data.maingame.*;				public class EnemyDataController extends BaseDataController		{						/** Constructor			  *	---------------------------------------------------------------------- */				public function EnemyDataController()				{					super();										_debug = true;									}							/** loadEnemies			  *	---------------------------------------------------------------------- */				public function loadEnemies():void				{					var data:URLVariables = new URLVariables();						data.url = "enemies/getAllPublishedEnemies";										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleLoadAllPublishedEnemiesComplete, handleLoadAllPublishedEnemiesError );				}							/** handleLoadAllPublishedEnemiesComplete			  *	---------------------------------------------------------------------- */				private function handleLoadAllPublishedEnemiesComplete( event:Event ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "EnemyDataController", "handleLoadAllPublishedEnemiesComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleLoadAllPublishedEnemiesComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleLoadAllPublishedEnemiesError );										try					{						//trace( event.currentTarget.data );												var data = new JSONDecoder(event.currentTarget.data).getValue();												if( data.status )						{							var enemy:Enemy;							var animationObject:AnimationObject;							var attackProperties:Array;							var j:uint;							var customPositions:Array;							var customPosition:Point;							var soundDataIds:Array;														for( var i:uint=0; i<data.result.length; ++i )							{								if( GameLevelDataIndex.getInstance().getEnemy(data.result[i]["id"]) != null )									continue;																enemy = new Enemy();								enemy.id = data.result[i]["id"];								enemy.name = data.result[i]["name"];								enemy.description = data.result[i]["description"];								//enemy.statistic = data.result[i]['statistic'];								enemy.availableOnLevel = data.result[i]['available_on_level'];								enemy.health = data.result[i]["health"];								enemy.power = data.result[i]["power"];								enemy.rateOfFire = data.result[i]["rate_of_fire"];								enemy.range = data.result[i]["range"];								enemy.speed = data.result[i]["speed"];								enemy.additionalAttackValue = data.result[i]["additional_attack_value"];								enemy.hatchlingId = data.result[i]["hatchling_id"];								//enemy.linkageId = data.result[i]["linkage_id"];								enemy.assetURL = data.result[i]["asset_url"];								//enemy.createdBy = data.result[i]["created_by"];								enemy.iconURL = data.result[i]["icon_url"];								enemy.cacheIconId = "Enemy_"+enemy.id+"_icon";								enemy.listed = (data.result[i]['listed'] == '1');																//enemy.upAnimationObjectId = data.result[i]['walk_up_animation_object_id'];								//enemy.downAnimationObjectId = data.result[i]['walk_down_animation_object_id'];																attackProperties = new JSONDecoder(data.result[i]["attack_properties"]).getValue();																for( j=0; j<attackProperties.length; ++j )								{									enemy.addAttackProperty( HashTable.getInstance().getHash(attackProperties[j]) );								}																//trace( enemy.name+" has attackProperty of "+GameLevelUtil.ATTACK_PROPERTY_STONE+": "+enemy.hasAttackProperty( HashTable.getInstance().getHash(GameLevelUtil.ATTACK_PROPERTY_STONE) ) );								//trace( "enemy.attackProperties: "+enemy.attackProperties );																if( data.result[i]['hit_sound_ids'] != '0' )								{									enemy.hitSoundDataIds = data.result[i]['hit_sound_ids'].split('|');								}																if( data.result[i]['walk_up_animation_object_id'] != null )								{									animationObject = new AnimationObject();									animationObject.id = data.result[i]['walk_up_animation_object_id'];									animationObject.tileWidth = data.result[i]['walk_up_animation_object_tile_width'];									animationObject.tileHeight = data.result[i]['walk_up_animation_object_tile_height'];									animationObject.animationCount = data.result[i]['walk_up_animation_object_animation_count'];									animationObject.animationEvent = data.result[i]['walk_up_animation_object_animation_event'];									animationObject.assetURL = data.result[i]['walk_up_animation_object_asset_url'];									animationObject.cacheId = "Enemy_"+enemy.id+"_"+AbstractGameObject.WALK_UP;									enemy.walkUpAnimationObject = animationObject;								}																if( data.result[i]['walk_down_animation_object_id'] != null )								{									animationObject = new AnimationObject();									animationObject.id = data.result[i]['walk_down_animation_object_id'];									animationObject.tileWidth = data.result[i]['walk_down_animation_object_tile_width'];									animationObject.tileHeight = data.result[i]['walk_down_animation_object_tile_height'];									animationObject.animationCount = data.result[i]['walk_down_animation_object_animation_count'];									animationObject.animationEvent = data.result[i]['walk_down_animation_object_animation_event'];									animationObject.assetURL = data.result[i]['walk_down_animation_object_asset_url'];									animationObject.cacheId = "Enemy_"+enemy.id+"_"+AbstractGameObject.WALK_DOWN;									enemy.walkDownAnimationObject = animationObject;								}																if( data.result[i]['attack_up_animation_object_id'] != null )								{									animationObject = new AnimationObject();									animationObject.id = data.result[i]['attack_up_animation_object_id'];									animationObject.tileWidth = data.result[i]['attack_up_animation_object_tile_width'];									animationObject.tileHeight = data.result[i]['attack_up_animation_object_tile_height'];									animationObject.animationCount = data.result[i]['attack_up_animation_object_animation_count'];									animationObject.animationEvent = data.result[i]['attack_up_animation_object_animation_event'];									animationObject.assetURL = data.result[i]['attack_up_animation_object_asset_url'];									animationObject.cacheId = "Enemy_"+enemy.id+"_"+AbstractGameObject.ATTACK_UP;									//animationObject.customPosition.x = data.result[i]['attack_up_animation_object_custom_position'].split(',')[0];									//animationObject.customPosition.y = data.result[i]['attack_up_animation_object_custom_position'].split(',')[1];																		customPositions = data.result[i]['attack_up_animation_object_custom_position'].split('|');									for( j=0; j<customPositions.length; ++j )									{										customPosition = new Point();										customPosition.x = customPositions[j].split(',')[0];										customPosition.y = customPositions[j].split(',')[1];										animationObject.customPositions.push( customPosition );									}									animationObject.customPositions.fixed = true;																		animationObject.soundEvent = data.result[i]['attack_up_animation_object_sound_event'];									if( data.result[i]['attack_up_animation_object_sound_ids'] != '0' )									{										soundDataIds = data.result[i]['attack_up_animation_object_sound_ids'].split('|');										for( j=0; j<soundDataIds.length; ++j )										{											animationObject.soundDataIds.push( Number(soundDataIds[j]) );										}									}																		enemy.attackUpAnimationObject = animationObject;																		//trace( 'enemy: '+enemy.id );									//trace( 'attack up animation object custom position '+animationObject.customPosition );								}																if( data.result[i]['attack_down_animation_object_id'] != null )								{									animationObject = new AnimationObject();									animationObject.id = data.result[i]['attack_down_animation_object_id'];									animationObject.tileWidth = data.result[i]['attack_down_animation_object_tile_width'];									animationObject.tileHeight = data.result[i]['attack_down_animation_object_tile_height'];									animationObject.animationCount = data.result[i]['attack_down_animation_object_animation_count'];									animationObject.animationEvent = data.result[i]['attack_down_animation_object_animation_event'];									animationObject.assetURL = data.result[i]['attack_down_animation_object_asset_url'];									animationObject.cacheId = "Enemy_"+enemy.id+"_"+AbstractGameObject.ATTACK_DOWN;									//animationObject.customPosition.x = data.result[i]['attack_down_animation_object_custom_position'].split(',')[0];									//animationObject.customPosition.y = data.result[i]['attack_down_animation_object_custom_position'].split(',')[1];																		customPositions = data.result[i]['attack_down_animation_object_custom_position'].split('|');									for( j=0; j<customPositions.length; ++j )									{										customPosition = new Point();										customPosition.x = customPositions[j].split(',')[0];										customPosition.y = customPositions[j].split(',')[1];										animationObject.customPositions.push( customPosition );									}									animationObject.customPositions.fixed = true;																		animationObject.soundEvent = data.result[i]['attack_down_animation_object_sound_event'];									if( data.result[i]['attack_down_animation_object_sound_ids'] != '0' )									{										soundDataIds = data.result[i]['attack_down_animation_object_sound_ids'].split('|');										for( j=0; j<soundDataIds.length; ++j )										{											animationObject.soundDataIds.push( Number(soundDataIds[j]) );										}									}																		enemy.attackDownAnimationObject = animationObject;																		//trace( "attackDownAnimationObject.assetURL: "+animationObject.assetURL );									//trace( 'enemy: '+enemy.id );									//trace( 'attack down animation object custom position '+animationObject.customPosition );								}																if( data.result[i]['death_up_animation_object_id'] != null )								{									animationObject = new AnimationObject();									animationObject.id = data.result[i]['death_up_animation_object_id'];									animationObject.tileWidth = data.result[i]['death_up_animation_object_tile_width'];									animationObject.tileHeight = data.result[i]['death_up_animation_object_tile_height'];									animationObject.animationCount = data.result[i]['death_up_animation_object_animation_count'];									animationObject.animationEvent = data.result[i]['death_up_animation_object_animation_event'];									animationObject.assetURL = data.result[i]['death_up_animation_object_asset_url'];									animationObject.cacheId = "Enemy_"+enemy.id+"_"+AbstractGameObject.DEATH_UP;									animationObject.soundEvent = data.result[i]['death_up_animation_object_sound_event'];									if( data.result[i]['death_up_animation_object_sound_ids'] != '0' )									{										soundDataIds = data.result[i]['death_up_animation_object_sound_ids'].split('|');										for( j=0; j<soundDataIds.length; ++j )										{											animationObject.soundDataIds.push( Number(soundDataIds[j]) );										}									}																		enemy.deathUpAnimationObject = animationObject;																		//trace( "deathUpAnimationObject.assetURL: "+animationObject.assetURL );								}																if( data.result[i]['death_down_animation_object_id'] != null )								{									animationObject = new AnimationObject();									animationObject.id = data.result[i]['death_down_animation_object_id'];									animationObject.tileWidth = data.result[i]['death_down_animation_object_tile_width'];									animationObject.tileHeight = data.result[i]['death_down_animation_object_tile_height'];									animationObject.animationCount = data.result[i]['death_down_animation_object_animation_count'];									animationObject.animationEvent = data.result[i]['death_down_animation_object_animation_event'];									animationObject.assetURL = data.result[i]['death_down_animation_object_asset_url'];									animationObject.cacheId = "Enemy_"+enemy.id+"_"+AbstractGameObject.DEATH_DOWN;									animationObject.soundEvent = data.result[i]['death_down_animation_object_sound_event'];									if( data.result[i]['death_down_animation_object_sound_ids'] != '0' )									{										soundDataIds = data.result[i]['death_down_animation_object_sound_ids'].split('|');										for( j=0; j<soundDataIds.length; ++j )										{											animationObject.soundDataIds.push( Number(soundDataIds[j]) );										}									}																		enemy.deathDownAnimationObject = animationObject;								}																if( data.result[i]['additional_attack_up_animation_object_id'] != null )								{									animationObject = new AnimationObject();									animationObject.id = data.result[i]['additional_attack_up_animation_object_id'];									animationObject.tileWidth = data.result[i]['additional_attack_up_animation_object_tile_width'];									animationObject.tileHeight = data.result[i]['additional_attack_up_animation_object_tile_height'];									animationObject.animationCount = data.result[i]['additional_attack_up_animation_object_animation_count'];									animationObject.animationEvent = data.result[i]['additional_attack_up_animation_object_animation_event'];									animationObject.assetURL = data.result[i]['additional_attack_up_animation_object_asset_url'];									animationObject.cacheId = "Enemy_"+enemy.id+"_"+AbstractGameObject.ADDITIONAL_ATTACK_UP;									//animationObject.customPosition = enemy.attackUpAnimationObject.customPosition.clone();									enemy.additionalAttackUpAnimationObject = animationObject;								}																if( data.result[i]['additional_attack_down_animation_object_id'] != null )								{									animationObject = new AnimationObject();									animationObject.id = data.result[i]['additional_attack_down_animation_object_id'];									animationObject.tileWidth = data.result[i]['additional_attack_down_animation_object_tile_width'];									animationObject.tileHeight = data.result[i]['additional_attack_down_animation_object_tile_height'];									animationObject.animationCount = data.result[i]['additional_attack_down_animation_object_animation_count'];									animationObject.assetURL = data.result[i]['additional_attack_down_animation_object_asset_url'];									animationObject.cacheId = "Enemy_"+enemy.id+"_"+AbstractGameObject.ADDITIONAL_ATTACK_DOWN;									//animationObject.customPosition = enemy.attackDownAnimationObject.customPosition.clone();									enemy.additionalAttackDownAnimationObject = animationObject;								}																//trace( "adding enemy "+enemy.id+", "+enemy.name );																GameLevelDataIndex.getInstance().addEnemy( enemy );							}														dispatchEvent( new CustomEvent("onComplete") );						}						else						{							dispatchEvent( new CustomEvent("onError") );						}					}					catch( e:Error )					{						ConsoleBroadcaster.broadcast( "EnemyDataController", "Error in parsing data, "+event.currentTarget );												dispatchEvent( new CustomEvent("onError") );					}				}							/** handleLoadAllPublishedEnemiesError			  *	---------------------------------------------------------------------- */				private function handleLoadAllPublishedEnemiesError( event:IOErrorEvent ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "EnemyDataController", "handleLoadAllPublishedEnemiesError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleLoadAllPublishedEnemiesComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleLoadAllPublishedEnemiesError );										dispatchEvent( new CustomEvent("onError") );				}							/** addUnlockedEnemies			  *	---------------------------------------------------------------------- */				public function addUnlockedEnemies( userId:int, enemyIds:Array ):void				{					ConsoleBroadcaster.broadcast( "EnemyDataController", "addUnlockedEnemies("+userId+", "+enemyIds+");" );										var dataObject:Object = new Object();						dataObject.user_id = userId;						dataObject.enemy_ids = enemyIds;											var data:URLVariables = new URLVariables();						data.url = "enemies/addUnlockedEnemies";						data.data = new JSONEncoder(dataObject).getString();										trace( data.data );										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleAddUnlockedEnemiesComplete, handleAddUnlockedEnemiesError );				}								protected function handleAddUnlockedEnemiesComplete( event:Event ):void				{					ConsoleBroadcaster.broadcast( "EnemyDataController", "handleAddUnlockedEnemiesComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleAddUnlockedEnemiesComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleAddUnlockedEnemiesError );										ConsoleBroadcaster.broadcast( "EnemyDataController", "data: "+event.currentTarget.data );										try					{						var data = new JSONDecoder(event.currentTarget.data).getValue();												if( data.status )						{							dispatchEvent( new CustomEvent("onComplete", {unlockedEnemies:data.unlocked_enemies}) );						}						else						{							dispatchEvent( new CustomEvent("onError") );						}					}					catch( e:Error )					{						dispatchEvent( new CustomEvent("onError") );					}				}								protected function handleAddUnlockedEnemiesError( event:IOErrorEvent ):void				{					ConsoleBroadcaster.broadcast( "EnemyDataController", "handleAddUnlockedEnemiesError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleAddUnlockedEnemiesComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleAddUnlockedEnemiesError );										dispatchEvent( new CustomEvent("onError") );				}		}			}