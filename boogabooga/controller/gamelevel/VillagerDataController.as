/** VillagerDataController  *	---------------------------------------------------------------------------- *  *	@desc:  *		Data controller class to load treasure data from the server.  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */	package com.boogabooga.controller.gamelevel	{		import flash.events.Event;		import flash.events.EventDispatcher;		import flash.events.IOErrorEvent;		import flash.events.FullScreenEvent;		import flash.events.ProgressEvent;		import flash.external.ExternalInterface;		import flash.net.URLLoader;		import flash.net.URLRequest;		import flash.net.URLRequestMethod;		import flash.net.URLVariables;						import com.adobe.serialization.json.JSONDecoder;		import com.adobe.serialization.json.JSONEncoder;		import com.avatarlabs.utils.cache.HashTable;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;				import com.boogabooga.controller.BaseDataController;		import com.boogabooga.data.maingame.*;		import com.boogabooga.utils.GameLevelUtil;		import com.boogabooga.data.gamelevel.Villager;		import com.boogabooga.data.gamelevel.AnimationObject;		import com.boogabooga.data.gamelevel.GameLevelDataIndex;				public class VillagerDataController extends BaseDataController		{						/** Constructor			  *	---------------------------------------------------------------------- */				public function VillagerDataController()				{					super();										_debug = true;									}							/** getAllVillagers			  *	---------------------------------------------------------------------- */			  	public function getAllVillagers():void				{					var data:URLVariables = new URLVariables();						data.url = "villagers/getAllPublishedVillagers";										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleGetAllVillagersComplete, handleGetAllVillagersError );				}								protected function handleGetAllVillagersComplete( event:Event ):void				{					ConsoleBroadcaster.broadcast( "VillagerDataController", "handleGetAllVillagersComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleGetAllVillagersComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleGetAllVillagersError );										try					{						var data = new JSONDecoder(event.currentTarget.data).getValue();												if( data.status )						{							var villager:Villager;							var animationObject:AnimationObject;														for( var i:int=0; i<data.result.length; ++i )							{								if( GameLevelDataIndex.getInstance().getVillager(data.result[i]['id']) != null )									continue;																villager = new Villager();								villager.id = data.result[i]['id'];								villager.name = data.result[i]['name'];								villager.iconURL = data.result[i]['icon_url'];								villager.cacheIconId = "Villager_"+villager.id+"_icon";																if( data.result[i]['regular_animation_object_id'] != null )								{									animationObject = new AnimationObject();									animationObject.id = data.result[i]['regular_animation_object_id'];									animationObject.tileWidth = data.result[i]['regular_animation_object_tile_width'];									animationObject.tileHeight = data.result[i]['regular_animation_object_tile_height'];									animationObject.animationCount = data.result[i]['regular_animation_object_animation_count'];									animationObject.animationEvent = data.result[i]['regular_animation_object_animation_event'];									animationObject.assetURL = data.result[i]['regular_animation_object_asset_url'];									animationObject.cacheId = 'Villager_'+villager.id+'_Regular';									villager.regularAnimationObject = animationObject;								}																if( data.result[i]['happy_animation_object_id'] != null )								{									animationObject = new AnimationObject();									animationObject.id = data.result[i]['happy_animation_object_id'];									animationObject.tileWidth = data.result[i]['happy_animation_object_tile_width'];									animationObject.tileHeight = data.result[i]['happy_animation_object_tile_height'];									animationObject.animationCount = data.result[i]['happy_animation_object_animation_count'];									animationObject.animationEvent = data.result[i]['happy_animation_object_animation_event'];									animationObject.assetURL = data.result[i]['happy_animation_object_asset_url'];									animationObject.cacheId = 'Villager_'+villager.id+'_Happy';									villager.happyAnimationObject = animationObject;								}																if( data.result[i]['pray_animation_object_id'] != null )								{									animationObject = new AnimationObject();									animationObject.id = data.result[i]['pray_animation_object_id'];									animationObject.tileWidth = data.result[i]['pray_animation_object_tile_width'];									animationObject.tileHeight = data.result[i]['pray_animation_object_tile_height'];									animationObject.animationCount = data.result[i]['pray_animation_object_animation_count'];									animationObject.animationEvent = data.result[i]['pray_animation_object_animation_event'];									animationObject.assetURL = data.result[i]['pray_animation_object_asset_url'];									animationObject.cacheId = 'Villager_'+villager.id+'_Pray';									villager.prayAnimationObject = animationObject;								}																if( data.result[i]['scared_animation_object_id'] != null )								{									animationObject = new AnimationObject();									animationObject.id = data.result[i]['scared_animation_object_id'];									animationObject.tileWidth = data.result[i]['scared_animation_object_tile_width'];									animationObject.tileHeight = data.result[i]['scared_animation_object_tile_height'];									animationObject.animationCount = data.result[i]['scared_animation_object_animation_count'];									animationObject.animationEvent = data.result[i]['scared_animation_object_animation_event'];									animationObject.assetURL = data.result[i]['scared_animation_object_asset_url'];									animationObject.cacheId = 'Villager_'+villager.id+'_Scared';									villager.scaredAnimationObject = animationObject;								}																if( data.result[i]['worried_animation_object_id'] != null )								{									animationObject = new AnimationObject();									animationObject.id = data.result[i]['worried_animation_object_id'];									animationObject.tileWidth = data.result[i]['worried_animation_object_tile_width'];									animationObject.tileHeight = data.result[i]['worried_animation_object_tile_height'];									animationObject.animationCount = data.result[i]['worried_animation_object_animation_count'];									animationObject.animationEvent = data.result[i]['worried_animation_object_animation_event'];									animationObject.assetURL = data.result[i]['worried_animation_object_asset_url'];									animationObject.cacheId = 'Villager_'+villager.id+'_Worried';									villager.worriedAnimationObject = animationObject;								}																GameLevelDataIndex.getInstance().addVillager( villager );							}														dispatchEvent( new CustomEvent("onComplete") );						}						else						{							dispatchEvent( new CustomEvent("onError") );						}					}					catch( e:Error )					{						ConsoleBroadcaster.broadcast( "VillagerDataController", "Error in parsing data, "+e.message );						dispatchEvent( new CustomEvent("onError") );					}				}								protected function handleGetAllVillagersError( event:IOErrorEvent ):void				{					ConsoleBroadcaster.broadcast( "VillagerDataController", "handleGetAllVillagersError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleGetAllVillagersComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleGetAllVillagersError );										dispatchEvent( new CustomEvent("onError") );				}						}			}