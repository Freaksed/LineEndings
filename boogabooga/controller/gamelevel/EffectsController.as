/** EffectsController  *	---------------------------------------------------------------------------- *  *	@desc:  *		This is the base class for DisplayObject Controller classes.  *	  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */	package com.boogabooga.controller.gamelevel	{		import flash.display.MovieClip;		import flash.events.Event;		import flash.events.EventDispatcher;		import flash.geom.Point;		import flash.utils.getDefinitionByName;				import com.avatarlabs.utils.VectorUtil;		import com.avatarlabs.utils.cache.BitmapDataManager;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.particles.PartigenParticle;		import com.avatarlabs.utils.particles.PartigenParticlesIndex;		import com.avatarlabs.utils.sound.SoundEffectPlayer;		import com.desuade.partigen.emitters.Emitter;		import com.desuade.partigen.renderers.StandardRenderer;		import com.greensock.TweenLite;				import com.boogabooga.controller.gamelevel.DisplayObjectController;		import com.boogabooga.data.gamelevel.GameLevelDataIndex;		import com.boogabooga.ui.gamelevel.AnimationDisplayObject;		import com.boogabooga.ui.gamelevel.Gameboard;		import com.boogabooga.ui.gamelevel.GameLevelDisplayObject;		import com.boogabooga.ui.gamelevel.weapons.WeaponDisplayObject;		import com.boogabooga.data.SoundData;		import com.boogabooga.data.SoundsIndex;		import com.boogabooga.data.gamelevel.AnimationObject;				public class EffectsController extends DisplayObjectController		{			protected var _overlayEffects:Array;						protected var _standardRenderer:StandardRenderer;			protected var _emittersPlaying:Array;						protected var _particleAnimationDisplayObjects:Vector.<Object>;			protected var _particleAnimationDisplayObjectsLength:int;						protected var _deathGodAnimationDisplayObjects:Vector.<AnimationDisplayObject>;			protected var _deathGodAnimationDisplayObjectsLength:int;						protected var _particleAnimationsOnTile:Vector.<Vector.<Vector.<String>>>;						/** Constructor			  *	---------------------------------------------------------------------------- */			 	public function EffectsController()				{										init();				}								public function set standardRenderer( clip:MovieClip ):void { _standardRenderer = new StandardRenderer( clip, "top" ); }							/** init			  *	---------------------------------------------------------------------------- */				override public function init():void				{					super.init();										_debug = true;										_overlayEffects = new Array();					_particleAnimationDisplayObjects = new Vector.<Object>;					_particleAnimationDisplayObjectsLength = 0;					_deathGodAnimationDisplayObjects = new Vector.<AnimationDisplayObject>;					_deathGodAnimationDisplayObjectsLength = 0;										var i:int, j:int;					_particleAnimationsOnTile = new Vector.<Vector.<Vector.<String>>>;										for( i=0; i<GameLevelDataIndex.getInstance().boardMaxRows; ++i )					{						_particleAnimationsOnTile[i] = new Vector.<Vector.<String>>;												for( j=0; j<GameLevelDataIndex.getInstance().boardMaxColumns; ++j )						{							_particleAnimationsOnTile[i][j] = new Vector.<String>;						}					}										//EventNotificationCenter.getInstance().addEventListener( "onPlayOverlayEffect", handlePlayOverlayEffect, false, 0, true );					//EventNotificationCenter.getInstance().addEventListener( "onStopOverlayEffect", handleStopOverlayEffect, false, 0, true );					//EventNotificationCenter.getInstance().addEventListener( "onPlayParticle", handlePlayParticle, false, 0, true );					//EventNotificationCenter.getInstance().addEventListener( "onStopParticle", handleStopParticle, false, 0, true );					//EventNotificationCenter.getInstance().addEventListener( "onPlayParticleAnimation", handlePlayParticleAnimationDisplayObject, false, 0, true );					//EventNotificationCenter.getInstance().addEventListener( "onStopParticleAnimation", handleStopParticleAnimationDisplayObject, false, 0, true );					//EventNotificationCenter.getInstance().addEventListener( "onPlayDeathGodParticleAnimationObject", handlePlayDeathGodParticleAnimationDisplayObject, false, 0, true );					//EventNotificationCenter.getInstance().addEventListener( "onPlaySound", handlePlaySound, false, 0, true );					//EventNotificationCenter.getInstance().addEventListener( "onStopSound", handleStopSound, false, 0, true );										EventNotificationCenter.getInstance().addSignalListener( "onPlayOverlayEffect", handlePlayOverlayEffect, this );					EventNotificationCenter.getInstance().addSignalListener( "onPlayParticle", handlePlayParticle, this );					EventNotificationCenter.getInstance().addSignalListener( "onStopParticle", handleStopParticle, this );					EventNotificationCenter.getInstance().addSignalListener( "onPlayParticleAnimation", handlePlayParticleAnimationDisplayObject, this );					//EventNotificationCenter.getInstance().addSignalListener( "onStopParticleAnimation", handleStopParticleAnimationDisplayObject, this );					EventNotificationCenter.getInstance().addSignalListener( "onPlayDeathGodParticleAnimationObject", handlePlayDeathGodParticleAnimationDisplayObject, this );					EventNotificationCenter				}							/** pause			  *	---------------------------------------------------------------------------- */				override public function pause():void				{					if( _debug ) ConsoleBroadcaster.broadcast( "EffectsController", "pause();" );									}							/** unpause			  *	---------------------------------------------------------------------------- */				override public function unpause():void				{					if( _debug ) ConsoleBroadcaster.broadcast( "EffectsController", "unpause();" );				}							/** kill			  *	---------------------------------------------------------------------------- */				override public function kill():void				{					if( _debug ) ConsoleBroadcaster.broadcast( "EffectsController", "kill();" );										//TODO:					//	Make sure to remove all the effects or particles that are playing here.										for( var i:int=0; i<_particleAnimationDisplayObjectsLength; ++i )					{						_particleAnimationDisplayObjects[i].animationDisplayObject.stopAnimation();						_particleAnimationDisplayObjects[i].animationDisplayObject.onAnimationEnded.remove( handleParticleDisplayObjectAnimationEnded );						_particleAnimationDisplayObjects[i].animationDisplayObject.kill();						_gameboardReference.effectClipsContainer_mc.removeChild( _particleAnimationDisplayObjects[i].animationDisplayObject.contentClip );					}					VectorUtil.removeAll( _particleAnimationDisplayObjects );										for( i=0; i<_deathGodAnimationDisplayObjectsLength; ++i )					{						_deathGodAnimationDisplayObjects[i].stopAnimation();						//_deathGodAnimationDisplayObjects[i].onAnimationEnded.remove( handleDeathGodParticleDisplayObjectAnimationEnded );						_deathGodAnimationDisplayObjects[i].kill();						_gameboardReference.effectClipsContainer_mc.removeChild( _deathGodAnimationDisplayObjects[i].contentClip );					}					VectorUtil.removeAll( _deathGodAnimationDisplayObjects );										//EventNotificationCenter.getInstance().removeEventListener( "onPlayOverlayEffect", handlePlayOverlayEffect );					//EventNotificationCenter.getInstance().removeEventListener( "onStopOverlayEffect", handleStopOverlayEffect );					//EventNotificationCenter.getInstance().removeEventListener( "onPlayParticle", handlePlayParticle );					//EventNotificationCenter.getInstance().removeEventListener( "onStopParticle", handleStopParticle );					//EventNotificationCenter.getInstance().removeEventListener( "onPlayParticleAnimation", handlePlayParticleAnimationDisplayObject );					//EventNotificationCenter.getInstance().removeEventListener( "onStopParticleAnimation", handleStopParticleAnimationDisplayObject );					//EventNotificationCenter.getInstance().removeEventListener( "onPlayDeathGodParticleAnimationObject", handlePlayDeathGodParticleAnimationDisplayObject );					//EventNotificationCenter.getInstance().removeEventListener( "onPlaySound", handlePlaySound );					//EventNotificationCenter.getInstance().removeEventListener( "onStopSound", handleStopSound );										EventNotificationCenter.getInstance().removeSignalListener( "onPlayOverlayEffect", handlePlayOverlayEffect );					EventNotificationCenter.getInstance().removeSignalListener( "onPlayParticle", handlePlayParticle );					EventNotificationCenter.getInstance().removeSignalListener( "onStopParticle", handleStopParticle );					EventNotificationCenter.getInstance().removeSignalListener( "onPlayParticleAnimation", handlePlayParticleAnimationDisplayObject );					//EventNotificationCenter.getInstance().removeSignalListener( "onStopParticleAnimation", handleStopParticleAnimationDisplayObject );					EventNotificationCenter.getInstance().removeSignalListener( "onPlayDeathGodParticleAnimationObject", handlePlayDeathGodParticleAnimationDisplayObject );				}							/** updateOnEnterFrame			  *	---------------------------------------------------------------------------- *			  *	This updates the display object on every enter frame loop.			  *	---------------------------------------------------------------------------- */				public function updateOnEnterFrame():void				{					for( var i:int=0; i<_particleAnimationDisplayObjectsLength; ++i )					{						_particleAnimationDisplayObjects[i].animationDisplayObject.showNextAnimation();					}										for( i=0; i<_deathGodAnimationDisplayObjectsLength; ++i )					{						_deathGodAnimationDisplayObjects[i].showNextAnimation();						_deathGodAnimationDisplayObjects[i].contentClip.x += _deathGodAnimationDisplayObjects[i].flipped ? -10 : 10;						_deathGodAnimationDisplayObjects[i].contentClip.y -= 10;												//trace( "_deathGodAnimationDisplayObjects[i].contentClip.x: "+_deathGodAnimationDisplayObjects[i].contentClip.x );						//trace( "_deathGodAnimationDisplayObjects[i].contentClip.y: "+_deathGodAnimationDisplayObjects[i].contentClip.y );												if( _deathGodAnimationDisplayObjects[i].contentClip.y < -400 )						{							removeDeathGodParticleDisplayObject( _deathGodAnimationDisplayObjects[i] );							--i;						}					}				}											/**	******************************************* *			  * Overlay Events			  *	******************************************* */			 				/** playOverlayEffect			  *	---------------------------------------------------------------------------- */				public function playOverlayEffect( linkageId:String, position:Point, data:Object=null ):void				{					//if( _debug ) ConsoleBroadcaster.broadcast( "EffectsController", "playOverlayEffect("+linkageId+");" );										var effectClip:MovieClip = new ( getDefinitionByName(linkageId) as Class )();					var effectClipPosition:Point = _gameboardReference.effectClipsContainer_mc.globalToLocal( position );										effectClip.x = effectClipPosition.x;					effectClip.y = effectClipPosition.y-30;										//effectClip.label_mc.label_txt.text = "-"+data.power;					effectClip.label_mc.textField = effectClip.label_mc.label_txt;					effectClip.label_mc.fontName = "Lithos Pro Black";					effectClip.label_mc.embedFonts = true;					effectClip.label_mc.setText( '-'+data.power );										//trace( "effectClip: "+effectClip );										TweenLite.to( effectClip, .7, {alpha:0, y:"-50", onComplete:handleEffectClipTweenComplete, onCompleteParams:[effectClip]} );										_gameboardReference.effectClipsContainer_mc.addChild( effectClip );				}								private function handleEffectClipTweenComplete( clip:MovieClip ):void				{					clip.parent.removeChild( clip );				}							/** pauseOverlayEffect			  *	---------------------------------------------------------------------------- */				public function pauseOverlayEffect():void				{									}							/** stopOverlayEffect			  *	---------------------------------------------------------------------------- */				public function stopOverlayEffect( id:String, customId:String ):void				{									}							/** handlePlayOverlayEffect			  *	---------------------------------------------------------------------------- */				//private function handlePlayOverlayEffect( event:CustomEvent ):void				private function handlePlayOverlayEffect( customParameters:Object ):void				{					playOverlayEffect( customParameters.linkageId, customParameters.position, {power:customParameters.power} );				}							/** handleStopOverlayEffect			  *	---------------------------------------------------------------------------- */				private function handleStopOverlayEffect( event:CustomEvent ):void				{									}							/**	******************************************* *			  * Particle Events			  *	******************************************* */			 				/** handleStopOverlayEffect			  *	---------------------------------------------------------------------------- */				protected function playParticle( particleId:String, globalPosition:Point, loop:Boolean=false, displayObject:GameLevelDisplayObject=null, customId:String="" ):void				{					//var particlePosition:Point = _standardRenderer.target.globalToLocal( globalPosition );					var particlePosition:Point = _gameboardReference.effectClipsContainer_mc.globalToLocal( globalPosition );										var emitter:Emitter = new Emitter();						emitter.x = particlePosition.x;						emitter.y = particlePosition.y;						emitter.renderer = _standardRenderer;						emitter.fromXML( PartigenParticlesIndex.getInstance().getParticleById(particleId).xml );					/*					if( displayObject != null && displayObject is WeaponDisplayObject )					{						WeaponDisplayObject(displayObject).deathParticleEmitter = emitter;					}					*/										if( loop )					{						emitter.start();												if( customId == "" )						{							var count:int = 0;														for( var i:int=0; i<_emittersPlaying.length; ++i )							{								if( _emittersPlaying[i].particleId == particleId )									++count;							}														customId = particleId+count;						}												_emittersPlaying.push( {id:customId, particleId:particleId, emitter:emitter} );					}					else					{						emitter.emit( emitter.burst );					}				}								protected function stopParticle( particleId:String, customId:String ):void				{					for( var i:int=0; i<_emittersPlaying.length; ++i )					{						if( _emittersPlaying[i].id == customId && _emittersPlaying[i].particleId == particleId )						{							var emitter:Emitter = _emittersPlaying[i].emitter;								emitter.stop();								emitter = null;														_emittersPlaying.splice( i, 1 );							break;						}					}				}							/** handlePlayParticle			  *	---------------------------------------------------------------------------- */				//private function handlePlayParticle( event:CustomEvent ):void				private function handlePlayParticle( customParameters:Object ):void				{					//if( _debug ) ConsoleBroadcaster.broadcast( "EffectsController", "handlePlayParticle();" );					//var customParameters:Object = event.customParameters;										playParticle( customParameters.particleId, customParameters.globalPosition, (customParameters.loop ? customParameters.loop : false), customParameters.gameLevelDisplayObject, (customParameters.customId ? customParameters.customId : "") );				}							/** handleStopParticle			  *	---------------------------------------------------------------------------- */				//private function handleStopParticle( event:CustomEvent ):void				private function handleStopParticle( customParameters:Object ):void				{					//if( _debug ) ConsoleBroadcaster.broadcast( "EffectsController", "handleStopParticle();" );					//var customParameters:Object = event.customParameters;										stopParticle( customParameters.particleId, customParameters.customId );				}											/**	******************************************* *			  * Particle Animation Display Object Events			  *	******************************************* */			 					protected function handlePlayParticleAnimationDisplayObject( customParameters:Object ):void				//protected function handlePlayParticleAnimationDisplayObject( event:CustomEvent ):void				{					//trace( "handlePlayParticleAnimationDisplayObject();" );					//trace( "particleCacheId: "+event.customParameters.particleCacheId );					//trace( "particleId: "+event.customParameters.particleId );					//trace( "position: "+event.customParameters.globalPosition );										//var customParameters:Object = event.customParameters;										var animationObject:AnimationObject;										if( customParameters.particleCacheId != undefined )						animationObject = GameLevelDataIndex.getInstance().getAnimationObjectByCacheId( customParameters.particleCacheId );					else						animationObject = GameLevelDataIndex.getInstance().getAnimationObject( customParameters.particleId );										if( customParameters.tileRow >= 0 && customParameters.tileColumn >= 0 )					{						if( VectorUtil.remove( _particleAnimationsOnTile[customParameters.tileRow][customParameters.tileColumn], String(animationObject.id) ) != null )						{							//trace( 'found same particle animation playing on the same spot' );														for( var i:int=0; i<_particleAnimationDisplayObjects.length; ++i )							{								if( _particleAnimationDisplayObjects[i].tileRow == customParameters.tileRow && 								   _particleAnimationDisplayObjects[i].tileColumn == customParameters.tileColumn && 								   _particleAnimationDisplayObjects[i].animationDisplayObject.animationObject.id == animationObject.id )								{									//trace( 'found the old particle animation, stop it to start the new one' );																		var animationDisplayObject:AnimationDisplayObject = _particleAnimationDisplayObjects[i].animationDisplayObject;										animationDisplayObject.stopAnimation();										animationDisplayObject.onAnimationEnded.remove( handleParticleDisplayObjectAnimationEnded );										animationDisplayObject.kill();																		_particleAnimationDisplayObjects.splice( i, 1 );																		_gameboardReference.effectClipsContainer_mc.removeChild( animationDisplayObject.contentClip );									animationDisplayObject = null;									break;								}							}						}					}										if( customParameters.particleCacheId != undefined || customParameters.particleId != undefined )					{						var particlePosition:Point = _gameboardReference.effectClipsContainer_mc.globalToLocal( customParameters.globalPosition );												var particleDisplayObject:AnimationDisplayObject = new AnimationDisplayObject();							particleDisplayObject.contentClip = new (getDefinitionByName("DisplayObject.animation") as Class)();							particleDisplayObject.smoothing = false;							particleDisplayObject.init();							//particleDisplayObject.addEventListener( "onAnimationEnds", handleParticleDisplayObjectAnimationEnds, false, 0, true );							particleDisplayObject.onAnimationEnded.add( handleParticleDisplayObjectAnimationEnded );							particleDisplayObject.animationObject = animationObject;													particleDisplayObject.sourceBD = BitmapDataManager.getInstance().getBitmapData( particleDisplayObject.animationObject.cacheId ).bitmapData;							particleDisplayObject.contentClip.x = particlePosition.x;							particleDisplayObject.contentClip.y = particlePosition.y;												//trace( "particleDisplayObject.x: "+particleDisplayObject.x );						//trace( "particleDisplayObject.y: "+particleDisplayObject.y );												_gameboardReference.effectClipsContainer_mc.addChild( particleDisplayObject.contentClip );												//particleDisplayObject.init();						particleDisplayObject.initCanvas();						particleDisplayObject.startAnimation(false);												_particleAnimationDisplayObjects.push( {animationDisplayObject:particleDisplayObject, tileRow:customParameters.tileRow, tileColumn:customParameters.tileColumn} );						_particleAnimationDisplayObjectsLength = _particleAnimationDisplayObjects.length;												if( customParameters.tileRow >= 0 && customParameters.tileColumn >= 0 )							_particleAnimationsOnTile[customParameters.tileRow][customParameters.tileColumn].push( particleDisplayObject.animationObject.id );					}										animationObject = null;				}								/*protected function handleStopParticleAnimationDisplayObject( customParameters:Signal ):void				{									}*/								protected function handleParticleDisplayObjectAnimationEnded( animationDisplayObject:AnimationDisplayObject ):void				{					//trace( "handleParticleDisplayObjectAnimationEnds()" );										//VectorUtil.remove();										//event.currentTarget.removeEventListener( "onAnimationEnds", handleParticleDisplayObjectAnimationEnds );					//VectorUtil.remove( _particleAnimationDisplayObjects, animationDisplayObject );										for( var i:int=0; i<_particleAnimationDisplayObjects.length; ++i )					{						if( _particleAnimationDisplayObjects[i].animationDisplayObject == animationDisplayObject )						{							if( _particleAnimationDisplayObjects[i].tileRow >= 0 && _particleAnimationDisplayObjects[i].tileColumn >= 0 )							{								//trace( _particleAnimationsOnTile[_particleAnimationDisplayObjects[i].tileRow][_particleAnimationDisplayObjects[i].tileColumn] );								VectorUtil.remove( _particleAnimationsOnTile[_particleAnimationDisplayObjects[i].tileRow][_particleAnimationDisplayObjects[i].tileColumn], animationDisplayObject.animationObject.id );								//trace( 'after removing particle: '+_particleAnimationsOnTile[_particleAnimationDisplayObjects[i].tileRow][_particleAnimationDisplayObjects[i].tileColumn] );							}							_particleAnimationDisplayObjects.splice( i, 1 );							_particleAnimationDisplayObjectsLength = _particleAnimationDisplayObjects.length;							break;						}					}										//trace( _particleAnimationDisplayObjects.length );										animationDisplayObject.stopAnimation();					animationDisplayObject.onAnimationEnded.remove( handleParticleDisplayObjectAnimationEnded );					animationDisplayObject.kill();					_gameboardReference.effectClipsContainer_mc.removeChild( animationDisplayObject.contentClip );					animationDisplayObject = null;									}							/** handlePlayDeathGodParticleA/nimationDisplayObject			  *	---------------------------------------------------------------------------- */				//private function handlePlayDeathGodParticleAnimationDisplayObject( event:CustomEvent ):void				private function handlePlayDeathGodParticleAnimationDisplayObject( customParameters:Object ):void				{					//trace( "handlePlayDeathGodParticleAnimationDisplayObject();" );										var particlePosition:Point = _gameboardReference.effectClipsContainer_mc.globalToLocal( customParameters.globalPosition );										var particleDisplayObject:AnimationDisplayObject = new AnimationDisplayObject();						particleDisplayObject.contentClip = new (getDefinitionByName("DisplayObject.animation") as Class)();						particleDisplayObject.smoothing = false;						particleDisplayObject.init();						//particleDisplayObject.onAnimationEnded.add( handleDeathGodParticleDisplayObjectAnimationEnded );						particleDisplayObject.animationObject = GameLevelDataIndex.getInstance().getAnimationObjectByCacheId( "BirdEffect" );						particleDisplayObject.sourceBD = BitmapDataManager.getInstance().getBitmapData( particleDisplayObject.animationObject.cacheId ).bitmapData;						particleDisplayObject.contentClip.x = particlePosition.x;						particleDisplayObject.contentClip.y = particlePosition.y;										_gameboardReference.effectClipsContainer_mc.addChild( particleDisplayObject.contentClip );										var randomNumber:int = int(Math.random()*2);										if( randomNumber == 0 )					{						//goes right						particleDisplayObject.initCanvas();					}					else					{						//goes left						particleDisplayObject.initCanvas(true);					}										particleDisplayObject.startAnimation(true);										_deathGodAnimationDisplayObjects.push( particleDisplayObject );					_deathGodAnimationDisplayObjectsLength = _deathGodAnimationDisplayObjects.length;				}								private function handleDeathGodParticleDisplayObjectAnimationEnded( animationDisplayObject:AnimationDisplayObject ):void				{					removeDeathGodParticleDisplayObject( animationDisplayObject );				}								protected function removeDeathGodParticleDisplayObject( animationDisplayObject:AnimationDisplayObject ):void				{					//animationDisplayObject.onAnimationEnded.remove( handleDeathGodParticleDisplayObjectAnimationEnded );					VectorUtil.remove( _deathGodAnimationDisplayObjects, animationDisplayObject );					animationDisplayObject.kill();					_gameboardReference.effectClipsContainer_mc.removeChild( animationDisplayObject.contentClip );					animationDisplayObject =  null;					_deathGodAnimationDisplayObjectsLength = _deathGodAnimationDisplayObjects.length;				}											/** handlePlaySound			  *	---------------------------------------------------------------------------- 				protected function handlePlaySound( event:CustomEvent ):void				{					var soundData:SoundData;					if( event.customParameters.soundDataId != undefined )					{						//trace( "playing sound( "+event.customParameters.soundDataId+", "+event.customParameters.loop+", "+event.customParameters.customId+" );" );						soundData = SoundsIndex.getInstance().getSoundById(event.customParameters.soundDataId);					}					else					{						//trace( "playing sound( "+event.customParameters.soundDataName+", "+event.customParameters.loop+", "+event.customParameters.customId+" );" );						soundData = SoundsIndex.getInstance().getSoundBySoundId(event.customParameters.soundDataName);					}										//trace( "soundData: "+soundData );										//if( SoundEffectPlayer.getInstance().soundTransforms[ soundData.soundId ] == undefined )						//SoundEffectPlayer.getInstance().setVolume( soundData.volume, 0, soundData.soundId );										SoundEffectPlayer.getInstance().playLibrarySound( soundData.soundId, event.customParameters.loop, event.customParameters.customId, soundData.soundId );				}*/							/** handleStopSound			  *	---------------------------------------------------------------------------- 				protected function handleStopSound( event:CustomEvent ):void				{					var soundData:SoundData;					if( event.customParameters.soundDataId != undefined )					{						//trace( "stopping sound( "+event.customParameters.soundDataId+", "+event.customParameters.customId+" );" );						soundData = SoundsIndex.getInstance().getSoundById(event.customParameters.soundDataId);					}					else					{						//trace( "stopping sound( "+event.customParameters.soundDataName+", "+event.customParameters.customId+" );" );						soundData = SoundsIndex.getInstance().getSoundBySoundId(event.customParameters.soundDataName);					}										SoundEffectPlayer.getInstance().stopSound( soundData.soundId, event.customParameters.customId, soundData.soundId );				}*/		}	}