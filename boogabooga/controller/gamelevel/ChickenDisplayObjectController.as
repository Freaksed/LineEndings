/** ChickenDisplayObjectController  *	---------------------------------------------------------------------------- *  *	@desc:  *		Thils class controls all the chickens that are currently on the board,  *		active or non active.  *	  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */	package com.boogabooga.controller.gamelevel	{		import flash.display.MovieClip;		import flash.events.*;		import flash.errors.*;		import flash.geom.Point;		import flash.utils.getDefinitionByName;		import flash.utils.getQualifiedClassName;		import flash.utils.getTimer;		import flash.utils.Timer;				import com.avatarlabs.utils.ArrayUtil;		import com.avatarlabs.utils.UtilFunctions;		import com.avatarlabs.utils.VectorUtil;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import org.osflash.signals.Signal;				import com.boogabooga.controller.gamelevel.DisplayObjectController;		import com.boogabooga.data.gamelevel.Chicken;		import com.boogabooga.events.GameLevelEvent;		import com.boogabooga.ui.gamelevel.ChickenDisplayObject;		import com.boogabooga.ui.gamelevel.ChickenMovementArea;		import com.boogabooga.ui.gamelevel.Gameboard;		import com.avatarlabs.utils.timers.CustomTimer;						public class ChickenDisplayObjectController extends DisplayObjectController		{			//protected var _chickenDisplayObjects:Array;			protected var _chickenDisplayObjects:Vector.<ChickenDisplayObject>;			protected var _chickenDisplayObjectsLength:int;			protected var _chickenFlyToPosition:Point;						protected var _spawnTimer:CustomTimer;						protected var _gameboardController:GameboardController;						protected var _chickenDisplayObjectsPool:Vector.<ChickenDisplayObject>;			protected var _chickenDisplayObjectsPoolLength:int;						protected var _chickenMovementAreas:Vector.<ChickenMovementArea>;			protected var _chickenMovementAreasLength:int;						protected var _slotMachineChickens:Vector.<ChickenDisplayObject>;			protected var _slotMachineChickenAnimationTimer:CustomTimer;						public var onChickenObtainedAnimationCompleted:Signal;						/** Constructor			  *	---------------------------------------------------------------------------- */			 	public function ChickenDisplayObjectController()				{					init();				}								override public function set gameboardReference( g:Gameboard ):void				{					super.gameboardReference = g;										updateChickenFlyToPosition();										//trace( "chickenFlyToPosition: "+_chickenFlyToPosition );				}												public function set gameboardController( gc:GameboardController ):void { _gameboardController = gc; }								public function get chickenDisplayObjectsLength():int { return _chickenDisplayObjectsLength; }				public function get chickenDisplayObjects():Vector.<ChickenDisplayObject> { return _chickenDisplayObjects; }							/** init			  *	---------------------------------------------------------------------------- */				override public function init():void				{					super.init();										_debug = false;					//_chickenDisplayObjects = new Array();					_chickenDisplayObjects = new Vector.<ChickenDisplayObject>;					_chickenDisplayObjectsLength = 0;					_chickenDisplayObjectsPool = new Vector.<ChickenDisplayObject>;					_chickenDisplayObjectsPoolLength = 0;										_slotMachineChickens = new Vector.<ChickenDisplayObject>;										onChickenObtainedAnimationCompleted = new Signal();				}								public function updateChickenFlyToPosition():void				{					_chickenFlyToPosition = UtilFunctions.localToLocal( _gameboardReference.chickenIndicator_mc, _gameboardReference.chickenAnimation_mc );					_chickenFlyToPosition.x += _gameboardReference.chickenIndicator_mc.width/2;					_chickenFlyToPosition.y += _gameboardReference.chickenIndicator_mc.height/2;				}								public function initChickenMovementAreas():void				{					_chickenMovementAreas = new Vector.<ChickenMovementArea>;										if( !_gameboardReference.chickenMovementArea1.emptyArea )						_chickenMovementAreas.push( _gameboardReference.chickenMovementArea1 );										if( !_gameboardReference.chickenMovementArea2.emptyArea )						_chickenMovementAreas.push( _gameboardReference.chickenMovementArea2 );										if( !_gameboardReference.chickenMovementArea3.emptyArea )						_chickenMovementAreas.push( _gameboardReference.chickenMovementArea3 );										_chickenMovementAreasLength = _chickenMovementAreas.length;										trace( "_chickenMovementAreasLength: "+_chickenMovementAreasLength );				}							/** pause			  *	---------------------------------------------------------------------------- */				override public function pause():void				{					if( _debug ) ConsoleBroadcaster.broadcast( "ChickenDisplayObjectController", "pause();" );										for( var i:uint=0; i<_chickenDisplayObjectsLength; ++i )					{						_chickenDisplayObjects[i].pause();					}										if( _spawnTimer != null && _spawnTimer.isRunning )					{						//trace( "_spawnTimer pause" );						_spawnTimer.pause();					}				}							/** unpause			  *	---------------------------------------------------------------------------- */				override public function unpause():void				{					if( _debug ) ConsoleBroadcaster.broadcast( "ChickenDisplayObjectController", "unpause();" );										for( var i:uint=0; i<_chickenDisplayObjectsLength; ++i )					{						_chickenDisplayObjects[i].unpause();					}										if( _spawnTimer != null && _spawnTimer.isRunning )					{						//trace( "_spawnTimer unpause" );						_spawnTimer.unpause();					}				}							/** kill			  *	---------------------------------------------------------------------------- */				override public function kill():void				{					/*					for( var i:uint=0; i<_chickenDisplayObjects.length; ++i )					{						_chickenDisplayObjects[i].removeEventListener( GameLevelEvent.ON_CHICKEN_COLLECTED, handleChickenCollected );						_chickenDisplayObjects[i].removeEventListener( GameLevelEvent.REMOVE_FROM_GAME, handleChickenRemovedFromGame );						ChickenDisplayObject(_chickenDisplayObjects[i]).kill();						_chickenDisplayObjects[i] = null;					}					*/										VectorUtil.removeAll( _slotMachineChickens );										while( _chickenDisplayObjects.length > 0 )						removeChicken( _chickenDisplayObjects[0] );										_chickenDisplayObjects = null;										if( _spawnTimer != null )					{						if( _spawnTimer.isRunning )							_spawnTimer.stop();												//_spawnTimer.removeEventListener( TimerEvent.TIMER, handleSpawnTimerFired );						_spawnTimer.onTimerFired.remove( handleSpawnTimerFired );						_spawnTimer.kill();						_spawnTimer = null;					}										if( _slotMachineChickenAnimationTimer != null )					{						_slotMachineChickenAnimationTimer.stop();						_slotMachineChickenAnimationTimer.onTimerFired.remove( handleSlotMachineChickenAnimationTimerFired );						_slotMachineChickenAnimationTimer.kill();						_slotMachineChickenAnimationTimer = null;					}										_gameboardController = null;										super.kill();				}							/** updateOnEnterFrame			  *	---------------------------------------------------------------------------- *			  *	This updates the display object on every enter frame loop.			  *	---------------------------------------------------------------------------- */				public function updateOnEnterFrame( spawnOnly:Boolean=false ):void				{					for( var i:int=0; i<_chickenDisplayObjectsLength; ++i )					{						_chickenDisplayObjects[i].updateChickenOnEnterFrame( spawnOnly );					}				}							/** start			  *	---------------------------------------------------------------------------- */				public function start():void				{					var delay:Number = _gameboardController.gameLevel.chickenSpawnRateMin + Math.random()*(_gameboardController.gameLevel.chickenSpawnRateMax - _gameboardController.gameLevel.chickenSpawnRateMin);						delay = (( delay * 1000 ) + 0.5) >> 0;										//trace( "delay: "+delay );					//trace( "chickenSpawnRateMin: "+_gameboardController.gameLevel.chickenSpawnRateMin );					//trace( "chickenSpawnRateMax: "+_gameboardController.gameLevel.chickenSpawnRateMax );										_spawnTimer = new CustomTimer(delay);					//_spawnTimer.addEventListener( TimerEvent.TIMER, handleSpawnTimerFired, false, 0, true );					_spawnTimer.onTimerFired.add( handleSpawnTimerFired );					_spawnTimer.start();				}							/** handleSpawnTimerFired			  *	---------------------------------------------------------------------------- */				protected function handleSpawnTimerFired( timer:CustomTimer ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "ChickenDisplayObjectController", "handleSpawnTimerFired();" );										_spawnTimer.stop();					_spawnTimer.reset();										var delay:Number = _gameboardController.gameLevel.chickenSpawnRateMin + Math.random()*(_gameboardController.gameLevel.chickenSpawnRateMax - _gameboardController.gameLevel.chickenSpawnRateMin);						delay = (( delay * 1000 ) + 0.5) >> 0;										//trace( "delay: "+delay );										_spawnTimer.delay = delay;					_spawnTimer.start();										addChicken();				}							/** addChicken			  *	---------------------------------------------------------------------------- */				public function addChicken( area:int=-1, slotMachineChicken:Boolean=false, slotMachineChickenNumber:int=0, startSlotMachineChickenAnimation:Boolean=false ):ChickenDisplayObject				{					if( _debug ) ConsoleBroadcaster.broadcast( "ChickenDisplayObjectController", "addChicken();" );										if( area >= _chickenMovementAreasLength )						return null;										var chickenDisplayObject:ChickenDisplayObject;					//trace( "_chickenDisplayObjectsPoolLength : "+_chickenDisplayObjectsPoolLength );					if( _chickenDisplayObjectsPoolLength > 0 )					{						chickenDisplayObject = _chickenDisplayObjectsPool.splice( 0, 1 )[0];						_chickenDisplayObjectsPoolLength = _chickenDisplayObjectsPool.length;						chickenDisplayObject.reuse();												//trace( "reuse chicken" );					}										if( chickenDisplayObject == null )					{						//TODO						//	Get the chicken parameter from the database?						var chicken:Chicken = new Chicken();							chicken.value = 1;							chicken.speed = 1;							chicken.duration = 10000;												chickenDisplayObject = new ChickenDisplayObject();						chickenDisplayObject.contentClip = new (getDefinitionByName("ChickenDisplayObjectLibrary") as Class)();						chickenDisplayObject.init();						chickenDisplayObject.chicken = chicken;						chickenDisplayObject.diePosition = _chickenFlyToPosition;						chickenDisplayObject.inIsometricView = _gameboardController.gameboardReference.inIsometricView;						chickenDisplayObject.onCollected.add( handleChickenCollected );						chickenDisplayObject.onObtainedAnimationCompleted.add( handleChickenObtainedAnimationComplete );						chickenDisplayObject.onRemovedFromGame.add( handleChickenRemovedFromGame );					}										chickenDisplayObject.contentClip.visible = true;					chickenDisplayObject.contentClip.scaleX = chickenDisplayObject.contentClip.scaleY = .1;										var randomAreaIndex;										if( area < 0 )						randomAreaIndex = int(Math.random() * _chickenMovementAreasLength);					else						randomAreaIndex = area;										//trace( "randomAreaIndex: "+randomAreaIndex );					/*					if( randomAreaIndex == 0 )					{						chickenDisplayObject.movementArea = _gameboardController.gameboardReference.chickenMovementArea1.movementAreaIn2D;						_gameboardController.gameboardReference.chickenMovementArea1.contentClip.addChild( chickenDisplayObject.contentClip );						//_gameboardController.gameboardReference.displayLayer_mc.moveClipToLayer( chickenDisplayObject.contentClip, 1 );					}					else if( randomAreaIndex == 1 )					{						chickenDisplayObject.movementArea = _gameboardController.gameboardReference.chickenMovementArea2.movementAreaIn2D;						_gameboardController.gameboardReference.chickenMovementArea2.contentClip.addChild( chickenDisplayObject.contentClip );					}					else					{						chickenDisplayObject.movementArea = _gameboardController.gameboardReference.chickenMovementArea3.movementAreaIn2D;						_gameboardController.gameboardReference.chickenMovementArea3.contentClip.addChild( chickenDisplayObject.contentClip );					}					*/										chickenDisplayObject.movementArea = _chickenMovementAreas[randomAreaIndex];															if( slotMachineChicken )					{						_gameboardReference.chickenAnimation_mc.addChild( chickenDisplayObject.contentClip );						//chickenDisplayObject.movementAreaIndex = randomAreaIndex;						chickenDisplayObject.slotMachineSpawnAnimation = true;						chickenDisplayObject.contentClip.scaleX = chickenDisplayObject.contentClip.scaleY = 2;						//chickenDisplayObject.startSlotMachineSpawnAnimation();												chickenDisplayObject.contentClip.x = _gameboardReference.chickenSlotMachinePosition.x;						chickenDisplayObject.contentClip.y = _gameboardReference.chickenSlotMachinePosition.y;												//if( slotMachineChickenNumber == 0 )						//{							//chickenDisplayObject.contentClip.visible = true;							//chickenDisplayObject.startSlotMachineSpawnAnimation();						//}						//else						//{							chickenDisplayObject.contentClip.visible = false;							_slotMachineChickens.push( chickenDisplayObject );						//}												if( startSlotMachineChickenAnimation && _slotMachineChickens.length > 0 )						{							if( _slotMachineChickenAnimationTimer == null )							{								_slotMachineChickenAnimationTimer = new CustomTimer(100);								//_slotMachineChickenAnimationTimer.addEventListener( TimerEvent.TIMER, handleSlotMachineChickenAnimationTimerFired, false, 0, true );								_slotMachineChickenAnimationTimer.onTimerFired.add( handleSlotMachineChickenAnimationTimerFired );							}														_slotMachineChickens[0].contentClip.visible = true;							_slotMachineChickens[0].startSlotMachineSpawnAnimation();							_slotMachineChickens.splice( 0, 1 );														_slotMachineChickenAnimationTimer.start();						}					}					else					{						_chickenMovementAreas[randomAreaIndex].contentClip.addChild( chickenDisplayObject.contentClip );						chickenDisplayObject.pickRandomStartingPosition();					}										//chickenDisplayObject.addEventListener( GameLevelEvent.ON_CHICKEN_COLLECTED, handleChickenCollected, false, 0, true );					//chickenDisplayObject.addEventListener( GameLevelEvent.ON_CHICKEN_OBTAINED_ANIMATION_COMPLETE, handleChickenObtainedAnimationComplete, false, 0, true );					//chickenDisplayObject.addEventListener( GameLevelEvent.REMOVE_FROM_GAME, handleChickenRemovedFromGame, false, 0, true );															_chickenDisplayObjects.push( chickenDisplayObject );					_chickenDisplayObjectsLength = _chickenDisplayObjects.length;										//chickenDisplayObject.startMoving();										return chickenDisplayObject;				}							/** removeAllChickens			  *	---------------------------------------------------------------------------- */				public function removeAllChickens():void				{					while( _chickenDisplayObjects.length > 0 )						removeChicken( _chickenDisplayObjects[0] );				}							/** removeChicken			  *	---------------------------------------------------------------------------- */				public function removeChicken( displayObject:ChickenDisplayObject ):void				{					/*					for( var i:uint=0; i<_chickenDisplayObjects.length; ++i )					{						if( _chickenDisplayObjects[i] == displayObject )						{							_chickenDisplayObjects[i].removeEventListener( GameLevelEvent.ON_CHICKEN_COLLECTED, handleChickenCollected );							_chickenDisplayObjects[i].removeEventListener( GameLevelEvent.REMOVE_FROM_GAME, handleChickenRemovedFromGame );														MovieClip(_chickenDisplayObjects[i].parent).removeChild( _chickenDisplayObjects[i] );														_chickenDisplayObjects[i] = null;														_chickenDisplayObjects.splice( i, 1 );						}					}					*/										var chickenDisplayObject:ChickenDisplayObject = VectorUtil.remove( _chickenDisplayObjects, displayObject );					if( chickenDisplayObject != null )					{						//chickenDisplayObject.removeEventListener( GameLevelEvent.ON_CHICKEN_COLLECTED, handleChickenCollected );						//chickenDisplayObject.removeEventListener( GameLevelEvent.ON_CHICKEN_OBTAINED_ANIMATION_COMPLETE, handleChickenObtainedAnimationComplete );						//chickenDisplayObject.removeEventListener( GameLevelEvent.REMOVE_FROM_GAME, handleChickenRemovedFromGame );						chickenDisplayObject.onCollected.remove( handleChickenCollected );						chickenDisplayObject.onObtainedAnimationCompleted.remove( handleChickenObtainedAnimationComplete );						chickenDisplayObject.onRemovedFromGame.remove( handleChickenRemovedFromGame );						MovieClip(chickenDisplayObject.contentClip.parent).removeChild( chickenDisplayObject.contentClip );						chickenDisplayObject.kill();												chickenDisplayObject = null;					}					_chickenDisplayObjectsLength = _chickenDisplayObjects.length;				}								protected function removeChickenToPool( displayObject:ChickenDisplayObject ):void				{					//trace( "removeChickenToPool();" );										var chickenDisplayObject:ChickenDisplayObject = VectorUtil.remove( _chickenDisplayObjects, displayObject );					if( chickenDisplayObject != null )					{						chickenDisplayObject.contentClip.visible = false;						chickenDisplayObject.reset();												_chickenDisplayObjectsPool.push( chickenDisplayObject );						_chickenDisplayObjectsPoolLength = _chickenDisplayObjectsPool.length;												_chickenDisplayObjectsLength = _chickenDisplayObjects.length;						chickenDisplayObject = null;					}				}							/** handleChickenCollected			  *	---------------------------------------------------------------------------- */				protected function handleChickenCollected( chickenDisplayObject:ChickenDisplayObject ):void				{					//trace( chickenDisplayObject );										var position:Point = UtilFunctions.localToLocal( chickenDisplayObject.contentClip, _gameboardReference.chickenAnimation_mc );					chickenDisplayObject.contentClip.x = position.x;					chickenDisplayObject.contentClip.y = position.y;					_gameboardReference.chickenAnimation_mc.addChild( chickenDisplayObject.contentClip );										chickenDisplayObject.playChickenObtainedAnimation();										//dispatchEvent( new GameLevelEvent(GameLevelEvent.ON_CHICKEN_COLLECTED, {chickenDisplayObject:chickenDisplayObject, chickenCount:chickenDisplayObject.chicken.value}) );										//removeChicken( chickenDisplayObject as ChickenDisplayObject );				}							/** handleChickenRemovedFromGame			  *	---------------------------------------------------------------------------- */				protected function handleChickenRemovedFromGame( chickenDisplayObject:ChickenDisplayObject ):void				{					//removeChickenToPool( chickenDisplayObject );					removeChicken( chickenDisplayObject );				}								protected function handleChickenObtainedAnimationComplete( chickenDisplayObject:ChickenDisplayObject ):void				{					//removeChickenToPool( chickenDisplayObject );					removeChicken( chickenDisplayObject );										//dispatchEvent( new GameLevelEvent(GameLevelEvent.ON_CHICKEN_OBTAINED_ANIMATION_COMPLETE, {chickenCount:chickenDisplayObject.chicken.value}) );					onChickenObtainedAnimationCompleted.dispatch( this, chickenDisplayObject.chicken.value );				}								protected function handleSlotMachineChickenAnimationTimerFired( timer:CustomTimer ):void				{					//trace( 'handleSlotMachineChickenAnimationTimerFired();' );										if( _slotMachineChickens.length > 0 )					{						_slotMachineChickens[0].contentClip.visible = true;						_slotMachineChickens[0].startSlotMachineSpawnAnimation();												_slotMachineChickens.splice( 0, 1 );					}										if( _slotMachineChickens.length == 0 )					{						_slotMachineChickenAnimationTimer.stop();					}				}						}	}