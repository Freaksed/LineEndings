/** GateDisplayObjectController  *	---------------------------------------------------------------------------- *  *	@desc:  *		Thils class controls all the weapons that are currently on the board  *		active or non active.  *	  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */	package com.boogabooga.controller.gamelevel	{		import flash.display.MovieClip;		import flash.events.*;		import flash.errors.*;		import flash.geom.Point;		import flash.utils.getDefinitionByName;		import flash.utils.getQualifiedClassName;		import flash.utils.getTimer;		import flash.utils.Timer;				import com.avatarlabs.utils.ArrayUtil;		import com.avatarlabs.utils.UtilFunctions;		import com.avatarlabs.utils.VectorUtil;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.sound.SoundEffectPlayer;		import org.osflash.signals.Signal;				import com.boogabooga.controller.gamelevel.DisplayObjectController;		import com.boogabooga.data.SettingsIndex;		import com.boogabooga.data.gamelevel.GameLevelDataIndex;		import com.boogabooga.data.gamelevel.Gate;		import com.boogabooga.events.GameLevelEvent;		import com.boogabooga.ui.gamelevel.Gameboard;		import com.boogabooga.ui.gamelevel.GameboardTile;		import com.boogabooga.ui.gamelevel.GateDisplayObject;		import com.boogabooga.utils.GameLevelUtil;				public class GateDisplayObjectController extends DisplayObjectController		{			protected var _gameboardController:GameboardController;			protected var _gateDisplayObjects:Vector.<GateDisplayObject>;			protected var _gateDisplayObjectsLength:int;						public var onGateDied:Signal;			public var onGateHit:Signal;			public var onGateRevived:Signal;						/** Constructor			  *	---------------------------------------------------------------------------- */			 	public function GateDisplayObjectController()				{					init();				}								public function set gameboardController( gc:GameboardController ):void { _gameboardController = gc; }							/** get gateDisplayObjects			  *	---------------------------------------------------------------------------- */				public function get gateDisplayObjects():Vector.<GateDisplayObject> { return _gateDisplayObjects; }											/** init			  *	---------------------------------------------------------------------------- */				override public function init():void				{					super.init();										_debug = true;										_gateDisplayObjects = new Vector.<GateDisplayObject>;					_gateDisplayObjectsLength = 0;										onGateDied = new Signal( GateDisplayObject );					onGateHit = new Signal();					onGateRevived = new Signal( GateDisplayObject );				}							/** pause			  *	---------------------------------------------------------------------------- */				override public function pause():void				{					if( _debug ) ConsoleBroadcaster.broadcast( "GateDisplayObjectController", "pause();" );										for( var i:int=0; i<_gateDisplayObjectsLength; ++i )					{						_gateDisplayObjects[i].pause();					}				}							/** unpause			  *	---------------------------------------------------------------------------- */				override public function unpause():void				{					if( _debug ) ConsoleBroadcaster.broadcast( "GateDisplayObjectController", "unpause();" );										for( var i:int=0; i<_gateDisplayObjectsLength; ++i )					{						_gateDisplayObjects[i].unpause();					}				}							/** kill			  *	---------------------------------------------------------------------------- */				override public function kill():void				{					/*					for( var i:uint=0; i<_gateDisplayObjects.length; ++i )					{						GateDisplayObject(_gateDisplayObjects[i]).kill();						_gateDisplayObjects[i] = null;					}					*/										while( _gateDisplayObjects.length > 0 )						removeGate( _gateDisplayObjects[0] );										_gateDisplayObjects = null;					_gateDisplayObjectsLength = 0;										_gameboardController = null;										onGateDied = null;					onGateHit = null;					onGateRevived = null;										super.kill();				}							/** updateOnEnterFrame			  *	---------------------------------------------------------------------------- *			  *	This updates the display object on every enter frame loop.			  *	---------------------------------------------------------------------------- */				public function updateOnEnterFrame():void				{					for( var i:int=0; i<_gateDisplayObjectsLength; ++i )					{						_gateDisplayObjects[i].updateOnEnterFrame();					}				}							/** addGate			  *	---------------------------------------------------------------------------- *			  *	Add a GateDisplayObject to the controller system.			  *	---------------------------------------------------------------------------- */				public function addGate( displayObject:GateDisplayObject ):void				{					_gateDisplayObjects.push( displayObject );					_gateDisplayObjectsLength = _gateDisplayObjects.length;										//displayObject.addEventListener( GameLevelEvent.DIE, handleGateDied, false, 0, true );					//displayObject.addEventListener( GameLevelEvent.HIT, handleGateHit, false, 0, true );					//displayObject.addEventListener( GameLevelEvent.ON_GATE_REVIVED, handleGateRevived, false, 0, true );					//displayObject.addEventListener( GameLevelEvent.ON_GATE_RECOVERED, handleGateRecovered, false, 0, true );					displayObject.onDied.add( handleGateDied );					displayObject.onHit.add( handleGateHit );					displayObject.onRevived.add( handleGateRevived );					displayObject.onRecovered.add( handleGateRecovered );					displayObject.positionIn2D.x = displayObject.currentTile.positionIn2D.x;					//displayObject.positionIn2D.y = GameLevelDataIndex.getInstance().boardMaxRows * GameLevelUtil.TILE_2D_HEIGHT;					displayObject.positionIn2D.y = displayObject.currentTile.positionIn2D.y;					displayObject.render();										//trace( "gate.x: "+displayObject.contentClip.x+", y: "+displayObject.contentClip.y );										//_gameboardReference.tilesContainer_mc.addChild( displayObject.contentClip );					_gameboardReference.displayLayerClip.addClipToLayerInBack( displayObject.contentClip, displayObject.currentTile.layerNumber );				}								public function reviveGate( displayObject:GateDisplayObject ):void				{									}							/** removeWeapon			  *	---------------------------------------------------------------------------- *			  *	Removes a GateDisplayObject from the controller system.			  *	---------------------------------------------------------------------------- */				public function removeGate( displayObject:GateDisplayObject ):void				{					/*					for( var i:uint=0; i<_gateDisplayObjects.length; ++i )					{						if( _gateDisplayObjects[i] == displayObject )						{							GateDisplayObject(_gateDisplayObjects[i]).removeEventListener( "onDie", handleGateDied );							GateDisplayObject(_gateDisplayObjects[i]).removeEventListener( "onHit", handleGateHit );							GateDisplayObject(_gateDisplayObjects[i]).kill();														MovieClip(_gateDisplayObjects[i].parent).removeChild( _gateDisplayObjects[i] );														_gateDisplayObjects[i] = null;							_gateDisplayObjects.splice( i, 1 );						}					}					*/										var gateDisplayObject:GateDisplayObject = VectorUtil.remove( _gateDisplayObjects, displayObject );					_gateDisplayObjectsLength = _gateDisplayObjects.length;					if( gateDisplayObject != null )					{						//gateDisplayObject.removeEventListener( GameLevelEvent.DIE, handleGateDied );						//gateDisplayObject.removeEventListener( GameLevelEvent.HIT, handleGateHit );						//gateDisplayObject.removeEventListener( GameLevelEvent.ON_GATE_RECOVERED, handleGateRecovered );						//gateDisplayObject.removeEventListener( GameLevelEvent.ON_GATE_REVIVED, handleGateRevived );						gateDisplayObject.onDied.remove( handleGateDied );						gateDisplayObject.onHit.remove( handleGateHit );						gateDisplayObject.onRevived.remove( handleGateRevived );						gateDisplayObject.onRecovered.remove( handleGateRecovered );						MovieClip(gateDisplayObject.contentClip.parent).removeChild( gateDisplayObject.contentClip );						gateDisplayObject.kill();						gateDisplayObject = null;					}				}							/** unflagHitByLaserAttack			  *	---------------------------------------------------------------------------- *			  *	Resets the flags that these gates have been hit by this laser enemy.			  *	---------------------------------------------------------------------------- 				public function unflagHitByLaserAttack():void				{					ConsoleBroadcaster.broadcast( "GateDisplayObjectController", "unflagHitByLaserAttack();" );										for( var i:int=0; i<_gateDisplayObjectsLength; ++i )					{						_gateDisplayObjects[i].resetHitByLaserEnemy();					}				}*/							/** handleGateDied			  *	---------------------------------------------------------------------------- *			  *	Removes weaponDisplayObject from the controller system.			  *	---------------------------------------------------------------------------- */				//protected function handleGateDied( event:GameLevelEvent ):void				protected function handleGateDied( gateDisplayObject:GateDisplayObject ):void				{					//dispatchEvent( new GameLevelEvent(GameLevelEvent.DIE, {gateDisplayObject:event.currentTarget as GateDisplayObject}) );					onGateDied.dispatch( gateDisplayObject );				}							/** handleGateHit			  *	---------------------------------------------------------------------------- *			  *	Removes weaponDisplayObject from the controller system.			  *	---------------------------------------------------------------------------- */				//protected function handleGateHit( event:GameLevelEvent ):void				protected function handleGateHit( gateDisplayObject:GateDisplayObject ):void				{					var randomIndex:int = int(Math.random()*3);										//trace( "random sound index: "+randomIndex );										switch( randomIndex )					{						case 0:							SoundEffectPlayer.getInstance().playLibrarySound( "sfx_fence_hit_1.wav", false, "sfx_fence_hit_1.wav", "sfx_fence_hit_1.wav", SoundEffectPlayer.SOUND_PLAYER_SFX );							break;												case 1:							SoundEffectPlayer.getInstance().playLibrarySound( "sfx_fence_hit_2.wav", false, "sfx_fence_hit_2.wav", "sfx_fence_hit_2.wav", SoundEffectPlayer.SOUND_PLAYER_SFX );							break;												case 2:							SoundEffectPlayer.getInstance().playLibrarySound( "sfx_fence_hit_3.wav", false, "sfx_fence_hit_3.wav", "sfx_fence_hit_3.wav", SoundEffectPlayer.SOUND_PLAYER_SFX );							break;					}										if( SettingsIndex.getInstance().getPerformanceItemToggled(SettingsIndex.PERFORMANCE_ITEM_HIT_PARTICLE) )					{						var globalPosition:Point = gateDisplayObject.contentClip.parent.localToGlobal( new Point(gateDisplayObject.contentClip.x, gateDisplayObject.contentClip.y) );												EventNotificationCenter.getInstance().sendSignal( "onPlayParticleAnimation", this, {particleCacheId:"WoodChip_Effect", globalPosition:globalPosition} );					}										//dispatchEvent( new GameLevelEvent(GameLevelEvent.HIT) );					onGateHit.dispatch();				}							/** handleGateRevived			  *	---------------------------------------------------------------------------- *			  *	Revives the gate when user uses healing weapon on a gate that's gone.			  *	---------------------------------------------------------------------------- */				//protected function handleGateRevived( event:GameLevelEvent ):void				protected function handleGateRevived( gateDisplayObject:GateDisplayObject ):void				{					//dispatchEvent( new GameLevelEvent(GameLevelEvent.ON_GATE_REVIVED, {gateDisplayObject:event.currentTarget as GateDisplayObject}) );					onGateRevived.dispatch( gateDisplayObject );				}								//protected function handleGateRecovered( event:GameLevelEvent ):void				protected function handleGateRecovered():void				{					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_fence_heal.wav", false, "sfx_fence_heal.wav", "sfx_fence_heal.wav", SoundEffectPlayer.SOUND_PLAYER_SFX );				}							/** checkIfGateIsAlive			  *	---------------------------------------------------------------------------- *			  *	Checks if the gate on a particular column is still alive.			  *	---------------------------------------------------------------------------- */				public function checkIfGateIsAlive( column:uint ):Boolean				{					for( var i:uint=0; i<_gateDisplayObjectsLength; ++i )					{						if( _gateDisplayObjects[i].currentTile.column == column )						{							return _gateDisplayObjects[i].alive;						}					}										return false;				}							/** getGateAt			  *	---------------------------------------------------------------------------- *			  *	Returns the gate on a certain column.			  *	---------------------------------------------------------------------------- */				public function getGateAt( column:int ):GateDisplayObject				{					for( var i:int=0; i<_gateDisplayObjectsLength; ++i )					{						if( _gateDisplayObjects[i].currentTile.column == column )							return _gateDisplayObjects[i];					}										return null;				}		}	}