/** WeaponDataController  *	---------------------------------------------------------------------------- *  *	@desc:  *		Data controller class to load weapon data from the server.  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */	package com.boogabooga.controller.gamelevel	{		import flash.events.Event;		import flash.events.EventDispatcher;		import flash.events.IOErrorEvent;		import flash.events.FullScreenEvent;		import flash.events.ProgressEvent;		import flash.external.ExternalInterface;		import flash.geom.Point;		import flash.net.URLLoader;		import flash.net.URLRequest;		import flash.net.URLRequestMethod;		import flash.net.URLVariables;				import com.adobe.serialization.json.JSONDecoder;		import com.adobe.serialization.json.JSONEncoder;		import com.avatarlabs.utils.cache.HashTable;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;				import com.boogabooga.controller.BaseDataController;		import com.boogabooga.data.StringsIndex;		import com.boogabooga.data.gamelevel.AbstractGameObject;		import com.boogabooga.data.gamelevel.AnimationObject;		import com.boogabooga.data.gamelevel.GameLevelDataIndex;		import com.boogabooga.data.gamelevel.Weapon;		import com.boogabooga.data.maingame.*;		import com.boogabooga.utils.GameLevelUtil;				public class WeaponDataController extends BaseDataController		{						/** Constructor			  *	---------------------------------------------------------------------- */				public function WeaponDataController()				{					super();										_debug = true;									}							/** loadWeapons			  *	---------------------------------------------------------------------- */				public function loadWeapons():void				{					var data:URLVariables = new URLVariables();						data.url = "weapons/getAllPublishedWeapons";										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleLoadAllPublishedWeaponsComplete, handleLoadAllPublishedWeaponsError );				}							/** handleLoadAllPublishedWeaponsComplete			  *	---------------------------------------------------------------------- */				private function handleLoadAllPublishedWeaponsComplete( event:Event ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "WeaponDataController", "handleLoadAllPublishedWeaponsComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleLoadAllPublishedWeaponsComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleLoadAllPublishedWeaponsError );										try					{						//trace( event.currentTarget.data );												var data = new JSONDecoder(event.currentTarget.data).getValue();												if( data.status )						{							var weapon:Weapon;							var animationObject:AnimationObject;							var weaponProperties:Array;							var j:int;							var customPositions:Array;							var customPosition:Point;							var flippedCustomPosition:Point;							var soundDataIds:Array;							var offset:Array;							//var statistic:String;														for( var i:uint=0; i<data.result.length; ++i )							{								weapon = new Weapon();								weapon.id = data.result[i]["id"];								weapon.name = data.result[i]["name"];								weapon.description = data.result[i]["description"];								//weapon.statistic = data.result[i]["statistic"];								weapon.consumable = data.result[i]["consumable"] == "1";								weapon.availableOnLevel = data.result[i]["available_on_level"];								weapon.projectileParticleEffect = data.result[i]['projectile_particle_effect'];								weapon.projectileEffectRange = data.result[i]['projectile_effect_range'];								weapon.deathParticleEffect = data.result[i]['death_particle_effect'];								weapon.deathEffectPower = data.result[i]['death_effect_power'];								weapon.deathEffectRange = data.result[i]['death_effect_range'];								weapon.health = data.result[i]["health"];								weapon.power = data.result[i]["power"];								weapon.rateOfFire = data.result[i]["rate_of_fire"];								weapon.range = data.result[i]["range"];								weapon.additionalAttackValue = data.result[i]["additional_attack_value"];								weapon.cost = data.result[i]["cost"];								weapon.earlyUnlockCost = data.result[i]["early_unlock_cost"];								weapon.usageOnUnlock = data.result[i]['usage_on_unlock'];								//weapon.linkageId = data.result[i]["linkage_id"];								weapon.assetURL = data.result[i]["asset_url"];								weapon.iconURL = data.result[i]["icon_url"];								weapon.cacheIconId = "Weapon_"+weapon.id+"_icon";								//weapon.createdBy = data.result[i]["created_by"];								weapon.otherWeaponId = data.result[i]['other_weapon_id'];								weapon.listed = (data.result[i]['listed'] == "1");								weapon.rollOverWidth = data.result[i]['rollover_dimension'].split(',')[0];								weapon.rollOverHeight = data.result[i]['rollover_dimension'].split(',')[1];																//trace( "weapon id: "+weapon.id );								//trace( "weapon..otherWeaponId; "+weapon.otherWeaponId );								//trace( "attack_properties: "+data.result[i]["attack_properties"] );								//trace( weapon.listed );																weaponProperties = new JSONDecoder(data.result[i]["attack_properties"]).getValue();								for( j=0; j<weaponProperties.length; ++j )								{									weapon.addAttackProperty( HashTable.getInstance().getHash(weaponProperties[j]) );								}																weaponProperties = new JSONDecoder(data.result[i]["projectile_properties"]).getValue();								for( j=0; j<weaponProperties.length; ++j )								{									weapon.addProjectileProperty( HashTable.getInstance().getHash(weaponProperties[j]) );								}																weaponProperties = new JSONDecoder(data.result[i]["death_properties"]).getValue();								for( j=0; j<weaponProperties.length; ++j )								{									weapon.addDeathProperty( HashTable.getInstance().getHash(weaponProperties[j]) );								}								//trace( "death_properties: "+data.result[i]['death_properties'] );								//trace( "weaponProperties: "+weaponProperties );																//trace( weapon.name+" has attackProperty of "+GameLevelUtil.ATTACK_PROPERTY_STONE+": "+weapon.hasAttackProperty( HashTable.getInstance().getHash(GameLevelUtil.ATTACK_PROPERTY_STONE) ) );								//trace( weapon.weaponProperties );																//trace( data.result[i]['up_animation_object_id'] );								//trace( data.result[i]['down_animation_object_id'] );																if( weapon.consumable )								{									for( j=0; j<data.result[i]['prices'].length; ++j )									{										weapon.prices.push({ id:data.result[i]['prices'][j]['id'], quantity:data.result[i]['prices'][j]['quantity'], price:data.result[i]['prices'][j]['price'] });									}								}																if( data.result[i]['hit_sound_ids'] != '0' )								{									weapon.hitSoundDataIds = data.result[i]['hit_sound_ids'].split('|');								}																if( data.result[i]['up_animation_object_id'] != null )								{									animationObject = new AnimationObject();									animationObject.id = int(data.result[i]['up_animation_object_id']);									animationObject.tileWidth = data.result[i]['up_animation_object_tile_width'];									animationObject.tileHeight = data.result[i]['up_animation_object_tile_height'];									animationObject.animationCount = data.result[i]['up_animation_object_animation_count'];									animationObject.animationEvent = data.result[i]['up_animation_object_animation_event'];									animationObject.assetURL = data.result[i]['up_animation_object_asset_url'];									animationObject.cacheId = "Weapon_"+weapon.id+"_"+AbstractGameObject.ATTACK_UP;									animationObject.soundEvent = data.result[i]['up_animation_object_sound_event'];									animationObject.idleFrames = data.result[i]['up_animation_object_idle_frames'];																		offset = data.result[i]['up_animation_object_offset'].split(',');									animationObject.offset.x = Number(offset[0]);									animationObject.offset.y = Number(offset[1]);																		if( data.result[i]['up_animation_object_sound_ids'] != '0' )									{										soundDataIds = data.result[i]['up_animation_object_sound_ids'].split('|');										for( j=0; j<soundDataIds.length; ++j )										{											animationObject.soundDataIds.push( Number(soundDataIds[j]) );										}									}																		customPositions = data.result[i]['up_animation_object_custom_position'].split('|');									for( j=0; j<customPositions.length; ++j )									{										customPosition = new Point();										customPosition.x = customPositions[j].split(',')[0];										customPosition.y = customPositions[j].split(',')[1];																				flippedCustomPosition = new Point();										flippedCustomPosition.x = -customPosition.x;										flippedCustomPosition.y = customPosition.y;																				if( weapon.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_CATAPULT_INDEX) )										{											//trace( 'customPosition: '+customPosition );											//trace( 'flippedCustomPosition: '+flippedCustomPosition );																						customPosition = GameLevelUtil.getPositionIn2D( customPosition );											flippedCustomPosition = GameLevelUtil.getPositionIn2D( flippedCustomPosition );																						//trace( 'weapon.id: '+weapon.id );											//trace( 'customPosition: '+customPosition );											//trace( 'flippedCustomPosition: '+flippedCustomPosition );										}																				animationObject.customPositions.push( customPosition );										animationObject.flippedCustomPositions.push( flippedCustomPosition );																			}									animationObject.customPositions.fixed = true;																		weapon.upAnimationObject = animationObject;									//trace( "upAnimationObject.id: "+animationObject.id );								}																if( data.result[i]['down_animation_object_id'] != null )								{									animationObject = new AnimationObject();									animationObject.id = data.result[i]['down_animation_object_id'];									animationObject.tileWidth = data.result[i]['down_animation_object_tile_width'];									animationObject.tileHeight = data.result[i]['down_animation_object_tile_height'];									animationObject.animationCount = data.result[i]['down_animation_object_animation_count'];									animationObject.animationEvent = data.result[i]['down_animation_object_animation_event'];									animationObject.assetURL = data.result[i]['down_animation_object_asset_url'];									animationObject.cacheId = "Weapon_"+weapon.id+"_"+AbstractGameObject.ATTACK_DOWN;									animationObject.soundEvent = data.result[i]['down_animation_object_sound_event'];									animationObject.idleFrames = data.result[i]['down_animation_object_idle_frames'];																		offset = data.result[i]['down_animation_object_offset'].split(',');									animationObject.offset.x = Number(offset[0]);									animationObject.offset.y = Number(offset[1]);																		if( data.result[i]['down_animation_object_sound_ids'] != '0' )									{										soundDataIds = data.result[i]['down_animation_object_sound_ids'].split('|');										for( j=0; j<soundDataIds.length; ++j )										{											animationObject.soundDataIds.push( Number(soundDataIds[j]) );										}									}																		customPositions = data.result[i]['down_animation_object_custom_position'].split('|');									for( j=0; j<customPositions.length; ++j )									{										customPosition = new Point();										customPosition.x = customPositions[j].split(',')[0];										customPosition.y = customPositions[j].split(',')[1];																				flippedCustomPosition = new Point();										flippedCustomPosition.x = -customPosition.x;										flippedCustomPosition.y = customPosition.y;																				if( weapon.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_CATAPULT_INDEX) )										{											customPosition = GameLevelUtil.getPositionIn2D( customPosition );											flippedCustomPosition = GameLevelUtil.getPositionIn2D( flippedCustomPosition );										}																				animationObject.customPositions.push( customPosition );										animationObject.flippedCustomPositions.push( flippedCustomPosition );									}									animationObject.customPositions.fixed = true;																		weapon.downAnimationObject = animationObject;								}																if( data.result[i]['death_animation_object_id'] != null )								{									animationObject = new AnimationObject();									animationObject.id = data.result[i]['death_animation_object_id'];									animationObject.tileWidth = data.result[i]['death_animation_object_tile_width'];									animationObject.tileHeight = data.result[i]['death_animation_object_tile_height'];									animationObject.animationCount = data.result[i]['death_animation_object_animation_count'];									animationObject.animationEvent = data.result[i]['death_animation_object_animation_event'];									animationObject.assetURL = data.result[i]['death_animation_object_asset_url'];									animationObject.cacheId = 'Weapon_'+weapon.id+'_'+AbstractGameObject.DEATH_UP;									animationObject.soundEvent = data.result[i]['death_animation_object_sound_event'];																		offset = data.result[i]['death_animation_object_offset'].split(',');									animationObject.offset.x = Number(offset[0]);									animationObject.offset.y = Number(offset[1]);																		if( data.result[i]['death_animation_object_sound_ids'] != '0' )									{										soundDataIds = data.result[i]['death_animation_object_sound_ids'].split('|');										for( j=0; j<soundDataIds.length; ++j )										{											animationObject.soundDataIds.push( Number(soundDataIds[j]) );										}									}																		weapon.deathAnimationObject = animationObject;								}																if( data.result[i]['additional_attack_up_animation_object_id'] != null )								{									animationObject = new AnimationObject();									animationObject.id = data.result[i]['additional_attack_up_animation_object_id'];									animationObject.tileWidth = data.result[i]['additional_attack_up_animation_object_tile_width'];									animationObject.tileHeight = data.result[i]['additional_attack_up_animation_object_tile_height'];									animationObject.animationCount = data.result[i]['additional_attack_up_animation_object_animation_count'];									animationObject.animationEvent = data.result[i]['additional_attack_up_animation_object_animation_event'];									animationObject.assetURL = data.result[i]['additional_attack_up_animation_object_asset_url'];									animationObject.cacheId = "Weapon_"+weapon.id+"_"+AbstractGameObject.ADDITIONAL_ATTACK_UP;									animationObject.soundEvent = data.result[i]['additional_attack_up_animation_object_sound_event'];																		offset = data.result[i]['additional_attack_up_animation_object_offset'].split(',');									animationObject.offset.x = Number(offset[0]);									animationObject.offset.y = Number(offset[1]);																		if( data.result[i]['additional_attack_up_animation_object_sound_ids'] != '0' )									{										soundDataIds = data.result[i]['additional_attack_up_animation_object_sound_ids'].split('|');										for( j=0; j<soundDataIds.length; ++j )										{											animationObject.soundDataIds.push( Number(soundDataIds[j]) );										}									}																		weapon.additionalAttackUpAnimationObject = animationObject;								}																if( data.result[i]['additional_attack_down_animation_object_id'] != null )								{									animationObject = new AnimationObject();									animationObject.id = data.result[i]['additional_attack_down_animation_object_id'];									animationObject.tileWidth = data.result[i]['additional_attack_down_animation_object_tile_width'];									animationObject.tileHeight = data.result[i]['additional_attack_down_animation_object_tile_height'];									animationObject.animationCount = data.result[i]['additional_attack_down_animation_object_animation_count'];									animationObject.animationEvent = data.result[i]['additional_attack_down_animation_object_animation_event'];									animationObject.assetURL = data.result[i]['additional_attack_down_animation_object_asset_url'];									animationObject.cacheId = "Weapon_"+weapon.id+"_"+AbstractGameObject.ADDITIONAL_ATTACK_DOWN;									animationObject.soundEvent = data.result[i]['additional_attack_down_animation_object_sound_event'];																		offset = data.result[i]['additional_attack_down_animation_object_offset'].split(',');									animationObject.offset.x = Number(offset[0]);									animationObject.offset.y = Number(offset[1]);																		if( data.result[i]['additional_attack_down_animation_object_sound_ids'] != '0' )									{										soundDataIds = data.result[i]['additional_attack_down_animation_object_sound_ids'].split('|');										for( j=0; j<soundDataIds.length; ++j )										{											animationObject.soundDataIds.push( Number(soundDataIds[j]) );										}									}																		weapon.additionalAttackDownAnimationObject = animationObject;								}																if( data.result[i]['switch_weapon_one_animation_object_id'] != null )								{									//trace( 'add switch weapon one animation object id' );									animationObject = new AnimationObject();									animationObject.id = data.result[i]['switch_weapon_one_animation_object_id'];									animationObject.tileWidth = data.result[i]['switch_weapon_one_animation_object_tile_width'];									animationObject.tileHeight = data.result[i]['switch_weapon_one_animation_object_tile_height'];									animationObject.animationCount = data.result[i]['switch_weapon_one_animation_object_animation_count'];									animationObject.animationEvent = data.result[i]['switch_weapon_one_animation_object_animation_event'];									animationObject.assetURL = data.result[i]['switch_weapon_one_animation_object_asset_url'];									animationObject.cacheId = "Weapon_"+weapon.id+"_"+AbstractGameObject.SWITCH_WEAPON_ONE;									animationObject.soundEvent = data.result[i]['switch_weapon_one_animation_object_sound_event'];									if( data.result[i]['switch_weapon_one_animation_object_sound_ids'] != '0' )									{										soundDataIds = data.result[i]['switch_weapon_one_animation_object_sound_ids'].split('|');										for( j=0; j<soundDataIds.length; ++j )										{											animationObject.soundDataIds.push( Number(soundDataIds[j]) );										}									}																		weapon.switchWeaponOneAnimationObject = animationObject;								}																if( data.result[i]['switch_weapon_two_animation_object_id'] != null )								{									//trace( 'add switch weapon two animation object id' );									animationObject = new AnimationObject();									animationObject.id = data.result[i]['switch_weapon_two_animation_object_id'];									animationObject.tileWidth = data.result[i]['switch_weapon_two_animation_object_tile_width'];									animationObject.tileHeight = data.result[i]['switch_weapon_two_animation_object_tile_height'];									animationObject.animationCount = data.result[i]['switch_weapon_two_animation_object_animation_count'];									animationObject.animationEvent = data.result[i]['switch_weapon_two_animation_object_animation_event'];									animationObject.assetURL = data.result[i]['switch_weapon_two_animation_object_asset_url'];									animationObject.cacheId = "Weapon_"+weapon.id+"_"+AbstractGameObject.SWITCH_WEAPON_TWO;									animationObject.soundEvent = data.result[i]['switch_weapon_two_animation_object_sound_event'];									if( data.result[i]['switch_weapon_two_animation_object_sound_ids'] != '0' )									{										soundDataIds = data.result[i]['switch_weapon_two_animation_object_sound_ids'].split('|');										for( j=0; j<soundDataIds.length; ++j )										{											animationObject.soundDataIds.push( Number(soundDataIds[j]) );										}									}																		weapon.switchWeaponTwoAnimationObject = animationObject;								}																//trace( "weapon.upAnimationObject.id: "+weapon.upAnimationObject.id );								//trace( "weapon.downAnimationObject.id: "+weapon.downAnimationObject.id );																weapon.oneDirectionOnly = (weapon.upAnimationObject.id == weapon.downAnimationObject.id);								//if( weapon.upAnimationObject.id == weapon.downAnimationObject.id )									//weapon.oneDirectionOnly = true;																//trace( "up_animation_object is null ? "+(data.result[i]['up_animation_object_id'] == null) );								//trace( "down_animation_object is null ? "+(data.result[i]['down_animation_object_id'] == null) );								//trace( weapon.name+" is consumable ? "+weapon.consumable );																weapon.collectUniqueSoundDataIds();																GameLevelDataIndex.getInstance().addWeapon( weapon );							}														dispatchEvent( new CustomEvent("onComplete") );						}						else						{							dispatchEvent( new CustomEvent("onError") );						}					}					catch( e:Error )					{						ConsoleBroadcaster.broadcast( "WeaponDataController", "Error in parsing data " );												dispatchEvent( new CustomEvent("onError") );					}									}							/** handleLoadAllPublishedWeaponsError			  *	---------------------------------------------------------------------- */				private function handleLoadAllPublishedWeaponsError( event:IOErrorEvent ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "WeaponDataController", "handleLoadAllPublishedWeaponsError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleLoadAllPublishedWeaponsComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleLoadAllPublishedWeaponsError );										dispatchEvent( new CustomEvent("onError") );				}							/** addUnlockedWeapons			  *	---------------------------------------------------------------------- */				public function addUnlockedWeapons( userId:int, weaponIds:Array ):void				{					var dataObject:Object = new Object();						dataObject.user_id = userId;						dataObject.weapon_ids = weaponIds;										var data:URLVariables = new URLVariables();						data.url = "weapons/addUnlockedWeapons";						data.data = new JSONEncoder(dataObject).getString();										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleAddUnlockedWeaponsComplete, handleAddUnlockedWeaponsError );				}							/** handleAddUnlockedWeaponsComplete			  *	---------------------------------------------------------------------- */				private function handleAddUnlockedWeaponsComplete( event:Event ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "WeaponDataController", "handleAddUnlockedWeaponsComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleAddUnlockedWeaponsComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleAddUnlockedWeaponsError );										try					{						var data = new JSONDecoder(event.currentTarget.data).getValue();												if( data.status )						{							dispatchEvent( new CustomEvent("onComplete", {unlockedWeapons:data.unlocked_weapons}) );						}						else						{							dispatchEvent( new CustomEvent("onError") );						}					}					catch( e:Error )					{						ConsoleBroadcaster.broadcast( "WeaponDataController", "Error in parsing data, "+event.currentTarget.data );						dispatchEvent( new CustomEvent("onError") );					}				}							/** handleAddUnlockedWeaponsError			  *	---------------------------------------------------------------------- */				private function handleAddUnlockedWeaponsError( event:IOErrorEvent ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "WeaponDataController", "handleAddUnlockedWeaponsError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleAddUnlockedWeaponsComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleAddUnlockedWeaponsError );										dispatchEvent( new CustomEvent("onError") );				}							/** loadUnlockedWeapons			  *	---------------------------------------------------------------------- */				public function loadUnlockedWeapons( userId:int ):void				{					var dataObject:Object = new Object();						dataObject.user_id = userId;										var data:URLVariables = new URLVariables();						data.url = "weapons/getUnlockedWeapons";						data.data = new JSONEncoder(dataObject).getString();										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleLoadUnlockedWeaponsComplete, handleLoadUnlockedWeaponsError );				}							/** handleLoadUnlockedWeaponsComplete			  *	---------------------------------------------------------------------- */				private function handleLoadUnlockedWeaponsComplete( event:Event ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "WeaponDataController", "handleLoadUnlockedWeaponsComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleLoadUnlockedWeaponsComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleLoadUnlockedWeaponsError );										try					{						//trace( "data: "+event.currentTarget.data );												var data = new JSONDecoder(event.currentTarget.data).getValue();												if( data.status )						{							//var result:Array = data.result;							dispatchEvent( new CustomEvent("onComplete", {result:data.result}) );						}						else						{							dispatchEvent( new CustomEvent("onError") );						}					}					catch( e:Error )					{						ConsoleBroadcaster.broadcast( "WeaponDataController", "Error in parsing data, "+event.currentTarget.data );						dispatchEvent( new CustomEvent("onError") );					}				}							/** handleLoadUnlockedWeaponsError			  *	---------------------------------------------------------------------- */				private function handleLoadUnlockedWeaponsError( event:IOErrorEvent ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "WeaponDataController", "handleLoadUnlockedWeaponsError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleLoadUnlockedWeaponsComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleLoadUnlockedWeaponsError );										dispatchEvent( new CustomEvent("onError") );				}							/** updateUseCount			  *	---------------------------------------------------------------------- */				public function updateUseCount( userId:int, weaponId:int, useCount:int ):void				{					var dataObject:Object = new Object();						dataObject.user_id = userId;						dataObject.weapon_id = weaponId;						dataObject.use_count = useCount;										var data:URLVariables = new URLVariables();						data.url = "weapons/updateUseCount";						data.data = new JSONEncoder(dataObject).getString();										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleUpdateUseCountComplete, handleUpdateUseCountError );				}							/** handleUpdateUseCountComplete			  *	---------------------------------------------------------------------- */				private function handleUpdateUseCountComplete( event:Event ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "WeaponDataController", "handleUpdateUseCountComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleUpdateUseCountComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleUpdateUseCountError );										trace( event.currentTarget.data );										try					{						var data = new JSONDecoder(event.currentTarget.data).getValue();												if( data.status )						{							dispatchEvent( new CustomEvent("onComplete", {result:data.result}) );						}					}					catch( e:Error )					{						ConsoleBroadcaster.broadcast( "WeaponDataController", "Error in parsing data, "+event.currentTarget.data );						dispatchEvent( new CustomEvent("onError") );					}				}							/** handleUpdateUseCountError			  *	---------------------------------------------------------------------- */				private function handleUpdateUseCountError( event:IOErrorEvent ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "WeaponDataController", "handleUpdateUseCountError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleUpdateUseCountComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleUpdateUseCountError );										dispatchEvent( new CustomEvent("onError") );				}								public function getUseCount( userId:int ):void				{					var dataObject:Object = new Object();						dataObject.user_id = userId;											var data:URLVariables = new URLVariables();						data.url = "weapons/getUseCount";						data.data = new JSONEncoder(dataObject).getString();										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleGetUseCountComplete, handleGetUseCountError );				}								protected function handleGetUseCountComplete( event:Event ):void				{					ConsoleBroadcaster.broadcast( "WeaponDataController", "handleGetUseCountComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleGetUseCountComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleGetUseCountError );										try					{						var data = new JSONDecoder(event.currentTarget.data).getValue();												dispatchEvent( new CustomEvent("onComplete", {result:data.result}) );					}					catch( e:Error )					{						ConsoleBroadcaster.broadcast( "WeaponDataController", "Error in parsing data, "+e.message );						ConsoleBroadcaster.broadcast( "WeaponDataController", "data "+event.currentTarget.data );						dispatchEvent( new CustomEvent("onError") );					}				}								protected function handleGetUseCountError( event:IOErrorEvent ):void				{					ConsoleBroadcaster.broadcast( "WeaponDataController", "handleGetUseCountError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleGetUseCountComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleGetUseCountError );										dispatchEvent( new CustomEvent("onError") );				}		}			}