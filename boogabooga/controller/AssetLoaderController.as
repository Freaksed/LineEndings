/** AssetLoaderController  *	---------------------------------------------------------------------------- *  *	@desc:  *		Data controller class to load enemy data from the server.  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */	package com.boogabooga.controller	{		import flash.display.Bitmap;		import flash.display.BitmapData;		import flash.events.Event;		import flash.events.EventDispatcher;		import flash.events.IOErrorEvent;		import flash.events.FullScreenEvent;		import flash.events.ProgressEvent;		import flash.external.ExternalInterface;		import flash.net.URLLoader;		import flash.net.URLRequest;		import flash.net.URLRequestMethod;		import flash.net.URLVariables;				import com.adobe.serialization.json.JSONDecoder;		import com.adobe.serialization.json.JSONEncoder;		import com.avatarlabs.utils.ArrayUtil;		import com.avatarlabs.utils.cache.AssetLoader;		import com.avatarlabs.utils.cache.BitmapDataManager;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.AssetLoaderEvent;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.hydrotik.queueloader.QueueLoaderConst;				import com.boogabooga.controller.BaseDataController;		import com.boogabooga.data.SettingsIndex;		import com.boogabooga.data.gamelevel.*;		import com.boogabooga.data.maingame.*;				public class AssetLoaderController extends BaseDataController		{			protected var _assets:Array;			protected var _assetLoader:AssetLoader;						protected var _loading:Boolean;						/** Constructor			  *	---------------------------------------------------------------------- */				public function AssetLoaderController()				{					super();										_debug = true;					_loading = false;										_assets = new Array();				}								public function get isLoading():Boolean { return _assetLoader.isLoading; }							/** initAssetLoader			  *	---------------------------------------------------------------------------- *			  *	Initializes asset loader if it's null			  *	---------------------------------------------------------------------------- */			 	protected function initAssetLoader():void				{					if( _assetLoader == null )					{						_assetLoader = new AssetLoader();						_assetLoader.autoKill = true;						_assetLoader.addEventListener( AssetLoaderEvent.START, handleLoadAssetStart );						_assetLoader.addEventListener( AssetLoaderEvent.PROGRESS, handleLoadAssetProgress );						_assetLoader.addEventListener( AssetLoaderEvent.COMPLETE, handleLoadAssetComplete );						_assetLoader.addEventListener( AssetLoaderEvent.ERROR, handleLoadAssetError );						_assetLoader.addEventListener( AssetLoaderEvent.ITEM_COMPLETE, handleLoadAssetItemComplete );					}				}							/** addBitmapToLoad			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */			 	public function addBitmapToLoad( id:String, url:String ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "AssetLoaderController", "addBitmapToLoad("+id+", "+url+");" );					//trace( "BitmapDataManager.getInstance().getBitmapData("+id+"): "+BitmapDataManager.getInstance().getBitmapData(id) );										if( BitmapDataManager.getInstance().getBitmapData(id) == null )					{						//_assets.push( {id:id, url:url} );												if( _assetLoader ==  null )							initAssetLoader();												_assetLoader.addAssetToLoad( id, SettingsIndex.getInstance().contentURL+url );					}				}							/** loadAssets			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */			 	public function loadAssets( assets:Array ):void				{					if( _assetLoader == null )						initAssetLoader();										//trace( assets.length );										for( var i:uint=0; i<assets.length; ++i )					{						//trace( assets[i].id );						//trace( assets[i].url );						_assetLoader.addAssetToLoad( assets[i].id, SettingsIndex.getInstance().contentURL+assets[i].url );					}										trace( "assetLoader.isLoading: "+_assetLoader.isLoading );										startLoadAssets();				}							/** startLoadBitmaps			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */			 	public function startLoadAssets():void				{					if( _debug ) ConsoleBroadcaster.broadcast( "AssetLoaderController", "startLoadAssets();" );										trace( _assets.length );					/*					for( var i:uint=0; i<_assets.length; ++i )					{						trace( _assets[i].id );						trace( _assets[i].url );						_assetLoader.addAssetToLoad( _assets[i].id, SettingsIndex.getInstance().contentURL+_assets[i].url );					}					*/					if( !_assetLoader.isLoading )						_assetLoader.startLoadAssets();				}							/** handleLoadAssetStart			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */			 	protected function handleLoadAssetStart( event:AssetLoaderEvent ):void				{									}							/** handleLoadAssetProgress			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */			 	protected function handleLoadAssetProgress( event:AssetLoaderEvent ):void				{					//ConsoleBroadcaster.broadcast( "AssetLoaderController", "handleLoadAssetProgress("+event.percentage+");" );					dispatchEvent( new AssetLoaderEvent(AssetLoaderEvent.PROGRESS, event.bytesLoaded, event.bytesTotal, event.percentage) );				}							/** handleLoadAssetComplete			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */			 	protected function handleLoadAssetComplete( event:AssetLoaderEvent ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "AssetLoaderController", "handleLoadAssetComplete();" );					/*					_assetLoader.removeEventListener( AssetLoaderEvent.PROGRESS, handleLoadAssetProgress );					_assetLoader.removeEventListener( AssetLoaderEvent.COMPLETE, handleLoadAssetComplete );					_assetLoader.removeEventListener( AssetLoaderEvent.ITEM_COMPLETE, handleLoadAssetItemComplete );					_assetLoader.removeEventListener( AssetLoaderEvent.ERROR, handleLoadAssetError );					_assetLoader = null;					*/					ArrayUtil.removeAll( _assets );										dispatchEvent( new AssetLoaderEvent(AssetLoaderEvent.COMPLETE) );				}							/** handleLoadAssetItemComplete			  *	---------------------------------------------------------------------------- *			  *	When a bitmap asset is loaded, BitmapDataManager will add it to its cache.			  *	---------------------------------------------------------------------------- */			 	protected function handleLoadAssetItemComplete( event:AssetLoaderEvent ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "AssetLoaderController", "handleLoadAssetItemComplete("+event.customParameters.id+", "+event.customParameters.fileType+");" );					//trace( "id: "+event.customParameters.id );					//trace( "content: "+event.customParameters.content );															if( event.customParameters.fileType == QueueLoaderConst.FILE_IMAGE )					{						BitmapDataManager.getInstance().addBitmapData( event.customParameters.id, Bitmap(event.customParameters.content).bitmapData );					}										dispatchEvent( new AssetLoaderEvent(AssetLoaderEvent.ITEM_COMPLETE, event.bytesLoaded, event.bytesTotal, event.percentage, event.customParameters) );				}							/** handleLoadAssetError			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */			 	protected function handleLoadAssetError( event:AssetLoaderEvent ):void				{					//ConsoleBroadcaster.broadcast( "AssetLoaderController", "handleLoadAssetError();" );										dispatchEvent( new AssetLoaderEvent(AssetLoaderEvent.ERROR, 0, 0, event.percentage, event.customParameters) );				}						}			}