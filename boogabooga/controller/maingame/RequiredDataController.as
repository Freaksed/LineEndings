/** RequiredDataController  *	---------------------------------------------------------------------------- *  *	@desc:  *		Data controller class to load required data for the game level  *		from the server.  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */	package com.boogabooga.controller.maingame	{		import flash.events.Event;		import flash.events.EventDispatcher;		import flash.events.IOErrorEvent;		import flash.events.FullScreenEvent;		import flash.events.ProgressEvent;		import flash.external.ExternalInterface;		import flash.net.URLLoader;		import flash.net.URLRequest;		import flash.net.URLRequestMethod;		import flash.net.URLVariables;				import com.adobe.serialization.json.JSONDecoder;		import com.adobe.serialization.json.JSONEncoder;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;				import com.boogabooga.controller.BaseDataController;		import com.boogabooga.controller.gamelevel.*;		import com.boogabooga.controller.maingame.*;		import com.boogabooga.data.gamelevel.GameLevelDataIndex;		import com.boogabooga.data.gamelevel.Weapon;		import com.boogabooga.data.maingame.*;		import com.boogabooga.data.gamelevel.AnimationObject;		import com.boogabooga.data.gamelevel.GameLevel;		import com.boogabooga.data.gamelevel.SlotMachine;		import com.boogabooga.data.gamelevel.EnvironmentObject;		import com.boogabooga.data.gamelevel.DiggingMap;		import com.boogabooga.data.gamelevel.Villager;				public class RequiredDataController extends BaseDataController		{						/** Constructor			  *	---------------------------------------------------------------------- */				public function RequiredDataController()				{					super();										_debug = true;									}											/**	******************************************* *			  * Loading Required Game Level Data			  *	******************************************* */			 				/** loadRequiredData			  *	---------------------------------------------------------------------- */				public function loadRequiredData():void				{					if( GameLevelDataIndex.getInstance().enemiesCount == 0 )					{						var enemyDataController:EnemyDataController = new EnemyDataController();							enemyDataController.addEventListener( "onComplete", handleLoadAllEnemiesComplete );							enemyDataController.addEventListener( "onError", handleLoadAllEnemiesError );							enemyDataController.loadEnemies();					}					else if( GameLevelDataIndex.getInstance().godsCount == 0 )					{						loadGodsData();					}					else if( GameLevelDataIndex.getInstance().weaponsCount == 0 )					{						loadWeaponsData();					}					else					{						loadEnvironmentsData();					}									}							/** handleLoadAllEnemiesComplete			  *	---------------------------------------------------------------------- */				private function handleLoadAllEnemiesComplete( event:CustomEvent ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "RequiredDataController", "handleLoadAllEnemiesComplete();" );										event.currentTarget.removeEventListener( "onComplete", handleLoadAllEnemiesComplete );					event.currentTarget.removeEventListener( "onError", handleLoadAllEnemiesError );										if( GameLevelDataIndex.getInstance().godsCount == 0 )					{						loadGodsData();					}					else if( GameLevelDataIndex.getInstance().weaponsCount == 0 )					{						loadWeaponsData();					}					else					{						loadEnvironmentsData();					}				}							/** handleLoadAllEnemiesError			  *	---------------------------------------------------------------------- */				private function handleLoadAllEnemiesError( event:CustomEvent ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "RequiredDataController", "handleLoadAllEnemiesError();" );										event.currentTarget.removeEventListener( "onComplete", handleLoadAllEnemiesComplete );					event.currentTarget.removeEventListener( "onError", handleLoadAllEnemiesError );										dispatchEvent( new CustomEvent("onError") );				}							/** loadGodsData			  *	---------------------------------------------------------------------- */				protected function loadGodsData():void				{					var godDataController:GodDataController = new GodDataController();						godDataController.addEventListener( "onComplete", handleLoadAllGodsComplete );						godDataController.addEventListener( "onError", handleLoadAllGodsError );						godDataController.loadGods();				}							/** handleLoadAllGodsComplete			  *	---------------------------------------------------------------------- */				private function handleLoadAllGodsComplete( event:CustomEvent ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "RequiredDataController", "handleLoadAllGodsComplete();" );										event.currentTarget.removeEventListener( "onComplete", handleLoadAllGodsComplete );					event.currentTarget.removeEventListener( "onError", handleLoadAllGodsError );										if( GameLevelDataIndex.getInstance().weaponsCount == 0 )					{						loadWeaponsData();					}					else					{						loadEnvironmentsData();					}				}							/** handleLoadAllGodsError			  *	---------------------------------------------------------------------- */				private function handleLoadAllGodsError( event:CustomEvent ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "RequiredDataController", "handleLoadAllGodsError();" );										event.currentTarget.removeEventListener( "onComplete", handleLoadAllGodsComplete );					event.currentTarget.removeEventListener( "onError", handleLoadAllGodsError );										dispatchEvent( new CustomEvent("onError") );				}							/** loadWeaponsData			  *	---------------------------------------------------------------------- */				protected function loadWeaponsData():void				{					var weaponDataController:WeaponDataController = new WeaponDataController();						weaponDataController.addEventListener( "onComplete", handleLoadAllWeaponsComplete );						weaponDataController.addEventListener( "onError", handleLoadAllWeaponsError );						weaponDataController.loadWeapons();				}							/** handleLoadAllWeaponsComplete			  *	---------------------------------------------------------------------- */				private function handleLoadAllWeaponsComplete( event:CustomEvent ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "RequiredDataController", "handleLoadAllWeaponsComplete();" );										event.currentTarget.removeEventListener( "onComplete", handleLoadAllWeaponsComplete );					event.currentTarget.removeEventListener( "onError", handleLoadAllWeaponsError );										loadEnvironmentsData();										//dispatchEvent( new CustomEvent("onComplete") );					/*					trace( GameLevelDataIndex.getInstance().weapons );					trace( GameLevelDataIndex.getInstance().getWeapon(2).name );										for( var i in GameLevelDataIndex.getInstance().weapons )					{						trace( GameLevelDataIndex.getInstance().weapons[i].id );						trace( GameLevelDataIndex.getInstance().weapons[i].name );					}					*/				}							/** handleLoadAllWeaponsError			  *	---------------------------------------------------------------------- */				private function handleLoadAllWeaponsError( event:CustomEvent ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "RequiredDataController", "handleLoadAllWeaponsError();" );										event.currentTarget.removeEventListener( "onComplete", handleLoadAllWeaponsComplete );					event.currentTarget.removeEventListener( "onError", handleLoadAllWeaponsError );										dispatchEvent( new CustomEvent("onError") );				}								protected function loadEnvironmentsData():void				{					var environmentDataController:EnvironmentDataController = new EnvironmentDataController();						environmentDataController.addEventListener( "onComplete", handleLoadEnvironmentsComplete );						environmentDataController.addEventListener( "onError", handleLoadEnvironmentsError );						environmentDataController.loadEnvironments();				}							/** handleLoadEnvironmentsComplete			  *	---------------------------------------------------------------------- */				private function handleLoadEnvironmentsComplete( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleLoadEnvironmentsComplete );					event.currentTarget.removeEventListener( "onError", handleLoadEnvironmentsError );										loadExtraAnimationObjects();				}							/** handleLoadEnvironmentsError			  *	---------------------------------------------------------------------- */				private function handleLoadEnvironmentsError( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleLoadEnvironmentsComplete );					event.currentTarget.removeEventListener( "onError", handleLoadEnvironmentsError );										dispatchEvent( new CustomEvent("onError") );				}							/** loadExtraAnimationObjects			  *	---------------------------------------------------------------------- */				protected function loadExtraAnimationObjects():void				{					var data:URLVariables = new URLVariables();						data.url = "extraanimationobjects/getExtraAnimationObjects";										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleLoadExtraAnimationObjectsComplete, handleLoadExtraAnimationObjectsError );				}							/** handleLoadExtraAnimationObjectsComplete			  *	---------------------------------------------------------------------- */				private function handleLoadExtraAnimationObjectsComplete( event:Event ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "RequiredDataController", "handleLoadExtraAnimationObjectsComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleLoadExtraAnimationObjectsComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleLoadExtraAnimationObjectsError );										//trace( event.currentTarget.data );										try					{						var data = new JSONDecoder(event.currentTarget.data).getValue();												if( data.status )						{							var result:Array = data.result;							//var chickens:Array = data.chickens;							//var particles:Array = data.particles;							var animationObject:AnimationObject;														for( var i:int=0; i<result.length; ++i )							{								animationObject = new AnimationObject();								animationObject.id = result[i]['animation_object_id'];								animationObject.cacheId = result[i]['name'];								animationObject.tileWidth = result[i]['tile_width'];								animationObject.tileHeight = result[i]['tile_height'];								animationObject.animationCount = result[i]['animation_count'];								animationObject.animationEvent = result[i]['animation_event'];								animationObject.assetURL = result[i]['asset_url'];																GameLevelDataIndex.getInstance().addAnimationObject( animationObject );																trace( "animationObject name: "+animationObject.cacheId );							}							/*							var villager:Villager;														villager = new Villager();							villager.id = 1;							villager.regularAnimationObject = GameLevelDataIndex.getInstance().getAnimationObjectByCacheId( "VillagerOne_Reg" );							villager.happyAnimationObject = GameLevelDataIndex.getInstance().getAnimationObjectByCacheId( "VillagerOne_Happy" );							villager.prayAnimationObject = GameLevelDataIndex.getInstance().getAnimationObjectByCacheId( "VillagerOne_Pray" );							villager.scaredAnimationObject = GameLevelDataIndex.getInstance().getAnimationObjectByCacheId( "VillagerOne_Scared" );							villager.worriedAnimationObject = GameLevelDataIndex.getInstance().getAnimationObjectByCacheId( "VillagerOne_Worried" );							GameLevelDataIndex.getInstance().addVillager( villager );														villager = new Villager();							villager.id = 2;							villager.regularAnimationObject = GameLevelDataIndex.getInstance().getAnimationObjectByCacheId( "VillagerTwo_Reg" );							villager.happyAnimationObject = GameLevelDataIndex.getInstance().getAnimationObjectByCacheId( "VillagerTwo_Happy" );							villager.prayAnimationObject = GameLevelDataIndex.getInstance().getAnimationObjectByCacheId( "VillagerTwo_Pray" );							villager.scaredAnimationObject = GameLevelDataIndex.getInstance().getAnimationObjectByCacheId( "VillagerTwo_Scared" );							villager.worriedAnimationObject = GameLevelDataIndex.getInstance().getAnimationObjectByCacheId( "VillagerTwo_Worried" );							GameLevelDataIndex.getInstance().addVillager( villager );														villager = new Villager();							villager.id = 3;							villager.regularAnimationObject = GameLevelDataIndex.getInstance().getAnimationObjectByCacheId( "VillagerThree_Reg" );							villager.happyAnimationObject = GameLevelDataIndex.getInstance().getAnimationObjectByCacheId( "VillagerThree_Happy" );							villager.prayAnimationObject = GameLevelDataIndex.getInstance().getAnimationObjectByCacheId( "VillagerThree_Pray" );							villager.scaredAnimationObject = GameLevelDataIndex.getInstance().getAnimationObjectByCacheId( "VillagerThree_Scared" );							villager.worriedAnimationObject = GameLevelDataIndex.getInstance().getAnimationObjectByCacheId( "VillagerThree_Worried" );							GameLevelDataIndex.getInstance().addVillager( villager );							*/							//trace( "Fence_Piece1: "+GameLevelDataIndex.getInstance().getAnimationObjectByCacheId( "Fence_Piece1" ) );							//trace( "Fence_Piece2: "+GameLevelDataIndex.getInstance().getAnimationObjectByCacheId( "Fence_Piece2" ) );							//trace( "Fence_LeftDoor: "+GameLevelDataIndex.getInstance().getAnimationObjectByCacheId( "Fence_LeftDoor" ) );							//trace( "Fence_RightDoor: "+GameLevelDataIndex.getInstance().getAnimationObjectByCacheId( "Fence_RightDoor" ) );							/*							for( i=0; i<chickens.length; ++i )							{								animationObject = new AnimationObject();								animationObject.id = chickens[i]['animation_object_id'];								animationObject.cacheId = chickens[i]['name'];								animationObject.tileWidth = chickens[i]['tile_width'];								animationObject.tileHeight = chickens[i]['tile_height'];								animationObject.animationCount = chickens[i]['animation_count'];								animationObject.animationEvent = chickens[i]['animation_event'];								animationObject.assetURL = chickens[i]['asset_url'];																GameLevelDataIndex.getInstance().addAnimationObject( animationObject );							}														for( i=0; i<particles.length; ++i )							{								animationObject = new AnimationObject();								animationObject.id = particles[i]['animation_object_id'];								animationObject.cacheId = particles[i]['name'];								animationObject.tileWidth = particles[i]['tile_width'];								animationObject.tileHeight = particles[i]['tile_height'];								animationObject.animationCount = particles[i]['animation_count'];								animationObject.animationEvent = particles[i]['animation_event'];								animationObject.assetURL = particles[i]['asset_url'];																GameLevelDataIndex.getInstance().addAnimationObject( animationObject );							}							*/						}					}					catch( e:Error )					{						ConsoleBroadcaster.broadcast( "RequiredDataController", "Error in parsing data, "+e.message );						ConsoleBroadcaster.broadcast( "RequiredDataController", "event.currentTarget.data: "+event.currentTarget.data );					}										//dispatchEvent( new CustomEvent("onComplete") );										var treasureDataController:TreasureDataController = new TreasureDataController();						treasureDataController.addEventListener( "onComplete", handleLoadTreasuresComplete );						treasureDataController.addEventListener( "onError", handleLoadTreasuresError );						treasureDataController.loadTreasures();				}							/** handleLoadExtraAnimationObjectsError			  *	---------------------------------------------------------------------- */				private function handleLoadExtraAnimationObjectsError( event:IOErrorEvent ):void				{					event.currentTarget.removeEventListener( Event.COMPLETE, handleLoadExtraAnimationObjectsComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleLoadExtraAnimationObjectsError );										dispatchEvent( new CustomEvent("onError") );				}								protected function handleLoadTreasuresComplete( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleLoadTreasuresComplete );					event.currentTarget.removeEventListener( "onError", handleLoadTreasuresError );										//dispatchEvent( new CustomEvent("onComplete") );										var islandDataController:IslandDataController = new IslandDataController();						islandDataController.addEventListener( "onComplete", handleLoadIslandsComplete );						islandDataController.addEventListener( "onError", handleLoadIslandsError );						islandDataController.loadIslandsForGame();				}								protected function handleLoadTreasuresError( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleLoadTreasuresComplete );					event.currentTarget.removeEventListener( "onError", handleLoadTreasuresError );										dispatchEvent( new CustomEvent("onError") );				}								protected function handleLoadIslandsComplete( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleLoadIslandsComplete );					event.currentTarget.removeEventListener( "onError", handleLoadIslandsError );										//dispatchEvent( new CustomEvent("onComplete") );					/*					var cryptologyDataController:CryptologyDataController = new CryptologyDataController();						cryptologyDataController.addEventListener( "onComplete", handleLoadCryptologiesComplete );						cryptologyDataController.addEventListener( "onError", handleLoadCryptologiesError );						cryptologyDataController.loadCryptologies();					*/										var villagerDataController:VillagerDataController = new VillagerDataController();						villagerDataController.addEventListener( "onComplete", handleGetVillagersComplete );						villagerDataController.addEventListener( "onError", handleGetVillagersError );						villagerDataController.getAllVillagers();				}								protected function handleLoadIslandsError( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleLoadIslandsComplete );					event.currentTarget.removeEventListener( "onError", handleLoadIslandsError );										dispatchEvent( new CustomEvent("onError") );				}				/*				protected function handleLoadCryptologiesComplete( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleLoadCryptologiesComplete );					event.currentTarget.removeEventListener( "onError", handleLoadCryptologiesError );										var getStorePacks_sdc:StoreDataController = new StoreDataController();						getStorePacks_sdc.addEventListener( "onComplete", handleGetStorePacksComplete );						getStorePacks_sdc.addEventListener( "onError", handleGetStorePacksError );						getStorePacks_sdc.getStorePacks();				}								protected function handleLoadCryptologiesError( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleLoadCryptologiesComplete );					event.currentTarget.removeEventListener( "onError", handleLoadCryptologiesError );										dispatchEvent( new CustomEvent("onError") );				}				*/								protected function handleGetVillagersComplete( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleGetVillagersComplete );					event.currentTarget.removeEventListener( "onError", handleGetVillagersError );										var getStorePacks_sdc:StoreDataController = new StoreDataController();						getStorePacks_sdc.addEventListener( "onComplete", handleGetStorePacksComplete );						getStorePacks_sdc.addEventListener( "onError", handleGetStorePacksError );						getStorePacks_sdc.getStorePacks();				}								protected function handleGetVillagersError( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleGetVillagersComplete );					event.currentTarget.removeEventListener( "onError", handleGetVillagersError );										dispatchEvent( new CustomEvent("onError") );				}								protected function handleGetStorePacksComplete( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleGetStorePacksComplete );					event.currentTarget.removeEventListener( "onError", handleGetStorePacksError );										dispatchEvent( new CustomEvent("onComplete") );				}								protected function handleGetStorePacksError( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleGetStorePacksComplete );					event.currentTarget.removeEventListener( "onError", handleGetStorePacksError );										dispatchEvent( new CustomEvent("onError") );				}							/**	******************************************* *			  * End of Loading Required Game Level Data			  *	******************************************* */							/** loadRequiredDataForSplashMessage			  *	---------------------------------------------------------------------- *			  *	Loads just enough data so we can display the message in the splash			  *	view. This should load all the data required for the gifts like weapons,			  *	gods, etc.			  *	---------------------------------------------------------------------- */				public function loadRequiredDataForSplashMessage():void				{					loadWeaponsForSplashMessage();				}							/** loadEnemiesForSplashMessage			  *	---------------------------------------------------------------------- */				private function loadEnemiesForSplashMessage():void				{					var enemyDataController:EnemyDataController = new EnemyDataController();						enemyDataController.addEventListener( "onComplete", handleLoadEnemiesForSplashMessageComplete );						enemyDataController.addEventListener( "onError", handleLoadEnemiesForSplashMessageError );						enemyDataController.loadEnemies();				}							/** handleLoadEnemiesForSplashMessageComplete			  *	---------------------------------------------------------------------- */				private function handleLoadEnemiesForSplashMessageComplete( event:CustomEvent ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "RequiredDataController", "handleLoadEnemiesForSplashMessageComplete();" );										event.currentTarget.removeEventListener( "onComplete", handleLoadEnemiesForSplashMessageComplete );					event.currentTarget.removeEventListener( "onError", handleLoadEnemiesForSplashMessageError );										loadWeaponsForSplashMessage();				}							/** handleLoadEnemiesForSplashMessageError			  *	---------------------------------------------------------------------- */				private function handleLoadEnemiesForSplashMessageError( event:CustomEvent ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "RequiredDataController", "handleLoadEnemiesForSplashMessageError();" );										event.currentTarget.removeEventListener( "onComplete", handleLoadEnemiesForSplashMessageComplete );					event.currentTarget.removeEventListener( "onError", handleLoadEnemiesForSplashMessageError );										dispatchEvent( new CustomEvent("onError") );				}							/** loadWeaponsForSplashMessage			  *	---------------------------------------------------------------------- */				private function loadWeaponsForSplashMessage():void				{					var weaponDataController:WeaponDataController = new WeaponDataController();						weaponDataController.addEventListener( "onComplete", handleLoadWeaponsForSplashMessageComplete );						weaponDataController.addEventListener( "onError", handleLoadAllWeaponsForSplashMessageError );						weaponDataController.loadWeapons();				}							/** handleLoadWeaponsForSplashMessageComplete			  *	---------------------------------------------------------------------- */				private function handleLoadWeaponsForSplashMessageComplete( event:CustomEvent ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "RequiredDataController", "handleLoadWeaponsForSplashMessageComplete();" );										event.currentTarget.removeEventListener( "onComplete", handleLoadWeaponsForSplashMessageComplete );					event.currentTarget.removeEventListener( "onError", handleLoadAllWeaponsForSplashMessageError );										loadGodsForSplashMessage();				}							/** handleLoadAllWeaponsForSplashMessageError			  *	---------------------------------------------------------------------- */				private function handleLoadAllWeaponsForSplashMessageError( event:CustomEvent ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "RequiredDataController", "handleLoadAllWeaponsForSplashMessageError();" );										event.currentTarget.removeEventListener( "onComplete", handleLoadWeaponsForSplashMessageComplete );					event.currentTarget.removeEventListener( "onError", handleLoadAllWeaponsForSplashMessageError );										dispatchEvent( new CustomEvent("onError") );				}							/** loadGodsForSplashMessage			  *	---------------------------------------------------------------------- */				private function loadGodsForSplashMessage():void				{					var godDataController:GodDataController = new GodDataController();						godDataController.addEventListener( "onComplete", handleLoadAllGodsForSplashMessageComplete );						godDataController.addEventListener( "onError", handleLoadAllGodsForSplashMessageError );						godDataController.loadGods();				}							/** handleLoadAllGodsForSplashMessageComplete			  *	---------------------------------------------------------------------- */				private function handleLoadAllGodsForSplashMessageComplete( event:CustomEvent ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "RequiredDataController", "handleLoadAllGodsForSplashMessageComplete();" );										event.currentTarget.removeEventListener( "onComplete", handleLoadAllGodsForSplashMessageComplete );					event.currentTarget.removeEventListener( "onError", handleLoadAllGodsForSplashMessageError );										dispatchEvent( new CustomEvent("onComplete") );					/*					var cryptologyDataController:CryptologyDataController = new CryptologyDataController();						cryptologyDataController.addEventListener( "onComplete", handleLoadCryptologiesForSplashMessageComplete );						cryptologyDataController.addEventListener( "onError", handleLoadCryptologiesForSplashMessageError );						cryptologyDataController.loadCryptologies();					*/				}							/** handleLoadAllGodsForSplashMessageError			  *	---------------------------------------------------------------------- */				private function handleLoadAllGodsForSplashMessageError( event:CustomEvent ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "RequiredDataController", "handleLoadAllGodsForSplashMessageError();" );										event.currentTarget.removeEventListener( "onComplete", handleLoadAllGodsForSplashMessageComplete );					event.currentTarget.removeEventListener( "onError", handleLoadAllGodsForSplashMessageError );										dispatchEvent( new CustomEvent("onError") );				}				/*				protected function handleLoadCryptologiesForSplashMessageComplete( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleLoadCryptologiesForSplashMessageComplete );					event.currentTarget.removeEventListener( "onError", handleLoadCryptologiesForSplashMessageError );										dispatchEvent( new CustomEvent("onComplete") );				}								protected function handleLoadCryptologiesForSplashMessageError( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleLoadCryptologiesForSplashMessageComplete );					event.currentTarget.removeEventListener( "onError", handleLoadCryptologiesForSplashMessageError );										dispatchEvent( new CustomEvent("onError") );				}				*/		}			}