/** UserDataController  *	---------------------------------------------------------------------------- *  *	@desc:  *		Data controller class to load required data for the game level  *		from the server.  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */	package com.boogabooga.controller.maingame	{		import flash.events.ErrorEvent;		import flash.events.Event;		import flash.events.EventDispatcher;		import flash.events.IOErrorEvent;		import flash.events.FullScreenEvent;		import flash.events.ProgressEvent;		import flash.external.ExternalInterface;		import flash.net.URLLoader;		import flash.net.URLRequest;		import flash.net.URLRequestMethod;		import flash.net.URLVariables;				import com.adobe.serialization.json.JSONDecoder;		import com.adobe.serialization.json.JSONEncoder;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;				import com.boogabooga.controller.BaseDataController;		import com.boogabooga.controller.gamelevel.*;		import com.boogabooga.data.gamelevel.GameLevelDataIndex;		import com.boogabooga.data.gamelevel.Weapon;		import com.boogabooga.data.maingame.*;		import com.boogabooga.data.gamelevel.God;		import com.boogabooga.data.gamelevel.Enemy;		import com.boogabooga.data.gamelevel.DiggingMap;				public class UserDataController extends BaseDataController		{			protected var _tempUser:User;						/** Constructor			  *	---------------------------------------------------------------------- */				public function UserDataController()				{					super();										_debug = true;									}							/** loadCurrentUserData			  *	---------------------------------------------------------------------- *			  *	Loads user data with the user id.			  *	---------------------------------------------------------------------- */				public function loadCurrentUserData( id:String, isFacebook:Boolean=true, firstName:String="", lastName:String="", fbProfilePicURL:String="", locale:String="", birthday:String="", gender:String="", email:String="", timezone:String="", origin:String="" ):void				{					//load in user data, including unlocked weapons, unlocked islands, etc.					var dataObject:Object = new Object();						dataObject.user_id = id;						dataObject.is_facebook_id = isFacebook;						dataObject.first_name = firstName;						dataObject.last_name = lastName;						dataObject.fb_profile_pic_url = fbProfilePicURL;						dataObject.locale = locale;						dataObject.birthday = birthday;						dataObject.gender = gender;						dataObject.email = email;						dataObject.timezone = timezone;						dataObject.origin = origin;										var data:URLVariables = new URLVariables();						data.url = "users/getCurrentUserData";						data.data = new JSONEncoder(dataObject).getString();										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleLoadCurrentUserDataComplete, handleLoadCurrentUserDataError );				}							/** handleLoadCurrentUserDataComplete			  *	---------------------------------------------------------------------- *			  *	---------------------------------------------------------------------- */				protected function handleLoadCurrentUserDataComplete( event:Event ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "UserDataController", "handleLoadCurrentUserDataComplete();" );										//if( _debug ) ConsoleBroadcaster.broadcast( "UserDataController", "data: "+event.currentTarget.data );										event.currentTarget.removeEventListener( Event.COMPLETE, handleLoadCurrentUserDataComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleLoadCurrentUserDataError );										//try					//{						var data = new JSONDecoder(event.currentTarget.data).getValue();												if( data.status )						{							_tempUser = new User();							_tempUser.id = data.result.id;							_tempUser.fbId = data.result.fb_id;							_tempUser.firstName = data.result.first_name;							_tempUser.lastName = data.result.last_name;							_tempUser.fbProfilePicURL = data.result.fb_profile_pic_url;							_tempUser.currentIslandId = data.result.current_island_id;							_tempUser.currentVillageId = data.result.current_village_id;							_tempUser.level = data.result.level;							_tempUser.adventureLevel = data.result.adventure_level;							_tempUser.adventureScore = data.result.adventure_score;							_tempUser.nextAdventureScore = data.result.next_adventure_score == null ? 0 : data.result.next_adventure_score;							_tempUser.prevAdventureScore = data.result.prev_adventure_score == null ? 0 : data.result.prev_adventure_score;							_tempUser.attackSlots = data.result.attack_slots;							_tempUser.tutorialMap = data.result.tutorial_map == "1";							_tempUser.tutorialGameLevel = data.result.tutorial_game_level == "1";							_tempUser.tutorialGameLevelDelete = data.result.tutorial_game_level_delete == "1";							_tempUser.tutorialWin = data.result.tutorial_win == "1";							_tempUser.tutorialSlotMachine = data.result.tutorial_slot_machine == "1";							_tempUser.tutorialJournal = data.result.tutorial_journal == "1";							_tempUser.tutorialDig = data.result.tutorial_dig == "1";							_tempUser.tutorialGift = data.result.tutorial_gift == "1";							_tempUser.tutorialLevelSetup = data.result.tutorial_level_setup == "1";							_tempUser.tutorialStore = data.result.tutorial_store == "1";							_tempUser.tutorialConsumables = data.result.tutorial_consumables == "1";							_tempUser.tutorialFullScreen = data.result.tutorial_full_screen == "1";							_tempUser.tutorialBuyChicken = data.result.tutorial_buy_chicken == "1";							_tempUser.locale = data.result.locale;							//_tempUser.mysteryGift = data.result.mystery_gift == null ? true : data.result.mystery_gift > 86400;							_tempUser.mysteryGift = data.result.mystery_gift == null ? false : data.result.mystery_gift=='0';														ConsoleBroadcaster.broadcast( "UserDataController", 'data.result.mystery_gift: '+data.result.mystery_gift );							ConsoleBroadcaster.broadcast( "UserDataController", 'user.mysteryGift: '+_tempUser.mysteryGift );							//trace( "nextAdventureScore: "+_tempUser.nextAdventureScore );							//trace( "next_adventure_score: "+data.result.next_adventure_score );														var dateArray:Array = data.result.last_login.split(" ")[0].split("-");							var timeArray:Array = data.result.last_login.split(" ")[1].split(":");							_tempUser.lastLogin = new Date(dateArray[0], dateArray[1], dateArray[2], timeArray[0], timeArray[1], timeArray[2]);														var i:int, j:int;							var unlockedWeapons:Array = data.result.unlocked_weapons;							var weapon:Weapon;							for( i=0; i<unlockedWeapons.length; ++i )							{								try								{									weapon = GameLevelDataIndex.getInstance().getWeapon( unlockedWeapons[i].weapon_id ).clone();									weapon.useCount = unlockedWeapons[i].use_count;									weapon.dateAdded = new Date(Number(unlockedWeapons[i].date_added)*1000);																		_tempUser.unlockedWeapons.push( weapon );								}								catch( e:Error ) {}								//MainGameController.getInstance().currentUser.itemUsageTracker.addWeapon( GameLevelDataIndex.getInstance().getWeapon( unlockedWeapons[i].weapon_id ), unlockedWeapons[i].use_count );							}							weapon = null;														ConsoleBroadcaster.broadcast( "UserDataController", "user unlockedWeapons "+_tempUser.unlockedWeapons.length );														var unlockedGods:Array = data.result.unlocked_gods;							var god:God;							for( i=0; i<unlockedGods.length; ++i )							{								god = GameLevelDataIndex.getInstance().getGod( unlockedGods[i].god_id ).clone();								god.useCount = unlockedGods[i].use_count;								god.dateAdded = new Date(Number(unlockedGods[i].date_added)*1000);																_tempUser.unlockedGods.push( god );								//MainGameController.getInstance().currentUser.itemUsageTracker.addGod( GameLevelDataIndex.getInstance().getGod( unlockedGods[i].god_id ), unlockedGods[i].use_count );							}							god = null;														ConsoleBroadcaster.broadcast( "UserDataController", "user unlockedGods "+_tempUser.unlockedGods.length );														var unlockedIslands:Array = data.result.unlocked_islands;							var island:Island;							var village:Village;							for( i=0; i<unlockedIslands.length; ++i )							{								if( island == null || island.id != unlockedIslands[i].island_id )								{									//trace( "last dig "+unlockedIslands[i].last_dig_time );																		island = MainGameDataIndex.getInstance().getIsland( unlockedIslands[i].island_id );									if( island != null )									{										island = island.clone();										island.locked = false;										//island.lastDigInterval = unlockedIslands[i].last_dig_time;										island.lastDigTime = unlockedIslands[i].last_dig_time;										_tempUser.unlockedIslands.push( island );									}																		//trace( island.lastDigTime );								}																if( island != null )								{									for( j=0; j<unlockedIslands[i].villages.length; ++j )									{										village = island.getVillage( unlockedIslands[i].villages[j].village_id );										if( village != null )											village.locked = false;									}								}																//trace( "unlocked" );							}														island = null;							village = null;														ConsoleBroadcaster.broadcast( "UserDataController", "user unlockedIslands "+_tempUser.unlockedIslands.length );							/*							var unlockedCryptologies:Array = data.result.unlocked_cryptologies;							var cryptology:Cryptology;							for( i=0; i<unlockedCryptologies.length; ++i )							{								if( MainGameDataIndex.getInstance().getCryptology( unlockedCryptologies[i].cryptology_id ) != null )								{									cryptology = MainGameDataIndex.getInstance().getCryptology( unlockedCryptologies[i].cryptology_id ).clone();									cryptology.dateAdded = new Date(Number(unlockedCryptologies[i].date_added)*1000);									cryptology.fullToken = unlockedCryptologies[i].full_token == "1";									cryptology.canComplete = unlockedCryptologies[i].can_complete == "1";									cryptology.friendId = unlockedCryptologies[i].friend_id;									cryptology.friendFirstName = unlockedCryptologies[i].friend_first_name;									cryptology.friendLastName = unlockedCryptologies[i].friend_last_name;									cryptology.friendFbProfilePicURL = unlockedCryptologies[i].friend_fb_profile_pic_url;									//trace( "id: "+cryptology.id );									//trace( "cryptology.fullToken: "+cryptology.fullToken );									//trace( "cryptology.canComplete: "+cryptology.canComplete );									_tempUser.unlockedCryptologies.push( cryptology );									cryptology = null;								}							}							*/							/*							var requestCryptologies:Array = data.result.request_cryptologies;							var requestCryptology:RequestCryptology;							for( i=0; i<requestCryptologies.length; ++i )							{								requestCryptology = new RequestCryptology();								requestCryptology.id = requestCryptologies[i].id;								requestCryptology.cryptologyId = requestCryptologies[i].cryptology_id;								requestCryptology.fbRequestId = requestCryptologies[i].fb_request_id;								requestCryptology.valid = requestCryptologies[i].valid == "1";								requestCryptology.completed = requestCryptologies[i].completed == "1";								requestCryptology.accepted = requestCryptologies[i].accepted == "1";																if( requestCryptologies[i].from_user_id == _tempUser.id )								{									trace( "a RequestCryptology from currentUser to user "+requestCryptologies[i].to_user_id );									requestCryptology.fromUser = _tempUser;									requestCryptology.toUser = new User();									requestCryptology.toUser.id = requestCryptologies[i].to_user_id;									requestCryptology.toUser.fbId = requestCryptologies[i].fb_id;									requestCryptology.toUser.firstName = requestCryptologies[i].first_name;									requestCryptology.toUser.lastName = requestCryptologies[i].last_name;									requestCryptology.toUser.fbProfilePicURL = requestCryptologies[i].fb_profile_pic_url;								}								else								{									trace( "a RequestCryptology from user "+requestCryptologies[i].from_user_id+" to currentUser" );									requestCryptology.toUser = _tempUser;									requestCryptology.fromUser = new User();									requestCryptology.fromUser.id = requestCryptologies[i].from_user_id;									requestCryptology.fromUser.fbId = requestCryptologies[i].fb_id;									requestCryptology.fromUser.firstName = requestCryptologies[i].first_name;									requestCryptology.fromUser.lastName = requestCryptologies[i].last_name;									requestCryptology.fromUser.fbProfilePicURL = requestCryptologies[i].fb_profile_pic_url;								}																requestCryptology.valid = requestCryptologies[i].valid == "1";								_tempUser.requestCryptologies.push( requestCryptology );							}							*/														//trace( "enemies length: "+GameLevelDataIndex.getInstance().enemiesCount );														var unlockedEnemies:Array = data.result.unlocked_enemies;							var enemy:Enemy;							for( i=0; i<unlockedEnemies.length; ++i )							{								try								{									enemy = GameLevelDataIndex.getInstance().getEnemy( unlockedEnemies[i].enemy_id );									enemy.dateAdded = new Date(Number(unlockedEnemies[i].date_added)*1000);									_tempUser.unlockedEnemies.push( enemy );									enemy = null;								} catch( e:Error ) {}							}							/*							var unlockedStorePacks:Array = data.result.unlocked_store_packs;							var storePack:StorePack;							for( i=0; i<unlockedStorePacks.length; ++i )							{								storePack = MainGameDataIndex.getInstance().getStorePack( unlockedStorePacks[i].store_pack_id );								_tempUser.unlockedStorePac							}							*/							var unlockedDiggingMaps:Array = data.result.unlocked_digging_maps;							var diggingMap:DiggingMap;							for( i=0; i<unlockedDiggingMaps.length; ++i )							{								diggingMap = new DiggingMap();								diggingMap.deserialize( unlockedDiggingMaps[i] );								_tempUser.unlockedDiggingMaps.push( diggingMap );							}														//trace( "unlockedDiggingMaps.length: "+_tempUser.unlockedDiggingMaps.length );														var unlockedTreasures:Array = data.result.unlocked_treasures;							var treasure:Treasure;							for( i=0; i<unlockedTreasures.length; ++i )							{								treasure = MainGameDataIndex.getInstance().getTreasure( unlockedTreasures[i].archeology_treasure_id ).clone();								treasure.count = unlockedTreasures[i].count;								treasure.dateAdded = new Date(Number(unlockedTreasures[i].date_added)*1000);								//trace( "unlockedTreasures[i].date_added: "+unlockedTreasures[i].date_added );								//trace( "treasure.dateAdded: "+treasure.dateAdded );								_tempUser.unlockedTreasures.push( treasure );							}														var gifts:Array = data.result.gifts;							var gift:Gift;							for( i=0; i<gifts.length; ++i )							{								gift = new Gift();								gift.id = gifts[i].id;								gift.type = gifts[i].type;								gift.itemId = gifts[i].item_id;																if( gift.type == "Weapon" )									gift.item = GameLevelDataIndex.getInstance().getWeapon( gift.itemId );								else if( gift.type == "God" )									gift.item = GameLevelDataIndex.getInstance().getGod( gift.itemId );																gift.count = gifts[i].count;								gift.fromId = gifts[i].from_user_id;								gift.fromProfilePicURL = gifts[i].fb_profile_pic_url;								gift.fromFirstName = gifts[i].first_name;								gift.fromLastName = gifts[i].last_name;																_tempUser.gifts.push( gift );							}														//trace( "gifts.length: "+gifts.length );														MainGameController.getInstance().currentUser = _tempUser;														_tempUser = null;														ConsoleBroadcaster.broadcast( "UserDataController", "currentUser "+MainGameController.getInstance().currentUser.id );														//var recordedIslands = MainGameDataIndex.getInstance().islands;														dispatchEvent( new CustomEvent("onComplete") );						}						else						{							//ConsoleBroadcaster.broadcast( "UserDataController", event.message							dispatchEvent( new CustomEvent("onError") );						}					/*}					catch( e:Error )					{						ConsoleBroadcaster.broadcast( "UserDataController", "Error in parsing data, "+event.currentTarget.data );						ConsoleBroadcaster.broadcast( "UserDataController", "message: "+e.message );						dispatchEvent( new CustomEvent("onError") );					}*/				}							/** handleLoadCurrentUserDataError			  *	---------------------------------------------------------------------- *			  *	---------------------------------------------------------------------- */				protected function handleLoadCurrentUserDataError( event:IOErrorEvent ):void				{					event.currentTarget.removeEventListener( Event.COMPLETE, handleLoadCurrentUserDataComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleLoadCurrentUserDataError );										dispatchEvent( new CustomEvent("onError") );				}							/** loadCurrentUserDataForSplashMessage			  *	---------------------------------------------------------------------- *			  *	---------------------------------------------------------------------- */				public function loadCurrentUserDataForSplashMessage( id:String, isFacebook:Boolean=true, firstName:String="", lastName:String="", fbProfilePicURL:String="", locale:String="", birthday:String="", gender:String="", email:String="", timezone:String="", origin:String=""  ):void				{					var dataObject:Object = new Object();						dataObject.user_id = id;						dataObject.is_facebook_id = isFacebook;						dataObject.first_name = firstName;						dataObject.last_name = lastName;						dataObject.fb_profile_pic_url = fbProfilePicURL;						dataObject.locale = locale;						dataObject.birthday = birthday;						dataObject.gender = gender;						dataObject.email = email;						dataObject.timezone = timezone;						dataObject.origin = origin;										var data:URLVariables = new URLVariables();						data.url = "users/getCurrentUserDataForSplashMessage";						data.data = new JSONEncoder(dataObject).getString();										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleLoadCurrentUserDataForSplashMessageComplete, handleLoadCurrentUserDataForSplashMessageError );				}								protected function handleLoadCurrentUserDataForSplashMessageComplete( event:Event ):void				{					ConsoleBroadcaster.broadcast( "UserDataController", "handleLoadCurrentUserDataForSplashMessageComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleLoadCurrentUserDataForSplashMessageComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleLoadCurrentUserDataForSplashMessageError );										try					{						var data = new JSONDecoder(event.currentTarget.data).getValue();												if( data.status )						{							_tempUser = new User();							_tempUser.id = data.result.id;							_tempUser.fbId = data.result.fb_id;							_tempUser.firstName = data.result.first_name;							_tempUser.lastName = data.result.last_name;							_tempUser.fbProfilePicURL = data.result.fb_profile_pic_url;							_tempUser.currentIslandId = data.result.current_island_id;							_tempUser.currentVillageId = data.result.current_village_id;							_tempUser.level = data.result.level;							_tempUser.adventureLevel = data.result.adventure_level;							_tempUser.attackSlots = data.result.attack_slots;							_tempUser.locale = data.result.locale;							_tempUser.messagesCount = data.result.messages_count;							/*							var unlockedCryptologies:Array = data.result.unlocked_cryptologies;							var cryptology:Cryptology;							for( var i:int=0; i<unlockedCryptologies.length; ++i )							{								if( MainGameDataIndex.getInstance().getCryptology( unlockedCryptologies[i].cryptology_id ) != null )								{									cryptology = MainGameDataIndex.getInstance().getCryptology( unlockedCryptologies[i].cryptology_id ).clone();									cryptology.fullToken = unlockedCryptologies[i].full_token == "1";									cryptology.canComplete = unlockedCryptologies[i].can_complete == "1";									cryptology.friendId = unlockedCryptologies[i].friend_id;									cryptology.friendFirstName = unlockedCryptologies[i].friend_first_name;									cryptology.friendLastName = unlockedCryptologies[i].friend_last_name;									cryptology.friendFbProfilePicURL = unlockedCryptologies[i].friend_fb_profile_pic_url;									//trace( "id: "+cryptology.id );									//trace( "cryptology.fullToken: "+cryptology.fullToken );									//trace( "cryptology.canComplete: "+cryptology.canComplete );									_tempUser.unlockedCryptologies.push( cryptology );									cryptology = null;								}							}							*/							MainGameController.getInstance().currentUser = _tempUser;														_tempUser = null;														dispatchEvent( new CustomEvent("onComplete") );						}						else						{							dispatchEvent( new CustomEvent("onError") );						}					}					catch( e:Error )					{						ConsoleBroadcaster.broadcast( "UserDataController", "Error in parsing data, "+e.message );						ConsoleBroadcaster.broadcast( "UserDataController", "data: "+event.currentTarget.data );						dispatchEvent( new CustomEvent("onError") );					}				}								protected function handleLoadCurrentUserDataForSplashMessageError( event:Event ):void				{					ConsoleBroadcaster.broadcast( "UserDataController", "handleLoadCurrentUserDataForSplashMessageError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleLoadCurrentUserDataForSplashMessageComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleLoadCurrentUserDataForSplashMessageError );										dispatchEvent( new CustomEvent("onError") );				}							/** getFriends			  *	---------------------------------------------------------------------- *			  *	Get user's friends			  *	---------------------------------------------------------------------- */				public function getFriends( userId:int ):void				{					var dataObject:Object = new Object();						dataObject.user_id = userId;										var data:URLVariables = new URLVariables();						data.data = new JSONEncoder(dataObject).getString();						data.url = "users/getFriends";										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleGetFriendsComplete, handleGetFriendsError );				}								protected function handleGetFriendsComplete( event:Event ):void				{					ConsoleBroadcaster.broadcast( "UserDataController", "handleGetFriendsComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleGetFriendsComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleGetFriendsError );										try					{						var data = new JSONDecoder(event.currentTarget.data).getValue();												if( data.status )						{							var i:int;							var user:User;							var friends:Vector.<User> = new Vector.<User>;														for( i=0; i<data.result.length; ++i )							{								user = new User();								user.id = data.result[i].id;								user.fbId = data.result[i].fb_id;								user.fbProfilePicURL = data.result[i].fb_profile_pic_url;								user.firstName = data.result[i].first_name;								user.lastName = data.result[i].last_name;								user.adventureLevel = data.result[i].adventure_level;																friends.push( user );							}														dispatchEvent( new CustomEvent("onComplete", {friends:friends}) );						}						else						{							dispatchEvent( new CustomEvent("onError") );						}											}					catch( e:Error )					{						dispatchEvent( new CustomEvent("onError") );					}									}								protected function handleGetFriendsError( event:IOErrorEvent ):void				{					ConsoleBroadcaster.broadcast( "UserDataController", "handleGetFriendsError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleGetFriendsComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleGetFriendsError );										dispatchEvent( new CustomEvent("onError") );				}							/** getFriendUserData			  *	---------------------------------------------------------------------- *			  *	Get friend's user data.			  *	---------------------------------------------------------------------- */				public function getFriendUserData( userId:int ):void				{					var dataObject:Object = new Object();						dataObject.user_id = userId;						dataObject.is_facebook_id = false;										var data:URLVariables = new URLVariables();						data.data = new JSONEncoder(dataObject).getString();						data.url = "users/getFriendUserData";										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleGetFriendUserDataComplete, handleGetFriendUserDataError );				}								protected function handleGetFriendUserDataComplete( event:Event ):void				{					ConsoleBroadcaster.broadcast( "UserDataController", "handleGetFriendUserDataComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleGetFriendUserDataComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleGetFriendUserDataError );										try					{						var data = new JSONDecoder(event.currentTarget.data).getValue();												if( data.status )						{							var user:User = new User();														user.id = data.result.id;							user.fbId = data.result.fb_id;							user.firstName = data.result.first_name;							user.lastName = data.result.last_name;							user.fbProfilePicURL = data.result.fb_profile_pic_url;							user.currentIslandId = data.result.current_island_id;							user.currentVillageId = data.result.current_village_id;							user.level = data.result.level;							user.adventureLevel = data.result.adventure_level;							user.attackSlots = data.result.attack_slots;														var dateArray:Array = data.result.last_login.split(" ")[0].split("-");							var timeArray:Array = data.result.last_login.split(" ")[1].split(":");							user.lastLogin = new Date(dateArray[0], dateArray[1], dateArray[2], timeArray[0], timeArray[1], timeArray[2]);														var i:int, j:int;							var unlockedWeapons:Array = data.result.unlocked_weapons;							var weapon:Weapon;							for( i=0; i<unlockedWeapons.length; ++i )							{								weapon = GameLevelDataIndex.getInstance().getWeapon( unlockedWeapons[i].weapon_id ).clone();								weapon.useCount = unlockedWeapons[i].use_count;								weapon.dateAdded = new Date(Number(unlockedWeapons[i].date_added)*1000);																user.unlockedWeapons.push( weapon );								//MainGameController.getInstance().currentUser.itemUsageTracker.addWeapon( GameLevelDataIndex.getInstance().getWeapon( unlockedWeapons[i].weapon_id ), unlockedWeapons[i].use_count );							}							weapon = null;														ConsoleBroadcaster.broadcast( "UserDataController", "user unlockedWeapons "+user.unlockedWeapons.length );														var unlockedGods:Array = data.result.unlocked_gods;							var god:God;							for( i=0; i<unlockedGods.length; ++i )							{								god = GameLevelDataIndex.getInstance().getGod( unlockedGods[i].god_id ).clone();								god.useCount = unlockedGods[i].use_count;								god.dateAdded = new Date(Number(unlockedGods[i].date_added)*1000);																user.unlockedGods.push( god );								//MainGameController.getInstance().currentUser.itemUsageTracker.addGod( GameLevelDataIndex.getInstance().getGod( unlockedGods[i].god_id ), unlockedGods[i].use_count );							}							god = null;														ConsoleBroadcaster.broadcast( "UserDataController", "user unlockedGods "+user.unlockedGods.length );														var unlockedIslands:Array = data.result.unlocked_islands;							var island:Island;							var village:Village;							for( i=0; i<unlockedIslands.length; ++i )							{								if( island == null || island.id != unlockedIslands[i].island_id )								{									trace( "last dig "+unlockedIslands[i].last_dig_time );																		island = MainGameDataIndex.getInstance().getIsland( unlockedIslands[i].island_id );									island = island.clone();									island.locked = false;									//island.lastDigInterval = unlockedIslands[i].last_dig_time;									island.lastDigTime = unlockedIslands[i].last_dig_time;									user.unlockedIslands.push( island );																		//trace( island.lastDigTime );								}																for( j=0; j<unlockedIslands[i].villages.length; ++j )								{									village = island.getVillage( unlockedIslands[i].villages[j].village_id );									if( village != null )										village.locked = false;								}																//trace( "unlocked" );							}														island = null;							village = null;														ConsoleBroadcaster.broadcast( "UserDataController", "user unlockedIslands "+user.unlockedIslands.length );							/*							var unlockedCryptologies:Array = data.result.unlocked_cryptologies;							var cryptology:Cryptology;							for( i=0; i<unlockedCryptologies.length; ++i )							{								if( MainGameDataIndex.getInstance().getCryptology( unlockedCryptologies[i].cryptology_id ) != null )								{									cryptology = MainGameDataIndex.getInstance().getCryptology( unlockedCryptologies[i].cryptology_id ).clone();									cryptology.dateAdded = new Date(Number(unlockedCryptologies[i].date_added)*1000);									cryptology.fullToken = unlockedCryptologies[i].full_token == "1";									cryptology.canComplete = unlockedCryptologies[i].can_complete == "1";									cryptology.friendId = unlockedCryptologies[i].friend_id;									cryptology.friendFirstName = unlockedCryptologies[i].friend_first_name;									cryptology.friendLastName = unlockedCryptologies[i].friend_last_name;									cryptology.friendFbProfilePicURL = unlockedCryptologies[i].friend_fb_profile_pic_url;									//trace( "id: "+cryptology.id );									//trace( "cryptology.fullToken: "+cryptology.fullToken );									//trace( "cryptology.canComplete: "+cryptology.canComplete );									user.unlockedCryptologies.push( cryptology );									cryptology = null;								}							}							*/							var unlockedEnemies:Array = data.result.unlocked_enemies;							var enemy:Enemy;							for( i=0; i<unlockedEnemies.length; ++i )							{								enemy = GameLevelDataIndex.getInstance().getEnemy( unlockedEnemies[i].enemy_id );								enemy.dateAdded = new Date(Number(unlockedEnemies[i].date_added)*1000);								user.unlockedEnemies.push( enemy );								enemy = null;							}														trace( "unlockedDiggingMaps.length: "+user.unlockedDiggingMaps.length );														var unlockedTreasures:Array = data.result.unlocked_treasures;							var treasure:Treasure;							for( i=0; i<unlockedTreasures.length; ++i )							{								treasure = MainGameDataIndex.getInstance().getTreasure( unlockedTreasures[i].archeology_treasure_id ).clone();								treasure.count = unlockedTreasures[i].count;								treasure.dateAdded = new Date(Number(unlockedTreasures[i].date_added)*1000);								//trace( "unlockedTreasures[i].date_added: "+unlockedTreasures[i].date_added );								//trace( "treasure.dateAdded: "+treasure.dateAdded );								user.unlockedTreasures.push( treasure );							}														dispatchEvent( new CustomEvent("onComplete", {user:user}) );						}						else						{							dispatchEvent( new CustomEvent("onError") );						}					}					catch( e:Error )					{						dispatchEvent( new CustomEvent("onError") );					}				}								protected function handleGetFriendUserDataError( event:IOErrorEvent ):void				{					ConsoleBroadcaster.broadcast( "UserDataController", "handleGetFriendUserDataError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleGetFriendUserDataComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleGetFriendUserDataError );										dispatchEvent( new CustomEvent("onError") );				}							/** handleLoadCurrentUserDataComplete			  *	---------------------------------------------------------------------- *			  *	---------------------------------------------------------------------- */				public function updateUserTutorial( userId:int, type:String, flag:int ):void				{					var dataObject:Object = new Object();						dataObject.user_id = userId;						dataObject.type = type;						dataObject.flag = flag;										var data:URLVariables = new URLVariables();						data.data = new JSONEncoder(dataObject).getString();						data.url = "users/updateUserTutorial";										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleUpdateUserTutorialComplete, handleUpdateUserTutorialError );				}								protected function handleUpdateUserTutorialComplete( event:Event ):void				{					ConsoleBroadcaster.broadcast( "UserDataController", "handleUpdateUserTutorialComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleUpdateUserTutorialComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleUpdateUserTutorialError );										try					{						var data = new JSONDecoder(event.currentTarget.data);					}					catch( e:Error )					{											}				}								protected function handleUpdateUserTutorialError( event:IOErrorEvent ):void				{					ConsoleBroadcaster.broadcast( "UserDataController", "handleUpdateUserTutorialError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleUpdateUserTutorialComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleUpdateUserTutorialError );				}							/** updateUserLocale			  *	---------------------------------------------------------------------- *			  *	---------------------------------------------------------------------- */				public function updateUserLocale( id:int, locale:String ):void				{					var dataObject:Object = new Object();						dataObject.id = id;						dataObject.locale = locale;										var data:URLVariables = new URLVariables();						data.data = new JSONEncoder(dataObject).getString();						data.url = "users/updateUserLocale";										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleUpdateUserLocaleComplete, handleUpdateUserLocaleError );				}								protected function handleUpdateUserLocaleComplete( event:Event ):void				{					//ConsoleBroadcaster.broadcast( "UserDataController", "handleUpdateUserLocaleComplete();" );					trace( 'handleUpdateUserLocaleComplete();' );					trace( event.currentTarget.data );										event.currentTarget.removeEventListener( Event.COMPLETE, handleUpdateUserLocaleComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleUpdateUserLocaleError );				}								protected function handleUpdateUserLocaleError( event:IOErrorEvent ):void				{					ConsoleBroadcaster.broadcast( "UserDataController", "handleUpdateUserLocaleError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleUpdateUserLocaleComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleUpdateUserLocaleError );				}							/** updateAdventureScore			  *	---------------------------------------------------------------------- *			  *	---------------------------------------------------------------------- */				public function updateAdventureScore( userId:int, adventureScore:Number ):void				{					var dataObject:Object = new Object();						dataObject.user_id = userId;						dataObject.adventure_score = adventureScore;										var data:URLVariables = new URLVariables();						data.data = new JSONEncoder(dataObject).getString();						data.url = "users/updateAdventureScore";										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleUpdateAdventureScoreComplete, handleUpdateAdventureScoreError );				}								protected function handleUpdateAdventureScoreComplete( event:Event ):void				{					ConsoleBroadcaster.broadcast( "UserDataController", "handleUpdateAdventureScoreComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleUpdateAdventureScoreComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleUpdateAdventureScoreError );										trace( event.currentTarget.data );										try					{						var data = new JSONDecoder(event.currentTarget.data).getValue();												if( data.status )						{							dispatchEvent( new CustomEvent("onComplete", {adventureLevel:data.result.adventure_level, nextAdventureScore:data.result.next_adventure_score, prevAdventureScore:data.result.prev_adventure_score}) );						}					}					catch( e:Error )					{											}				}								protected function handleUpdateAdventureScoreError( event:IOErrorEvent ):void				{					ConsoleBroadcaster.broadcast( "UserDataController", "handleUpdateAdventureScoreError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleUpdateAdventureScoreComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleUpdateAdventureScoreError );				}							/** updateUserFBCreditBalance			  *	---------------------------------------------------------------------- *			  *	---------------------------------------------------------------------- */				public function updateUserFBCreditBalance( userId:int, fbCredit:int ):void				{					var dataObject:Object = new Object();						dataObject.id = userId;						dataObject.fb_credit = fbCredit;										var data:URLVariables = new URLVariables();						data.data = new JSONEncoder(dataObject).getString();						data.url = "users/updateUserFBCreditBalance";										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST );				}		}			}