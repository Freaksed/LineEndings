/** MainGameController  *	---------------------------------------------------------------------------- *  *	@author:  *		Christian Widodo [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.controller.maingame	{		import flash.events.Event;		import flash.events.EventDispatcher;		import flash.net.LocalConnection;		import flash.system.System;				import com.adobe.serialization.json.JSONDecoder;		import com.avatarlabs.utils.VectorUtil;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.AssetLoaderEvent;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.sound.SoundEffectPlayer;		import org.osflash.signals.Signal;				import com.boogabooga.controller.AssetLoaderController;		import com.boogabooga.controller.FacebookFunctions;		import com.boogabooga.controller.gamelevel.EnemyDataController;		import com.boogabooga.controller.gamelevel.GodDataController;		import com.boogabooga.controller.gamelevel.WeaponDataController;		import com.boogabooga.data.SoundsIndex;		import com.boogabooga.data.gamelevel.AbstractGameObject;		import com.boogabooga.data.gamelevel.DiggingMap;		import com.boogabooga.data.gamelevel.GameLevel;		import com.boogabooga.data.gamelevel.GameLevelDataIndex;		import com.boogabooga.data.gamelevel.God;		import com.boogabooga.data.gamelevel.Weapon;		import com.boogabooga.data.maingame.*;		import com.boogabooga.events.BoogaEvent;		import com.boogabooga.events.GameLevelEvent;		import com.boogabooga.data.gamelevel.Enemy;						public class MainGameController extends EventDispatcher		{			protected static var _instance:MainGameController;			protected var _debug:Boolean;						protected var _currentUnixTime:Number;			protected var _currentServerUnixTime:Number;						protected var _adventureLevelUp:Boolean;			protected var _currentUser:User;			protected var _islandSelectionViewCurrentIslandId:int;			protected var _facebookFunctions:FacebookFunctions;			//protected var _isPlayingLevel:Boolean;			protected var _nonAppUserFriends:Vector.<User>;						protected var _playingBackgroundMusic:Boolean;						protected var _savingUnlockedVillage:Boolean;			protected var _savingUnlockedEnemies:Boolean;			protected var _savingUnlockedWeapons:Boolean;			protected var _savingUnlockedGods:Boolean;			protected var _savingUnlockedTreasure:Boolean;						protected var _giftItem:AbstractGameObject;						//TODO:			//	We need two asset loader here.			//	One asset loader is for loading assets in the background, we can stop			//		stop the loading and resume loading.			//	One asset loader is for loading assets needed right now for the game			//		to progress. This loading takes priority over the background			//		loading.			protected var _assetLoaderController:AssetLoaderController;			protected var _urgentAssetLoaderController:AssetLoaderController;			protected var _playGameLevelAfterLoading:Boolean;						//public var onNewIslandUnlocked:Signal;			public var newIslandUnlocked:Boolean;						public var onGiftRequestSent:Signal;			public var onGiftRequestCancel:Signal;			public var onRefreshAcceptedGiftsCompleted:Signal;			public var onRefreshAcceptedGiftsErred:Signal;						/** Constructor			  *	---------------------------------------------------------------------------- */				public function MainGameController()				{					_debug = true;										init();				}							/** reset			  *	---------------------------------------------------------------------- */				public static function reset():void				{					_instance.kill();										_instance = null;				}							/** getInstance			  *	---------------------------------------------------------------------- */				public static function getInstance():MainGameController				{					if( _instance==null ) _instance = new MainGameController();					return _instance;				}								public function get facebookFunctions():FacebookFunctions				{					if( _facebookFunctions == null )					{						_facebookFunctions = new FacebookFunctions();						try						{							_facebookFunctions.init();						}catch( e:Error ) {}					}										return _facebookFunctions;				}								public function get currentUnixTime():Number { return _currentUnixTime; }				public function set currentServerUnixTime( n:Number ):void { _currentServerUnixTime = n; }				public function get currentServerUnixTime():Number { return _currentServerUnixTime; }								public function set currentUser( u:User ):void { _currentUser = u; }				public function get currentUser():User { return _currentUser; }				public function set islandSelectionViewCurrentIslandId( i:int ):void { _islandSelectionViewCurrentIslandId = i; }				public function get islandSelectionViewCurrentIslandId():int { return _islandSelectionViewCurrentIslandId; }								//public function set isPlayingLevel( b:Boolean ):void { _isPlayingLevel = b; }				//public function get isPlayingLevel():Boolean { return _isPlayingLevel; }								public function set playGameLevelAfterLoading( b:Boolean ):void { _playGameLevelAfterLoading = b; }								public function get isLoading():Boolean { return _assetLoaderController.isLoading; }								public function get assetLoaderController():AssetLoaderController				{					if( _assetLoaderController == null )					{						_assetLoaderController = new AssetLoaderController();						//_assetLoaderController.addEventListener( AssetLoaderEvent.COMPLETE, handleAssetLoaderComplete, false, 0, true );						//_assetLoaderController.addEventListener( AssetLoaderEvent.ERROR, handleAssetLoaderError, false, 0, true );					}										return _assetLoaderController;				}								public function get urgentAssetLoaderController():AssetLoaderController				{					if( _urgentAssetLoaderController == null )					{						_urgentAssetLoaderController = new AssetLoaderController();					}										return _urgentAssetLoaderController;				}								public function get saveUserDataComplete():Boolean				{					return (!_savingUnlockedVillage && !_savingUnlockedEnemies && !_savingUnlockedWeapons && !_savingUnlockedGods && !_savingUnlockedTreasure);				}								public function get adventureLevelUp():Boolean { return _adventureLevelUp; }								public function get nonAppUserFriends():Vector.<User> { return _nonAppUserFriends; }							/** init			  *	---------------------------------------------------------------------------- */				public function init():void				{					_adventureLevelUp = false;					_playGameLevelAfterLoading = false;										_savingUnlockedEnemies = false;					_savingUnlockedVillage = false;					_savingUnlockedWeapons = false;					_savingUnlockedGods = false;					_savingUnlockedTreasure = false;										//_isPlayingLevel = false;										_currentUnixTime = new Date().time;					_nonAppUserFriends = new Vector.<User>;										onGiftRequestSent = new Signal( int );					onGiftRequestCancel = new Signal();										onRefreshAcceptedGiftsCompleted = new Signal();					onRefreshAcceptedGiftsErred = new Signal();				}							/** kill			  *	---------------------------------------------------------------------------- */				public function kill():void				{									}							/** checkForSavUserDataProgress			  *	---------------------------------------------------------------------------- */				protected function checkForSaveUserDataProgress():void				{					trace( "saveUserDataComplete: "+saveUserDataComplete );										if( saveUserDataComplete )					{						trace( "saveUserDataComplete" );												trace( "_currentUser.adventureScore: "+_currentUser.adventureScore );						trace( "_currentUser.nextAdventureScore: "+_currentUser.nextAdventureScore );												if( _currentUser.adventureScore >= _currentUser.nextAdventureScore )						{							_adventureLevelUp = true;						}						else// if( _currentUser.adventureScore == _currentUser.nextAdventureScore )						{							//dispatchEvent( new BoogaEvent(BoogaEvent.ON_UPDATE_USER_DATA_COMPLETE) );						}						//dispatchEvent( new BoogaEvent(BoogaEvent.ON_UPDATE_USER_DATA_COMPLETE) );												var userDataController:UserDataController = new UserDataController();							userDataController.addEventListener( "onComplete", handleUpdateAdventureScoreComplete );							userDataController.addEventListener( "onError", handleUpdateAdventureScoreError );							userDataController.updateAdventureScore( _currentUser.id, _currentUser.adventureScore );												}				}								protected function handleUpdateAdventureScoreComplete( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleUpdateAdventureScoreComplete );					event.currentTarget.removeEventListener( "onError", handleUpdateAdventureScoreError );										_currentUser.adventureLevel = event.customParameters.adventureLevel;					_currentUser.nextAdventureScore = event.customParameters.nextAdventureScore;					_currentUser.prevAdventureScore = event.customParameters.prevAdventureScore;										//trace( "user new level: "+_currentUser.adventureLevel );					//trace( "user next adventure score: "+_currentUser.nextAdventureScore );										if( _adventureLevelUp )						EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_ADVENTURE_LEVEL_UPDATE, this, {adventureLevel:_currentUser.adventureLevel} );										dispatchEvent( new BoogaEvent(BoogaEvent.ON_UPDATE_USER_DATA_COMPLETE) );				}								protected function handleUpdateAdventureScoreError( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleUpdateAdventureScoreComplete );					event.currentTarget.removeEventListener( "onError", handleUpdateAdventureScoreError );				}								public function showAdventureLevelPopup():void				{					_adventureLevelUp = false;										EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_ADVENTURE_LEVEL_POPUP_SHOW, this, {adventureLevel:_currentUser.adventureLevel} );				}							/** startMainBackgroundMusic			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				public function startMainBackgroundMusic():void				{					if( !_playingBackgroundMusic )					{						_playingBackgroundMusic = true;												//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("music_loop_store_map_dig_journal.wav").volume, 0, "music_loop_store_map_dig_journal.wav" );						SoundEffectPlayer.getInstance().playLibrarySound( "music_loop_store_map_dig_journal.wav", true, "music_loop_store_map_dig_journal.wav", "music_loop_store_map_dig_journal.wav", SoundEffectPlayer.SOUND_PLAYER_MUSIC );												//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_map_screen_fire_crackling_loop.wav").volume, 0, "sfx_map_screen_fire_crackling_loop.wav" );						SoundEffectPlayer.getInstance().playLibrarySound( "sfx_map_screen_fire_crackling_loop.wav", true, "sfx_map_screen_fire_crackling_loop.wav", "sfx_map_screen_fire_crackling_loop.wav", SoundEffectPlayer.SOUND_PLAYER_MUSIC );					}				}							/** stopMainBackgroundMusic			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				public function stopMainBackgroundMusic():void				{					_playingBackgroundMusic = false;										SoundEffectPlayer.getInstance().stopSound( "music_loop_store_map_dig_journal.wav", "music_loop_store_map_dig_journal.wav", "music_loop_store_map_dig_journal.wav", SoundEffectPlayer.SOUND_PLAYER_MUSIC );					SoundEffectPlayer.getInstance().stopSound( "sfx_map_screen_fire_crackling_loop.wav", "sfx_map_screen_fire_crackling_loop.wav", "sfx_map_screen_fire_crackling_loop.wav", SoundEffectPlayer.SOUND_PLAYER_MUSIC );				}							/** updateconsumableItemUseCount			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				public function updateConsumableItemUseCount( item:AbstractGameObject, useCount:int ):void				{					if( item is Weapon )					{						//TODO:						//	Update the database for the use count												_currentUser.updateWeaponUseCount( item as Weapon, useCount );												var weaponDataController:WeaponDataController = new WeaponDataController();							weaponDataController.addEventListener( "onComplete", handleUpdateWeaponUseCountComplete, false, 0, true );							weaponDataController.addEventListener( "onError", handleUpdateWeaponUseCountError, false, 0, true );							weaponDataController.updateUseCount( _currentUser.id, item.id, useCount );					}					else if( item is God )					{						//TODO:						//	Update the database for the use count												_currentUser.updateGodUseCount( item as God, useCount );												var godDataController:GodDataController = new GodDataController();							godDataController.addEventListener( "onComplete", handleUpdateGodUseCountComplete, false, 0, true );							godDataController.addEventListener( "onError", handleUpdateGodUseCountError, false, 0, true );							godDataController.updateUseCount( _currentUser.id, item.id, useCount );					}				}							/** handleUpdateWeaponUseCountComplete			  *	---------------------------------------------------------------------------- *			  *	This event is fired when weapon use count updates complete.			  *	---------------------------------------------------------------------------- */				protected function handleUpdateWeaponUseCountComplete( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleUpdateWeaponUseCountComplete );					event.currentTarget.removeEventListener( "onError", handleUpdateWeaponUseCountError );				}							/** handleUpdateWeaponUseCountError			  *	---------------------------------------------------------------------------- *			  *	This event is fired when weapon use count updates error.			  *	---------------------------------------------------------------------------- */				protected function handleUpdateWeaponUseCountError( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleUpdateWeaponUseCountComplete );					event.currentTarget.removeEventListener( "onError", handleUpdateWeaponUseCountError );				}							/** handleUpdateGodUseCountComplete			  *	---------------------------------------------------------------------------- *			  *	This event is fired when gods use count updates complete.			  *	---------------------------------------------------------------------------- */				protected function handleUpdateGodUseCountComplete( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleUpdateGodUseCountComplete );					event.currentTarget.removeEventListener( "onError", handleUpdateGodUseCountError );				}							/** handleUpdateGodUseCountError			  *	---------------------------------------------------------------------------- *			  *	This event is fired when gods use count updates error.			  *	---------------------------------------------------------------------------- */				protected function handleUpdateGodUseCountError( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleUpdateGodUseCountComplete );					event.currentTarget.removeEventListener( "onError", handleUpdateGodUseCountError );				}							/** checkForNextVillage			  *	---------------------------------------------------------------------------- *			  *	Checks if user unlocks the next village or even the next island.			  *	---------------------------------------------------------------------------- */				public function checkForNextVillage( islandId:int, villageId:int ):Boolean				{					if( islandId == _currentUser.currentIslandId && villageId == _currentUser.currentVillageId )					{						ConsoleBroadcaster.broadcast( "MainGameController", "check if user unlocks new village" );												var island:Island = MainGameDataIndex.getInstance().getIsland( _currentUser.currentIslandId );						var village:Village = island.getVillage( _currentUser.currentVillageId );												var nextIsland:Island;						var nextVillage:Village;												if( village.villageOrder < island.villages.length )						{							nextIsland = island;							nextVillage = island.villages[village.villageOrder];														ConsoleBroadcaster.broadcast( "MainGameController", "nextIsland: "+nextIsland.id );							ConsoleBroadcaster.broadcast( "MainGameController", "nextVillage: "+nextVillage.id );						}						else if( island.islandOrder < MainGameDataIndex.getInstance().islands.length )						{							nextIsland = MainGameDataIndex.getInstance().islands[island.islandOrder];							nextVillage = nextIsland.villages[0];														ConsoleBroadcaster.broadcast( "MainGameController", "nextIsland: "+nextIsland.id );							ConsoleBroadcaster.broadcast( "MainGameController", "nextVillage: "+nextVillage.id );						}						else						{							ConsoleBroadcaster.broadcast( "MainGameController", "No more level to play!!!" );														//TODO:							//	Do something here when user reaches end of content.													}												if( nextIsland != null && nextVillage != null )						{							//_currentUser.currentIslandId = nextIsland.id;							//_currentUser.currentVillageId = nextVillage.id;														_savingUnlockedVillage = true;														var islandDataController:IslandDataController = new IslandDataController();								islandDataController.addEventListener( "onComplete", handleAddUnlockedNextVillageComplete );								islandDataController.addEventListener( "onError", handleAddUnlockedNextVillageError );								islandDataController.addUnlockedVillage( _currentUser.id, nextIsland.id, nextVillage.id );							//TODO:							//	Do we need to pass in user level in here too instead of relying on server script to increase user level?														return true;						}						else						{							dispatchEvent( new CustomEvent("onGameComplete" ) );						}					}					else					{						ConsoleBroadcaster.broadcast( "MainGameController", "user plays a level he has finished" );					}										return false;				}								protected function handleAddUnlockedNextVillageComplete( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleAddUnlockedNextVillageComplete );					event.currentTarget.removeEventListener( "onError", handleAddUnlockedNextVillageError );										_savingUnlockedVillage = false;										if( _currentUser.currentIslandId != event.customParameters.islandId )					{						//unlocked new island						var newIsland:Island = MainGameDataIndex.getInstance().getIsland(event.customParameters.islandId).clone();							newIsland.getVillage( event.customParameters.villageId ).locked = false;												_currentUser.unlockedIslands.push( newIsland );												_currentUser.adventureScore += MainGameDataIndex.ADVENTURE_SCORE_ISLAND_SAVED + MainGameDataIndex.ADVENTURE_SCORE_VILLAGE_SAVED;						trace( "unlock new island" );						trace( "adding adventureScore with "+(MainGameDataIndex.ADVENTURE_SCORE_ISLAND_SAVED+MainGameDataIndex.ADVENTURE_SCORE_VILLAGE_SAVED) );												//onNewIslandUnlocked.dispatch();						newIslandUnlocked = true;					}					else					{						//unlocked new village						_currentUser.getUnlockedVillage(event.customParameters.villageId).locked = false;												_currentUser.adventureScore += MainGameDataIndex.ADVENTURE_SCORE_VILLAGE_SAVED;						trace( "unlock new village" );						trace( "adding adventureScore with "+MainGameDataIndex.ADVENTURE_SCORE_VILLAGE_SAVED );					}										_currentUser.level = _currentUser.getUnlockedVillage( event.customParameters.villageId ).level;					trace( "_currentUser.level: "+_currentUser.level );					_currentUser.currentIslandId = event.customParameters.islandId;					_currentUser.currentVillageId = event.customParameters.villageId;										checkForSaveUserDataProgress();				}								protected function handleAddUnlockedNextVillageError( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleAddUnlockedNextVillageComplete );					event.currentTarget.removeEventListener( "onError", handleAddUnlockedNextVillageError );				}							/** addUnlockedTreasure			  *	---------------------------------------------------------------------------- */				public function addUnlockedTreasure( id:int ):void				{					//_currentUser.unlockedTreasures.push( MainGameDataIndex.getInstance().getTreasure(id) );										_savingUnlockedTreasure = true;										var treasureDataController:TreasureDataController = new TreasureDataController();						treasureDataController.addEventListener( "onComplete", handleAddUnlockedTreasureComplete );						treasureDataController.addEventListener( "onError", handleAddUnlockedTreasureError );						treasureDataController.addUnlockedTreasure( _currentUser.id, id );				}								protected function handleAddUnlockedTreasureComplete( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleAddUnlockedTreasureComplete );					event.currentTarget.removeEventListener( "onError", handleAddUnlockedTreasureError );										var unlockedTreasure:Object = event.customParameters.unlockedTreasure;					var userUnlockedTreasure:Treasure = _currentUser.getUnlockedTreasure(unlockedTreasure.archeology_treasure_id);										if( userUnlockedTreasure != null )					{						userUnlockedTreasure.count = unlockedTreasure.count;												trace( "updating unlocked treasure to a count of "+unlockedTreasure.count );												if( userUnlockedTreasure.rarity == Treasure.RARITY_RARE )						{							_currentUser.adventureScore += MainGameDataIndex.ADVENTURE_SCORE_RARE_ARTIFACT;							trace( "adding adventureScore with "+MainGameDataIndex.ADVENTURE_SCORE_RARE_ARTIFACT );						}						else						{							_currentUser.adventureScore += MainGameDataIndex.ADVENTURE_SCORE_COMMON_ARTIFACT;							trace( "adding adventureScore with "+MainGameDataIndex.ADVENTURE_SCORE_COMMON_ARTIFACT );						}					}					else					{						var treasure:Treasure = MainGameDataIndex.getInstance().getTreasure( unlockedTreasure.archeology_treasure_id );							treasure.count = unlockedTreasure.count;							treasure.dateAdded = new Date(Number(unlockedTreasure.date_added)*1000);												trace( "adding new treasure, dateAdded: "+treasure.dateAdded );												_currentUser.unlockedTreasures.push( treasure );												if( treasure.rarity == Treasure.RARITY_RARE )						{							_currentUser.adventureScore += MainGameDataIndex.ADVENTURE_SCORE_RARE_ARTIFACT;							trace( "adding adventureScore with "+MainGameDataIndex.ADVENTURE_SCORE_RARE_ARTIFACT );						}						else						{							_currentUser.adventureScore += MainGameDataIndex.ADVENTURE_SCORE_COMMON_ARTIFACT;							trace( "adding adventureScore with "+MainGameDataIndex.ADVENTURE_SCORE_COMMON_ARTIFACT );						}					}										_savingUnlockedTreasure = false;										checkForSaveUserDataProgress();				}								protected function handleAddUnlockedTreasureError( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleAddUnlockedTreasureComplete );					event.currentTarget.removeEventListener( "onError", handleAddUnlockedTreasureError );										_savingUnlockedTreasure = false;				}							/** addUnlockedCryptology			  *	---------------------------------------------------------------------------- 				public function addUnlockedCryptology( id:int ):void				{					_currentUser.unlockedCryptologies.push( MainGameDataIndex.getInstance().getCryptology(id) );										var cryptologyDataController:CryptologyDataController = new CryptologyDataController();						cryptologyDataController.addEventListener( "onComplete", handleAddUnlockedCryptologyComplete );						cryptologyDataController.addEventListener( "onError", handleAddUnlockedCryptologyError );						cryptologyDataController.addUnlockedCryptology( _currentUser.id, id );									}*/				/*				protected function handleAddUnlockedCryptologyComplete( event:CustomEvent ):void				{					trace( event.currentTarget );										event.currentTarget.removeEventListener( "onComplete", handleAddUnlockedCryptologyComplete );					event.currentTarget.removeEventListener( "onError", handleAddUnlockedCryptologyError );										_currentUser.unlockedCryptologies.push( MainGameDataIndex.getInstance().getCryptology(event.customParameters.cryptologyId) );				}								protected function handleAddUnlockedCryptologyError( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleAddUnlockedCryptologyComplete );					event.currentTarget.removeEventListener( "onError", handleAddUnlockedCryptologyError );									}				*/			/** addUnlockedWeapons			  *	---------------------------------------------------------------------------- */				public function addUnlockedWeapons( ids:Array ):void				{					_savingUnlockedWeapons = true;										var weaponDataController:WeaponDataController = new WeaponDataController();						weaponDataController.addEventListener( "onComplete", handleAddUnlockedWeaponsComplete );						weaponDataController.addEventListener( "onError", handleAddUnlockedWeaponsError );						weaponDataController.addUnlockedWeapons( _currentUser.id, ids );				}								protected function handleAddUnlockedWeaponsComplete( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleAddUnlockedWeaponsComplete );					event.currentTarget.removeEventListener( "onError", handleAddUnlockedWeaponsError );										var unlockedWeapons:Array = event.customParameters.unlockedWeapons;					var weapon:Weapon;					for( var i:int=0; i<unlockedWeapons.length; ++i )					{						weapon = GameLevelDataIndex.getInstance().getWeapon( unlockedWeapons[i].weapon_id ).clone();						weapon.useCount = unlockedWeapons[i].use_count;						weapon.dateAdded = new Date(Number(unlockedWeapons[i].date_added)*1000);												_currentUser.unlockedWeapons.push( weapon );												trace( "adding unlocked weapon of "+unlockedWeapons[i].weapon_id );												if( weapon.consumable )						{							_currentUser.adventureScore += MainGameDataIndex.ADVENTURE_SCORE_SPECIAL_ITEM;							trace( "adding adventureScore with "+MainGameDataIndex.ADVENTURE_SCORE_SPECIAL_ITEM );						}						else						{							_currentUser.adventureScore += MainGameDataIndex.ADVENTURE_SCORE_TRIBAL_ITEM;							trace( "adding adventureScore with "+MainGameDataIndex.ADVENTURE_SCORE_TRIBAL_ITEM );						}					}										_savingUnlockedWeapons = false;										checkForSaveUserDataProgress();				}								protected function handleAddUnlockedWeaponsError( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleAddUnlockedWeaponsComplete );					event.currentTarget.removeEventListener( "onError", handleAddUnlockedWeaponsError );										_savingUnlockedWeapons = false;				}							/** addUnlockedGods			  *	---------------------------------------------------------------------------- */				public function addUnlockedGods( ids:Array ):void				{					_savingUnlockedGods = true;										var godDataController:GodDataController = new GodDataController();						godDataController.addEventListener( "onComplete", handleAddUnlockedGodsComplete );						godDataController.addEventListener( "onError", handleAddUnlockedGodsError );						godDataController.addUnlockedGods( _currentUser.id, ids );				}								protected function handleAddUnlockedGodsComplete( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleAddUnlockedGodsComplete );					event.currentTarget.removeEventListener( "onError", handleAddUnlockedGodsError );										var unlockedGods:Array = event.customParameters.unlockedGods;					var god:God;					for( var i:int=0; i<unlockedGods.length; ++i )					{						god = GameLevelDataIndex.getInstance().getGod( unlockedGods[i].god_id ).clone();						god.useCount = unlockedGods[i].use_count;						god.dateAdded = new Date(Number(unlockedGods[i].date_added)*1000);												_currentUser.unlockedGods.push( god );												trace( "adding unlocked god of "+unlockedGods[i].god_id );												if( god.consumable )						{							_currentUser.adventureScore += MainGameDataIndex.ADVENTURE_SCORE_SPECIAL_ITEM;							trace( "adding adventureScore with "+MainGameDataIndex.ADVENTURE_SCORE_SPECIAL_ITEM );						}						else						{							_currentUser.adventureScore += MainGameDataIndex.ADVENTURE_SCORE_TRIBAL_ITEM;							trace( "adding adventureScore with "+MainGameDataIndex.ADVENTURE_SCORE_TRIBAL_ITEM );						}					}										_savingUnlockedGods = false;										checkForSaveUserDataProgress();				}								protected function handleAddUnlockedGodsError( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleAddUnlockedGodsComplete );					event.currentTarget.removeEventListener( "onError", handleAddUnlockedGodsError );										_savingUnlockedGods = false;				}							/** addUnlockedEnemies			  *	---------------------------------------------------------------------------- */				public function addUnlockedEnemies( ids:Array ):void				{					_savingUnlockedEnemies = true;										var enemyDataController:EnemyDataController = new EnemyDataController();						enemyDataController.addEventListener( "onComplete", handleAddUnlockedEnemiesComplete );						enemyDataController.addEventListener( "onError", handleAddUnlockedEnemiesError );						enemyDataController.addUnlockedEnemies( _currentUser.id, ids );				}								protected function handleAddUnlockedEnemiesComplete( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleAddUnlockedEnemiesComplete );					event.currentTarget.removeEventListener( "onError", handleAddUnlockedEnemiesError );										var unlockedEnemies:Array = event.customParameters.unlockedEnemies;					var enemy:Enemy;					for( var i:int=0; i<unlockedEnemies.length; ++i )					{						enemy = GameLevelDataIndex.getInstance().getEnemy( unlockedEnemies[i].enemy_id ).clone();						enemy.dateAdded = new Date(Number(unlockedEnemies[i].date_added)*1000);												_currentUser.unlockedEnemies.push( enemy );												trace( "adding unlocked enemy of "+unlockedEnemies[i].enemy_id );												_currentUser.adventureScore += MainGameDataIndex.ADVENTURE_SCORE_ENEMY;						trace( "adding adventureScore with "+MainGameDataIndex.ADVENTURE_SCORE_ENEMY );					}										_savingUnlockedEnemies = false;										checkForSaveUserDataProgress();				}								protected function handleAddUnlockedEnemiesError( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleAddUnlockedEnemiesComplete );					event.currentTarget.removeEventListener( "onError", handleAddUnlockedEnemiesError );										_savingUnlockedEnemies = false;				}							/** saveDiggingMap			  *	---------------------------------------------------------------------------- */				public function saveDiggingMap( diggingMap:DiggingMap, villageId:int, updateDigTime:Boolean=false ):void				{					//_currentUser.saveDiggingMap( diggingMap );										var treasureDataController:TreasureDataController = new TreasureDataController();						treasureDataController.addEventListener( "onComplete", handleSaveDiggingMapComplete );						treasureDataController.addEventListener( "onError", handleSaveDiggingMapError );						treasureDataController.saveDiggingMap( _currentUser.id, villageId, diggingMap, updateDigTime );				}								protected function handleSaveDiggingMapComplete( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleSaveDiggingMapComplete );					event.currentTarget.removeEventListener( "onError", handleSaveDiggingMapError );										//trace( 'digging map is saved for village id '+event.customParameters.villageId );										var diggingMap:DiggingMap = _currentUser.getDiggingMap( event.customParameters.villageId );					if( diggingMap != null )					{						diggingMap.id = event.customParameters.diggingMapId;						diggingMap = null;					}										for( var i:int=0; i<_currentUser.unlockedIslands.length; ++i )					{						if( _currentUser.unlockedIslands[i].id == event.customParameters.islandId )						{							_currentUser.unlockedIslands[i].lastDigTime = event.customParameters.lastDigTime;						}					}				}								protected function handleSaveDiggingMapError( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleSaveDiggingMapComplete );					event.currentTarget.removeEventListener( "onError", handleSaveDiggingMapError );				}											/**	******************************************* *			  * Gifts Functions			  *	******************************************* */			 	public function sendGiftsToFriends( item:AbstractGameObject ):void				{					//TODO:					//	Check to see which ids we are excluding										_giftItem = item;										var giftDataController:GiftDataController = new GiftDataController();						giftDataController.addEventListener( "onComplete", handleGetRecentGiftsComplete );						giftDataController.addEventListener( "onError", handleGetRecentGiftsComplete );						giftDataController.getRecentGifts( _currentUser.id );									}								protected function handleGetRecentGiftsComplete( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleGetRecentGiftsComplete );					event.currentTarget.removeEventListener( "onError", handleGetRecentGiftsComplete );										_facebookFunctions.addEventListener( "onComplete", handleSendGiftsToFriendsComplete );					_facebookFunctions.addEventListener( "onCancel", handleSendGiftsToFriendsCancel );										ConsoleBroadcaster.broadcast( "MainGameController", "userIds: "+event.customParameters.userIds );										if( event.customParameters.userIds == null )						_facebookFunctions.sendGiftsToFriends( _giftItem, [] );					else						_facebookFunctions.sendGiftsToFriends( _giftItem, event.customParameters.userIds );				}								protected function handleSendGiftsToFriendsComplete( event:CustomEvent ):void				{					_facebookFunctions.removeEventListener( "onComplete", handleSendGiftsToFriendsComplete );					_facebookFunctions.removeEventListener( "onCancel", handleSendGiftsToFriendsCancel );										_giftItem = null;										var giftDataController:GiftDataController = new GiftDataController();						giftDataController.addGifts( event.customParameters.itemId, event.customParameters.itemType, event.customParameters.fromFBId, event.customParameters.requestId, event.customParameters.toIds );										//var trackingDataController:TrackingDataController = new TrackingDataController();						//trackingDataController.saveTrackingGiftingBorrowing( _currentUser.id, event.customParameters.itemId, event.customParameters.itemType, false, event.customParameters										onGiftRequestSent.dispatch( event.customParameters.toIds.length );				}								protected function handleSendGiftsToFriendsCancel( event:CustomEvent ):void				{					_facebookFunctions.removeEventListener( "onComplete", handleSendGiftsToFriendsComplete );					_facebookFunctions.removeEventListener( "onCancel", handleSendGiftsToFriendsCancel );										_giftItem = null;										onGiftRequestCancel.dispatch();				}							/** requestGiftsFromFriends			  *	---------------------------------------------------------------------------- */				public function requestGiftsFromFriends( item:AbstractGameObject, friendId:String ):void				{					_giftItem = item;										_facebookFunctions.addEventListener( "onComplete", handleRequestGiftsFromFriendsComplete );					_facebookFunctions.addEventListener( "onCancel", handleRequestGiftsFromFriendsCancel );					_facebookFunctions.requestGiftsFromFriends( _giftItem, friendId );										/*					var giftDataController:GiftDataController = new GiftDataController();						giftDataController.addEventListener( "onComplete", handleGetRecentRequestedGiftsComplete );						giftDataController.addEventListener( "onError", handleGetRecentRequestedGiftsComplete );						giftDataController.getRecentRequestedGifts( _currentUser.id, friendId );					*/				}								protected function handleRequestGiftsFromFriendsComplete( event:CustomEvent ):void				{					_facebookFunctions.removeEventListener( "onComplete", handleRequestGiftsFromFriendsComplete );					_facebookFunctions.removeEventListener( "onCancel", handleRequestGiftsFromFriendsCancel );										_giftItem = null;										var giftDataController:GiftDataController = new GiftDataController();						giftDataController.addGifts( event.customParameters.itemId, event.customParameters.itemType, event.customParameters.fromFBId, event.customParameters.requestId, event.customParameters.toIds, true );										onGiftRequestSent.dispatch( event.customParameters.toIds.length );				}								protected function handleRequestGiftsFromFriendsCancel( event:CustomEvent ):void				{					_facebookFunctions.removeEventListener( "onComplete", handleRequestGiftsFromFriendsComplete );					_facebookFunctions.removeEventListener( "onCancel", handleRequestGiftsFromFriendsCancel );										_giftItem = null;										onGiftRequestCancel.dispatch();				}								/*				protected function handleGetRecentRequestedGiftsComplete( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleGetRecentRequestedGiftsComplete );					event.currentTarget.removeEventListener( "onError", handleGetRecentRequestedGiftsComplete );										if( event.customParameters.userId )					{						_facebookFunctions.addEventListener( "onComplete", handleAskedGiftsFromFriendsComplete );						_facebookFunctions.requestGiftsFromFriends( _giftItem, event.customParameters.userId );					}					else					{						//TODO:						//	Do something if you can't request from a friend					}				}				*/				protected function handleAskedGiftsFromFriendsComplete( event:CustomEvent ):void				{					_facebookFunctions.removeEventListener( "onComplete", handleAskedGiftsFromFriendsComplete );														}							/**	******************************************* *			  * Cryptology Functions			  *	******************************************* */			 				  				/*public function askFriendsForCryptology( cryptology:Cryptology ):void				{					//_facebookFunctions.addEventListener( "onComplete", handleAskFriendsForCryptologyComplete );					//_facebookFunctions.askFriendsForCryptology( cryptology );				}*/				/*				protected function handleAskFriendsForCryptologyComplete( event:CustomEvent ):void				{					_facebookFunctions.removeEventListener( "onComplete", handleAskFriendsForCryptologyComplete );										var addRequestCryptologies_cdc:CryptologyDataController = new CryptologyDataController();						addRequestCryptologies_cdc.addEventListener( "onComplete", handleAddCryptologyRequestsComplete );						addRequestCryptologies_cdc.addEventListener( "onError", handleAddCryptologyRequestsError );						addRequestCryptologies_cdc.addCryptologyRequests( event.customParameters.cryptologyId, event.customParameters.result );				}								protected function handleAddCryptologyRequestsComplete( event:CustomEvent ):void				{					ConsoleBroadcaster.broadcast( "MainGameController", "handleAddCryptologyRequestsComplete();" );										event.currentTarget.removeEventListener( "onComplete", handleAddCryptologyRequestsComplete );					event.currentTarget.removeEventListener( "onError", handleAddCryptologyRequestsError );										dispatchEvent( new CustomEvent("onComplete") );				}								protected function handleAddCryptologyRequestsError( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleAddCryptologyRequestsComplete );					event.currentTarget.removeEventListener( "onError", handleAddCryptologyRequestsError );				}				*/			/** completeUnlockedCryptology			  *	---------------------------------------------------------------------------- 				public function completeUnlockedCryptology( cryptologyId:int ):void				{					var completeUnlockedCryptology_cdc:CryptologyDataController = new CryptologyDataController();						completeUnlockedCryptology_cdc.completeUnlockedCryptology( _currentUser.id, cryptologyId );										_currentUser.getUnlockedCryptology(cryptologyId).fullToken = true;				}*/							/** purchaseItem			  *	---------------------------------------------------------------------------- */				public function purchaseItem( type:String, itemId:int, priceId:int, additionalValue:String='' ):void				{					EventNotificationCenter.getInstance().sendNotification( BoogaEvent.ON_EXIT_FULL_SCREEN, this );										_facebookFunctions.addEventListener( BoogaEvent.ON_PURCHASE_FAIL, handlePurchaseItemFail );					_facebookFunctions.addEventListener( BoogaEvent.ON_PURCHASE_SUCCESS, handlePurchaseItemSuccess );					_facebookFunctions.purchaseItem( type, itemId, priceId, additionalValue );				}								protected function handlePurchaseItemFail( event:BoogaEvent ):void				{					ConsoleBroadcaster.broadcast( "MainGameController", "handlePurchaseItemFail();" );										_facebookFunctions.removeEventListener( BoogaEvent.ON_PURCHASE_FAIL, handlePurchaseItemFail );					_facebookFunctions.removeEventListener( BoogaEvent.ON_PURCHASE_SUCCESS, handlePurchaseItemSuccess );										dispatchEvent( new BoogaEvent(BoogaEvent.ON_PURCHASE_FAIL) );				}								protected function handlePurchaseItemSuccess( event:BoogaEvent ):void				{					ConsoleBroadcaster.broadcast( "MainGameController", "handlePurchaseItemSuccess();" );										_facebookFunctions.removeEventListener( BoogaEvent.ON_PURCHASE_FAIL, handlePurchaseItemFail );					_facebookFunctions.removeEventListener( BoogaEvent.ON_PURCHASE_SUCCESS, handlePurchaseItemSuccess );										getConsumableUseCount();										//dispatchEvent( new BoogaEvent(BoogaEvent.ON_PURCHASE_SUCCESS) );				}								public function purchaseToDigEarly():void				{					EventNotificationCenter.getInstance().sendNotification( BoogaEvent.ON_EXIT_FULL_SCREEN, this );										//_facebookFunctions.addEventListener( BoogaEvent.ON_PURCHASE_FAIL, handlePurchaseToDigEarlyFail );					//_facebookFunctions.addEventListener( BoogaEvent.ON_PURCHASE_SUCCESS, handlePurchaseToDigEarlySuccess );					_facebookFunctions.addEventListener( BoogaEvent.ON_PURCHASE_RESULT, handlePurchaseToDigEarlyResult );					_facebookFunctions.purchaseToDigEarly( _islandSelectionViewCurrentIslandId );				}								protected function handlePurchaseToDigEarlyResult( event:BoogaEvent ):void				{					_facebookFunctions.removeEventListener( BoogaEvent.ON_PURCHASE_RESULT, handlePurchaseToDigEarlyResult );										if( event.customParameters.type == BoogaEvent.ON_PURCHASE_FAIL )					{						//dispatchEvent( new BoogaEvent(BoogaEvent.ON_PURCHASE_FAIL) );					}					else if( event.customParameters.type == BoogaEvent.ON_PURCHASE_SUCCESS )					{						/*						var updateLastDigTime_idc:IslandDataController = new IslandDataController();							updateLastDigTime_idc.addEventListener( "onComplete", handleUpdateLastDigTimeComplete );							updateLastDigTime_idc.addEventListener( "onError", handleUpdateLastDigTimeError );							updateLastDigTime_idc.updateLastDigTime( _currentUser.id, _currentUser.getUnlockedIsland(_island.id).id );						*/												_currentUser.getUnlockedIsland( _islandSelectionViewCurrentIslandId ).lastDigTime = 0;					}										dispatchEvent( new BoogaEvent(event.customParameters.type) );				}											/** getConsumableUseCount			  *	---------------------------------------------------------------------------- */			  	public function getConsumableUseCount():void				{					var storeDataController:StoreDataController = new StoreDataController();						storeDataController.addEventListener( "onComplete", handleGetConsumableUseCountComplete );						storeDataController.addEventListener( "onError", handleGetConsumableUseCountError );						storeDataController.getConsumableUseCount( _currentUser.id );				}								protected function handleGetConsumableUseCountComplete( event:CustomEvent ):void				{					ConsoleBroadcaster.broadcast( "MainGameController", "handleGetConsumableUseCountComplete();" );										event.currentTarget.removeEventListener( "onComplete", handleGetConsumableUseCountComplete );					event.currentTarget.removeEventListener( "onError", handleGetConsumableUseCountError );										var i:int;										if( event.customParameters.weapons != null )					{						for( i=0; i<event.customParameters.weapons.length; ++i )						{							ConsoleBroadcaster.broadcast( "MainGameController", "update weapon "+event.customParameters.weapons[i].weapon_id+" use count to "+event.customParameters.weapons[i].use_count );							_currentUser.getUnlockedWeapon(event.customParameters.weapons[i].weapon_id).useCount = event.customParameters.weapons[i].use_count;						}					}										if( event.customParameters.gods != null )					{						for( i=0; i<event.customParameters.gods.length; ++i )						{							ConsoleBroadcaster.broadcast( "MainGameController", "update god "+event.customParameters.weapons[i].weapon_id+" use count to "+event.customParameters.weapons[i].use_count );							_currentUser.getUnlockedGod(event.customParameters.gods[i].god_id).useCount = event.customParameters.gods[i].use_count;						}					}										dispatchEvent( new BoogaEvent(BoogaEvent.ON_PURCHASE_SUCCESS) );				}								protected function handleGetConsumableUseCountError( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleGetConsumableUseCountComplete );					event.currentTarget.removeEventListener( "onError", handleGetConsumableUseCountError );										dispatchEvent( new BoogaEvent(BoogaEvent.ON_PURCHASE_FAIL) );				}							/** refreshAcceptedGifts			  *	---------------------------------------------------------------------------- */			  	public function refreshAcceptedGifts():void				{					var gdc:GiftDataController = new GiftDataController();						gdc.addEventListener( "onComplete", handleRefreshAcceptedGiftsComplete );						gdc.addEventListener( "onError", handleRefreshAcceptedGiftsError );						gdc.getAcceptedGifts( _currentUser.id );				}								protected function handleRefreshAcceptedGiftsComplete( event:CustomEvent ):void				{					VectorUtil.removeAll( _currentUser.gifts );										var gifts:Array = event.customParameters.gifts;					var gift:Gift;										for( var i:int=0; i<gifts.length; ++i )					{						gift = new Gift();						gift.id = gifts[i].id;						gift.type = gifts[i].type;						gift.itemId = gifts[i].item_id;												if( gift.type == "Weapon" )							gift.item = GameLevelDataIndex.getInstance().getWeapon( gift.itemId );						else if( gift.type == "God" )							gift.item = GameLevelDataIndex.getInstance().getGod( gift.itemId );												gift.count = gifts[i].count;						gift.fromId = gifts[i].from_user_id;						gift.fromProfilePicURL = gifts[i].fb_profile_pic_url;						gift.fromFirstName = gifts[i].first_name;						gift.fromLastName = gifts[i].last_name;												_currentUser.gifts.push( gift );					}										onRefreshAcceptedGiftsCompleted.dispatch();				}								protected function handleRefreshAcceptedGiftsError( event:CustomEvent ):void				{					onRefreshAcceptedGiftsErred.dispatch();				}							/** deleteGift			  *	---------------------------------------------------------------------------- */			  	public function deleteGift( gift:Gift ):void				{					var gdc:GiftDataController = new GiftDataController();						gdc.deleteGift( gift.id );				}							/**	******************************************* *			  * Gameboard Events			  *	******************************************* */			 					public function clearCache():void				{									}							/** runGarbageCollector			  *	---------------------------------------------------------------------- */				public function runGarbageCollector():void				{					ConsoleBroadcaster.broadcast( "MainGameController", "before GC, System.totalMemory: "+System.totalMemory );										var lc:LocalConnection;										try					{						new LocalConnection().connect("_FORCE_GC_");						//trace( "connect once" );						new LocalConnection().connect("_FORCE_GC_");					}					catch( e:Error )					{						//cb.broadcast( "System.gc not available, "+e.message );					}										ConsoleBroadcaster.broadcast( "MainGameController", "after GC, System.totalMemory: "+System.totalMemory );									}						}			}