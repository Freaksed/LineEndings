/** CryptologyDataController  *	---------------------------------------------------------------------------- *  *	@desc:  *		Data controller class to load cryptology data from the server.  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */	package com.boogabooga.controller.maingame	{		import flash.events.Event;		import flash.events.EventDispatcher;		import flash.events.IOErrorEvent;		import flash.events.FullScreenEvent;		import flash.events.ProgressEvent;		import flash.external.ExternalInterface;		import flash.net.URLLoader;		import flash.net.URLRequest;		import flash.net.URLRequestMethod;		import flash.net.URLVariables;				import com.adobe.serialization.json.JSONDecoder;		import com.adobe.serialization.json.JSONEncoder;		import com.avatarlabs.utils.cache.HashTable;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;				import com.boogabooga.controller.BaseDataController;		import com.boogabooga.data.gamelevel.AbstractGameObject;		import com.boogabooga.data.gamelevel.AnimationObject;		import com.boogabooga.data.gamelevel.GameLevelDataIndex;		import com.boogabooga.data.maingame.*;		import com.boogabooga.utils.GameLevelUtil;				public class CryptologyDataController extends BaseDataController		{						/** Constructor			  *	---------------------------------------------------------------------- */				public function CryptologyDataController()				{					super();										_debug = true;									}							/** loadCryptologies			  *	---------------------------------------------------------------------- */				public function loadCryptologies():void				{					var data:URLVariables = new URLVariables();						data.url = "cryptologies/getAllPublishedCryptologies";										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleLoadAllPublishedCryptologiesComplete, handleLoadAllPublishedCryptologiesError );				}							/** handleLoadAllPublishedCryptologiesComplete			  *	---------------------------------------------------------------------- */				private function handleLoadAllPublishedCryptologiesComplete( event:Event ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "CryptologyDataController", "handleLoadAllPublishedCryptologiesComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleLoadAllPublishedCryptologiesComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleLoadAllPublishedCryptologiesError );										try					{						//trace( event.currentTarget.data );												var data = new JSONDecoder(event.currentTarget.data).getValue();												if( data.status )						{							var cryptology:Cryptology;														for( var i:uint=0; i<data.result.length; ++i )							{								cryptology = new Cryptology();								cryptology.id = data.result[i]["id"];								cryptology.name = data.result[i]["name"];								cryptology.description = data.result[i]["description"];								cryptology.iconURL = data.result[i]["asset_url"];								cryptology.createdBy = data.result[i]["created_by"];								cryptology.cacheIconId = "Cryptology_"+cryptology.id;																MainGameDataIndex.getInstance().addCryptology( cryptology );							}														dispatchEvent( new CustomEvent("onComplete") );						}						else						{							dispatchEvent( new CustomEvent("onError") );						}					}					catch( e:Error )					{						ConsoleBroadcaster.broadcast( "CryptologyDataController", "Error in parsing data, "+event.currentTarget.data );												dispatchEvent( new CustomEvent("onError") );					}				}							/** handleLoadAllPublishedCryptologiesError			  *	---------------------------------------------------------------------- */				private function handleLoadAllPublishedCryptologiesError( event:IOErrorEvent ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "CryptologyDataController", "handleLoadAllPublishedCryptologiesError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleLoadAllPublishedCryptologiesComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleLoadAllPublishedCryptologiesError );										dispatchEvent( new CustomEvent("onError") );				}							/** addUnlockedCryptology			  *	---------------------------------------------------------------------- */				public function addUnlockedCryptology( userId:int, cryptologyId:int ):void				{					var dataObject:Object = new Object();						dataObject.user_id = userId;						dataObject.cryptology_id = cryptologyId;										var data:URLVariables = new URLVariables();						data.url = "cryptologies/addUnlockedCryptology";						data.data = new JSONEncoder(dataObject).getString();										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleAddUnlockedCryptologyComplete, handleAddUnlockedCryptologyError );				}								protected function handleAddUnlockedCryptologyComplete( event:Event ):void				{					ConsoleBroadcaster.broadcast( "CryptologyDataController", "handleAddUnlockedCryptologyComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleAddUnlockedCryptologyComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleAddUnlockedCryptologyError );										ConsoleBroadcaster.broadcast( "CryptologyDataController", "data: "+event.currentTarget.data );										try					{						var data = new JSONDecoder(event.currentTarget.data).getValue();												if( data.status )						{							dispatchEvent( new CustomEvent("onComplete", {userId:data.user_id, cryptologyId:data.cryptology_id}) );						}						else						{							dispatchEvent( new CustomEvent("onError") );						}					}					catch( e:Error )					{						dispatchEvent( new CustomEvent("onError") );					}				}								protected function handleAddUnlockedCryptologyError( event:Event ):void				{					ConsoleBroadcaster.broadcast( "CryptologyDataController", "handleAddUnlockedCryptologyError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleAddUnlockedCryptologyComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleAddUnlockedCryptologyError );										dispatchEvent( new CustomEvent("onError") );				}							/** getUnlockedCryptologies			  *	---------------------------------------------------------------------- */				public function getUnlockedCryptologies( userId:int ):void				{									}								public function completeUnlockedCryptology( userId:int, cryptologyId:int ):void				{					var dataObject:Object = new Object();						dataObject.user_id = userId;						dataObject.cryptology_id = cryptologyId;										var data:URLVariables = new URLVariables();						data.url = "cryptologies/completeUnlockedCryptology";						data.data = new JSONEncoder(dataObject).getString();										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleCompleteUnlockedCryptologyComplete, handleCompleteUnlockedCryptologyError );				}								protected function handleCompleteUnlockedCryptologyComplete( event:Event ):void				{					event.currentTarget.removeEventListener( Event.COMPLETE, handleCompleteUnlockedCryptologyComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleCompleteUnlockedCryptologyError );										ConsoleBroadcaster.broadcast( "CryptologyDataController", "handleCompleteUnlockedCryptologyComplete();" );					ConsoleBroadcaster.broadcast( "CryptologyDataController", "data: "+event.currentTarget.data );				}								protected function handleCompleteUnlockedCryptologyError( event:IOErrorEvent ):void				{					event.currentTarget.removeEventListener( Event.COMPLETE, handleCompleteUnlockedCryptologyComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleCompleteUnlockedCryptologyError );										ConsoleBroadcaster.broadcast( "CryptologyDataController", "handleCompleteUnlockedCryptologyError();" );				}							/** addUnlockedCryptology			  *	---------------------------------------------------------------------- */				public function getFriendsWithCryptology( userFbId:String, cryptologyId:int ):void				{					var dataObject:Object = new Object();						dataObject.fb_id = userFbId;						dataObject.cryptology_id = cryptologyId;										var data:URLVariables = new URLVariables();						data.url = "cryptologies/getFriendsWithCryptology";						data.data = new JSONEncoder(dataObject).getString();										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleGetFriendsWithCryptologyComplete, handleGetFriendsWithCryptologyError );				}								protected function handleGetFriendsWithCryptologyComplete( event:Event ):void				{					ConsoleBroadcaster.broadcast( "CryptologyDataController", "handleGetFriendsWithCryptologyComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleGetFriendsWithCryptologyComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleGetFriendsWithCryptologyError );										ConsoleBroadcaster.broadcast( "CryptologyDataController", ""+event.currentTarget.data );										try					{						var data = new JSONDecoder(event.currentTarget.data).getValue();												if( data.status )						{							dispatchEvent( new CustomEvent("onComplete", {friendsWithCryptology:data.friends_with_cryptology}) );						}					}					catch( e:Error )					{						ConsoleBroadcaster.broadcast( "CryptologyDataController", "Error in parsing data, "+e.message );						ConsoleBroadcaster.broadcast( "CryptologyDataController", event.currentTarget.data );												dispatchEvent( new CustomEvent("onError") );					}				}								protected function handleGetFriendsWithCryptologyError( event:IOErrorEvent ):void				{					ConsoleBroadcaster.broadcast( "CryptologyDataController", "handleGetFriendsWithCryptologyError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleGetFriendsWithCryptologyComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleGetFriendsWithCryptologyError );										dispatchEvent( new CustomEvent("onError") );				}								public function addCryptologyRequests( cryptologyId:int, requests:Array ):void				{					ConsoleBroadcaster.broadcast( "CryptologyDataController", "addCryptologyRequests("+cryptologyId+", requests: "+requests+");" )										var requestData:Array = new Array();										for( var i:int=0; i<requests.length; ++i )					{						requestData[i] = {};						//requestData[i].cryptology_id = cryptologyId;						requestData[i].from_user_fb_id = requests[i].from.id;						requestData[i].to_user_fb_id = requests[i].to.id;						requestData[i].fb_request_id = requests[i].id;					}										var dataObject:Object = new Object();						dataObject.cryptology_id = cryptologyId;						dataObject.requests = requestData;										var data:URLVariables = new URLVariables();						data.data = new JSONEncoder(dataObject).getString();						data.url = "cryptologies/addCryptologyRequests";										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleAddCryptologyRequestsComplete, handleAddCryptologyRequestsError );				}								protected function handleAddCryptologyRequestsComplete( event:Event ):void				{					ConsoleBroadcaster.broadcast( "CryptologyDataController", "handleAddCryptologyRequestcomplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleAddCryptologyRequestsComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleAddCryptologyRequestsError );				}								protected function handleAddCryptologyRequestsError( event:IOErrorEvent ):void				{										event.currentTarget.removeEventListener( Event.COMPLETE, handleAddCryptologyRequestsComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleAddCryptologyRequestsError );				}								public function acceptCryptologyRequest( id:int ):void				{					var dataObject:Object = new Object();						dataObject.id = id;						//dataObject.cryptology_id = cryptologyId;						//dataObject.from_user_id = fromUserId;						//dataObject.to_user_id = toUserId;											var data:URLVariables = new URLVariables();						data.data = new JSONEncoder(dataObject).getString();						data.url = "cryptologies/acceptCryptologyRequest";										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleAcceptCryptologyRequestComplete, handleAcceptCryptologyRequestError );				}								protected function handleAcceptCryptologyRequestComplete( event:Event ):void				{					event.currentTarget.removeEventListener( Event.COMPLETE, handleAcceptCryptologyRequestComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleAcceptCryptologyRequestError );										ConsoleBroadcaster.broadcast( "CryptologyDataController", "handleAcceptCryptologyRequestcomplete("+event.currentTarget.data+");" );				}								protected function handleAcceptCryptologyRequestError( event:IOErrorEvent ):void				{					event.currentTarget.removeEventListener( Event.COMPLETE, handleAcceptCryptologyRequestComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleAcceptCryptologyRequestError );										ConsoleBroadcaster.broadcast( "CryptologyDataController", "handleAcceptCryptologyRequestError();" );										dispatchEvent( new CustomEvent("onError") );				}								public function getLatestCryptology( userId:int ):void				{					var dataObject:Object = new Object();						dataObject.user_id = userId;										var data:URLVariables = new URLVariables();						data.data = new JSONEncoder(dataObject).getString();						data.url = "cryptologies/getLatestCryptology";										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleGetLatestCryptologyComplete, handleGetLatestCryptologyError );				}								protected function handleGetLatestCryptologyComplete( event:Event ):void				{					event.currentTarget.removeEventListener( Event.COMPLETE, handleGetLatestCryptologyComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleGetLatestCryptologyError );										ConsoleBroadcaster.broadcast( "CryptologyDataController", "handleGetLatestCryptologyComplete();" );										try					{						var data = new JSONDecoder(event.currentTarget.data).getValue();												dispatchEvent( new CustomEvent("onComplete", {unlockedCryptologies:data.unlocked_cryptologies, requestCryptologies:data.request_cryptologies}) );					}					catch( e:Error )					{						ConsoleBroadcaster.broadcast( "CryptologyDataController", "Error in parsing data, "+e.message );						ConsoleBroadcaster.broadcast( "CryptologyDataController", "data: "+event.currentTarget.data );												dispatchEvent( new CustomEvent("onError") );					}				}								protected function handleGetLatestCryptologyError( event:IOErrorEvent ):void				{					event.currentTarget.removeEventListener( Event.COMPLETE, handleGetLatestCryptologyComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleGetLatestCryptologyError );										ConsoleBroadcaster.broadcast( "CryptologyDataController", "handleGetLatestCryptologyError();" );										dispatchEvent( new CustomEvent("onError") );				}							/** getFriendsWhoPlayGame			  *	---------------------------------------------------------------------------- */				public function getFriendsWhoPlayGame( fbId:String ):void				{					var dataObject:Object = new Object();						dataObject.fb_id = fbId;										var data:URLVariables = new URLVariables();						data.data = new JSONEncoder(dataObject).getString();						data.url = "cryptologies/getFriendsWhoPlayGame";										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleGetFriendsWhoPlayGameComplete, handleGetFriendsWhoPlayGameError );				}								protected function handleGetFriendsWhoPlayGameComplete( event:Event ):void				{					ConsoleBroadcaster.broadcast( "CryptologyDataController", "handleGetFriendsWhoPlayGameComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleGetFriendsWhoPlayGameComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleGetFriendsWhoPlayGameError );										try					{						var data = new JSONDecoder(event.currentTarget.data).getValue();												dispatchEvent( new CustomEvent("onComplete", {friends:data.result}) );					}					catch( e:Error )					{											}				}								protected function handleGetFriendsWhoPlayGameError( event:IOErrorEvent ):void				{					ConsoleBroadcaster.broadcast( "CryptologyDataController", "handleGetFriendsWhoPlayGameError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleGetFriendsWhoPlayGameComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleGetFriendsWhoPlayGameError );				}		}			}