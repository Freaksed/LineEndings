/** IslandDataController  *	---------------------------------------------------------------------------- *  *	@desc:  *		Data controller class to load treasure data from the server.  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */	package com.boogabooga.controller.maingame	{		import flash.events.Event;		import flash.events.EventDispatcher;		import flash.events.IOErrorEvent;		import flash.events.FullScreenEvent;		import flash.events.ProgressEvent;		import flash.external.ExternalInterface;		import flash.net.URLLoader;		import flash.net.URLRequest;		import flash.net.URLRequestMethod;		import flash.net.URLVariables;						import com.adobe.serialization.json.JSONDecoder;		import com.adobe.serialization.json.JSONEncoder;		import com.avatarlabs.utils.cache.HashTable;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;				import com.boogabooga.controller.BaseDataController;		import com.boogabooga.data.maingame.*;		import com.boogabooga.utils.GameLevelUtil;				public class IslandDataController extends BaseDataController		{						/** Constructor			  *	---------------------------------------------------------------------- */				public function IslandDataController()				{					super();										_debug = true;									}							/** loadIslandsForGame			  *	---------------------------------------------------------------------- */				public function loadIslandsForGame():void				{					var data:URLVariables = new URLVariables();						data.url = "islands/getIslandsForGame";										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleLoadIslandsComplete, handleLoadIslandsError );				}								protected function handleLoadIslandsComplete( event:Event ):void				{					ConsoleBroadcaster.broadcast( "IslandDataController", "handleLoadIslandsComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleLoadIslandsComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleLoadIslandsError );										try					{						var data = new JSONDecoder(event.currentTarget.data).getValue();												if( data.status )						{							var i:int, j:int;							var island:Island;							var village:Village;							var villages;							var level:int;														for( i=0; i<data.result.length; ++i )							{								island = new Island();								island.id = data.result[i]['id'];								island.name = data.result[i]['name'];								island.description = data.result[i]['description'];								island.iconURL = data.result[i]['icon_url'];								island.cacheIconId = 'Island_'+island.id+'_icon';								island.backgroundURL = data.result[i]['background_url'];								island.backgroundLinkageId = data.result[i]['background_linkage_id'];								island.islandOrder = data.result[i]['island_order'];								island.digTimer = data.result[i]['dig_timer'];																villages = data.result[i]['villages'];								for( j=0; j<villages.length; ++j )								{									village = new Village();									village.id = villages[j]['id'];									village.name = villages[j]['name'];									village.gameLevelId = villages[j]['game_level_id'];									//village.cryptologyId = villages[j]['cryptology_id'];									//village.archeologyDiggingSpotId = villages[j]['archeology_digging_spot_id'];									village.villageOrder = villages[j]['village_order'];									village.level = level + village.villageOrder;									island.villages.push( village );																		//trace( village.name+" level is "+village.level );								}																level += villages.length;																MainGameDataIndex.getInstance().addIsland( island );																//trace( "island "+island.id+" villages length "+island.villages.length );							}														var recordedIslands = MainGameDataIndex.getInstance().islands;														dispatchEvent( new CustomEvent("onComplete") );						}						else						{							dispatchEvent( new CustomEvent("onError") );						}					}					catch( e:Error )					{						ConsoleBroadcaster.broadcast( "IslandDataController", "Error in parsing data "+e.message );						ConsoleBroadcaster.broadcast( "IslandDataController", "data: "+event.currentTarget.data );						dispatchEvent( new CustomEvent("onError") );					}				}								protected function handleLoadIslandsError( event:IOErrorEvent ):void				{					ConsoleBroadcaster.broadcast( "IslandDataController", "handleLoadIslandsError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleLoadIslandsComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleLoadIslandsError );										dispatchEvent( new CustomEvent("onError") );				}							/** loadIsland			  *	---------------------------------------------------------------------- 				public function loadIsland( id:int ):void				{					var dataObject:Object = new Object();						dataObject.id = id;										var data:URLVariables = new URLVariables();						data.url = "islands/getIsland";				}*/											/** addUnlockedVillage			  *	---------------------------------------------------------------------- */				public function addUnlockedVillage( userId:int, islandId:int, villageId:int ):void				{					ConsoleBroadcaster.broadcast( "IslandDataController", "addUnlockedVillage("+userId+", "+islandId+", "+villageId+");" );										var dataObject:Object = new Object();						dataObject.user_id = userId;						dataObject.island_id = islandId;						dataObject.village_id = villageId;										var data:URLVariables = new URLVariables();						data.url = "islands/addUnlockedVillage";						data.data = new JSONEncoder(dataObject).getString();										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleAddUnlockedVillageComplete, handleAddUnlockedVillageError );				}								protected function handleAddUnlockedVillageComplete( event:Event ):void				{					ConsoleBroadcaster.broadcast( "IslandDataController", "handleAddUnlockedVillageComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleAddUnlockedVillageComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleAddUnlockedVillageError );										ConsoleBroadcaster.broadcast( "IslandDataController", "data "+event.currentTarget.data );										try					{						var data = new JSONDecoder(event.currentTarget.data).getValue();												if( data.status )						{							dispatchEvent( new CustomEvent("onComplete", {villageId:data.village_id, islandId:data.island_id}) );						}						else						{							dispatchEvent( new CustomEvent("onError") );						}					}					catch( e:Error )					{						dispatchEvent( new CustomEvent("onError") );					}				}								protected function handleAddUnlockedVillageError( event:IOErrorEvent ):void				{					ConsoleBroadcaster.broadcast( "IslandDataController", "handleAddUnlockedVillageError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleAddUnlockedVillageComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleAddUnlockedVillageError );										dispatchEvent( new CustomEvent("onError") );				}							/** loadServerUnixTime			  *	---------------------------------------------------------------------- */				public function loadServerUnixTime():void				{					var data:URLVariables = new URLVariables();						data.url = "islands/getServerUnixTime";										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleLoadServerUnixTimeComplete, handleLoadServerUnixTimeError );				}								protected function handleLoadServerUnixTimeComplete( event:Event ):void				{					ConsoleBroadcaster.broadcast( "IslandDataController", "handleLoadServerUnixTimeComplete();" );										//trace( "data: "+event.currentTarget.data );					//trace( Number(event.currentTarget.data) );										dispatchEvent( new CustomEvent("onComplete", {time:Number(event.currentTarget.data)*1000}) );										event.currentTarget.removeEventListener( Event.COMPLETE, handleLoadServerUnixTimeComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleLoadServerUnixTimeError );				}								protected function handleLoadServerUnixTimeError( event:IOErrorEvent ):void				{					ConsoleBroadcaster.broadcast( "IslandDataController", "handleLoadServerUnixTimeError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleLoadServerUnixTimeComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleLoadServerUnixTimeError );										dispatchEvent( new CustomEvent("onError") );				}							/** updateLastDigTime			  *	---------------------------------------------------------------------- */				public function updateLastDigTime( userId:int, islandId:int ):void				{					var dataObject:Object = new Object();						dataObject.user_id = userId;						dataObject.island_id = islandId;										var data:URLVariables = new URLVariables();							data.data = new JSONEncoder(dataObject).getString();						data.url = "islands/updateLastDigTime";										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleUpdateLastDigTimeComplete, handleUpdateLastDigTimeError );				}								protected function handleUpdateLastDigTimeComplete( event:Event ):void				{					ConsoleBroadcaster.broadcast( "TreasureDataController", "handleUpdateLastDigTimeComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleUpdateLastDigTimeComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleUpdateLastDigTimeError );										try					{						var data = new JSONDecoder(event.currentTarget.data).getValue();												ConsoleBroadcaster.broadcast( "IslandDatacontroller", "data: "+event.currentTarget.data );												if( data.status )						{							dispatchEvent( new CustomEvent("onComplete", {islandId:data.result.island_id, lastDigTime:data.result.last_dig_time}) );						}						else						{							dispatchEvent( new CustomEvent("onError") );						}					}					catch( e:Error )					{						ConsoleBroadcaster.broadcast( "IslandDataController", "Error in parsing data, "+e.message );						ConsoleBroadcaster.broadcast( "IslandDataController", "data: "+event.currentTarget.data );												dispatchEvent( new CustomEvent("onError") );					}				}								protected function handleUpdateLastDigTimeError( event:IOErrorEvent ):void				{					ConsoleBroadcaster.broadcast( "TreasureDataController", "handleUpdateLastDigTimeError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleUpdateLastDigTimeComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleUpdateLastDigTimeError );										dispatchEvent( new CustomEvent("onError") );				}		}			}