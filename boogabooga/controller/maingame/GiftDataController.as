/** GiftDataController  *	---------------------------------------------------------------------------- *  *	@desc:  *		Data controller class to load treasure data from the server.  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */	package com.boogabooga.controller.maingame	{		import flash.events.Event;		import flash.events.EventDispatcher;		import flash.events.IOErrorEvent;		import flash.events.FullScreenEvent;		import flash.events.ProgressEvent;		import flash.external.ExternalInterface;		import flash.net.URLLoader;		import flash.net.URLRequest;		import flash.net.URLRequestMethod;		import flash.net.URLVariables;						import com.adobe.serialization.json.JSONDecoder;		import com.adobe.serialization.json.JSONEncoder;		import com.avatarlabs.utils.cache.HashTable;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;				import com.boogabooga.controller.BaseDataController;		import com.boogabooga.data.maingame.*;		import com.boogabooga.utils.GameLevelUtil;				public class GiftDataController extends BaseDataController		{						/** Constructor			  *	---------------------------------------------------------------------- */				public function GiftDataController()				{					super();										_debug = true;									}							/** addGifts			  *	---------------------------------------------------------------------------- */				public function addGifts( itemId:int, itemType:String, fromFBId:String, requestId:String, toIds:Array, requestGift:Boolean=false ):void				{					/*					var requestData:Array = new Array();										for( var i:int=0; i<requests.length; ++i )					{						requestData[i] = {};						requestData[i].from_user_fb_id = requests[i].from.id;						requestData[i].to_user_fb_id = requests[i].to.id;						requestData[i].fb_request_id = requests[i].id;					}					*/					var dataObject:Object = new Object();						dataObject.item_id = itemId;						dataObject.item_type = itemType;						dataObject.requested = requestGift;						dataObject.from_fb_id = fromFBId;						dataObject.request_id = requestId;						dataObject.to_ids = toIds;										var data:URLVariables = new URLVariables();						data.data = new JSONEncoder(dataObject).getString();						data.url = "gifts/addGifts";										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleAddGiftsComplete, handleAddGiftsError );				}								protected function handleAddGiftsComplete( event:Event ):void				{					ConsoleBroadcaster.broadcast( "GiftDataController", "handleAddGiftsComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleAddGiftsComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleAddGiftsError );				}								protected function handleAddGiftsError( event:Event ):void				{					ConsoleBroadcaster.broadcast( "GiftDataController", "handleAddGiftsError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleAddGiftsComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleAddGiftsError );				}							/** addMysteryGift			  *	---------------------------------------------------------------------------- */				public function addMysteryGift( itemId:int, itemType:String, toId:int ):void				{					var dataObject:Object = new Object();						dataObject.item_id = itemId;						dataObject.item_type = itemType;						dataObject.to_id = toId;										var data:URLVariables = new URLVariables();						data.data = new JSONEncoder(dataObject).getString();						data.url = "gifts/addMysteryGift";										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleAddMysteryGiftComplete, handleAddMysteryGiftError );				}								private function handleAddMysteryGiftComplete( event:Event ):void				{					trace( 'handleAddMysteryGiftComplete();' );					trace( event.currentTarget.data );										event.currentTarget.removeEventListener( Event.COMPLETE, handleAddMysteryGiftComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleAddMysteryGiftError );				}								private function handleAddMysteryGiftError( event:IOErrorEvent ):void				{					event.currentTarget.removeEventListener( Event.COMPLETE, handleAddMysteryGiftComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleAddMysteryGiftError );				}							/** addAcceptedGift			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				public function addAcceptedGift( itemId:int, itemType:String, toId:int ):void				{					var dataObject:Object = new Object();						dataObject.item_id = itemId;						dataObject.item_type = itemType;						dataObject.to_id = toId;										var data:URLVariables = new URLVariables();						data.data = new JSONEncoder(dataObject).getString();						data.url = "gifts/addAcceptedGift";										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleAddMysteryGiftComplete, handleAddMysteryGiftError );				}							/** acceptGift			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				public function acceptGift( id:int ):void				{					var dataObject:Object = new Object();						dataObject.id = id;										var data:URLVariables = new URLVariables();						data.data = new JSONEncoder(dataObject).getString();						data.url = "gifts/acceptGift";										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleAcceptGiftComplete, handleAcceptGiftError );				}								protected function handleAcceptGiftComplete( event:Event ):void				{					event.currentTarget.removeEventListener( Event.COMPLETE, handleAcceptGiftComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleAcceptGiftError );										ConsoleBroadcaster.broadcast( "GiftDataController", "handleAcceptGiftComplete();" );				}								protected function handleAcceptGiftError( event:Event ):void				{					event.currentTarget.removeEventListener( Event.COMPLETE, handleAcceptGiftComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleAcceptGiftError );										ConsoleBroadcaster.broadcast( "GiftDataController", "handleAcceptGiftError();" );				}							/** deleteGift			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				public function deleteGift( id:int ):void				{					ConsoleBroadcaster.broadcast( "GiftDataController", "deleteGift("+id+");" );										var dataObject:Object = new Object();						dataObject.id = id;										var data:URLVariables = new URLVariables();						data.data = new JSONEncoder(dataObject).getString();						data.url = "gifts/deleteGift";										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleDeleteGiftComplete, handleDeleteGiftError );				}								protected function handleDeleteGiftComplete( event:Event ):void				{					event.currentTarget.removeEventListener( Event.COMPLETE, handleDeleteGiftComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleDeleteGiftError );										ConsoleBroadcaster.broadcast( "GiftDataController", "handleDeleteGiftComplete();" );				}								protected function handleDeleteGiftError( event:Event ):void				{					event.currentTarget.removeEventListener( Event.COMPLETE, handleDeleteGiftComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleDeleteGiftError );										ConsoleBroadcaster.broadcast( "GiftDataController", "handleDeleteGiftError();" );				}							/** getAcceptedGifts			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				public function getAcceptedGifts( userId:int ):void				{					var dataObject:Object = new Object();						dataObject.user_id = userId;										var data:URLVariables = new URLVariables();						data.data = new JSONEncoder(dataObject).getString();						data.url = "gifts/getAcceptedGifts";										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleGetAcceptedGiftsComplete, handleGetAcceptedGiftsError );				}								protected function handleGetAcceptedGiftsComplete( event:Event ):void				{					ConsoleBroadcaster.broadcast( "GiftDataController", "handleGetAcceptedGiftsComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleGetAcceptedGiftsComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleGetAcceptedGiftsError );										try					{						var data = new JSONDecoder(event.currentTarget.data).getValue();												if( data.status )						{							dispatchEvent( new CustomEvent("onComplete", {gifts:data.result}) );						}						else						{							dispatchEvent( new CustomEvent("onError") );						}					}					catch( e:Error )					{						ConsoleBroadcaster.broadcast( "GiftDataController", "Error in parsing data, "+event.currentTarget.data );						dispatchEvent( new CustomEvent("onError") );					}				}								protected function handleGetAcceptedGiftsError( event:IOErrorEvent ):void				{					ConsoleBroadcaster.broadcast( "GiftDataController", "handleGetAcceptedGiftsError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleGetAcceptedGiftsComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleGetAcceptedGiftsError );										dispatchEvent( new CustomEvent("onError") );				}							/** getRecentGifts			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				public function getRecentGifts( userId:int ):void				{					var dataObject:Object = new Object();						dataObject.user_id = userId;										var data:URLVariables = new URLVariables();						data.data = new JSONEncoder(dataObject).getString();						data.url = "gifts/getRecentGifts";										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleGetRecentGiftsComplete, handleGetRecentGiftsError );				}								protected function handleGetRecentGiftsComplete( event:Event ):void				{					ConsoleBroadcaster.broadcast( "GiftDataController", "handleGetRecentGiftsComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleGetRecentGiftsComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleGetRecentGiftsError );										try					{						var data = new JSONDecoder(event.currentTarget.data).getValue();												if( data.status )						{							var userIds:Array = new Array();														for( var i:int=0; i<data.result.length; ++i )							{								userIds.push( data.result[i] );							}							dispatchEvent( new CustomEvent("onComplete", {userIds:userIds}) );						}						else						{							dispatchEvent( new CustomEvent("onError") );						}					}					catch( e:Error )					{						ConsoleBroadcaster.broadcast( "GiftDataController", "Error in parsing data, "+event.currentTarget.data );												dispatchEvent( new CustomEvent("onError") );					}				}								protected function handleGetRecentGiftsError( event:IOErrorEvent ):void				{					ConsoleBroadcaster.broadcast( "GiftDataController", "handleGetRecentGiftsError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleGetRecentGiftsComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleGetRecentGiftsError );										dispatchEvent( new CustomEvent("onError") );				}							/** getRecentRequestedGifts			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				public function getRecentRequestedGifts( userId:int, friendId:int ):void				{					var dataObject:Object = new Object();						dataObject.user_id = userId;						dataObject.friend_id = friendId;										var data:URLVariables = new URLVariables();						data.data = new JSONEncoder(dataObject).getString();						data.url = "gifts/getRecentRequestedGifts";										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleGetRecentRequestedGiftsComplete, handleGetRecentRequestedGiftsError );				}								protected function handleGetRecentRequestedGiftsComplete( event:Event ):void				{					ConsoleBroadcaster.broadcast( "GiftDataController", "hanldeGetRecentRequestedGiftsComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleGetRecentRequestedGiftsComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleGetRecentRequestedGiftsError );										try					{						var data = new JSONDecoder(event.currentTarget.data).getValue();												if( data.status )						{							//var userId = data.result.fb_id;							dispatchEvent( new CustomEvent("onComplete", {result:data.result}) );						}						else						{							dispatchEvent( new CustomEvent("onError") );						}					}					catch( e:Error )					{						ConsoleBroadcaster.broadcast( "GiftDataController", "Error in parsing data, "+event.currentTarget.data );						dispatchEvent( new CustomEvent("onError") );					}				}								protected function handleGetRecentRequestedGiftsError( event:IOErrorEvent ):void				{					ConsoleBroadcaster.broadcast( "GiftDataController", "handleGetRecentRequestedGiftsError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleGetRecentRequestedGiftsComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleGetRecentRequestedGiftsError );										dispatchEvent( new CustomEvent("onError") );				}		}			}