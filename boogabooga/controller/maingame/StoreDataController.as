/** StoreDataController  *	---------------------------------------------------------------------------- *  *	@desc:  *		Data controller class to load treasure data from the server.  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */	package com.boogabooga.controller.maingame	{		import flash.events.Event;		import flash.events.EventDispatcher;		import flash.events.IOErrorEvent;		import flash.events.FullScreenEvent;		import flash.events.ProgressEvent;		import flash.external.ExternalInterface;		import flash.net.URLLoader;		import flash.net.URLRequest;		import flash.net.URLRequestMethod;		import flash.net.URLVariables;						import com.adobe.serialization.json.JSONDecoder;		import com.adobe.serialization.json.JSONEncoder;		import com.avatarlabs.utils.cache.HashTable;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;				import com.boogabooga.controller.BaseDataController;		import com.boogabooga.data.maingame.*;		import com.boogabooga.utils.GameLevelUtil;		import com.boogabooga.data.gamelevel.Chicken;				public class StoreDataController extends BaseDataController		{						/** Constructor			  *	---------------------------------------------------------------------- */				public function StoreDataController()				{					super();										_debug = true;									}							/** getStorePacks			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				public function getStorePacks():void				{					ConsoleBroadcaster.broadcast( "StoreDataController", "getStorePacks();" );										var data:URLVariables = new URLVariables();						data.url = "purchases/getStorePacks";										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleGetStorePacksComplete, handleGetStorePacksError );				}								protected function handleGetStorePacksComplete( event:Event ):void				{					ConsoleBroadcaster.broadcast( "StoreDataController", "handleGetStorePacksComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleGetStorePacksComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleGetStorePacksError );										try					{						var data = new JSONDecoder(event.currentTarget.data).getValue();						var storePack:StorePack;												if( data.status )						{							var i:int, j:int;							for( i=0; i<data.result.length; ++i )							{								storePack = new StorePack();								storePack.id = data.result[i].id;								storePack.name = data.result[i].name;								storePack.description = data.result[i].description;								storePack.availableOnLevel = data.result[i].available_on_level;								storePack.iconURL = data.result[i].icon_url;								storePack.cacheIconId = "StorePack_"+storePack.id+"_icon";								storePack.prices.push( {id:data.result[i].price_id, quantity:data.result[i].quantity, price:data.result[i].price} );								//storePack.price = data.result[i].price;								//storePack.priceId = data.result[i].price_id;								storePack.weapons = data.result[i].weapons;								storePack.gods = data.result[i].gods;																//trace( "store name: "+storePack.name );								//trace( "store price id: "+data.result[i].price_id );								//trace( "store price: "+data.result[i].price );																for( j=0; j<storePack.weapons.length; ++j )								{									ConsoleBroadcaster.broadcast( "StoreDataController", "weapon id: "+storePack.weapons[j].weapon_id );									ConsoleBroadcaster.broadcast( "StoreDataController", "weapon count: "+storePack.weapons[j].count );								}																for( j=0; j<storePack.gods.length; ++j )								{									ConsoleBroadcaster.broadcast( "StoreDataController", "weapon id: "+storePack.gods[j].god_id );									ConsoleBroadcaster.broadcast( "StoreDataController", "weapon count: "+storePack.gods[j].count );								}																MainGameDataIndex.getInstance().addStorePack( storePack );							}														dispatchEvent( new CustomEvent("onComplete") );						}						else						{							dispatchEvent( new CustomEvent("onError") );						}					}					catch( e:Error )					{						ConsoleBroadcaster.broadcast( "StoreDataController", "Error in parsing data, "+e.message );						ConsoleBroadcaster.broadcast( "StoreDataController", "data "+event.currentTarget.data );												dispatchEvent( new CustomEvent("onError") );					}				}								protected function handleGetStorePacksError( event:IOErrorEvent ):void				{					ConsoleBroadcaster.broadcast( "StoreDataController", "handleGetStorePacksError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleGetStorePacksComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleGetStorePacksError );										dispatchEvent( new CustomEvent("onError") );				}							/** getChickenPrices			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				public function getChickenPrices():void				{					var data:URLVariables = new URLVariables();						data.url = "purchases/getChickenPrices";										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleGetChickenPricesComplete, handleGetChickenPricesError );				}								protected function handleGetChickenPricesComplete( event:Event ):void				{					ConsoleBroadcaster.broadcast( "StoreDataController", "handleGetChickenPricesComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleGetChickenPricesComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleGetChickenPricesError );										try					{						var data = new JSONDecoder(event.currentTarget.data).getValue();												if( data.status )						{							var chicken:Chicken = new Chicken();								chicken.name = data.result['name'];								chicken.description = data.result['description'];								chicken.iconURL = data.result['icon_url'];								chicken.cacheIconId = "Chicken_Icon";								for( var i:int=0; i<data.result['prices'].length; ++i )								{									chicken.prices.push({ id:data.result['prices'][i]['id'], quantity:data.result['prices'][i]['quantity'], price:data.result['prices'][i]['price'] });								}							dispatchEvent( new CustomEvent("onComplete", {chicken:chicken}) );						}						else						{							dispatchEvent( new CustomEvent("onError") );						}					}					catch( e:Error )					{						dispatchEvent( new CustomEvent("onError") );					}				}								protected function handleGetChickenPricesError( event:IOErrorEvent ):void				{					ConsoleBroadcaster.broadcast( "StoreDataController", "handleGetChickenPricesError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleGetChickenPricesComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleGetChickenPricesError );				}							/** getConsumableUseCount			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				public function getConsumableUseCount( userId:int ):void				{					var dataObject:Object = new Object();						dataObject.user_id = userId;										var data:URLVariables = new URLVariables();						data.data = new JSONEncoder(dataObject).getString();						data.url = "purchases/getConsumableUseCount";										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleGetConsumableUseCountComplete, handleGetConsumableUseCountError );				}								protected function handleGetConsumableUseCountComplete( event:Event ):void				{					ConsoleBroadcaster.broadcast( "StoreDataController", "handleGetConsumableUseCountComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleGetConsumableUseCountComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleGetConsumableUseCountError );										ConsoleBroadcaster.broadcast( "StoreDataController", "data: "+event.currentTarget.data );										try					{						var data = new JSONDecoder(event.currentTarget.data).getValue();												if( data.status )						{							ConsoleBroadcaster.broadcast( "StoreDataController", "weapons: "+data.weapons_result );							ConsoleBroadcaster.broadcast( "StoreDataController", "gods: "+data.gods_result );							dispatchEvent( new CustomEvent("onComplete", {weapons:data.weapons_result, gods:data.gods_result}) );						}					}					catch( e:Error )					{						dispatchEvent( new CustomEvent("onError") );					}				}								protected function handleGetConsumableUseCountError( event:IOErrorEvent ):void				{					ConsoleBroadcaster.broadcast( "StoreDataController", "handleGetConsumableUseCountError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleGetConsumableUseCountComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleGetConsumableUseCountError );										dispatchEvent( new CustomEvent("onError") );				}								public function getAttackSlotPrices():void				{					var data:URLVariables = new URLVariables();						data.url = "purchases/getAttackSlotPrices";										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleGetAttackSlotPricesComplete, handleGetAttackSlotPricesError );				}								protected function handleGetAttackSlotPricesComplete( event:Event ):void				{					ConsoleBroadcaster.broadcast( "StoreDataController", "handleGetAttackSlotPricesComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleGetAttackSlotPricesComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleGetAttackSlotPricesError );										try					{						var data = new JSONDecoder(event.currentTarget.data).getValue();												if( data.status )						{							var attackSlot:AttackSlot;														attackSlot = new AttackSlot();							attackSlot.id = 1;							attackSlot.name = data.result.name;							attackSlot.description = data.result.description;							attackSlot.prices.push( {id:data.result.prices[0].id, quantity:data.result.prices[0].quantity, price:data.result.prices[0].price} );							MainGameDataIndex.getInstance().addAttackSlot( attackSlot );														attackSlot = new AttackSlot();							attackSlot.id = 2;							attackSlot.name = data.result.name;							attackSlot.description = data.result.description;							attackSlot.prices.push( {id:data.result.prices[1].id, quantity:data.result.prices[1].quantity, price:data.result.prices[1].price} );							MainGameDataIndex.getInstance().addAttackSlot( attackSlot );														dispatchEvent( new CustomEvent("onComplete") );						}						else						{							dispatchEvent( new CustomEvent("onError") );						}					}					catch( e:Error )					{						dispatchEvent( new CustomEvent("onError") );					}				}								protected function handleGetAttackSlotPricesError( event:IOErrorEvent ):void				{					ConsoleBroadcaster.broadcast( "StoreDataController", "handleGetAttackSlotPricesError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleGetAttackSlotPricesComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleGetAttackSlotPricesError );										dispatchEvent( new CustomEvent("onError") );				}		}			}