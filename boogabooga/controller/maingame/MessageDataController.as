/** MessageDataController  *	---------------------------------------------------------------------------- *  *	@desc:  *		Data controller class to load treasure data from the server.  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */	package com.boogabooga.controller.maingame	{		import flash.events.Event;		import flash.events.EventDispatcher;		import flash.events.IOErrorEvent;		import flash.events.FullScreenEvent;		import flash.events.ProgressEvent;		import flash.external.ExternalInterface;		import flash.net.URLLoader;		import flash.net.URLRequest;		import flash.net.URLRequestMethod;		import flash.net.URLVariables;						import com.adobe.serialization.json.JSONDecoder;		import com.adobe.serialization.json.JSONEncoder;		import com.avatarlabs.utils.cache.HashTable;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;				import com.boogabooga.controller.BaseDataController;		import com.boogabooga.data.maingame.*;		import com.boogabooga.utils.GameLevelUtil;				public class MessageDataController extends BaseDataController		{						/** Constructor			  *	---------------------------------------------------------------------- */				public function MessageDataController()				{					super();										_debug = true;									}							/** getNewMessagesCount			  *	---------------------------------------------------------------------- */				public function getNewMessagesCount( userId:int ):void				{					var dataObject:Object = new Object();						dataObject.user_id = userId;										var data:URLVariables = new URLVariables();						data.data = new JSONEncoder(dataObject).getString();						data.url = "messages/getNewMessagesCount";										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleGetNewMessagesCountComplete, handleGetNewMessagesCountError );				}								protected function handleGetNewMessagesCountComplete( event:Event ):void				{					ConsoleBroadcaster.broadcast( "MessageDataController", "handleGetNewMessagesCountComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleGetNewMessagesCountComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleGetNewMessagesCountError );										try					{						var data = new JSONDecoder(event.currentTarget.data).getValue();												if( data.status )						{							dispatchEvent( new CustomEvent("onComplete", {count:data.count}) );						}						else						{							dispatchEvent( new CustomEvent("onError") );						}					}					catch( e:Error )					{						dispatchEvent( new CustomEvent("onError") );					}				}								protected function handleGetNewMessagesCountError( event:IOErrorEvent ):void				{					ConsoleBroadcaster.broadcast( "MessageDataController", "handleGetNewMessagesCountError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleGetNewMessagesCountComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleGetNewMessagesCountError );										dispatchEvent( new CustomEvent("onError") );				}							/** getAllMessages			  *	---------------------------------------------------------------------- */				public function getAllMessages( userId:int ):void				{					var dataObject:Object = new Object();						dataObject.user_id = userId;											var data:URLVariables = new URLVariables();						data.url = "messages/getAllMessages";						data.data = new JSONEncoder(dataObject).getString();										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleGetAllMessagesComplete, handleGetAllMessagesError );				}								protected function handleGetAllMessagesComplete( event:Event ):void				{					ConsoleBroadcaster.broadcast( "MessageDataController", "handleGetAllMessagesComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleGetAllMessagesComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleGetAllMessagesError );										try					{						var data = new JSONDecoder(event.currentTarget.data).getValue();												if( data.status )						{							dispatchEvent( new CustomEvent("onComplete", {result:data.result}) );						}						else						{							dispatchEvent( new CustomEvent("onError") );						}					}					catch( e:Error )					{						ConsoleBroadcaster.broadcast( "MessageDataController", "Error in parsing data, "+e.message );						ConsoleBroadcaster.broadcast( "MessageDataController", "data: "+event.currentTarget.data );												dispatchEvent( new CustomEvent("onError") );					}				}								protected function handleGetAllMessagesError( event:IOErrorEvent ):void				{					ConsoleBroadcaster.broadcast( "MessageDataController", "handleGetAllMessagesError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleGetAllMessagesComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleGetAllMessagesError );										dispatchEvent( new CustomEvent("onError") );				}							/** addUnlockedMessage			  *	---------------------------------------------------------------------- */				public function addUnlockedMessage( userId:int, messageId:int ):void				{					var dataObject:Object = new Object();						dataObject.user_id = userId;						dataObject.message_id = messageId;										var data:URLVariables = new URLVariables();						data.data = new JSONEncoder(dataObject).getString();						data.url = "messages/addUnlockedMessage";										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleAddUnlockedMessageComplete, handleAddUnlockedMessageError );				}								protected function handleAddUnlockedMessageComplete( event:Event ):void				{					event.currentTarget.removeEventListener( Event.COMPLETE, handleAddUnlockedMessageComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleAddUnlockedMessageError );										ConsoleBroadcaster.broadcast( "MessageDataController", "handleAddUnlockedMessageComplete();" );					ConsoleBroadcaster.broadcast( "MessageDataController", "data: "+event.currentTarget.data );				}								protected function handleAddUnlockedMessageError( event:IOErrorEvent ):void				{					event.currentTarget.removeEventListener( Event.COMPLETE, handleAddUnlockedMessageComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleAddUnlockedMessageError );										ConsoleBroadcaster.broadcast( "MessageDataController", "handleAddUnlockedMessageError();" );				}		}			}