/** TreasureDataController  *	---------------------------------------------------------------------------- *  *	@desc:  *		Data controller class to load treasure data from the server.  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */	package com.boogabooga.controller.maingame	{		import flash.events.Event;		import flash.events.EventDispatcher;		import flash.events.IOErrorEvent;		import flash.events.FullScreenEvent;		import flash.events.ProgressEvent;		import flash.external.ExternalInterface;		import flash.net.URLLoader;		import flash.net.URLRequest;		import flash.net.URLRequestMethod;		import flash.net.URLVariables;				import com.adobe.serialization.json.JSONDecoder;		import com.adobe.serialization.json.JSONEncoder;		import com.avatarlabs.utils.cache.HashTable;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;				import com.boogabooga.controller.BaseDataController;		import com.boogabooga.data.gamelevel.AbstractGameObject;		import com.boogabooga.data.gamelevel.AnimationObject;		import com.boogabooga.data.gamelevel.DiggingMap;		import com.boogabooga.data.gamelevel.DiggingSpots;		import com.boogabooga.data.gamelevel.GameLevelDataIndex;		import com.boogabooga.data.maingame.*;		import com.boogabooga.utils.GameLevelUtil;				public class TreasureDataController extends BaseDataController		{						/** Constructor			  *	---------------------------------------------------------------------- */				public function TreasureDataController()				{					super();										_debug = true;									}							/** loadTreasures			  *	---------------------------------------------------------------------- */				public function loadTreasures():void				{					var data:URLVariables = new URLVariables();						data.url = "treasures/getAllPublishedTreasures";										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleLoadAllPublishedTreasuresComplete, handleLoadAllPublishedTreasuresError );				}							/** handleLoadAllPublishedTreasuresComplete			  *	---------------------------------------------------------------------- */				private function handleLoadAllPublishedTreasuresComplete( event:Event ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "TreasureDataController", "handleLoadAllPublishedTreasuresComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleLoadAllPublishedTreasuresComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleLoadAllPublishedTreasuresError );										try					{						//trace( event.currentTarget.data );												var data = new JSONDecoder(event.currentTarget.data).getValue();												if( data.status )						{							var treasure:Treasure;														for( var i:uint=0; i<data.result.length; ++i )							{								treasure = new Treasure();								treasure.id = data.result[i]["id"];								treasure.name = data.result[i]["name"];								//treasure.description = data.result[i]["description"];																if( data.result[i]['rarity'] == 'Common' )									treasure.rarity = Treasure.RARITY_COMMON;								else if( data.result[i]['rarity'] == 'Rare' )									treasure.rarity = Treasure.RARITY_RARE;																treasure.value = data.result[i]['value'];								treasure.iconURL = data.result[i]["asset_url"];								//treasure.createdBy = data.result[i]["created_by"];								treasure.cacheIconId = "Treasure_"+treasure.id;																//trace( "treasure.linkageId: "+treasure.linkageId );																MainGameDataIndex.getInstance().addTreasure( treasure );							}														//trace( "treasures count "+data.result.length );														dispatchEvent( new CustomEvent("onComplete") );						}						else						{							dispatchEvent( new CustomEvent("onError") );						}					}					catch( e:Error )					{						ConsoleBroadcaster.broadcast( "TreasureDataController", "Error in parsing data, "+event.currentTarget.data );												dispatchEvent( new CustomEvent("onError") );					}				}							/** handleLoadAllPublishedTreasuresError			  *	---------------------------------------------------------------------- */				private function handleLoadAllPublishedTreasuresError( event:IOErrorEvent ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "TreasureDataController", "handleLoadAllPublishedTreasuresError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleLoadAllPublishedTreasuresComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleLoadAllPublishedTreasuresError );										dispatchEvent( new CustomEvent("onError") );				}							/** addUnlockedTreasure			  *	---------------------------------------------------------------------- */				public function addUnlockedTreasure( userId:int, treasureId:int ):void				{					var dataObject:Object = new Object();						dataObject.user_id = userId;						dataObject.treasure_id = treasureId;											var data:URLVariables = new URLVariables();						data.url = "treasures/addUnlockedTreasure";						data.data = new JSONEncoder(dataObject).getString();										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleAddUnlockedTreasureComplete, handleAddUnlockedTreasureError );				}								private function handleAddUnlockedTreasureComplete( event:Event ):void				{					ConsoleBroadcaster.broadcast( "TreasureDataController", "handleAddUnlockedTreasureComplete();" );										trace( event.currentTarget.data );										event.currentTarget.removeEventListener( Event.COMPLETE, handleAddUnlockedTreasureComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleAddUnlockedTreasureError );										try					{						var data = new JSONDecoder(event.currentTarget.data).getValue();												if( data.status )							dispatchEvent( new CustomEvent("onComplete", {unlockedTreasure:data.unlocked_treasure}) );						else							dispatchEvent( new CustomEvent("onError") );											}					catch( e:Error )					{						dispatchEvent( new CustomEvent("onError") );					}				}								private function handleAddUnlockedTreasureError( event:IOErrorEvent ):void				{					event.currentTarget.removeEventListener( Event.COMPLETE, handleAddUnlockedTreasureComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleAddUnlockedTreasureError );										dispatchEvent( new CustomEvent("onError") );				}							/** saveDiggingSpots			  *	---------------------------------------------------------------------- */				public function saveDiggingSpots( diggingSpots:DiggingSpots, gameLevelId:int ):void				{					var dataObject:Object = new Object();						dataObject.id = diggingSpots.id;						dataObject.spots = new JSONEncoder(diggingSpots.spots).getString();						dataObject.treasure_ids = new JSONEncoder(diggingSpots.treasureIds).getString();						dataObject.weapon_ids = new JSONEncoder(diggingSpots.weaponIds).getString();						dataObject.god_ids = new JSONEncoder(diggingSpots.godIds).getString();						dataObject.game_level_id = gameLevelId;										var data:URLVariables = new URLVariables();						data.url = "treasures/saveDiggingSpots";						data.data = new JSONEncoder(dataObject).getString();										//trace( data.data );										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleSaveDiggingSpotsComplete, handleSaveDiggingSpotsError );				}								protected function handleSaveDiggingSpotsComplete( event:Event ):void				{					event.currentTarget.removeEventListener( Event.COMPLETE, handleSaveDiggingSpotsComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleSaveDiggingSpotsError );										//trace( event.currentTarget.data );										try					{						var data = new JSONDecoder(event.currentTarget.data).getValue();												if( data.status )						{							dispatchEvent( new CustomEvent("onComplete", {id:data.id}) );						}						else						{							ConsoleBroadcaster.broadcast( ""+event.currentTarget.data );							dispatchEvent( new CustomEvent("onError") );						}					}					catch( e:Error )					{						ConsoleBroadcaster.broadcast( "Error in parsing data" );						ConsoleBroadcaster.broadcast( ""+event.currentTarget.data );						dispatchEvent( new CustomEvent("onError") );					}				}								protected function handleSaveDiggingSpotsError( event:IOErrorEvent ):void				{					ConsoleBroadcaster.broadcast( "TreasureDataController", "handleSaveDiggingSpotsError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleSaveDiggingSpotsComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleSaveDiggingSpotsError );										dispatchEvent( new CustomEvent("onError") );				}							/** getDiggingSpots			  *	---------------------------------------------------------------------- 				public function getDiggingSpots( ids:Array ):void				{					var dataObject:Object = new Object();						dataObject.ids = ids;										var data:URLVariables = new URLVariables();						data.url = "treasures/getDiggingSpots";						data.data = new JSONEncoder(dataObject).getString();										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleGetDiggingSpotsComplete, handleGetDiggingSpotsError );				}								protected function handleGetDiggingSpotsComplete( event:Event ):void				{					ConsoleBroadcaster.broadcast( "TreasureDataController", "handleGetDiggingSpotsComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleGetDiggingSpotsComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleGetDiggingSpotsComplete );										try					{						var data = new JSONDecoder(event.currentTarget.data).getValue();												if( data.status )						{													}						else						{							dispatchEvent( new CustomEvent("onError") );						}					}					catch( e:Error )					{						ConsoleBroadcaster.broadcast( "TreasureDataController", "error in parsing data, "+e.message );						dispatchEvent( new CustomEvent("onError") );					}				}								protected function handleGetDiggingSpotsError( event:IOErrorEvent ):void				{					ConsoleBroadcaster.broadcast( "TreasureDataController", "handleGetDiggingSpotsError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleGetDiggingSpotsComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleGetDiggingSpotsComplete );										dispatchEvent( new CustomEvent("onError") );				}*/							/** unlockDiggingMap			  *	---------------------------------------------------------------------- */				public function saveDiggingMap( userId:int, villageId:int, diggingMap:DiggingMap, updateDigTime:Boolean ):void				{					var dataObject:Object = new Object();						dataObject.user_id = userId;						dataObject.village_id = villageId;						dataObject.digging_map_id = diggingMap.id;						dataObject.digging_map = diggingMap.serialize();						dataObject.update_dig_time = updateDigTime;										var data:URLVariables = new URLVariables();						data.url = "treasures/saveUserDiggingMap";						data.data = new JSONEncoder(dataObject).getString();											loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleSaveDiggingMapComplete, handleSaveDiggingMapError );				}								protected function handleSaveDiggingMapComplete( event:Event ):void				{					ConsoleBroadcaster.broadcast( "TreasureDataController", "handleSaveDiggingMapComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleSaveDiggingMapComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleSaveDiggingMapError );										ConsoleBroadcaster.broadcast( "TreasureDataController", "data "+event.currentTarget.data );										try					{						var data = new JSONDecoder(event.currentTarget.data).getValue();												if( data.status )						{							dispatchEvent( new CustomEvent("onComplete", {villageId:data.village_id, diggingMapId:data.digging_map_id, islandId:data.island_id, lastDigTime:data.last_dig_time}) );						}						else						{							dispatchEvent( new CustomEvent("onError") );						}					}					catch( e:Error )					{						dispatchEvent( new CustomEvent("onError") );					}				}								protected function handleSaveDiggingMapError( event:IOErrorEvent ):void				{					ConsoleBroadcaster.broadcast( "TreasureDataController", "handleSaveDiggingMapError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleSaveDiggingMapComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleSaveDiggingMapError );										dispatchEvent( new CustomEvent("onError") );				}								public function getDiggingMap():void				{									}								public function updateDiggingMap():void				{									}						}			}