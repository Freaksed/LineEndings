/** TrackingDataController  *	---------------------------------------------------------------------------- *  *	@desc:  *		Data controller class to load treasure data from the server.  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */	package com.boogabooga.controller.maingame	{		import flash.events.Event;		import flash.events.EventDispatcher;		import flash.events.IOErrorEvent;		import flash.events.FullScreenEvent;		import flash.events.ProgressEvent;		import flash.external.ExternalInterface;		import flash.net.URLLoader;		import flash.net.URLRequest;		import flash.net.URLRequestMethod;		import flash.net.URLVariables;				import com.adobe.serialization.json.JSONDecoder;		import com.adobe.serialization.json.JSONEncoder;		import com.avatarlabs.utils.cache.HashTable;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;				import com.boogabooga.controller.BaseDataController;		import com.boogabooga.data.gamelevel.AbstractGameObject;		import com.boogabooga.data.gamelevel.AnimationObject;		import com.boogabooga.data.gamelevel.DiggingMap;		import com.boogabooga.data.gamelevel.DiggingSpots;		import com.boogabooga.data.gamelevel.GameLevelDataIndex;		import com.boogabooga.data.maingame.*;		import com.boogabooga.utils.GameLevelUtil;				public class TrackingDataController extends BaseDataController		{						/** Constructor			  *	---------------------------------------------------------------------- */				public function TrackingDataController()				{					super();										_debug = true;									}							/** saveTrackingGameLevel			  *	---------------------------------------------------------------------- */				public function saveTrackingGameLevel( userId:int, gameLevelId:int, gatesHealthPercentage:Array, chickensLeft:Number, time:Number, win:Boolean, completion:Number=100 ):void				{					var dataObject:Object = new Object();						dataObject.user_id = userId;						dataObject.game_level_id = gameLevelId;						dataObject.fences_health_percentage = new JSONEncoder(gatesHealthPercentage).getString();						dataObject.chickens_left = chickensLeft;						dataObject.time = time;						dataObject.win = win;						dataObject.completion = completion > 100 ? 100 : completion;										var data:URLVariables = new URLVariables();						data.data = new JSONEncoder(dataObject).getString();						data.url = "trackings/saveTrackingGameLevel";										//trace( "saveTrackingGameLevel data: "+data.data );										//loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleSaveTrackingGameLevelComplete, handleSaveTrackingGameLevelError );					loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST );									}								private function handleSaveTrackingGameLevelComplete( event:Event ):void				{					//ConsoleBroadcaster.broadcast( "TrackingDataController", "handleSaveTrackingGameLevelComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleSaveTrackingGameLevelComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleSaveTrackingGameLevelError );														}								private function handleSaveTrackingGameLevelError( event:Event ):void				{					//ConsoleBroadcaster.broadcast( "TrackingDataController", "handleSaveTrackingGameLevelError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleSaveTrackingGameLevelComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleSaveTrackingGameLevelError );									}							/** saveTrackingGameLevel			  *	---------------------------------------------------------------------- 				public function saveTrackingPurchase( userId:int, type:String, itemId:int, amount:int, price:Number ):void				{					var dataObject:Object = new Object();						dataObject.user_id = userId;						dataObject.type = type;						dataObject.item_id = itemId;						dataObject.amount = amount;						dataObject.price = price;										var data:URLVariables = new URLVariables();						data.data = new JSONEncoder(dataObject).getString();						data.url = "trackings/saveTrackingPurchase";										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleSaveTrackingPurchaseComplete, handleSaveTrackingPurchaseError );				}								private function handleSaveTrackingPurchaseComplete( event:Event ):void				{					ConsoleBroadcaster.broadcast( "TrackingDataController", "handleSaveTrackingPurchaseComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleSaveTrackingPurchaseComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleSaveTrackingPurchaseError );				}								private function handleSaveTrackingPurchaseError( event:IOErrorEvent ):void				{					ConsoleBroadcaster.broadcast( "TrackingDataController", "handleSaveTrackingPurchaseError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleSaveTrackingPurchaseComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleSaveTrackingPurchaseError );				}*/							/** saveTrackingArcheology			  *	---------------------------------------------------------------------- */				public function saveTrackingArcheology( userId:int, levelPlaythrough:Boolean ):void				{					var dataObject:Object = new Object();						dataObject.user_id = userId;						dataObject.level_playthrough = levelPlaythrough;											var data:URLVariables = new URLVariables();						data.data = new JSONEncoder(dataObject).getString();						data.url = "trackings/saveTrackingArcheology";										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST );				}								private function handleSaveTrackingArcheologyComplete( event:Event ):void				{					ConsoleBroadcaster.broadcast( "TrackingDataController", "handleSaveTrackingArcheologyComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleSaveTrackingArcheologyComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleSaveTrackingArcheologyError );				}								private function handleSaveTrackingArcheologyError( event:IOErrorEvent ):void				{					ConsoleBroadcaster.broadcast( "TrackingDataController", "handleSaveTrackingArcheologyError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleSaveTrackingArcheologyComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleSaveTrackingArcheologyError );				}							/** saveTrackingShare			  *	---------------------------------------------------------------------- */				public function saveTrackingShare( userId:int, type:String, shared:Boolean=false, value:String="0" ):void				{					ConsoleBroadcaster.broadcast( "TrackingDataController", "saveTrackingShare("+userId+", "+type+", "+shared+", "+value+");" );										var dataObject:Object = new Object();						dataObject.user_id = userId;						dataObject.type = type;						dataObject.shared = shared;						dataObject.value = value;											var data:URLVariables = new URLVariables();						data.data = new JSONEncoder(dataObject).getString();						data.url = "trackings/saveTrackingShare";										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST );//, handleSaveTrackingShareComplete, handleSaveTrackingShareError );				}								private function handleSaveTrackingShareComplete( event:Event ):void				{					ConsoleBroadcaster.broadcast( "TrackingDataController", "handleSaveTrackingShareComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleSaveTrackingShareComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleSaveTrackingShareError );										trace( event.currentTarget.data );				}								private function handleSaveTrackingShareError( event:IOErrorEvent ):void				{					ConsoleBroadcaster.broadcast( "TrackingDataController", "handleSaveTrackingShareError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleSaveTrackingShareComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleSaveTrackingShareError );				}							/** saveTrackingGiftingBorrowing			  *	---------------------------------------------------------------------- 				public function saveTrackingGiftingBorrowing( userId:int, itemId:int, itemType:String, borrowing:Boolean=false, peoplePerRequest:int=1, mysteryGift:Boolean=false ):void				{					var dataObject:Object = new Object();						dataObject.user_id = userId;						dataObject.item_id = itemId;						dataObject.item_type = itemType;						dataObject.borrowing = borrowing;						dataObject.people_per_request = peoplePerRequest;						dataObject.mystery_gift = mysteryGift;										var data:URLVariables = new URLVariables();						data.data = new JSONEncoder(dataObject).getString();						data.url = "trackings/saveTrackingGiftingBorrowing";										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleSaveTrackingGiftingBorrowingComplete, handleSaveTrackingGiftingBorrowingError );				}								private function handleSaveTrackingGiftingBorrowingComplete( event:Event ):void				{					ConsoleBroadcaster.broadcast( "TrackingDataController", "handleSaveTrackingGiftingBorrowingComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleSaveTrackingGiftingBorrowingComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleSaveTrackingGiftingBorrowingError );				}								private function handleSaveTrackingGiftingBorrowingError( event:IOErrorEvent ):void				{					ConsoleBroadcaster.broadcast( "TrackingDataController", "handleSaveTrackingGiftingBorrowingError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleSaveTrackingGiftingBorrowingComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleSaveTrackingGiftingBorrowingError );				}*/											/** saveTrackingWeaponUsage			  *	---------------------------------------------------------------------- *			  *	Saves tracking weapon usage whenever users use a weapon.			  *	---------------------------------------------------------------------- */				public function saveTrackingWeaponUsage( userId:int, gameLevelId:int, weaponId:int, count:int=1 ):void				{					var dataObject:Object = new Object();						dataObject.user_id = userId;						dataObject.game_level_id = gameLevelId;						dataObject.weapon_id = weaponId;						dataObject.count = count;										var data:URLVariables = new URLVariables();						data.data = new JSONEncoder(dataObject).getString();						data.url = "trackings/saveTrackingWeaponUsage";										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST );//, handleSaveTrackingWeaponUsageComplete, handleSaveTrackingWeaponUsageError );				}								private function handleSaveTrackingWeaponUsageComplete( event:Event ):void				{					//ConsoleBroadcaster.broadcast( "TrackingDataController", "handleSaveTrackingWeaponUsageComplete();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleSaveTrackingWeaponUsageComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleSaveTrackingWeaponUsageError );										//trace( event.currentTarget.data );				}								private function handleSaveTrackingWeaponUsageError( event:IOErrorEvent ):void				{					//ConsoleBroadcaster.broadcast( "TrackingDataController", "handleSaveTrackingWeaponUsageError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleSaveTrackingWeaponUsageComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleSaveTrackingWeaponUsageError );				}							/** saveTrackingGodUsage			  *	---------------------------------------------------------------------- *			  *	Saves tracking god usage whenever users use a god.			  *	---------------------------------------------------------------------- */				public function saveTrackingGodUsage( userId:int, gameLevelId:int, godId:int, count:int=1 ):void				{					var dataObject:Object = new Object();						dataObject.user_id = userId;						dataObject.game_level_id = gameLevelId;						dataObject.god_id = godId;						dataObject.count = count;										var data:URLVariables = new URLVariables();						data.data = new JSONEncoder(dataObject).getString();						data.url = "trackings/saveTrackingGodUsage";										loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST );				}								private function handleSaveTrackingGodUsageComplete( event:Event ):void				{					event.currentTarget.removeEventListener( Event.COMPLETE, handleSaveTrackingGodUsageComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleSaveTrackingGodUsageError );				}								private function handleSaveTrackingGodUsageError( event:IOErrorEvent ):void				{					event.currentTarget.removeEventListener( Event.COMPLETE, handleSaveTrackingGodUsageComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleSaveTrackingGodUsageError );				}							/** saveBenchmarkScore			  *	---------------------------------------------------------------------- *			  *	Saves the user benchmark score.			  *	---------------------------------------------------------------------- */				public function saveBenchmarkScore( userId:int, benchmarkScore:int ):void				{					var dataObject:Object = new Object();						dataObject.user_id = userId;						dataObject.benchmark_score = benchmarkScore;										var data:URLVariables = new URLVariables();						data.data = new JSONEncoder(dataObject).getString();						data.url = "trackings/saveBenchmarkScore";										//loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST, handleSaveBenchmarkScoreComplete, handleSaveBenchmarkScoreError );					loadDataFromServer( _baseURL+"content.php", data, URLRequestMethod.POST );				}								private function handleSaveBenchmarkScoreComplete( event:Event ):void				{					event.currentTarget.removeEventListener( Event.COMPLETE, handleSaveBenchmarkScoreComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleSaveBenchmarkScoreError );										trace( event.currentTarget.data );				}								private function handleSaveBenchmarkScoreError( event:IOErrorEvent ):void				{					event.currentTarget.removeEventListener( Event.COMPLETE, handleSaveBenchmarkScoreComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleSaveBenchmarkScoreError );				}		}			}