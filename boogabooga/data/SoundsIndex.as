/** SoundsIndex  *	---------------------------------------------------------------------------- *  *	@desc:  *		Main data index for the game. It's a singleton that you can access from anywhere.  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */	package com.boogabooga.data	{		import flash.events.EventDispatcher;				import com.boogabooga.data.SoundData;				public class SoundsIndex extends EventDispatcher		{			private static var _instance:SoundsIndex;						protected var _soundDatas:Vector.<SoundData>;			protected var _soundDatasLength:int;						/** Constructor			  *	---------------------------------------------------------------------- */				public function SoundsIndex()				{					init();				}							/** reset			  *	---------------------------------------------------------------------- */				public static function reset():void				{					_instance = null;				}							/** getInstance			  *	---------------------------------------------------------------------- */				public static function getInstance():SoundsIndex				{					if( _instance==null ) _instance = new SoundsIndex();					return _instance;				}							/** init			  *	---------------------------------------------------------------------- */				public function init():void				{					_soundDatas = new Vector.<SoundData>;					_soundDatasLength = 0;				}								public function addSound( id:int, assetURL:String, soundId:String, volume:Number ):void				{					var found:Boolean = false;										//trace( 'addSound('+id+', '+assetURL+', '+soundId+', '+volume+');' );										for( var i:int=0; i<_soundDatasLength; ++i )					{						if( _soundDatas[i].id == id )							found = true;					}										if( !found )					{						var soundData:SoundData = new SoundData();							soundData.id = id;							soundData.assetURL = assetURL;							soundData.soundId = soundId;							soundData.volume = volume;													_soundDatas.push( soundData );						++_soundDatasLength;					}				}								public function getSoundById( id:int ):SoundData				{					for( var i:int=0; i<_soundDatasLength; ++i )					{						if( _soundDatas[i].id == id )							return _soundDatas[i];					}										return null;				}								public function getSoundBySoundId( soundId:String ):SoundData				{					for( var i:int=0; i<_soundDatasLength; ++i )					{						if( _soundDatas[i].soundId == soundId )							return _soundDatas[i];					}										return null;				}						}			}