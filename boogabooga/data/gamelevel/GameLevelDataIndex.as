/** GameLevelDataIndex  *	---------------------------------------------------------------------------- *  *	@desc:  *		Main data index for the game. It's a singleton that you can access from anywhere.  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */	package com.boogabooga.data.gamelevel	{		import flash.events.*;		import flash.errors.*;		import flash.geom.Rectangle;				import com.avatarlabs.utils.ArrayUtil;		import com.avatarlabs.utils.VectorUtil;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.console.ConsoleBroadcaster;				import com.boogabooga.data.StringsIndex;		import com.boogabooga.data.challengelevel.ChallengeLevel;		import com.boogabooga.utils.GameLevelUtil;				public class GameLevelDataIndex extends EventDispatcher		{			protected static var _instance:GameLevelDataIndex;						protected var _enemies:Vector.<Enemy>;			protected var _enemiesCount:uint;			protected var _listedEnemies:Vector.<Enemy>;			protected var _listedEnemiesCount:uint;			protected var _gods:Vector.<God>;			protected var _godsCount:uint;			protected var _weapons:Vector.<Weapon>;			protected var _weaponsCount:uint;			protected var _listedWeapons:Vector.<Weapon>;			protected var _listedWeaponsCount:uint;			protected var _animationObjects:Vector.<AnimationObject>;			protected var _animationObjectsCount:uint;			protected var _gateAnimationObjects:Vector.<AnimationObject>;			protected var _environmentObjects:Vector.<EnvironmentObject>;			protected var _environmentObjectsCount:uint;			protected var _gameLevels:Vector.<GameLevel>;			protected var _gameLevelsCount:uint;			protected var _diggingSpots:Vector.<DiggingSpots>;			protected var _diggingSpotsCount:int;			protected var _villagers:Vector.<Villager>;			protected var _villagersCount:int;			protected var _currentCounter:int;			protected var _challengeLevels:Vector.<ChallengeLevel>;			protected var _challengeLevelsCount:uint;						protected var _boardMaxRows:uint;			protected var _boardMaxColumns:uint;						protected var _maxWeaponSlots:uint;						protected var _gameTilesBounds:Rectangle;						/** Constructor			  *	---------------------------------------------------------------------- */				public function GameLevelDataIndex()				{					init();				}							/** reset			  *	---------------------------------------------------------------------- */				public static function reset():void				{					_instance = null;				}							/** getInstance			  *	---------------------------------------------------------------------- */				public static function getInstance():GameLevelDataIndex				{					if( _instance==null ) _instance = new GameLevelDataIndex();					return _instance;				}							/** init			  *	---------------------------------------------------------------------- */				public function init():void				{					_enemies = new Vector.<Enemy>;					_enemiesCount = 0;					_listedEnemies = new Vector.<Enemy>;					_listedEnemiesCount = 0;					_gods = new Vector.<God>;					_godsCount = 0;					_weapons = new Vector.<Weapon>;					_weaponsCount = 0;					_listedWeapons = new Vector.<Weapon>;					_listedWeaponsCount = 0;					_animationObjects = new Vector.<AnimationObject>;					_animationObjectsCount = 0;					_gateAnimationObjects = new Vector.<AnimationObject>;					_environmentObjects = new Vector.<EnvironmentObject>;					_environmentObjectsCount = 0;					_gameLevels = new Vector.<GameLevel>;					_gameLevelsCount = 0;					_diggingSpots = new Vector.<DiggingSpots>;					_diggingSpotsCount = 0;					_villagers = new Vector.<Villager>;					_villagersCount = 0;					_challengeLevels = new Vector.<ChallengeLevel>;					_challengeLevelsCount = 0;										_boardMaxRows = 8;					_boardMaxColumns = 8;										_maxWeaponSlots = 8;				}							/** addEnemy / getEnemy / get enemiesCount			  *	---------------------------------------------------------------------- */				public function addEnemy( enemy:Enemy ):void				{					var found:Boolean = false;										for( var i:uint=0; i<_enemiesCount; ++i )					{						if( _enemies[i].id == enemy.id )						{							found = true;							break;						}					}										if( !found )					{						_enemies.push( enemy );						++_enemiesCount;												//trace( "enemy.listed ? "+enemy.listed );												if( enemy.listed )						{							_listedEnemies.push( enemy );							++_listedEnemiesCount;						}					}										/*					if( _enemies[enemy.id] == undefined )					{						_enemies[ enemy.id ] = enemy;						++_enemiesCount;					}					*/				}				public function getEnemy( id:uint ):Enemy				{					//if( _enemies[id] != undefined )						//return _enemies[id];										for( var i:uint=0; i<_enemiesCount; ++i )					{						if( _enemies[i].id == id )							return _enemies[i];					}										return null;				}				public function get enemies():Vector.<Enemy> { return _enemies; }				public function get enemiesCount():uint { return _enemiesCount; }				public function get listedEnemies():Vector.<Enemy> { return _listedEnemies; }				public function get listedEnemiesCount():uint { return _listedEnemiesCount; }							/** addGod / getGod / get godsCount			  *	---------------------------------------------------------------------- */				public function addGod( god:God ):void				{					/*					if( _gods[god.id] == undefined )					{						_gods[god.id] = god;						++_godsCount;					}					*/										var found:Boolean = false;										for( var i:uint=0; i<_godsCount; ++i )					{						if( _gods[i].id == god.id )						{							found = true;							break;						}					}										if( !found )					{						_gods.push( god );						++_godsCount;					}				}				public function getGod( id:uint ):God				{					//if( _gods[id] != undefined )						//return _gods[id];										for( var i:uint=0; i<_godsCount; ++i )					{						if( _gods[i].id == id )							return _gods[i];					}										return null;				}				public function get gods():Vector.<God> { return _gods; }				public function get godsCount():uint { return _godsCount; }							/** addWeapon / getWeapon / get weaponsCount			  *	---------------------------------------------------------------------- */				public function addWeapon( weapon:Weapon ):void				{					/*					if( _weapons[weapon.id] == undefined )					{						_weapons[weapon.id] = weapon;						++_weaponsCount;					}					*/					/*					var found:Boolean = false;										for( var i:uint=0; i<_weaponsCount; ++i )					{						if( _weapons[i].id == weapon.id )						{							found = true;							break;						}					}										if( !found )					{						_weapons.push( weapon );						++_weaponsCount;					}					*/					var duplicateWeapon:Weapon = VectorUtil.find( _weapons, weapon, "id" );					if( duplicateWeapon == null )					{						_weapons.push( weapon );						++_weaponsCount;												if( weapon.listed )						{							_listedWeapons.push( weapon );							++_listedWeaponsCount;						}					}					duplicateWeapon = null;				}				public function getWeapon( id:uint ):Weapon				{					//if( _weapons[id] != undefined )						//return _weapons[id];										for( var i:uint=0; i<_weaponsCount; ++i )					{						if( _weapons[i].id == id )							return _weapons[i];					}										return null;				}				public function get weapons():Vector.<Weapon> { return _weapons; }				public function get weaponsCount():uint { return _weaponsCount; }				public function get listedWeapons():Vector.<Weapon> { return _listedWeapons; }				public function get listedWeaponsCount():uint { return _listedWeaponsCount; }							/** addEnvironment / getEnvironment / get environments			  *	---------------------------------------------------------------------- */				public function addEnvironmentObject( environment:EnvironmentObject ):void				{					var duplicateEnvironmentObject:EnvironmentObject = VectorUtil.find( _environmentObjects, environment, "id" );					if( duplicateEnvironmentObject == null )					{						_environmentObjects.push( environment );						++_environmentObjectsCount;					}										duplicateEnvironmentObject = null;				}				public function getEnvironmentObject( id:uint ):EnvironmentObject				{					for( var i:uint=0; i<_environmentObjectsCount; ++i )					{						if( _environmentObjects[i].id == id )							return _environmentObjects[i];					}										return null;				}				public function get environmentObjects():Vector.<EnvironmentObject> { return _environmentObjects; }				public function get environmentObjectsCount():uint { return _environmentObjectsCount; }							/** addAnimationObject / getAnimationObject / get animationObjects			  *	---------------------------------------------------------------------- */				public function addAnimationObject( animationObject:AnimationObject ):void				{					var duplicateAnimationObject:AnimationObject = VectorUtil.find( _animationObjects, animationObject, "id" );										if( duplicateAnimationObject == null )					{						_animationObjects.push( animationObject );						++_animationObjectsCount;					}										duplicateAnimationObject = null;				}				public function getAnimationObject( id:uint ):AnimationObject				{					for( var i:uint=0; i<_animationObjectsCount; ++i )					{						if( _animationObjects[i].id == id )							return _animationObjects[i];					}										return null;				}				public function getAnimationObjectByCacheId( cacheId:String ):AnimationObject				{					for( var i:uint=0; i<_animationObjectsCount; ++i )					{						if( _animationObjects[i].cacheId == cacheId )							return _animationObjects[i];					}										return null;				}				public function get animationObjects():Vector.<AnimationObject> { return _animationObjects; }				public function get animationObjectsCount():int { return _animationObjectsCount; }								public function addGateAnimationObject( animationObject:AnimationObject ):void				{					var duplicateAnimationObject:AnimationObject = VectorUtil.find( _gateAnimationObjects, animationObject, "id" );					if( duplicateAnimationObject == null )					{						_gateAnimationObjects.push( animationObject );					}										duplicateAnimationObject = null;				}				public function getGateAnimationObject( id:int ):AnimationObject				{					for( var i:uint=0; i<_gateAnimationObjects.length; ++i )					{						if( _gateAnimationObjects[i].id == id )							return _gateAnimationObjects[i];					}										return null;				}				public function get gateAnimationObject():Vector.<AnimationObject> { return _gateAnimationObjects; }											/** gameLevels			  *	---------------------------------------------------------------------- */				public function addGameLevel( g:GameLevel ):void				{					var duplicateObject:GameLevel = VectorUtil.find( _gameLevels, g, "id" );					if( duplicateObject == null )					{						_gameLevels.push( g );						++_gameLevelsCount;					}					duplicateObject = null;				}				public function getGameLevel( id:int ):GameLevel				{					for( var i:uint=0; i<_gameLevelsCount; ++i )					{						if( _gameLevels[i].id == id )							return _gameLevels[i];					}										return null;				}				public function get gameLevels():Vector.<GameLevel> { return _gameLevels; }							/** challengeLevels			  *	---------------------------------------------------------------------- */				public function addChallengeLevel( c:ChallengeLevel ):void				{					var duplicateObject:ChallengeLevel = VectorUtil.find( _challengeLevels, c, 'id' );					if( duplicateObject == null )					{						_challengeLevels.push( c );						++_challengeLevelsCount;					}					duplicateObject = null;				}				public function getChallengeLevel( id:int ):ChallengeLevel				{					for( var i:uint=0; i<_challengeLevelsCount; ++i )					{						if( _challengeLevels[i].id == id )							return _challengeLevels[i];					}										return null;				}				public function get challengeLevels():Vector.<ChallengeLevel> { return _challengeLevels; }							/** addDiggingSpot			  *	---------------------------------------------------------------------- */				public function addDiggingSpot( d:DiggingSpots ):void				{					if( VectorUtil.find( _diggingSpots, d, "id" ) == null )					{						_diggingSpots.push( d );						_diggingSpotsCount = _diggingSpots.length;					}				}				public function getDiggingSpot( id:int ):DiggingSpots				{					for( var i:int=0; i<_diggingSpotsCount; ++i )					{						if( _diggingSpots[i].id == id )							return _diggingSpots[i];					}										return null;				}				public function get diggingSpots():Vector.<DiggingSpots> { return _diggingSpots; }				public function get diggingSpotsCount():int { return _diggingSpotsCount; }							/** addVillager			  *	---------------------------------------------------------------------- */				public function addVillager( v:Villager ):void				{					if( VectorUtil.find( _villagers, v, "id" ) == null )					{						_villagers.push( v );						_villagersCount = _villagers.length;					}				}				public function getVillager( id:int ):Villager				{					for( var i:int=0; i<_villagersCount; ++i )					{						if( _villagers[i].id == id )							return _villagers[i];					}					return null;				}				public function get villagers():Vector.<Villager> { return _villagers; }				public function get villagersCount():int { return _villagersCount; }							/** get boardMaxRows			  *	---------------------------------------------------------------------- */				public function get boardMaxRows():uint { return _boardMaxRows; }							/** get boardMaxColumns			  *	---------------------------------------------------------------------- */				public function get boardMaxColumns():uint { return _boardMaxColumns; }								public function get maxWeaponSlots():uint { return _maxWeaponSlots; }								public function set gameTilesBounds( r:Rectangle ):void { _gameTilesBounds = r; }				public function get gameTilesBounds():Rectangle { return _gameTilesBounds; }								public function set currentCounter( i:int ):void { _currentCounter = i; }				public function get currentCounter():int { return _currentCounter; }											/** buildWeaponStatistics			  *	---------------------------------------------------------------------- */				public function buildWeaponStatistics():void				{					var statistic:String;					var weapon:Weapon;					var weapon2:Weapon;					var i:int;										for( i=0; i<_weaponsCount; ++i )					{						weapon = _weapons[i];						statistic = '\n'+StringsIndex.getInstance().getStringByName('STATS_TYPE')+': ';												if( weapon.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_MULTIPLE_LANES_INDEX) )						{							statistic += StringsIndex.getInstance().getStringByName('STATS_MULTI_PATH')+' ';						}												if( weapon.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_FIRE_INDEX) )						{							//trace( 'fire in xml - '+StringsIndex.getInstance().getStringByName('STATS_FIRE') );							statistic += StringsIndex.getInstance().getStringByName('STATS_FIRE')+' ';						}						else if( weapon.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_ICE_INDEX) )						{							//trace( 'ice in xml - '+StringsIndex.getInstance().getStringByName('STATS_ICE') );							statistic += StringsIndex.getInstance().getStringByName('STATS_ICE')+' ';						}						else if( weapon.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_ENCHANTED_INDEX) )						{							//trace( 'enchanted in xml - '+StringsIndex.getInstance().getStringByName('STATS_ENCHANTED') );							statistic += StringsIndex.getInstance().getStringByName('STATS_ENCHANTED')+' ';						}						else if( weapon.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_POISON_INDEX) )						{							//trace( 'poison in xml - '+StringsIndex.getInstance().getStringByName('STATS_POISON') );							statistic += StringsIndex.getInstance().getStringByName('STATS_POISON')+' ';						}												if( weapon.otherWeaponId != 0 )						{							weapon2 = getWeapon( weapon.otherWeaponId );														if( weapon2.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_FIRE_INDEX) )							{								statistic += ' & '+StringsIndex.getInstance().getStringByName('STATS_FIRE')+' ';							}							else if( weapon2.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_ICE_INDEX) )							{								statistic += ' & '+StringsIndex.getInstance().getStringByName('STATS_ICE')+' ';							}							else if( weapon2.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_ENCHANTED_INDEX) )							{								statistic += ' & '+StringsIndex.getInstance().getStringByName('STATS_ENCHANTED')+' ';							}							else if( weapon2.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_POISON_INDEX) )							{								statistic += ' & '+StringsIndex.getInstance().getStringByName('STATS_POISON')+' ';							}						}												if( weapon.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_MULTIPLE_WEAPONS_INDEX) )						{							statistic += StringsIndex.getInstance().getStringByName('STATS_MULTI_WEAPON');						}						else if( weapon.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_CATAPULT_INDEX) )						{							statistic += StringsIndex.getInstance().getStringByName('STATS_LAUNCHER');						}						else if( weapon.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_PROJECTILE_INDEX) )						{							//trace( 'shooter in xml - '+StringsIndex.getInstance().getStringByName('STATS_SHOOTER') );							statistic += StringsIndex.getInstance().getStringByName('STATS_SHOOTER');						}						else if( weapon.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_SPRING_TRAP_INDEX) )						{							statistic += StringsIndex.getInstance().getStringByName('STATS_SPRING_TRAP');						}						else if( weapon.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_MULTIPLE_DIRECTIONS_PROJECTILE_INDEX) )						{							statistic += StringsIndex.getInstance().getStringByName('STATS_MULTI_DIRECTIONAL_SHOOTER');						}						else if( weapon.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_HEALING_INDEX) )						{							statistic += StringsIndex.getInstance().getStringByName('STATS_HEALER');						}						else if( weapon.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_BOMB_INDEX) )						{							statistic += StringsIndex.getInstance().getStringByName('STATS_BOMB');						}						else if( weapon.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_SHIELD_INDEX) )						{							statistic += StringsIndex.getInstance().getStringByName('STATS_SHIELD');						}						else if( weapon.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_ADDITION_INDEX) )						{							statistic += StringsIndex.getInstance().getStringByName('STATS_ADDITION');						}						else if( weapon.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_HIGH_BLOCKING_INDEX) )						{							statistic += StringsIndex.getInstance().getStringByName('STATS_TALL_BLOCKER');						}						else						{							//trace( 'blocker in xml '+StringsIndex.getInstance().getStringByName('STATS_BLOCKER') );							statistic += StringsIndex.getInstance().getStringByName('STATS_BLOCKER');						}												if( weapon.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_ONE_HIT_KILL_INDEX) )						{							statistic += '\n'+StringsIndex.getInstance().getStringByName('STATS_POWER')+': '+'<span class="font2Purple">'+StringsIndex.getInstance().getStringByName('STATS_KO')+'</span>';						}						else if( weapon.power > 0 )						{							statistic += '\n'+StringsIndex.getInstance().getStringByName('STATS_POWER')+': ';							if( weapon.power <= .4 )							{								statistic += '<span class="font2Red">'+StringsIndex.getInstance().getStringByName('STATS_LOW')+'</span>';							}							else if( weapon.power <= .8 )							{								statistic += '<span class="font2Yellow">'+StringsIndex.getInstance().getStringByName('STATS_MEDIUM')+'</span>';							}							else							{								statistic += '<span class="font2Green">'+StringsIndex.getInstance().getStringByName('STATS_HIGH')+'</span>';							}						}												if( weapon.range > 0 )						{							statistic += '\n'+StringsIndex.getInstance().getStringByName('STATS_RANGE')+': ';							if( weapon.range <= 1 )							{								statistic += '<span class="font2Red">'+StringsIndex.getInstance().getStringByName('STATS_SHORT')+'</span>';							}							else if( weapon.range <= 5 )							{								statistic += '<span class="font2Yellow">'+StringsIndex.getInstance().getStringByName('STATS_MEDIUM')+'</span>';							}							else if( weapon.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_MULTIPLE_LANES_INDEX) )							{								statistic += '<span class="font2Purple">'+StringsIndex.getInstance().getStringByName('STATS_SCREEN')+'</span>';							}							else							{								statistic += '<span class="font2Green">'+StringsIndex.getInstance().getStringByName('STATS_LONG')+'</span>';							}						}												if( weapon.rateOfFire > 0 )						{							statistic += '\n'+StringsIndex.getInstance().getStringByName('STATS_RELOAD')+': ';							if( weapon.rateOfFire <= 1 )							{								statistic += '<span class="font2Green">'+StringsIndex.getInstance().getStringByName('STATS_FAST')+'</span>';							}							else if( weapon.rateOfFire <= 2.5 )							{								statistic += '<span class="font2Yellow">'+StringsIndex.getInstance().getStringByName('STATS_MEDIUM')+'</span>';							}							else							{								statistic += '<span class="font2Red">'+StringsIndex.getInstance().getStringByName('STATS_SLOW')+'</span>';							}						}												if( weapon.health > 0 )						{							statistic += '\n'+StringsIndex.getInstance().getStringByName('STATS_HEALTH')+': ';							if( weapon.health <= 5 )							{								statistic += '<span class="font2Red">'+StringsIndex.getInstance().getStringByName('STATS_LOW')+'</span>';							}							else if( weapon.health <= 10 )							{								statistic += '<span class="font2Yellow">'+StringsIndex.getInstance().getStringByName('STATS_MEDIUM')+'</span>';							}							else							{								statistic += '<span class="font2Green">'+StringsIndex.getInstance().getStringByName('STATS_HIGH')+'</span>';							}						}												weapon.statistic = statistic;												//trace( "weapon id: "+weapon.id );						//trace( "weapon statistic: "+weapon.statistic );					}				}							/** buildGodStatistics			  *	---------------------------------------------------------------------- */				public function buildGodStatistics():void				{					var statistic:String;					var god:God;					var i:int;										for( i=0; i<_godsCount; ++i )					{						god = _gods[i];						statistic = '\n'+StringsIndex.getInstance().getStringByName('STATS_TYPE')+': '+StringsIndex.getInstance().getStringByName('STATS_GOD');						/*						if( god.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_FIRE_INDEX) )						{							statistic += StringsIndex.getInstance().getStringByName('STATS_FIRE');						}						else if( god.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_ICE_INDEX) )						{							statistic += StringsIndex.getInstance().getStringByName('STATS_ICE');						}						else if( god.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_ENCHANTED_INDEX) )						{							statistic += StringsIndex.getInstance().getStringByName('STATS_ENCHANTED');						}						else if( god.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_POISON_INDEX) )						{							statistic += StringsIndex.getInstance().getStringByName('STATS_POISON');						}						*/						if( god.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_ONE_HIT_KILL_INDEX) )						{							statistic += '\n'+StringsIndex.getInstance().getStringByName('STATS_POWER')+': '+'<span class="font2Purple">'+StringsIndex.getInstance().getStringByName('STATS_KO')+'</span>';						}						else if( god.power > 0 )						{							statistic += '\n'+StringsIndex.getInstance().getStringByName('STATS_POWER')+': ';							if( god.power <= .4 )							{								statistic += '<span class="font2Red">'+StringsIndex.getInstance().getStringByName('STATS_LOW')+'</span>';							}							else if( god.power <= .7 )							{								statistic += '<span class="font2Yellow">'+StringsIndex.getInstance().getStringByName('STATS_MEDIUM')+'</span>';							}							else							{								statistic += '<span class="font2Green">'+StringsIndex.getInstance().getStringByName('STATS_HIGH')+'</span>';							}						}												statistic += '\n'+StringsIndex.getInstance().getStringByName('STATS_RANGE')+': '+'<span class="font2Purple">'+StringsIndex.getInstance().getStringByName('STATS_SCREEN')+'</span>';												god.statistic = statistic;					}				}							/** buildEnemyStatistics			  *	---------------------------------------------------------------------- */				public function buildEnemyStatistics():void				{					var statistic:String;					var enemy:Enemy;					var i:int;					var puncher:Boolean = false;										for( i=0; i<_enemiesCount; ++i )					{						enemy = _enemies[i];						puncher = false;												statistic = '\n'+StringsIndex.getInstance().getStringByName('STATS_TYPE')+': ';												if( enemy.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_FIRE_INDEX) )						{							statistic += StringsIndex.getInstance().getStringByName('STATS_FIRE')+' ';						}						else if( enemy.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_ICE_INDEX) )						{							statistic += StringsIndex.getInstance().getStringByName('STATS_ICE')+' ';						}						else if( enemy.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_ENCHANTED_INDEX) )						{							statistic += StringsIndex.getInstance().getStringByName('STATS_ENCHANTED')+' ';						}						else if( enemy.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_POISON_INDEX) )						{							statistic += StringsIndex.getInstance().getStringByName('STATS_POISON')+' ';						}												if( enemy.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_LASER_INDEX) )						{							statistic += StringsIndex.getInstance().getStringByName('STATS_BLASTER');						}						else if( enemy.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_EGG_LAYER_INDEX) )						{							statistic += StringsIndex.getInstance().getStringByName('STATS_BREEDER');						}						else if( enemy.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_JUMPER_INDEX) )						{							statistic += StringsIndex.getInstance().getStringByName('STATS_JUMPER');						}						else if( enemy.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_SUPER_JUMPER_INDEX) )						{							statistic += StringsIndex.getInstance().getStringByName('STATS_SUPER_JUMPER');						}						else if( enemy.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_PROJECTILE_INDEX) )						{							statistic += StringsIndex.getInstance().getStringByName('STATS_SHOOTER');						}						else if( enemy.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_CATAPULT_INDEX) )						{							statistic += StringsIndex.getInstance().getStringByName('STATS_LAUNCHER');						}						else						{							puncher = true;							statistic += StringsIndex.getInstance().getStringByName('STATS_PUNCHER');						}												if( enemy.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_ONE_HIT_KILL_INDEX) )						{							statistic += '\n'+StringsIndex.getInstance().getStringByName('STATS_POWER')+': '+'<span class="font2Purple">'+StringsIndex.getInstance().getStringByName('STATS_KO')+'</span>';						}						else						{							statistic += '\n'+StringsIndex.getInstance().getStringByName('STATS_POWER')+': ';							if( enemy.power <= .9 )							{								statistic += '<span class="font2Red">'+StringsIndex.getInstance().getStringByName('STATS_LOW')+'</span>';							}							else if( enemy.power <= 1 )							{								statistic += '<span class="font2Yellow">'+StringsIndex.getInstance().getStringByName('STATS_MEDIUM')+'</span>';							}							else							{								statistic += '<span class="font2Green">'+StringsIndex.getInstance().getStringByName('STATS_HIGH')+'</span>';							}						}												if( enemy.range > 1 )						{							statistic += '\n'+StringsIndex.getInstance().getStringByName('STATS_RANGE')+': ';							if( enemy.range <= 5 )							{								statistic += '<span class="font2Red">'+StringsIndex.getInstance().getStringByName('STATS_LOW')+'</span>';							}							else if( enemy.range <= 7 )							{								statistic += '<span class="font2Yellow">'+StringsIndex.getInstance().getStringByName('STATS_MEDIUM')+'</span>';							}							else if( enemy.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_MULTIPLE_LANES_INDEX) )							{								statistic += '<span class="font2Purple">'+StringsIndex.getInstance().getStringByName('STATS_SCREEN')+'</span>';							}							else							{								statistic += '<span class="font2Green">'+StringsIndex.getInstance().getStringByName('STATS_LONG')+'</span>';							}						}												if( enemy.rateOfFire > 0 )						{							statistic += '\n'+StringsIndex.getInstance().getStringByName('STATS_RELOAD')+': ';							if( enemy.rateOfFire <= .5 )							{								statistic += '<span class="font2Green">'+StringsIndex.getInstance().getStringByName('STATS_FAST')+'</span>';							}							else if( enemy.rateOfFire <= .9 )							{								statistic += '<span class="font2Yellow">'+StringsIndex.getInstance().getStringByName('STATS_MEDIUM')+'</span>';							}							else							{								statistic += '<span class="font2Red">'+StringsIndex.getInstance().getStringByName('STATS_SLOW')+'</span>';							}						}												if( enemy.health > 0 )						{							statistic += '\n'+StringsIndex.getInstance().getStringByName('STATS_HEALTH')+': ';							if( enemy.health <= 19 )							{								statistic += '<span class="font2Red">'+StringsIndex.getInstance().getStringByName('STATS_LOW')+'</span>';							}							else if( enemy.health <= 39 )							{								statistic += '<span class="font2Yellow">'+StringsIndex.getInstance().getStringByName('STATS_MEDIUM')+'</span>';							}							else							{								statistic += '<span class="font2Green">'+StringsIndex.getInstance().getStringByName('STATS_HIGH')+'</span>';							}						}												enemy.statistic = statistic;					}				}						}			}