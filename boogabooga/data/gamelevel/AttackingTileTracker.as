/** AttackingTileTracker  *	---------------------------------------------------------------------------- *  *	@desc:  *		AttackingTileTracker data class  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */	package com.boogabooga.data.gamelevel	{		import flash.events.Event;		import flash.events.EventDispatcher;		import flash.events.IOErrorEvent;		import flash.events.FullScreenEvent;		import flash.events.ProgressEvent;		import flash.external.ExternalInterface;		import flash.net.URLLoader;		import flash.net.URLRequest;		import flash.net.URLRequestMethod;		import flash.net.URLVariables;				import com.avatarlabs.utils.VectorUtil;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.console.ConsoleBroadcaster;				import com.boogabooga.data.gamelevel.AbstractGameObject;		import com.boogabooga.data.maingame.*;		import com.boogabooga.ui.gamelevel.GameLevelAttackingDisplayObject;		import com.boogabooga.ui.gamelevel.GameboardTile;		import com.boogabooga.ui.gamelevel.GateDisplayObject;		import com.boogabooga.ui.gamelevel.enemies.*;		import com.boogabooga.ui.gamelevel.weapons.*;				public class AttackingTileTracker extends Object		{			protected var _id:int;			protected var _tile:GameboardTile;			//protected var _weaponsWatching:Array;			protected var _weaponsWatching:Vector.<GameLevelAttackingDisplayObject>;			protected var _weaponsWatchingLength:int;			//protected var _enemiesWatching:Array;			protected var _enemiesWatching:Vector.<GameLevelAttackingDisplayObject>;			protected var _enemiesWatchingLength:int;			//protected var _objectsOnTile:Array;						protected var _weaponsOnTile:Vector.<GameLevelAttackingDisplayObject>;			protected var _enemiesOnTile:Vector.<GameLevelAttackingDisplayObject>;						/** Constructor			  *	---------------------------------------------------------------------- */				public function AttackingTileTracker()				{					init();				}								public function set id( i:int ):void { _id = i; }				public function get id():int { return _id; }								public function set tile( g:GameboardTile ):void { _tile = g; }				public function get tile():GameboardTile { return _tile; }								public function get weaponsWatching():Vector.<GameLevelAttackingDisplayObject> { return _weaponsWatching; }				public function get weaponsWatchingLength():int { return _weaponsWatchingLength; }				public function get enemiesWatching():Vector.<GameLevelAttackingDisplayObject> { return _enemiesWatching; }				public function get enemiesWatchingLength():int { return _enemiesWatchingLength; }				public function get weaponsOnTile():Vector.<GameLevelAttackingDisplayObject> { return _weaponsOnTile; }				public function get enemiesOnTile():Vector.<GameLevelAttackingDisplayObject> { return _enemiesOnTile; }							/** init			  *	---------------------------------------------------------------------- */				public function init():void				{					_weaponsWatching = new Vector.<GameLevelAttackingDisplayObject>;					_weaponsWatchingLength = 0;					_enemiesWatching = new Vector.<GameLevelAttackingDisplayObject>;					_enemiesWatchingLength = 0;										_weaponsOnTile = new Vector.<GameLevelAttackingDisplayObject>;					_enemiesOnTile = new Vector.<GameLevelAttackingDisplayObject>;				}								public function kill():void				{					VectorUtil.removeAll( _weaponsWatching );					_weaponsWatching = null;					_weaponsWatchingLength = 0;										VectorUtil.removeAll( _enemiesWatching );					_enemiesWatching = null;					_enemiesWatchingLength = 0;										VectorUtil.removeAll( _weaponsOnTile );					_weaponsOnTile = null;										VectorUtil.removeAll( _enemiesOnTile );					_enemiesOnTile = null;				}							/** addWeaponWatching			  *	---------------------------------------------------------------------- */				public function addWeaponWatching( displayObject:GameLevelAttackingDisplayObject ):void				{					_weaponsWatching.push( displayObject );					_weaponsWatchingLength = _weaponsWatching.length;										//trace( _tile+" _weaponsWatching: "+_weaponsWatching );				}							/** removeWeaponWatching			  *	---------------------------------------------------------------------- */				public function removeWeaponWatching( displayObject:GameLevelAttackingDisplayObject ):void				{					/*					for( var i:uint=0; i<_weaponsWatching.length; ++i )					{						if( _weaponsWatching[i] == displayObject )						{							_weaponsWatching[i] = null;							_weaponsWatching.splice( i, 1 );							break;						}					}					*/										var removedWeapon:GameLevelAttackingDisplayObject = VectorUtil.remove( _weaponsWatching, displayObject );						removedWeapon = null;										_weaponsWatchingLength = _weaponsWatching.length;				}							/** addEnemyWatching			  *	---------------------------------------------------------------------- */				public function addEnemyWatching( displayObject:GameLevelAttackingDisplayObject ):void				{					_enemiesWatching.push( displayObject );					_enemiesWatchingLength = _enemiesWatching.length;										//trace( _tile+" _enemiesWatching: "+_enemiesWatching );				}							/** removeEnemyWatching			  *	---------------------------------------------------------------------- */				public function removeEnemyWatching( displayObject:GameLevelAttackingDisplayObject ):void				{					//trace( "removeEnemyWatching("+displayObject+");" );										/*					for( var i:uint=0; i<_enemiesWatching.length; ++i )					{						if( _enemiesWatching[i] == displayObject )						{							_enemiesWatching[i] == null;							_enemiesWatching.splice( i, 1 );							break;						}					}					*/										var removedEnemy:GameLevelAttackingDisplayObject = VectorUtil.remove( _enemiesWatching, displayObject );						removedEnemy = null;										_enemiesWatchingLength = _enemiesWatching.length;				}							/** addObjectOnTile			  *	---------------------------------------------------------------------- *			  *	Adds object to the tile. It depends on what kind of object it is, it			  *	will get added to weapons array or enemies array. 			  *	GateDisplayObject goes to the weapons array.			  *	---------------------------------------------------------------------- */				public function addObjectOnTile( displayObject:GameLevelAttackingDisplayObject ):void				{					//_objectsOnTile.push( displayObject );										if( displayObject is WeaponDisplayObject )					{						_weaponsOnTile.push( displayObject as WeaponDisplayObject );					}					else if( displayObject is EnemyDisplayObject )					{						_enemiesOnTile.push( displayObject as EnemyDisplayObject );					}					else if( displayObject is GateDisplayObject )					{						_weaponsOnTile.push( displayObject as GateDisplayObject );					}				}							/** removeObjectOnTile			  *	---------------------------------------------------------------------- *			  *	Removes object from the tile. It depends on what kind of object it is,			  *	it will remove from weapons array or enemies array.			  *	GateDisplayObject goes to the weapons array.			  *	---------------------------------------------------------------------- */				public function removeObjectOnTile( displayObject:GameLevelAttackingDisplayObject ):void				{					/*					for( var i:uint=0; i<_objectsOnTile.length; ++i )					{						if( _objectsOnTile[i] == displayObject )						{							_objectsOnTile[i] = null;							_objectsOnTile.splice( i, 1 );							break;						}					}					*/										if( displayObject is WeaponDisplayObject || displayObject is GateDisplayObject )					{						var removedWeapon = VectorUtil.remove( _weaponsOnTile, displayObject );							removedWeapon = null;					}					else if( displayObject is EnemyDisplayObject )					{						var removedEnemy = VectorUtil.remove( _enemiesOnTile, displayObject );							removedEnemy = null;					}									}							/** output			  *	---------------------------------------------------------------------- */				public function output():void				{					var outputString:String = "";						outputString += "\n/***** AttackingTileTracker "+_tile+" *****/\n";										var i:uint;										if( _weaponsWatchingLength > 0 )					{						outputString += "	Weapons watching this tile:\n";													for( i=0; i<_weaponsWatching.length; ++i )						{							outputString += "		"+_weaponsWatching[i]+"\n";						}					}										if( _enemiesWatchingLength > 0 )					{						outputString += "	Enemies watching this tile:\n";												for( i=0; i<_enemiesWatching.length; ++i )						{							outputString += "		"+_enemiesWatching[i]+"\n";						}					}										if( _weaponsOnTile.length > 0 )					{						outputString += "	Weapons on this tile:\n";												for( i=0; i<_weaponsOnTile.length; ++i )						{							outputString += "		"+_weaponsOnTile[i]+"\n";						}					}										if( _enemiesOnTile.length > 0 )					{						outputString += "	Enemies on this tile:\n";												for( i=0; i<_enemiesOnTile.length; ++i )						{							outputString += "		"+_enemiesOnTile[i]+"\n";						}					}										outputString += "/*****	End AttackingTileTracker output *****/\n";										if( _weaponsWatchingLength > 0 || _enemiesWatchingLength > 0 || _weaponsOnTile.length > 0 || _enemiesOnTile.length > 0 )						trace( outputString );				}		}			}