/** Weapon  *	---------------------------------------------------------------------------- *  *	@desc:  *		Weapon data class  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */	package com.boogabooga.data.gamelevel	{		import flash.events.Event;		import flash.events.EventDispatcher;		import flash.events.IOErrorEvent;		import flash.events.FullScreenEvent;		import flash.events.ProgressEvent;		import flash.external.ExternalInterface;		import flash.net.URLLoader;		import flash.net.URLRequest;		import flash.net.URLRequestMethod;		import flash.net.URLVariables;				import com.avatarlabs.utils.ArrayUtil;		import com.avatarlabs.utils.UtilFunctions;		import com.avatarlabs.utils.cache.HashTable;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;				import com.boogabooga.data.gamelevel.AbstractGameObject;		import com.boogabooga.data.maingame.*;				public class Weapon extends AbstractGameObject		{			protected var _consumable:Boolean;			protected var _useCount:int;			//protected var _type:String;			//protected var _typeIndex:int;			//protected var _laneType:String;			//protected var _laneTypeIndex:int;			protected var _health:Number;			protected var _maxHealth:Number;			protected var _power:Number;			protected var _rateOfFire:Number;			protected var _range:Number;			protected var _additionalAttackValue:Number;			protected var _hitSoundDataIds:Array;			protected var _cost:uint;			protected var _earlyUnlockCost:uint;			protected var _usageOnUnlock:uint;			protected var _upAnimationObject:AnimationObject;			protected var _downAnimationObject:AnimationObject;			protected var _deathAnimationObject:AnimationObject;			protected var _additionalAttackUpAnimationObject:AnimationObject;			protected var _additionalAttackDownAnimationObject:AnimationObject;			protected var _switchWeaponOneAnimationObject:AnimationObject;			protected var _switchWeaponTwoAnimationObject:AnimationObject;			protected var _otherWeaponId:int;			protected var _listed:Boolean;			protected var _uniqueSoundDataIds:Array;			protected var _rollOverWidth:Number;			protected var _rollOverHeight:Number;						/** Constructor			  *	---------------------------------------------------------------------- */				public function Weapon()				{					init();				}							/** init			  *	---------------------------------------------------------------------- */				override public function init():void				{					super.init();										_debug = true;										_consumable = false;					_useCount = 0;					_uniqueSoundDataIds = new Array();					_hitSoundDataIds = new Array();					_rollOverWidth = 60;					_rollOverHeight = 100;				}							/** set/get consumable			  *	---------------------------------------------------------------------- */				public function set consumable( b:Boolean ):void { _consumable = b; }				public function get consumable():Boolean { return _consumable; }							/** set/get useCount			  *	---------------------------------------------------------------------- */				public function set useCount( u:int ):void { _useCount = u < 0 ? 0 : u; }				public function get useCount():int { return _useCount; }							/** set/get type			  *	---------------------------------------------------------------------- 				public function set type( s:String ):void				{					_type = s;					_typeIndex = HashTable.getInstance().getHash( _type );				}				public function get type():String { return _type; }*/							/** get typeIndex			  *	---------------------------------------------------------------------- 				public function get typeIndex():int { return _typeIndex; }*/							/** set/get laneType			  *	---------------------------------------------------------------------- 				public function set laneType( s:String ):void				{					_laneType = s;					_laneTypeIndex = HashTable.getInstance().getHash( _laneType );				}				public function get laneType():String { return _laneType; }*/							/** get laneTypeIndex			  *	---------------------------------------------------------------------- 				public function get laneTypeIndex():int { return _laneTypeIndex; }*/							/** set/get health			  *	---------------------------------------------------------------------- */				public function set health( n:Number ):void				{					_health = n;										if( isNaN(_maxHealth) )						_maxHealth = _health;				}				public function get health():Number { return _health; }							/** get maxHealth			  *	---------------------------------------------------------------------- */				public function get maxHealth():Number { return _maxHealth; }							/** set/get power			  *	---------------------------------------------------------------------- */				public function set power( n:Number ):void { _power = n; }				public function get power():Number { return _power; }							/** set/get rateOfFire			  *	---------------------------------------------------------------------- */				public function set rateOfFire( n:Number ):void { _rateOfFire = n; }				public function get rateOfFire():Number { return _rateOfFire; }							/** set/get range			  *	---------------------------------------------------------------------- */				public function set range( n:Number ):void { _range = n; }				public function get range():Number { return _range; }								public function set additionalAttackValue( n:Number ):void { _additionalAttackValue = n; }				public function get additionalAttackValue():Number { return _additionalAttackValue; }							/** set/get cost			  *	---------------------------------------------------------------------- */				public function set cost( u:uint ):void { _cost = u; }				public function get cost():uint { return _cost; }								public function set usageOnUnlock( u:uint ):void { _usageOnUnlock = u; }				public function get usageOnUnlock():uint { return _usageOnUnlock; }							/** set/get earlyUnlockCost			  *	---------------------------------------------------------------------- */				public function set earlyUnlockCost( u:uint ):void { _earlyUnlockCost = u; }				public function get earlyUnlockCost():uint { return _earlyUnlockCost; }								public function set upAnimationObject( a:AnimationObject ):void { _upAnimationObject = a; }				public function get upAnimationObject():AnimationObject { return _upAnimationObject; }								public function set downAnimationObject( a:AnimationObject ):void { _downAnimationObject = a; }				public function get downAnimationObject():AnimationObject { return _downAnimationObject; }								public function set deathAnimationObject( a:AnimationObject ):void { _deathAnimationObject = a; }				public function get deathAnimationObject():AnimationObject { return _deathAnimationObject; }								public function set additionalAttackUpAnimationObject( a:AnimationObject ):void { _additionalAttackUpAnimationObject = a; }				public function get additionalAttackUpAnimationObject():AnimationObject { return _additionalAttackUpAnimationObject; }								public function set additionalAttackDownAnimationObject( a:AnimationObject ):void { _additionalAttackDownAnimationObject = a; }				public function get additionalAttackDownAnimationObject():AnimationObject { return _additionalAttackDownAnimationObject; }								public function set switchWeaponOneAnimationObject( a:AnimationObject ):void { _switchWeaponOneAnimationObject = a; }				public function get switchWeaponOneAnimationObject():AnimationObject { return _switchWeaponOneAnimationObject; }								public function set switchWeaponTwoAnimationObject( a:AnimationObject ):void { _switchWeaponTwoAnimationObject = a; }				public function get switchWeaponTwoAnimationObject():AnimationObject { return _switchWeaponTwoAnimationObject; }								public function set otherWeaponId( i:int ):void { _otherWeaponId = i; }				public function get otherWeaponId():int { return _otherWeaponId; }								public function set listed( b:Boolean ):void { _listed = b; }				public function get listed():Boolean { return _listed; }								public function set hitSoundDataIds( a:Array ):void { _hitSoundDataIds = a; }				public function get hitSoundDataIds():Array { return _hitSoundDataIds; }								public function set uniqueSoundDataIds( a:Array ):void { _uniqueSoundDataIds = a; }				public function get uniqueSoundDataIds():Array { return _uniqueSoundDataIds; }								public function set rollOverWidth( n:Number ):void { _rollOverWidth = n; }				public function get rollOverWidth():Number { return _rollOverWidth; }								public function set rollOverHeight( n:Number ):void { _rollOverHeight = n; }				public function get rollOverHeight():Number { return _rollOverHeight; }								public function collectUniqueSoundDataIds():void				{					var j:int;										if( _upAnimationObject != null )					{						for( j=0; j<_upAnimationObject.soundDataIds.length; ++j )						{							if( ArrayUtil.find( _uniqueSoundDataIds, _upAnimationObject.soundDataIds[j] ) == null )								_uniqueSoundDataIds.push( _upAnimationObject.soundDataIds[j] );						}					}										if( _downAnimationObject != null )					{						for( j=0; j<_downAnimationObject.soundDataIds.length; ++j )						{							if( ArrayUtil.find( _uniqueSoundDataIds, _downAnimationObject.soundDataIds[j] ) == null )								_uniqueSoundDataIds.push( _downAnimationObject.soundDataIds[j] );						}					}										if( _deathAnimationObject != null )					{						for( j=0; j<_deathAnimationObject.soundDataIds.length; ++j )						{							if( ArrayUtil.find( _uniqueSoundDataIds, _deathAnimationObject.soundDataIds[j] ) == null )								_uniqueSoundDataIds.push( _deathAnimationObject.soundDataIds[j] );						}					}										if( _additionalAttackUpAnimationObject != null )					{						for( j=0; j<_additionalAttackUpAnimationObject.soundDataIds.length; ++j )						{							if( ArrayUtil.find( _uniqueSoundDataIds, _additionalAttackUpAnimationObject.soundDataIds[j] ) == null )								_uniqueSoundDataIds.push( _additionalAttackUpAnimationObject.soundDataIds[j] );						}					}										if( _additionalAttackDownAnimationObject != null )					{						for( j=0; j<_additionalAttackDownAnimationObject.soundDataIds.length; ++j )						{							if( ArrayUtil.find( _uniqueSoundDataIds, _additionalAttackDownAnimationObject.soundDataIds[j] ) == null )								_uniqueSoundDataIds.push( _additionalAttackDownAnimationObject.soundDataIds[j] );						}					}										if( _switchWeaponOneAnimationObject != null )					{						for( j=0; j<_switchWeaponOneAnimationObject.soundDataIds.length; ++j )						{							if( ArrayUtil.find( _uniqueSoundDataIds, _switchWeaponOneAnimationObject.soundDataIds[j] ) == null )								_uniqueSoundDataIds.push( _switchWeaponOneAnimationObject.soundDataIds[j] );						}					}										if( _switchWeaponTwoAnimationObject != null )					{						for( j=0; j<_switchWeaponTwoAnimationObject.soundDataIds.length; ++j )						{							if( ArrayUtil.find( _uniqueSoundDataIds, _switchWeaponTwoAnimationObject.soundDataIds[j] ) == null )								_uniqueSoundDataIds.push( _switchWeaponTwoAnimationObject.soundDataIds[j] );						}					}										for( j=0; j<_hitSoundDataIds.length; ++j )					{						if( ArrayUtil.find( _uniqueSoundDataIds, _hitSoundDataIds[j] ) == null )							_uniqueSoundDataIds.push( _hitSoundDataIds[j] );					}				}								public function clone():Weapon				{					var cloned:Weapon = UtilFunctions.clone(this) as Weapon;										//trace( "cloned.attackProperties: "+cloned.attackProperties );					//trace( "_attackProperties: "+_attackProperties );										if( _upAnimationObject != null )						cloned.upAnimationObject = _upAnimationObject.clone();										if( _downAnimationObject != null )						cloned.downAnimationObject = _downAnimationObject.clone();										return cloned;				}						}			}