/** DiggingSpots  *	---------------------------------------------------------------------------- *  *	@desc:  *		DiggingSpots data class  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */	package com.boogabooga.data.gamelevel	{		import flash.events.Event;		import flash.events.EventDispatcher;		import flash.events.IOErrorEvent;		import flash.events.FullScreenEvent;		import flash.events.ProgressEvent;		import flash.external.ExternalInterface;		import flash.net.URLLoader;		import flash.net.URLRequest;		import flash.net.URLRequestMethod;		import flash.net.URLVariables;				import com.adobe.serialization.json.JSONDecoder;		import com.adobe.serialization.json.JSONEncoder;		import com.avatarlabs.utils.ArrayUtil;		import com.avatarlabs.utils.UtilFunctions;		import com.avatarlabs.utils.VectorUtil;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.console.ConsoleBroadcaster;				import com.boogabooga.data.gamelevel.AbstractGameObject;		import com.boogabooga.data.gamelevel.WaveZone;		import com.boogabooga.data.maingame.*;				public class DiggingSpots extends Object		{			protected var _id:uint;			//protected var _gameLevelId:int;			protected var _spots:Array;			protected var _treasures:Vector.<Treasure>;			protected var _weapons:Vector.<Weapon>;			protected var _gods:Vector.<God>;			//protected var _digTimer:int;						protected var _dugCommonTreasuresCount:int;			protected var _commonTreasuresCount:int;			protected var _dugRareTreasuresCount:int;			protected var _rareTreasuresCount:int;			protected var _dugConsumablesCount:int;			protected var _consumablesCount:int;						/** Constructor			  *	---------------------------------------------------------------------- */				public function DiggingSpots()				{					init();				}							/** init			  *	---------------------------------------------------------------------- */				public function init():void				{					_id = 0;										_spots = new Array();					_spots[0] = new Array();					_spots[1] = new Array();					_spots[2] = new Array();					_treasures = new Vector.<Treasure>;					_weapons = new Vector.<Weapon>;					_gods = new Vector.<God>;				}							/** set/get id			  *	---------------------------------------------------------------------- */				public function set id( u:uint ):void { _id = u; }				public function get id():uint { return _id; }								//public function set gameLevelId( i:int ):void { _gameLevelId = i; }				//public function get gameLevelId():int { return _gameLevelId; }								//public function set digTimer( i:int ):void { _digTimer = i; }				//public function get digTimer():int { return _digTimer; }								public function get spots():Array { return _spots; }				public function get treasures():Vector.<Treasure> { return _treasures; }				public function get weapons():Vector.<Weapon> { return _weapons; }				public function get gods():Vector.<God> { return _gods; }								public function get totalDiggingSpots():int				{					return (_spots[0].length + _spots[1].length + _spots[2].length);				}								public function get treasureIds():Array				{					var treasureIds:Array = new Array();										for( var i:int=0; i<_treasures.length; ++i )					{						treasureIds.push( _treasures[i].id );					}										return treasureIds;				}								public function get weaponIds():Array				{					var weaponIds:Array = new Array();										for( var i:int=0; i<_weapons.length; ++i )					{						weaponIds.push( _weapons[i].id );					}										return weaponIds;				}								public function get godIds():Array				{					var godIds:Array = new Array();										for( var i:int=0; i<_gods.length; ++i )					{						godIds.push( _gods[i].id );					}										return godIds;				}								public function get dugCommonTreasuresCount():int { return _dugCommonTreasuresCount; }				public function get commonTreasuresCount():int { return _commonTreasuresCount; }				public function get dugRareTreasuresCount():int { return _dugRareTreasuresCount; }				public function get rareTreasuresCount():int { return _rareTreasuresCount; }				public function get consumablesCount():int { return _consumablesCount; }				public function get dugConsumablesCount():int { return _dugConsumablesCount; }							/** countTreasures			  *	---------------------------------------------------------------------- */				public function countTreasures():void				{					_dugCommonTreasuresCount = 0;					_commonTreasuresCount = 0;					_dugRareTreasuresCount = 0;					_rareTreasuresCount = 0;					_consumablesCount = 0;					_dugConsumablesCount = 0;										var i:int, j:int, k:int;										for( i=0; i<_treasures.length; ++i )					{						if( _treasures[i].rarity == Treasure.RARITY_COMMON )							++_commonTreasuresCount;						else							++_rareTreasuresCount;					}										_consumablesCount = _weapons.length + _gods.length;										//trace( "_dugCommonTreasuresCount: "+_dugCommonTreasuresCount );					//trace( "_commonTreasuresCount: "+_commonTreasuresCount );					//trace( "_dugRareTreasuresCount: "+_dugRareTreasuresCount );					//trace( "_rareTreasuresCount: "+_rareTreasuresCount );					//trace( "_dugConsumablesCount: "+_dugConsumablesCount );					//trace( "_consumablesCount: "+_consumablesCount );				}							/** generateDiggingMap			  *	---------------------------------------------------------------------- */				public function generateDiggingMap():DiggingMap				{					var diggingMap:DiggingMap = new DiggingMap();										var tempTreasures:Vector.<Treasure>;					var randomTreasures:Vector.<Treasure> = new Vector.<Treasure>;					var tempWeapons:Vector.<Weapon>;					var randomWeapons:Vector.<Weapon> = new Vector.<Weapon>;					var tempGods:Vector.<God>;					var randomGods:Vector.<God> = new Vector.<God>;					var randomIndex:int;					var itemTypes:int = 0;					var randomItems:Array = new Array();										if( _treasures.length > 0 )					{						tempTreasures = _treasures.concat();						while( tempTreasures.length > 0 )						{							randomIndex = int( Math.random()*tempTreasures.length );							diggingMap.treasures.push( tempTreasures[randomIndex] );							randomTreasures.push( tempTreasures.splice(randomIndex, 1)[0] );						}						++itemTypes;						randomItems.push( randomTreasures );					}										if( _weapons.length > 0 )					{						tempWeapons = _weapons.concat();						while( tempWeapons.length > 0 )						{							randomIndex = int( Math.random()*tempWeapons.length );							diggingMap.weapons.push( tempWeapons[randomIndex] );							randomWeapons.push( tempWeapons.splice(randomIndex, 1)[0] );						}						++itemTypes;						randomItems.push( randomWeapons );					}										if( _gods.length > 0 )					{						tempGods = _gods.concat();						while( tempGods.length > 0 )						{							randomIndex = int( Math.random()*tempGods.length );							diggingMap.gods.push( tempGods[randomIndex] );							randomGods.push( tempGods.splice(randomIndex, 1)[0] );						}						++itemTypes;						randomItems.push( randomGods );					}										var i:int, j:int, k:int;					var diggingMapSpotWithTreasure:DiggingMapSpotWithTreasure;										k = 0;										for( i=0; i<_spots.length; ++i )					{						diggingMap.spotsWithTreasures[i] = new Vector.<DiggingMapSpotWithTreasure>;						for( j=0; j<_spots[i].length; ++j )						{							diggingMapSpotWithTreasure = new DiggingMapSpotWithTreasure();							diggingMapSpotWithTreasure.c = _spots[i][j].c;							diggingMapSpotWithTreasure.r = _spots[i][j].r;							diggingMapSpotWithTreasure.d = 0;														if( itemTypes > 1 )							{								randomIndex = int( Math.random() * itemTypes );							}							else							{								randomIndex = 0;							}														if( randomItems[randomIndex][0] is Treasure )								diggingMapSpotWithTreasure.tid = randomItems[randomIndex][0].id;							else if( randomItems[randomIndex][0] is Weapon )								diggingMapSpotWithTreasure.wid = randomItems[randomIndex][0].id;							else if( randomItems[randomIndex][0] is God )								diggingMapSpotWithTreasure.gid = randomItems[randomIndex][0].id;														randomItems[randomIndex].splice(0, 1);														if( randomItems[randomIndex].length == 0 )							{								randomItems.splice( randomIndex, 1 );								--itemTypes;							}														diggingMap.spotsWithTreasures[i].push( diggingMapSpotWithTreasure );						}					}										//trace( "generated digging map : "+diggingMap.spotsWithTreasures );					//diggingMap.output();										return diggingMap;				}							/** serialize			  *	---------------------------------------------------------------------- */				public function serialize():String				{					var object:Object = new Object();						object.spots = new JSONEncoder(_spots).getString();						object.treasure_ids = new JSONEncoder(this.treasureIds).getString();										return "";				}							/** deserialize			  *	---------------------------------------------------------------------- */				public function deserialize( object:Object ):void				{					//_id = object["id"];					_id = object["id"];										_spots = new JSONDecoder( object["spots"] ).getValue();										var i:int, j:int;					/*					for( i=0; i<object["spots"].length; ++i )					{						_spots[i] = new Array();						for( j=0; j<object["spots"][i].length; ++j )						{							//_spots[i].push( {r:object["spots"][i][j]						}					}					*/										var tempTreasureIds:Array = new JSONDecoder( object["archeology_treasure_ids"] ).getValue();					for( i=0; i<tempTreasureIds.length; ++i )					{						_treasures.push( MainGameDataIndex.getInstance().getTreasure( tempTreasureIds[i] ) );					}										var tempWeaponIds:Array = new JSONDecoder( object['weapon_ids'] ).getValue();					for( i=0; i<tempWeaponIds.length; ++i )					{						_weapons.push( GameLevelDataIndex.getInstance().getWeapon( tempWeaponIds[i] ) );					}										var tempGodIds:Array = new JSONDecoder( object['god_ids'] ).getValue();					for( i=0; i<tempGodIds.length; ++i )					{						_gods.push( GameLevelDataIndex.getInstance().getGod( tempGodIds[i] ) );					}										countTreasures();				}							/** clone			  *	---------------------------------------------------------------------- */				public function clone():DiggingSpots				{					var clonedObject:DiggingSpots = UtilFunctions.clone(this) as DiggingSpots;										return clonedObject;				}								public function output():void				{					var i:int, j:int;					var length1:int, length2:int;										trace( "********** Digging Spot **********" );					trace( "id: "+this._id );					//trace( "gameLevelId: "+this._gameLevelId );					length1 = _spots.length;					for( i=0; i<length1; ++i )					{						length2 = _spots[i].length;						trace( "Area "+(i+1) );												for( j=0; j<length2; ++j )						{							trace( "row: "+_spots[i][j].r+", column: "+_spots[i][j].c );						}					}					trace( "********** ----- **********" );				}						}			}