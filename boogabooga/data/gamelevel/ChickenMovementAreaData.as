/** ChickenMovementAreaData  *	---------------------------------------------------------------------------- *  *	@desc:  *		ChickenMovementAreaData data class  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */	package com.boogabooga.data.gamelevel	{		import com.avatarlabs.utils.UtilFunctions;				public class ChickenMovementAreaData extends Object		{			public var topLeft:Object; // {r:0, c:0}			public var topRight:Object;			public var bottomLeft:Object;			public var bottomRight:Object;			public var tiles:Array;						/** Constructor			  *	---------------------------------------------------------------------- */				public function ChickenMovementAreaData()				{					init();				}							/** init			  *	---------------------------------------------------------------------- */				public function init():void				{					//topLeft = {r:-1, c:-1};					//topRight = {r:-1, c:-1};					//bottomLeft = {r:-1, c:-1};					//bottomRight = {r:-1, c:-1};					topLeft = {r:0, c:0};					topRight = {r:0, c:0};					bottomLeft = {r:0, c:0};					bottomRight = {r:0, c:0};					tiles = new Array();				}												/*				public function addTile( r:int, c:int ):void				{					tiles.push( {r:r, c:c} );										if( c <= topLeft.c )					{						topLeft.c = c;						topRight.c = c;												if( r < topLeft.r )						{							topLeft.r = r;						}												if( r > topRight.r )						{							topRight.r = r;						}					}										if( c >= bottomLeft.c )					{						if( r < bottomLeft.r )						{							bottomLeft.r;						}												if( r > bottomRight.r )						{							bottomRight.r = r;						}					}				}				*/								public function addTilesFromBounds():void				{					var i:int, j:int;										if( topLeft.r != -1 && bottomLeft.r != -1 )					{						for( i=topLeft.r; i<=bottomLeft.r; ++i )						{							for( j=topLeft.c; j<=topRight.c; ++j )							{								tiles.push( {r:i, c:j} );							}						}					}				}								public function calculateBounds():void				{					if( tiles.length > 0 )					{						var minRow:int = -1;						var maxRow:int = -1;						var minColumn:int = -1;						var maxColumn:int = -1;												for( var i:int=0; i<tiles.length; ++i )						{							if( minRow == -1 )							{								minRow = tiles[i].r;								maxRow = tiles[i].r;																minColumn = tiles[i].c;								maxColumn = tiles[i].c;							}							else							{								if( tiles[i].r < minRow )								{									minRow = tiles[i].r;								}								else if( tiles[i].r > maxRow )								{									maxRow = tiles[i].r;								}																if( tiles[i].c < minColumn )								{									minColumn = tiles[i].c;								}								else if( tiles[i].c > maxColumn )								{									maxColumn = tiles[i].c;								}								/*								if( tiles[i].r >= bottomLeft.r )								{									bottomLeft.r = tiles[i].r;									bottomRight.r = tiles[i].r;																		if( tiles[i].c < bottomLeft.c )									{										bottomLeft.c = tiles[i].c;									}																		if( tiles[i].c > bottomRight.c )									{										bottomRight.c = tiles[i].c;									}								}								*/							}						}												topLeft.r = minRow;						topLeft.c = minColumn;						topRight.r = minRow;						topRight.c = maxColumn;						bottomLeft.r = maxRow;						bottomLeft.c = minColumn;						bottomRight.r = maxRow;						bottomRight.c = maxColumn;					}					else					{						topLeft.r = -1;						topLeft.c = -1;						topRight.r = -1;						topRight.c = -1;						bottomLeft.r = -1;						bottomLeft.c = -1;						bottomRight.r = -1;						bottomRight.c = -1;					}										trace( "topLeft.r: "+topLeft.r );					trace( "topLeft.c: "+topLeft.c );					trace( "bottomRight.r: "+bottomRight.r );					trace( "bottomRight.c: "+bottomRight.c );				}								public function clone():ChickenMovementAreaData				{					var cloned:ChickenMovementAreaData = UtilFunctions.clone( this ) as ChickenMovementAreaData;										return cloned;				}		}				}