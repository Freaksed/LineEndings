/** WaveZone  *	---------------------------------------------------------------------------- *  *	@desc:  *		WaveZone data class  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */	package com.boogabooga.data.gamelevel	{		import flash.events.Event;		import flash.events.EventDispatcher;		import flash.events.IOErrorEvent;		import flash.events.FullScreenEvent;		import flash.events.ProgressEvent;		import flash.external.ExternalInterface;		import flash.net.URLLoader;		import flash.net.URLRequest;		import flash.net.URLRequestMethod;		import flash.net.URLVariables;				import com.adobe.serialization.json.JSONEncoder;		import com.avatarlabs.utils.ArrayUtil;		import com.avatarlabs.utils.cache.HashTable;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.console.ConsoleBroadcaster;				import com.boogabooga.data.gamelevel.AbstractGameObject;		import com.boogabooga.data.maingame.*;		import com.boogabooga.ui.gamelevel.GameboardTile;				public class WaveZone extends Object		{			protected var _id:int;			protected var _name:String;			protected var _waves:Vector.<Wave>;			protected var _totalNumberOfEnemies:uint;			protected var _paths:Vector.<Vector.<GameboardTile>>;			protected var _spawnPaths:Vector.<Vector.<GameboardTile>>;						protected var _spawnInterval:Number;			protected var _waveInterval:Number;			protected var _startDelayInterval:Number;						public static const WAVE_ZONE_RIGHT:String = "WaveZoneRight";			public static const WAVE_ZONE_DOWN:String = "WaveZoneDown";			public static const WAVE_ZONE_LEFT:String = "WaveZoneLeft";						public static var WAVE_ZONE_RIGHT_INDEX:int;			public static var WAVE_ZONE_DOWN_INDEX:int;			public static var WAVE_ZONE_LEFT_INDEX:int;						/** Constructor			  *	---------------------------------------------------------------------- */				public function WaveZone()				{					init();				}							/** init			  *	---------------------------------------------------------------------- */				public function init():void				{					_waves = new Vector.<Wave>;					_paths = new Vector.<Vector.<GameboardTile>>;					_spawnPaths = new Vector.<Vector.<GameboardTile>>;					_totalNumberOfEnemies = 0;										_spawnInterval = 15000;					_waveInterval = 15000;					_startDelayInterval = 1000;										WAVE_ZONE_RIGHT_INDEX = HashTable.getInstance().addHash( WAVE_ZONE_RIGHT );					WAVE_ZONE_DOWN_INDEX = HashTable.getInstance().addHash( WAVE_ZONE_DOWN );					WAVE_ZONE_LEFT_INDEX = HashTable.getInstance().addHash( WAVE_ZONE_LEFT );				}								public function set id( i:int ):void { _id = i; }				public function get id():int { return _id; }				public function set name( s:String ):void { _name = s; }				public function get name():String { return _name; }							/** waves			  *	---------------------------------------------------------------------- */			  	public function set waves( w:Vector.<Wave> ):void				{					_waves = w;										_totalNumberOfEnemies = 0;										for( var i:int=0; i<_waves.length; ++i )					{						_totalNumberOfEnemies += _waves[i].totalNumberOfEnemies;					}				}				public function get waves():Vector.<Wave> { return _waves; }							/** get totalNumberOfEnemies			  *	---------------------------------------------------------------------- */				public function get totalNumberOfEnemies():uint { return _totalNumberOfEnemies; }								public function set spawnInterval( n:Number ):void { _spawnInterval = n; }				public function get spawnInterval():Number { return _spawnInterval; }				public function set waveInterval( n:Number ):void { _waveInterval = n; }				public function get waveInterval():Number { return _waveInterval; }				public function set startDelayInterval( n:Number ):void { _startDelayInterval = n; }				public function get startDelayInterval():Number { return _startDelayInterval; }				public function get paths():Vector.<Vector.<GameboardTile>> { return _paths; }				public function get spawnPaths():Vector.<Vector.<GameboardTile>> { return _spawnPaths; }							/** distinctEnemiesInWaveZone			  *	---------------------------------------------------------------------- */				public function get distinctEnemiesInWaveZone():Array				{					var enemies:Array = new Array();					var i:int, j:int;					var enemyObject;					var distinctEnemyObject;										for( i=0; i<_waves.length; ++i )					{						for( j=0; j<_waves[i].enemiesLength; ++j )						{							enemyObject = ArrayUtil.find( enemies, _waves[i].enemies[j], "enemy" );							if( enemyObject == null )								enemies.push( {enemy:_waves[i].enemies[j].enemy, quantity:_waves[i].enemies[j].quantity} );							else								enemyObject.quantity += _waves[i].enemies[j].quantity;						}					}										//trace( "enemiesInWaveZone: "+enemies );										//trace( new JSONEncoder(_waves).getString() );										return enemies;				}							/** addWave			  *	---------------------------------------------------------------------- */				public function addWave( wave:Wave ):void				{					_waves.push( wave );					_totalNumberOfEnemies += wave.totalNumberOfEnemies;				}											/** serialize			  *	---------------------------------------------------------------------- */				public function serialize():Object				{					var serializedData:Object = new Object();						serializedData.sdi = _startDelayInterval;						serializedData.si = _spawnInterval;						serializedData.wi = _waveInterval;						serializedData.waves = new Array();										for( var i:uint=0; i<_waves.length; ++i )					{						serializedData.waves.push( _waves[i].serialize() );					}										return serializedData;				}							/** deserialize			  *	---------------------------------------------------------------------- */				public function deserialize( serializedData:String ):void				{									}		}			}