/** DiggingMap  *	---------------------------------------------------------------------------- *  *	@desc:  *		DiggingMap data class  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */	package com.boogabooga.data.gamelevel	{		import flash.events.Event;		import flash.events.EventDispatcher;		import flash.events.IOErrorEvent;		import flash.events.FullScreenEvent;		import flash.events.ProgressEvent;		import flash.external.ExternalInterface;		import flash.net.URLLoader;		import flash.net.URLRequest;		import flash.net.URLRequestMethod;		import flash.net.URLVariables;				import com.adobe.serialization.json.JSONDecoder;		import com.adobe.serialization.json.JSONEncoder;		import com.avatarlabs.utils.ArrayUtil;		import com.avatarlabs.utils.UtilFunctions;		import com.avatarlabs.utils.VectorUtil;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.console.ConsoleBroadcaster;				import com.boogabooga.data.gamelevel.AbstractGameObject;		import com.boogabooga.data.gamelevel.WaveZone;		import com.boogabooga.data.maingame.*;				public class DiggingMap extends DiggingSpots		{			//protected var _id:uint;			protected var _villageId:int;			//protected var _diggingSpotId:int;			//protected var _spots:Array;			//protected var _treasures:Vector.<Treasure>;			//protected var _weapons:Vector.<Weapon>;			//protected var _gods:Vector.<God>;			protected var _spotsWithTreasures:Vector.<Vector.<DiggingMapSpotWithTreasure>>;			//protected var _digTimer:int;						//protected var _dugCommonTreasuresCount:int;			//protected var _commonTreasuresCount:int;			//protected var _dugRareTreasuresCount:int;			//protected var _rareTreasuresCount:int;			//protected var _consumablesCount:int;			//protected var _dugConsumablesCount:int;						/** Constructor			  *	---------------------------------------------------------------------- */				public function DiggingMap()				{					init();				}							/** init			  *	---------------------------------------------------------------------- */				override public function init():void				{					_id = 0;										//_spots = new Array();					//_spots[0] = new Array();					//_spots[1] = new Array();					//_spots[2] = new Array();					_treasures = new Vector.<Treasure>;					_weapons = new Vector.<Weapon>;					_gods = new Vector.<God>;					_spotsWithTreasures = new Vector.<Vector.<DiggingMapSpotWithTreasure>>;										_dugCommonTreasuresCount = 0;					_commonTreasuresCount = 0;					_dugRareTreasuresCount = 0;					_rareTreasuresCount = 0;					_consumablesCount = 0;					_dugConsumablesCount = 0;				}							/** set/get id			  *	---------------------------------------------------------------------- */				//public function set id( u:uint ):void { _id = u; }				//public function get id():uint { return _id; }								public function set villageId( i:int ):void { _villageId = i; }				public function get villageId():int { return _villageId; }								//public function set diggingSpotId( i:int ):void { _diggingSpotId = i; }				//public function get diggingSpotId():int { return _diggingSpotId; }								//public function set digTimer( i:int ):void { _digTimer = i; }				//public function get digTimer():int { return _digTimer; }								//public function get spots():Array { return _spots; }				//public function get treasures():Vector.<Treasure> { return _treasures; }				//public function get weapons():Vector.<Weapon> { return _weapons; }				//public function get gods():Vector.<God> { return _gods; }				public function get spotsWithTreasures():Vector.<Vector.<DiggingMapSpotWithTreasure>> { return _spotsWithTreasures; }				/*				public function get treasureIds():Array				{					var treasureIds:Array = new Array();										for( var i:int=0; i<_treasures.length; ++i )					{						treasureIds.push( _treasures[i].id );					}										return treasureIds;				}								public function get weaponIds():Array				{					var weaponIds:Array = new Array();										for( var i:int=0; i<_weapons.length; ++i )					{						weaponIds.push( _weapons[i].id );					}										return weaponIds;				}								public function get godIds():Array				{					var godIds:Array = new Array();										for( var i:int=0; i<_gods.length; ++i )					{						godIds.push( _gods[i].id );					}										return godIds;				}								public function get dugCommonTreasuresCount():int { return _dugCommonTreasuresCount; }				public function get commonTreasuresCount():int { return _commonTreasuresCount; }				public function get dugRareTreasuresCount():int { return _dugRareTreasuresCount; }				public function get rareTreasuresCount():int { return _rareTreasuresCount; }				public function get consumablesCount():int { return _consumablesCount; }				public function get dugConsumablesCount():int { return _dugConsumablesCount; }				*/							/** countTreasures			  *	---------------------------------------------------------------------- */				override public function countTreasures():void				{					//trace( 'countTreasures();' );										super.countTreasures();										//_dugCommonTreasuresCount = 0;					//_commonTreasuresCount = 0;					//_dugRareTreasuresCount = 0;					//_rareTreasuresCount = 0;					//_consumablesCount = 0;					//_dugConsumablesCount = 0;										var i:int, j:int, k:int;					/*					for( i=0; i<_treasures.length; ++i )					{						if( _treasures[i].rarity == Treasure.RARITY_COMMON )							++_commonTreasuresCount;						else							++_rareTreasuresCount;					}										_consumablesCount = _weapons.length + _gods.length;					*/					for( i=0; i<_spotsWithTreasures.length; ++i )					{						for( j=0; j<_spotsWithTreasures[i].length; ++j )						{							if( _spotsWithTreasures[i][j].d )							{								if( _spotsWithTreasures[i][j].tid > 0 )								{									for( k=0; k<_treasures.length; ++k )									{										if( _treasures[k].id == _spotsWithTreasures[i][j].tid )										{											if( _treasures[k].rarity == Treasure.RARITY_COMMON )												++_dugCommonTreasuresCount;											else												++_dugRareTreasuresCount;											break;										}									}								}								else if( _spotsWithTreasures[i][j].wid > 0 )								{									++_dugConsumablesCount;								}								else if( _spotsWithTreasures[i][j].gid > 0 )								{									++_dugConsumablesCount;								}							}						}					}										//trace( "_dugCommonTreasuresCount: "+_dugCommonTreasuresCount );					//trace( "_commonTreasuresCount: "+_commonTreasuresCount );					//trace( "_dugRareTreasuresCount: "+_dugRareTreasuresCount );					//trace( "_rareTreasuresCount: "+_rareTreasuresCount );					//trace( "_dugConsumablesCount: "+_dugConsumablesCount );					//trace( "_consumablesCount: "+_consumablesCount );				}							/** digTreasureOn			  *	---------------------------------------------------------------------- */				public function digTreasureOn( area:int, row:int, column:int ):void				{					trace( 'digTreasureOn('+area+', '+row+', '+column+');' );										var i:int, j:int;										for( i=0; i<_spotsWithTreasures[area].length; ++i )					{						if( _spotsWithTreasures[area][i].r == row && _spotsWithTreasures[area][i].c == column )						{							_spotsWithTreasures[area][i].d = 1;														if( _spotsWithTreasures[area][i].tid > 0 )							{								trace( 'dug treasure has id of '+_spotsWithTreasures[area][i].tid );								for( j=0; j<_treasures.length; ++j )								{									trace( 'treasure id '+_treasures[j].id );									if( _treasures[j].id == _spotsWithTreasures[area][i].tid )									{										if( _treasures[j].rarity == Treasure.RARITY_COMMON )											++_dugCommonTreasuresCount;										else											++_dugRareTreasuresCount;										break;									}								}							}							else if( _spotsWithTreasures[area][i].wid > 0 )							{								++_dugConsumablesCount;							}							else if( _spotsWithTreasures[area][i].gid > 0 )							{								++_dugConsumablesCount;							}														//trace( "_dugCommonTreasuresCount: "+_dugCommonTreasuresCount );							//trace( "_commonTreasuresCount: "+_commonTreasuresCount );							//trace( "_dugRareTreasuresCount: "+_dugRareTreasuresCount );							//trace( "_rareTreasuresCount: "+_rareTreasuresCount );							//trace( "_dugConsumablesCount: "+_dugConsumablesCount );							//trace( "_consumablesCount: "+_consumablesCount );														return;						}					}				}							/** areAllSpotsDug			  *	---------------------------------------------------------------------- */				public function areAllSpotsDug():Boolean				{					var i:int, j:int;										for( i=0; i<_spotsWithTreasures.length; ++i )					{						for( j=0; j<_spotsWithTreasures[i].length; ++j )						{							if( _spotsWithTreasures[i][j].d == 0 )								return false;						}					}										return true;				}							/** serialize			  *	---------------------------------------------------------------------- */				override public function serialize():String				{					var data:Array = new Array();					var i:int, j:int;										for( i=0; i<_spotsWithTreasures.length; ++i )					{						data.push( new Array() );						for( j=0; j<_spotsWithTreasures[i].length; ++j )						{							data[i].push( {r:_spotsWithTreasures[i][j].r, c:_spotsWithTreasures[i][j].c, tid:_spotsWithTreasures[i][j].tid, wid:_spotsWithTreasures[i][j].wid, gid:_spotsWithTreasures[i][j].gid, d:_spotsWithTreasures[i][j].d} );						}					}											return new JSONEncoder(data).getString();				}							/** deserialize			  *	---------------------------------------------------------------------- */				override public function deserialize( data:Object ):void				{					_id = data['id'];					_villageId = data['village_id'];										var diggingMapValues:Array = new JSONDecoder(data['digging_map']).getValue();					var diggingMapSpotWithTreasure:DiggingMapSpotWithTreasure;					var i:int, j:int;					for( i=0; i<diggingMapValues.length; ++i )					{						_spotsWithTreasures[i] = new Vector.<DiggingMapSpotWithTreasure>;						for( j=0; j<diggingMapValues[i].length; ++j )						{							diggingMapSpotWithTreasure = new DiggingMapSpotWithTreasure();							diggingMapSpotWithTreasure.r = diggingMapValues[i][j].r;							diggingMapSpotWithTreasure.c = diggingMapValues[i][j].c;							diggingMapSpotWithTreasure.d = diggingMapValues[i][j].d;							diggingMapSpotWithTreasure.tid = diggingMapValues[i][j].tid;							diggingMapSpotWithTreasure.wid = diggingMapValues[i][j].wid;							diggingMapSpotWithTreasure.gid = diggingMapValues[i][j].gid;							_spotsWithTreasures[i].push( diggingMapSpotWithTreasure );														if( diggingMapValues[i][j].tid > 0 )								_treasures.push( MainGameDataIndex.getInstance().getTreasure(diggingMapValues[i][j].tid) );							else if( diggingMapValues[i][j].wid > 0 )								_weapons.push( GameLevelDataIndex.getInstance().getWeapon(diggingMapValues[i][j].wid) );							else if( diggingMapValues[i][j].gid > 0 )								_gods.push( GameLevelDataIndex.getInstance().getGod(diggingMapValues[i][j].gid) );						}					}										countTreasures();				}							/** clone			  *	---------------------------------------------------------------------- */				public function cloneDiggingMap():DiggingMap				{					var clonedObject:DiggingMap = UtilFunctions.clone(this) as DiggingMap;										return clonedObject;				}								override public function output():void				{					var i:int, j:int;					var length1:int;					var length2:int;										length1 = _spotsWithTreasures.length;										trace( "********** Digging Map **********" );					for( i=0; i<length1; ++i )					{						length2 = _spotsWithTreasures[i].length;						trace( "Area "+(i+1) );												for( j=0; j<length2; ++j )						{							//trace( "row: "+_spotsWithTreasures[i][j].r+", column: "+_spotsWithTreasures[i][j].c+", dug: "+_spotsWithTreasures[i][j].d+", treasure_id: "+_spotsWithTreasures[i][j].tid );							trace( _spotsWithTreasures[i][j].toString() );						}					}					trace( "********** ----- **********" );				}						}			}