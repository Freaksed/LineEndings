/** AttackingDisplayObjectTracker  *	---------------------------------------------------------------------------- *  *	@desc:  *		AttackingDisplayObjectTracker data class  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */	package com.boogabooga.data.gamelevel	{		import flash.events.Event;		import flash.events.EventDispatcher;		import flash.events.IOErrorEvent;		import flash.events.FullScreenEvent;		import flash.events.ProgressEvent;		import flash.external.ExternalInterface;		import flash.net.URLLoader;		import flash.net.URLRequest;		import flash.net.URLRequestMethod;		import flash.net.URLVariables;				import com.avatarlabs.utils.ArrayUtil;		import com.avatarlabs.utils.VectorUtil;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.console.ConsoleBroadcaster;				import com.boogabooga.data.gamelevel.AbstractGameObject;		import com.boogabooga.data.maingame.*;		import com.boogabooga.ui.gamelevel.GameboardTile;		import com.boogabooga.ui.gamelevel.GameLevelAttackingDisplayObject;				public class AttackingDisplayObjectTracker extends Object		{			protected var _attackingDisplayObject:GameLevelAttackingDisplayObject;			//protected var _tilesWatching:Array;			protected var _tilesWatching:Vector.<GameboardTile>;			protected var _tilesWatchingLength:int;						protected var _attackedByDisplayObjects:Vector.<GameLevelAttackingDisplayObject>;						/** Constructor			  *	---------------------------------------------------------------------- */				public function AttackingDisplayObjectTracker()				{					init();				}								public function set attackingDisplayObject( displayObject:GameLevelAttackingDisplayObject ):void { _attackingDisplayObject = displayObject; }				public function get attackingDisplayObject():GameLevelAttackingDisplayObject { return _attackingDisplayObject; }								//public function get tilesWatching():Array { return _tilesWatching; }				public function get tilesWatching():Vector.<GameboardTile> { return _tilesWatching; }								public function get tilesWatchingLength():int { return _tilesWatchingLength; }								public function get attackedByDisplayObjects():Vector.<GameLevelAttackingDisplayObject> { return _attackedByDisplayObjects; }							/** init			  *	---------------------------------------------------------------------- */				public function init():void				{					//_tilesWatching = new Array();					_tilesWatching = new Vector.<GameboardTile>;					_tilesWatchingLength = _tilesWatching.length;										_attackedByDisplayObjects = new Vector.<GameLevelAttackingDisplayObject>;				}								public function kill():void				{					_attackingDisplayObject = null;										VectorUtil.removeAll( _attackedByDisplayObjects );										//ArrayUtil.removeAll( _tilesWatching );					VectorUtil.removeAll( _tilesWatching );					_tilesWatchingLength = 0;					_tilesWatching = null;				}							/** addTileWatching			  *	---------------------------------------------------------------------- */				public function addTileWatching( tile:GameboardTile ):void				{					_tilesWatching.push( tile );					_tilesWatchingLength = _tilesWatching.length;										//trace( _attackingDisplayObject+" tilesWatching: "+_tilesWatching );				}							/** addAttackedByDisplayObject			  *	---------------------------------------------------------------------- */				public function addAttackedByDisplayObject( attackingDisplayObject:GameLevelAttackingDisplayObject ):Boolean				{					if( VectorUtil.find( _attackedByDisplayObjects, attackingDisplayObject ) == null )					{						_attackedByDisplayObjects.push( attackingDisplayObject );						return true;					}										return false;				}							/** removeAttackedByDisplayObject			  *	---------------------------------------------------------------------- *			  *	---------------------------------------------------------------------- */				public function removeAttackedByDisplayObject( attackingDisplayObject:GameLevelAttackingDisplayObject ):void				{					VectorUtil.remove( _attackedByDisplayObjects, attackingDisplayObject );				}							/** output			  *	---------------------------------------------------------------------- */				public function output():void				{					var outputString:String = "";						outputString += "\n/***** AttackingDisplayObjectTracker "+_attackingDisplayObject+" *****/\n";						outputString += "	Watching tiles:\n";										for( var i:uint=0; i<_tilesWatchingLength; ++i )					{						outputString += "		"+_tilesWatching[i]+"\n";					}											outputString += "/*****	End AttackingDisplayObjectTracker output *****/\n";										trace( outputString );				}		}			}