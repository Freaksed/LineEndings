/** SettingsIndex  *	---------------------------------------------------------------------------- *  *	@desc:  *		Main data index for the game. It's a singleton that you can access from anywhere.  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */	package com.boogabooga.data	{		import flash.display.Stage;		import flash.display.StageQuality;		import flash.errors.*;		import flash.events.*;		import flash.geom.Rectangle;				import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import net.kaegi.utils.FontManager;		import org.osflash.signals.Signal;				public class SettingsIndex extends EventDispatcher		{			private static var _instance:SettingsIndex;						private var _fontManager:FontManager;						protected var _stage:Stage;			protected var _baseURL:String;			protected var _contentURL:String;			protected var _dataURL:String;			protected var _fbId:Number;			protected var _appId:Number;			protected var _accessToken:String;			protected var _requests:int;			protected var _origin:String;						protected var _initialViewToShow:int;						protected var _locale:String;						protected var _betaBuild:Boolean;			protected var _devBuild:Boolean;						protected var _lowestPerformance:Boolean;			protected var _performanceSettings:Vector.<SettingsPerformanceItem>;			/*			protected var _performanceItemShadow:Boolean;			protected var _performanceItemMedium:Boolean;			protected var _performanceItemLow:Boolean;			protected var _performanceItemSmoothing:Boolean;			protected var _performanceItemHitParticle:Boolean;			protected var _performanceItemColorHitFade:Boolean;			protected var _performanceItemProjectileFade:Boolean;			protected var _performanceItemEnemyFade:Boolean;			protected var _performanceItemChickenParticle:Boolean;			*/						private var _benchmarkScore:int;						public var onPerformanceItemsToggled:Signal;			public var onLowestPerformanceReached:Signal;			public var onQualityLowered:Signal;						public static const LOCALE_ENGLISH:String = "en";			public static const LOCALE_SPANISH:String = "es";			public static const LOCALE_INDONESIAN:String = "id";						public static const PERFORMANCE_ITEM_SHADOW:int = 0;			public static const PERFORMANCE_ITEM_MEDIUM:int = 1;			public static const PERFORMANCE_ITEM_HIT_PARTICLE:int = 2;			public static const PERFORMANCE_ITEM_COLOR_HIT_FADE:int = 3;			public static const PERFORMANCE_ITEM_PROJECTILE_FADE:int = 4;			public static const PERFORMANCE_ITEM_ENEMY_FADE:int = 5;			public static const PERFORMANCE_ITEM_CHICKEN_PARTICLE:int = 6;			public static const PERFORMANCE_ITEM_GATE_SMOOTHING:int = 7;			public static const PERFORMANCE_ITEM_WEAPON_SMOOTHING:int = 8;			public static const PERFORMANCE_ITEM_ENEMY_SMOOTHING:int = 9;			public static const PERFORMANCE_ITEM_LOW:int = 10;									/** Constructor			  *	---------------------------------------------------------------------- */				public function SettingsIndex()				{					init();				}								public function set benchmarkScore( i:int ):void				{					_benchmarkScore = i;										ConsoleBroadcaster.broadcast( "SettingsIndex", "*************************** benchmarkScore "+_benchmarkScore );										//_benchmarkScore guide:					//good computers : 0-600					//okay computers : 601 - 850					//decent computers : 851 - 1000					//low computers : 1001+					if( _benchmarkScore >= 900 && _benchmarkScore <= 1000 )					{						_performanceSettings[0].toggled = false;						_performanceSettings[0].alwaysOff = true;						_performanceSettings[1].toggled = false;						_performanceSettings[1].alwaysOff = true;						_stage.quality = StageQuality.MEDIUM;					}					else if( _benchmarkScore >= 1001 && _benchmarkScore <= 1100 )					{						_performanceSettings[0].toggled = false;						_performanceSettings[0].alwaysOff = true;						_performanceSettings[1].toggled = false;						_performanceSettings[1].alwaysOff = true;						_performanceSettings[2].toggled = false;						_performanceSettings[2].alwaysOff = true;						_performanceSettings[3].toggled = false;						_performanceSettings[3].alwaysOff = true;						_performanceSettings[4].toggled = false;						_performanceSettings[4].alwaysOff = true;						_performanceSettings[5].toggled = false;						_performanceSettings[5].alwaysOff = true;						_stage.quality = StageQuality.MEDIUM;					}					else if( _benchmarkScore >= 1101 )					{						for( var i:int=0; i<_performanceSettings.length; ++i )						{							_performanceSettings[i].alwaysOff = true;							_performanceSettings[i].toggled = false;						}						_stage.quality = StageQuality.LOW;					}				}							/** reset			  *	---------------------------------------------------------------------- */				public static function reset():void				{					_instance = null;				}							/** getInstance			  *	---------------------------------------------------------------------- */				public static function getInstance():SettingsIndex				{					if( _instance==null ) _instance = new SettingsIndex();					return _instance;				}								public function set stage( s:Stage ):void { _stage = s; }							/** init			  *	---------------------------------------------------------------------- */				public function init():void				{					_baseURL = "http://avatarlabs.biz/clients/avatarlabs/boogabooga_dev/";					_contentURL = "";					//_baseURL = "http://www.boogaboogagame.com/";					//_contentURL = "http://d2meadgujdoax4.cloudfront.net/";					_dataURL = "";					_fbId = 0;					_locale = LOCALE_ENGLISH;					_requests = 0;										_betaBuild = true;					_devBuild = true;										onPerformanceItemsToggled = new Signal();					onLowestPerformanceReached = new Signal();					onQualityLowered = new Signal();										_lowestPerformance = false;										_performanceSettings = new Vector.<SettingsPerformanceItem>;					_performanceSettings.push( new SettingsPerformanceItem(PERFORMANCE_ITEM_SHADOW, 2, true, false) );					_performanceSettings.push( new SettingsPerformanceItem(PERFORMANCE_ITEM_MEDIUM, 2, true, false) );					_performanceSettings.push( new SettingsPerformanceItem(PERFORMANCE_ITEM_COLOR_HIT_FADE, 1, true, false) );					_performanceSettings.push( new SettingsPerformanceItem(PERFORMANCE_ITEM_PROJECTILE_FADE, 1, true, false) );					_performanceSettings.push( new SettingsPerformanceItem(PERFORMANCE_ITEM_HIT_PARTICLE, 2, true, false) );					_performanceSettings.push( new SettingsPerformanceItem(PERFORMANCE_ITEM_ENEMY_FADE, 1, true, false) );					_performanceSettings.push( new SettingsPerformanceItem(PERFORMANCE_ITEM_CHICKEN_PARTICLE, 1, true, false) );					_performanceSettings.push( new SettingsPerformanceItem(PERFORMANCE_ITEM_GATE_SMOOTHING, 1, true, false) );					_performanceSettings.push( new SettingsPerformanceItem(PERFORMANCE_ITEM_WEAPON_SMOOTHING, 1, true, false) );					_performanceSettings.push( new SettingsPerformanceItem(PERFORMANCE_ITEM_ENEMY_SMOOTHING, 2, true, false) );					_performanceSettings.push( new SettingsPerformanceItem(PERFORMANCE_ITEM_LOW, 4, true, false) );					/*					_performanceItemShadow = true;					_performanceItemMedium = true;					_performanceItemLow = true;					_performanceItemSmoothing = true;					_performanceItemHitParticle = true;					_performanceItemColorHitFade = true;					_performanceItemProjectileFade = true;					_performanceItemEnemyFade = true;					_performanceItemChickenParticle = true;					*/				}								public function set fontManager( f:FontManager ):void { _fontManager = f; }				public function get fontManager():FontManager { return _fontManager; }							/**	get baseURL			  *	---------------------------------------------------------------------- */			  	public function set baseURL( s:String ):void { _baseURL = s; }				public function get baseURL():String { return _baseURL; }								public function set contentURL( s:String ):void { _contentURL = s; }				public function get contentURL():String { return _contentURL; }								public function set dataURL( s:String ):void { _dataURL = s; }				public function get dataURL():String { return _dataURL; }								public function set initialViewToShow( i:int ):void { _initialViewToShow = i; }				public function get initialViewToShow():int { return _initialViewToShow; }								public function set fbId( n:Number ):void { _fbId = n; }				public function get fbId():Number { return _fbId; }								public function set appId( n:Number ):void { _appId = n; }				public function get appId():Number { return _appId; }								public function set locale( s:String ):void { _locale = s; }				public function get locale():String { return _locale; }								public function set requests( i:int ):void { _requests = i; }				public function get requests():int { return _requests; }								public function set origin( s:String ):void { _origin = s; }				public function get origin():String { return _origin; }								public function set accessToken( s:String ):void { _accessToken = s; }				public function get accessToken():String { return _accessToken; }								public function set betaBuild( b:Boolean ):void { _betaBuild = b; }				public function get betaBuild():Boolean { return _betaBuild; }								public function set devBuild( b:Boolean ):void { _devBuild = b; }				public function get devBuild():Boolean { return _devBuild; }											/**	togglePerformanceItem			  *	---------------------------------------------------------------------- */			  	public function togglePerformanceItem( id:int ):void				{					_performanceSettings[id].toggled = !_performanceSettings[id].toggled;										trace( "_performanceSettings for "+id+" is "+_performanceSettings[id].toggled );				}							/**	getPerformanceItemToggled			  *	---------------------------------------------------------------------- */			  	public function getPerformanceItemToggled( id:int ):Boolean				{					return _performanceSettings[id].toggled;				}							/**	improvePerformance			  *	---------------------------------------------------------------------- */			  	public function improvePerformance( fps:Number ):void				{					if( _lowestPerformance )						return;										var fpsDiff:Number = 30 - fps;										var itemToggled:Boolean = false;					var qualityLowered:Boolean = false;										for( var i:int=0; i<_performanceSettings.length; ++i )					{						if( _performanceSettings[i].toggled )						{							ConsoleBroadcaster.broadcast( "SettingsIndex", "*************************** turn off performance item "+_performanceSettings[i].id );														_performanceSettings[i].toggled = false;							itemToggled = true;														if( i == PERFORMANCE_ITEM_MEDIUM )							{								_stage.quality = StageQuality.MEDIUM;								qualityLowered = true;							}							else if( i == PERFORMANCE_ITEM_LOW )							{								_stage.quality = StageQuality.LOW;								qualityLowered = true;							}														fpsDiff -= _performanceSettings[i].value;						}												if( i == _performanceSettings.length-1 )							onLowestPerformanceReached.dispatch();												if( fpsDiff < 1 )							break;					}										if( qualityLowered )						onQualityLowered.dispatch();										if( itemToggled )					{						onPerformanceItemsToggled.dispatch();					}									}		}			}