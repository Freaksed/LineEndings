/** MainGameDataIndex  *	---------------------------------------------------------------------------- *  *	@desc:  *		Main data index for the game. It's a singleton that you can access from anywhere.  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */	package com.boogabooga.data.maingame	{		import flash.errors.*;		import flash.events.*;		import flash.filters.ColorMatrixFilter;		import flash.geom.Rectangle;				import com.avatarlabs.utils.VectorUtil;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.console.ConsoleBroadcaster;				//import com.boogabooga.data.maingame.Cryptology;		import com.boogabooga.data.maingame.Treasure;		import com.boogabooga.data.maingame.User;		import com.boogabooga.data.maingame.Island;				public class MainGameDataIndex extends EventDispatcher		{			private static var _instance:MainGameDataIndex;						protected var _users:Array;			protected var _usersCount:uint;						protected var _islands:Vector.<Island>;			protected var _islandsCount:int;			protected var _treasures:Vector.<Treasure>;			protected var _treasuresCount:int;			//protected var _cryptologies:Vector.<Cryptology>;			//protected var _cryptologiesCount:int;			protected var _storePacks:Vector.<StorePack>;			protected var _storePacksCount:int;			protected var _attackSlots:Vector.<AttackSlot>;						protected var _isFullScreen:Boolean;			protected var _outOfBoundsRectangle:Rectangle;						public static const ADVENTURE_SCORE_RARE_ARTIFACT:int = 5;			public static const ADVENTURE_SCORE_COMMON_ARTIFACT:int = 2;			public static const ADVENTURE_SCORE_TRIBAL_ITEM:int = 3;			public static const ADVENTURE_SCORE_SPECIAL_ITEM:int = 3;			public static const ADVENTURE_SCORE_VILLAGE_SAVED:int = 4;			public static const ADVENTURE_SCORE_ISLAND_SAVED:int = 20;			public static const ADVENTURE_SCORE_ENEMY:int = 4;						public static const DESATURATED_COLOR_MATRIX_FILTER:ColorMatrixFilter = new ColorMatrixFilter([0.3086,0.6094,0.0820,0,0,0.3086,0.6094,0.0820,0,0,0.3086,0.6094,0.0820,0,0,0,0,0,1,0]);						/** Constructor			  *	---------------------------------------------------------------------- */				public function MainGameDataIndex()				{					init();				}							/** reset			  *	---------------------------------------------------------------------- */				public static function reset():void				{					_instance = null;				}							/** getInstance			  *	---------------------------------------------------------------------- */				public static function getInstance():MainGameDataIndex				{					if( _instance==null ) _instance = new MainGameDataIndex();					return _instance;				}							/** init			  *	---------------------------------------------------------------------- */				public function init():void				{					_users = new Array();					_usersCount = 0;										_isFullScreen = false;										_islands = new Vector.<Island>;					_islandsCount = 0;										_treasures = new Vector.<Treasure>;					_treasuresCount = 0;										//_cryptologies = new Vector.<Cryptology>;					//_cryptologiesCount = 0;										_storePacks = new Vector.<StorePack>;					_storePacksCount = 0;										_attackSlots = new Vector.<AttackSlot>;				}							/**	addUser / getUser			  *	---------------------------------------------------------------------- */			  	public function addUser( u:User ):void				{					if( _users[ u.id ] == undefined )					{						_users[ u.id ] = u;						++_usersCount;					}				}				public function getUser( id:String ):User				{					if( _users[ id ] != undefined )						return _users[ id ];										return null;				}				public function get usersCount():uint { return _usersCount; }								public function set outOfBoundsRectangle( r:Rectangle ):void { _outOfBoundsRectangle = r; }				public function get outOfBoundsRectangle():Rectangle { return _outOfBoundsRectangle; }								public function set isFullScreen( b:Boolean ):void { _isFullScreen = b; }				public function get isFullScreen():Boolean { return _isFullScreen; }												public function addTreasure( t:Treasure ):void				{					if( VectorUtil.find( _treasures, t, "id" ) == null )					{						_treasures.push( t );						_treasuresCount = _treasures.length;					}				}				public function getTreasure( id:int ):Treasure				{					for( var i:int=0; i<_treasuresCount; ++i )					{						if( _treasures[i].id == id )							return _treasures[i];					}										return null;				}				public function get treasures():Vector.<Treasure> { return _treasures; }				public function get treasuresCount():int { return _treasuresCount; }				/*				public function addCryptology( c:Cryptology ):void				{					if( VectorUtil.find( _cryptologies, c, "id" ) == null )					{						_cryptologies.push( c );						_cryptologiesCount = _cryptologies.length;					}				}				public function getCryptology( id:int ):Cryptology				{					for( var i:int=0; i<_cryptologiesCount; ++i )					{						if( _cryptologies[i].id == id )							return _cryptologies[i];					}										return null;				}				public function get cryptologies():Vector.<Cryptology> { return _cryptologies; }				public function get cryptologiesCount():int { return _cryptologiesCount; }				*/				public function addIsland( i:Island ):void				{					if( VectorUtil.find( _islands, i, "id" ) == null )					{						_islands.push( i );						_islandsCount = _islands.length;					}				}				public function getIsland( id:int ):Island				{					for( var i:int=0; i<_islandsCount; ++i )					{						if( _islands[i].id == id )							return _islands[i];					}										return null;				}				public function get islands():Vector.<Island> { return _islands; }				public function get islandsCount():int { return _islandsCount; }								public function addStorePack( s:StorePack ):void				{					if( VectorUtil.find( _storePacks, s, "id" ) == null )					{						_storePacks.push( s );						_storePacksCount = _storePacks.length;					}				}				public function getStorePack( id:int ):StorePack				{					for( var i:int=0; i<_storePacksCount; ++i )					{						if( _storePacks[i].id == id )							return _storePacks[i];					}										return null;				}				public function get storePacks():Vector.<StorePack> { return _storePacks; }				public function get storePacksCount():int { return _storePacksCount; }								public function addAttackSlot( a:AttackSlot ):void				{					if( VectorUtil.find( _attackSlots, a, "id" ) == null )					{						_attackSlots.push( a );					}				}				public function getAttackSlot( id:int ):AttackSlot				{					for( var i:int=0; i<_attackSlots.length; ++i )					{						if( _attackSlots[i].id == id )						{							return _attackSlots[i];						}					}										return null;				}				public function get attackSlots():Vector.<AttackSlot> { return _attackSlots; }						}			}