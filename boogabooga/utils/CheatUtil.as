/**	CheatUtil  *	------------------------------------------------------------ *  *	@desc:   *		debuging tool. It can enable/disable the debugging tools  *		that are used in the project.  *	@author:  *		Christian Widodo [christian@avatarlabs.com]  *	------------------------------------------------------------ */ 	package com.boogabooga.utils	{		import flash.display.Stage;		import flash.display.StageQuality;		import flash.events.EventDispatcher;		import flash.events.KeyboardEvent;		import flash.events.StatusEvent;		import flash.net.LocalConnection;		import flash.ui.Keyboard;		import flash.utils.getDefinitionByName;				import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.EventNotificationCenter;				import com.boogabooga.data.SettingsIndex;		import com.boogabooga.data.StringsIndex;		import com.boogabooga.events.BoogaEvent;				public class CheatUtil extends EventDispatcher		{			protected static var _instance:CheatUtil;						protected var _enabled:Boolean;			protected var _stage:Stage;			protected var _keywords:Vector.<String>;			protected var _currentKeywordIndex:int;			protected var _currentKeySequences:Array;						/** Constructor			  *	---------------------------------------------------------------------------- */			 	public function CheatUtil( stage:Stage=null )				{					_stage = stage;										_keywords = new Vector.<String>;					_keywords.push( "WIN" );					_keywords.push( "LOSE" );					_keywords.push( "ADD" );					_keywords.push( "SHADOW" );		// performanceItem					_keywords.push( "MEDIUM" );		// performanceItem					_keywords.push( "LOW" );		// performanceItem					_keywords.push( "SMOOTHING" );	// performanceItem					_keywords.push( "HIT" );		// performanceItem					_keywords.push( "COLORHIT" );	// performanceItem					_keywords.push( "PROJECTILE" );	// performanceItem					_keywords.push( "ENEMY" );		// performanceItem					_keywords.push( "CHICKEN" );					_keywords.push( "HIGH" );					_keywords.push( "TWENTY" );					_keywords.push( "MYSTERY" );					_keywords.push( "VERSION" );					_keywords.fixed = true;										_currentKeySequences = new Array();										this.enabled = true;				}							/** Initialize the debugger class			  *	---------------------------------------------------------------------------- */			 	public static function init( stage:Stage ):void				{					if( _instance == null )					{						_instance = new CheatUtil(stage);					}				}							/** static set enabled			  *	---------------------------------------------------------------------------- */			 	public static function set enabled( b:Boolean ):void { _instance.enabled = b; }							/** set enabled			  *	---------------------------------------------------------------------------- */			 	public function set enabled( b:Boolean ):void				{					if( _enabled && !b )					{						_enabled = b;												if( _stage != null )						{							_stage.removeEventListener( KeyboardEvent.KEY_DOWN, handleKeyDown );						}						else						{							ConsoleBroadcaster.broadcast( "CheatUtil", "stage property is not set yet" );						}					}					else if( !_enabled && b )					{						_enabled = b;												if( _stage != null )						{							_stage.addEventListener( KeyboardEvent.KEY_DOWN, handleKeyDown );						}						else						{							ConsoleBroadcaster.broadcast( "CheatUtil", "stage property is not set yet" );						}					}				}								public function set stage( s:Stage ):void { _stage = s; }							/** handleKeyDown			  *	---------------------------------------------------------------------------- *			  *	It'll record the key that was pressed down by the user.			  *	---------------------------------------------------------------------------- */			 	protected function handleKeyDown( event:KeyboardEvent ):void				{					if( event.keyCode == Keyboard.SPACE )					{						//EventNotificationCenter.getInstance().sendNotificationWithParameters( "onSpacePressed", this, {} );					}					else if( event.keyCode >= 65 && event.keyCode <= 90 )					{						_currentKeySequences.push( String.fromCharCode(event.keyCode) );												checkForKeywords();					}					else					{						resetCurrentKeySequences();					}				}							/** resetCurrentKeySequences			  *	---------------------------------------------------------------------------- *			  *	Resets current key sequences and the keyword index when user doesn't type			  *	the right keyword.			  *	---------------------------------------------------------------------------- */			 	protected function resetCurrentKeySequences():void				{					//trace( "resetCurrentKeySeqeuences();" );										_currentKeySequences = [];					_currentKeywordIndex = -1;				}							/** checkForKeywords			  *	---------------------------------------------------------------------------- *			  *	Compares the recorded sequences with the keywords. If it doesn't find a 			  *	matching keyword, it resets the key sequences.			  *	If keyword matches CONSOLE, it will enable/disable ConsoleBroadcaster.			  *	If keyword matches MONSTER, it will enable/disable MonsterDebugger.			  *	---------------------------------------------------------------------------- */			 	protected function checkForKeywords():void				{					//trace( "_currentKeySequences: "+_currentKeySequences );										var joinedSequences:String = _currentKeySequences.join("");					_currentKeywordIndex = -1;										for( var i:int=0; i<_keywords.length; ++i )					{						if( _keywords[i].search( joinedSequences ) == 0 )						{							_currentKeywordIndex = i;							break;						}					}										//trace( "_currentKeywordIndex: "+_currentKeywordIndex );										if( _currentKeywordIndex < 0 )					{						resetCurrentKeySequences();					}					else					{						//	Keyword is found !						//trace( "_keyword length: "+_keywords[_currentKeywordIndex].length );						//trace( "joinedSequences length: "+joinedSequences.length );						if( _keywords[_currentKeywordIndex].length == joinedSequences.length )						{							ConsoleBroadcaster.broadcast( "CheatUtil", BoogaEvent.ON_CHEAT_DETECTED );														if( _currentKeywordIndex >= 3 && _currentKeywordIndex <= 11 )							{								SettingsIndex.getInstance().togglePerformanceItem( _currentKeywordIndex-3 );							}														if( _currentKeywordIndex == 4 )							{								//trace( 'QUALITY ADJUSTMENT text '+StringsIndex.getInstance().getStringByName("QUALITY_ADJUSTMENT") );								_stage.quality = StageQuality.MEDIUM;							}							else if( _currentKeywordIndex == 5 )							{								_stage.quality = StageQuality.LOW;							}							else if( _currentKeywordIndex == 12 )							{								_stage.quality = StageQuality.HIGH;							}														//if( _currentKeywordIndex < 3 )							//{							EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_CHEAT_DETECTED, this, {keywordIndex:_currentKeywordIndex} );							//}														resetCurrentKeySequences();						}					}				}						}	}