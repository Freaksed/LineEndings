/** GameEditor  *	---------------------------------------------------------------------------- *  *	@desc:  *		This is the gameboard editor class used in the editor file.  *		This class provides a way for users to modify game levels.  *	@author:  *		Christian Widodo [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.gameleveleditor	{		import flash.display.Bitmap;		import flash.display.MovieClip;		import flash.display.StageDisplayState;		import flash.events.ContextMenuEvent;		import flash.events.Event;		import flash.events.EventDispatcher;		import flash.events.FullScreenEvent;		import flash.events.IOErrorEvent;		import flash.events.MouseEvent;		import flash.events.ProgressEvent;		import flash.events.TimerEvent;		import flash.external.ExternalInterface;		import flash.filters.GlowFilter;		import flash.geom.Point;		import flash.geom.Rectangle;		import flash.net.LocalConnection;		import flash.net.URLLoader;		import flash.net.URLRequest;		import flash.net.URLRequestMethod;		import flash.net.URLVariables;		import flash.system.System;		import flash.text.TextField;		import flash.ui.ContextMenu;		import flash.ui.ContextMenuItem;		import flash.ui.Mouse;		import flash.utils.getDefinitionByName;		import flash.utils.getQualifiedClassName;		import flash.utils.Timer;				import com.adobe.serialization.json.JSONEncoder;		import com.greensock.TweenLite;		import com.greensock.easing.Sine;		import com.avatarlabs.utils.ArrayUtil;		import com.avatarlabs.utils.UtilFunctions;		import com.avatarlabs.utils.VectorUtil;		import com.avatarlabs.utils.cache.BitmapDataManager;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.AssetLoaderEvent;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.forms.DynamicInputText;		import com.avatarlabs.utils.loader.CustomLoader;		import com.avatarlabs.utils.sound.SoundEffectPlayer;		import com.avatarlabs.utils.timers.CustomTimer;		import com.avatarlabs.utils.timers.ElapsedTime;		import com.avatarlabs.utils.userinterface.DynamicUIButton;		import com.avatarlabs.utils.userinterface.DynamicUICheckBox;				import com.boogabooga.controller.AssetLoaderController;		import com.boogabooga.controller.gamelevel.GameboardController;		import com.boogabooga.controller.gamelevel.GameLevelDataController;		import com.boogabooga.controller.gamelevel.WeaponDisplayObjectController;		import com.boogabooga.controller.maingame.MainGameController;		import com.boogabooga.controller.maingame.TreasureDataController;		import com.boogabooga.data.challengelevel.ChallengeLevel;		import com.boogabooga.data.gamelevel.DiggingSpots;		import com.boogabooga.data.gamelevel.EnvironmentObject;		import com.boogabooga.data.gamelevel.GameLevel;		import com.boogabooga.data.gamelevel.GameLevelCurrentData;		import com.boogabooga.data.gamelevel.GameLevelDataIndex;		import com.boogabooga.data.gamelevel.GameLevelEnvironmentObject;		import com.boogabooga.data.gamelevel.GameLevelVillagerObject;		import com.boogabooga.data.gamelevel.Villager;		import com.boogabooga.data.maingame.Gift;		import com.boogabooga.data.maingame.MainGameDataIndex;		import com.boogabooga.data.maingame.Treasure;		import com.boogabooga.events.BoogaEvent;		import com.boogabooga.events.GameLevelEvent;		import com.boogabooga.ui.gamelevel.EnvironmentDisplayObject;		import com.boogabooga.ui.gamelevel.Gameboard;		import com.boogabooga.ui.gamelevel.GameboardTile;		import com.boogabooga.ui.gamelevel.GameLevelDisplayLayer;		import com.boogabooga.ui.gamelevel.GameLevelDisplayLayerItem;		import com.boogabooga.ui.gamelevel.VillagerDisplayObject;		import com.boogabooga.ui.maingame.LoadingAssetView;		//import com.boogabooga.ui.maingame.weaponselection.WeaponSelectionView;		import com.boogabooga.ui.maingame.gameboard.PlayViewControls;		import com.boogabooga.ui.maingame.weaponselection.WeaponSelectionEditorView;		import com.boogabooga.ui.maingame.warning.WarningPopupView;		import com.boogabooga.utils.GameLevelUtil;		import com.boogabooga.ui.maingame.TextHoverPopupView;						public class GameEditor extends EventDispatcher		{			public var gameLevelIdToLoad:int;			protected var _gameLevelDataController:GameLevelDataController;			protected var _contentClip:MovieClip;			protected var _editingGameLevel:Boolean;						protected var _editorType:int;			protected var _tileEditorType:int;						protected var _gameboardController:GameboardController;			protected var _gameboardReference:GameboardEditor;			protected var _gameboardContainerPositionInIsometric:Point;			protected var _gameboardContainerPositionIn2D:Point;						protected var _currentMonsterPath:Vector.<GameboardTile>;			protected var _gameLevel:GameLevel;			protected var _diggingSpots:DiggingSpots;			protected var _challengeLevel:ChallengeLevel;						protected var _treasureAssetsLoaded:Boolean = false;			protected var _environmentObjectAssetsLoaded:Boolean = false;			protected var _villageObjectAssetsLoaded:Boolean = false;						protected var _currentEnvironmentDisplayObject:EnvironmentDisplayObject;			//protected var _currentEnvironmentObject:EnvironmentObject;			protected var _newIconContainerTile:GameboardTile;			protected var _currentVillagerDisplayObject:VillagerDisplayObject;			//protected var _currentVillager:GameLevelVillagerObject;			protected var _addingNewVillager:Boolean;			protected var _addingNewEnvironmentObject:Boolean;			protected var _villagerDisplayObjects:Vector.<VillagerDisplayObject>;						protected var _environmentObjectContextMenu:ContextMenu;						protected var _editModeClip:DynamicUIButton;			protected var _playModeClip:DynamicUIButton;			protected var _resetClip:DynamicUIButton;			protected var _saveClip:DynamicUIButton;			protected var _waveEditorClip:DynamicUIButton;			protected var _startMonsterPathClip:DynamicUIButton;			protected var _endMonsterPathClip:DynamicUIButton;			protected var _levelNameClip:DynamicInputText;			protected var _createdByClip:DynamicInputText;			protected var _startingChickenClip:DynamicInputText;			protected var _chickenSpawnRateMinClip:DynamicInputText;			protected var _chickenSpawnRateMaxClip:DynamicInputText;			protected var _gateHealthClip:DynamicInputText;			protected var _slotWinningProbabilityClip:DynamicInputText;			protected var _slotEnabledCheckBoxClip:DynamicUICheckBox;			protected var _buyChickenEnabledCheckBoxClip:DynamicUICheckBox;			protected var _pathListClip:PathList;			protected var _environmentObjectListClip:EnvironmentObjectList;			protected var _controlsClip:PlayViewControls;			protected var _gameLevelSnapToTileCheckBoxClip:DynamicUICheckBox;			protected var _gameLevelMoveObjectClip:DynamicUIButton;			protected var _gameLevelSendToFrontClip:DynamicUIButton;			protected var _gameLevelSendToBackClip:DynamicUIButton;						protected var _availableTreasureScrollerClip:AvailableTreasureScroller;			protected var _treasureScrollerClip:TreasureScroller;			protected var _addDigSpotTilesClip:DynamicUIButton;			protected var _endDigSpotTilesClip:DynamicUIButton;			protected var _digSaveClip:DynamicUIButton;			protected var _digResetClip:DynamicUIButton;						protected var _villageResetClip:DynamicUIButton;			protected var _villageSnapToTileCheckBoxClip:DynamicUICheckBox;			protected var _villageObjectListClip:EnvironmentObjectList;			protected var _villagerObjectListClip:EnvironmentObjectList;			protected var _villageMoveObjectClip:DynamicUIButton;			protected var _villageSendToFrontClip:DynamicUIButton;			protected var _villageSendToBackClip:DynamicUIButton;						protected var _spawnPointSaveClip:DynamicUIButton;			protected var _addSpawnPointClip:DynamicUIButton;			protected var _resetSpawnPointClip:DynamicUIButton;			protected var _addChickenAreaClip:DynamicUIButton;			protected var _resetChickenAreaClip:DynamicUIButton;						protected var _gameLevelEditorClip:DynamicUIButton;			protected var _diggingEditorClip:DynamicUIButton;			protected var _villageEditorClip:DynamicUIButton;			protected var _spawnPointEditorClip:DynamicUIButton;			protected var _challengeLevelEditorClip:DynamicUIButton;						protected var _switchToIsometricClip:DynamicUIButton;			protected var _switchTo2DClip:DynamicUIButton;			protected var _toggleBackgroundClip:DynamicUICheckBox;						protected var _waveEditorViewClip:WaveEditorView;			protected var _weaponSelectionViewClip:WeaponSelectionEditorView;			protected var _loadingAssetViewClip:LoadingAssetView;			protected var _warningPopupViewClip:WarningPopupView;			protected var _textHoverPopupViewClip:TextHoverPopupView;						protected var _challengeLevelEditorInterfaceClip:ChallengeLevelEditorInterface;						/**	Stage Instances **/			public var gameboardContainer_mc:MovieClip;			public var weaponSelectionViewContainer_mc:MovieClip;			public var textHoverPopup_mc:MovieClip;						public var editMode_mc:MovieClip;			public var playMode_mc:MovieClip;			public var reset_mc:MovieClip;			public var save_mc:MovieClip;			public var waveEditor_mc:MovieClip;			public var startMonsterPath_mc:MovieClip;			public var endMonsterPath_mc:MovieClip;			public var levelName_mc:MovieClip;			public var createdBy_mc:MovieClip;			public var startingChicken_mc:MovieClip;			public var chickenSpawnRateMin_mc:MovieClip;			public var chickenSpawnRateMax_mc:MovieClip;			public var gateHealth_mc:MovieClip;			public var slotWinningProbability_mc:MovieClip;			public var slotEnabledCheckBox_mc:MovieClip;			public var buyChickenEnabledCheckBox_mc:MovieClip;			public var pathList_mc:MovieClip;			public var environmentObjectList_mc:MovieClip;			public var controls_mc:MovieClip;			public var gameLevelSnapToTileCheckBox_mc:MovieClip;			public var gameLevelMoveObject_mc:MovieClip;			public var gameLevelSendToFront_mc:MovieClip;			public var gameLevelSendToBack_mc:MovieClip;			//public var play_mc:UIButton;			//public var pause_mc:UIButton;			//public var muteSound_mc:UIButton;			//public var unmuteSound_mc:UIButton;			//public var muteMusic_mc:UIButton;			//public var unmuteMusic_mc:UIButton;			//public var fullScreen_mc:UIButton;						public var availableTreasureScroller_mc:MovieClip;			public var treasureScroller_mc:MovieClip;			public var addDigSpotTiles_mc:MovieClip;			public var endDigSpotTiles_mc:MovieClip;			public var digSave_mc:MovieClip;			public var digReset_mc:MovieClip;						//public var villageSave_mc:UIButton;			public var villageReset_mc:MovieClip;			public var villageSnapToTileCheckBox_mc:MovieClip;			public var villageObjectList_mc:MovieClip;			public var villagerObjectList_mc:MovieClip;			public var villageMoveObject_mc:MovieClip;			public var villageSendToFront_mc:MovieClip;			public var villageSendToBack_mc:MovieClip;						public var spawnPointSave_mc:MovieClip;			public var addSpawnPoint_mc:MovieClip;			//public var removeSpawnPoint_mc:UIButton;			public var resetSpawnPoint_mc:MovieClip;			public var addChickenArea_mc:MovieClip;			//public var removeChickenArea_mc:UIButton;			public var resetChickenArea_mc:MovieClip;						public var gameLevelEditorInterface_mc:MovieClip;			public var challengeLevelEditorInterface_mc:MovieClip;			public var diggingEditorInterface_mc:MovieClip;			public var villageEditorInterface_mc:MovieClip;			public var spawnPointEditorInterface_mc:MovieClip;			public var gameLevelEditor_mc:MovieClip;			public var diggingEditor_mc:MovieClip;			public var villageEditor_mc:MovieClip;			public var spawnPointEditor_mc:MovieClip;			public var challengeLevelEditor_mc:MovieClip;						public var switchToIsometric_mc:MovieClip;			public var switchTo2D_mc:MovieClip;			public var toggleBackground_mc:MovieClip;						public var waveEditorView_mc:MovieClip;			//public var weaponSelectionView_mc:WeaponSelectionEditorView;			public var loadingAssetView_mc:MovieClip;			public var error_mc:MovieClip;			public var warningPopup_mc:MovieClip;						public var iconContainer_mc:MovieClip;			public var mouseMarker_mc:MovieClip;			public var checkContainer_mc:MovieClip;			/**	End of Stage Instances **/						public static const EDITOR_TYPE_GAME_LEVEL:int = 0;			public static const EDITOR_TYPE_VILLAGE_LEVEL:int = 1;			public static const EDITOR_TYPE_DIGGING_LEVEL:int = 2;			public static const EDITOR_TYPE_SPAWN_POINT:int = 3;			public static const EDITOR_TYPE_CHALLENGE_LEVEL:int = 4;			public static const EDITOR_TYPE_CHALLENGE_GAME_LEVEL:int = 5;						public static const TILE_EDITOR_TYPE_NONE:int = 10;			public static const TILE_EDITOR_TYPE_PATH:int = 11;			public static const TILE_EDITOR_TYPE_DIG_SPOT:int = 12;			public static const TILE_EDITOR_TYPE_SPAWN_POINT:int = 13;			public static const TILE_EDITOR_TYPE_CHICKEN_AREA:int = 14;									/** Constructor			  *	---------------------------------------------------------------------------- */				public function GameEditor()				{					trace( "GameEditor();" );				}								public function set contentClip( m:MovieClip ):void				{					_contentClip = m;										error_mc = _contentClip.error_mc;					iconContainer_mc = _contentClip.iconContainer_mc;					mouseMarker_mc = _contentClip.mouseMarker_mc;					checkContainer_mc = _contentClip.checkContainer_mc;					gameboardContainer_mc = _contentClip.gameboardContainer_mc;					warningPopup_mc = _contentClip.warningPopup_mc;					weaponSelectionViewContainer_mc = _contentClip.weaponSelectionViewContainer_mc;					textHoverPopup_mc = _contentClip.textHoverPopup_mc;										_warningPopupViewClip = new WarningPopupView();					_warningPopupViewClip.contentClip = warningPopup_mc;					_warningPopupViewClip.init();					_warningPopupViewClip.hide();					warningPopup_mc.alpha = 1;										_textHoverPopupViewClip = new TextHoverPopupView();					_textHoverPopupViewClip.contentClip = textHoverPopup_mc;					_textHoverPopupViewClip.init();					_textHoverPopupViewClip.hide();										gameLevelEditorInterface_mc = _contentClip.gameLevelEditorInterface_mc;					challengeLevelEditorInterface_mc = _contentClip.challengeLevelEditorInterface_mc;					levelName_mc = gameLevelEditorInterface_mc.levelName_mc;					createdBy_mc = gameLevelEditorInterface_mc.createdBy_mc;					startingChicken_mc = gameLevelEditorInterface_mc.startingChicken_mc;					chickenSpawnRateMin_mc = gameLevelEditorInterface_mc.chickenSpawnRateMin_mc;					chickenSpawnRateMax_mc = gameLevelEditorInterface_mc.chickenSpawnRateMax_mc;					gateHealth_mc = gameLevelEditorInterface_mc.gateHealth_mc;					slotWinningProbability_mc = gameLevelEditorInterface_mc.slotWinningProbability_mc;					slotEnabledCheckBox_mc = gameLevelEditorInterface_mc.slotEnabledCheckBox_mc;					buyChickenEnabledCheckBox_mc = gameLevelEditorInterface_mc.buyChickenEnabledCheckBox_mc;					editMode_mc = gameLevelEditorInterface_mc.editMode_mc;					editMode_mc.mouseChildren = false;					playMode_mc = gameLevelEditorInterface_mc.playMode_mc;					playMode_mc.mouseChildren = false;					reset_mc = gameLevelEditorInterface_mc.reset_mc;					reset_mc.mouseChildren = false;					save_mc = gameLevelEditorInterface_mc.save_mc;					save_mc.mouseChildren = false;					waveEditor_mc = gameLevelEditorInterface_mc.waveEditor_mc;					waveEditor_mc.mouseChildren = false;					startMonsterPath_mc = gameLevelEditorInterface_mc.startMonsterPath_mc;					startMonsterPath_mc.mouseChildren = false;					endMonsterPath_mc = gameLevelEditorInterface_mc.endMonsterPath_mc;					endMonsterPath_mc.mouseChildren = false;					pathList_mc = gameLevelEditorInterface_mc.pathList_mc;					environmentObjectList_mc = gameLevelEditorInterface_mc.environmentObjectList_mc;					gameLevelSnapToTileCheckBox_mc = gameLevelEditorInterface_mc.snapToTileCheckBox_mc;					gameLevelMoveObject_mc = gameLevelEditorInterface_mc.moveObject_mc;					gameLevelMoveObject_mc.mouseChildren = false;					gameLevelMoveObject_mc.visible = false;					gameLevelSendToFront_mc = gameLevelEditorInterface_mc.sendToFront_mc;					gameLevelSendToFront_mc.mouseChildren = false;					gameLevelSendToFront_mc.visible = false;					gameLevelSendToBack_mc = gameLevelEditorInterface_mc.sendToBack_mc;					gameLevelSendToBack_mc.mouseChildren = false;					gameLevelSendToBack_mc.visible = false;										_levelNameClip = new DynamicInputText();					_levelNameClip.dynamicClip = levelName_mc;					_levelNameClip.dynamicInit();					_levelNameClip.setTextField( levelName_mc.input_txt );										_createdByClip = new DynamicInputText();					_createdByClip.dynamicClip = createdBy_mc;					_createdByClip.dynamicInit();					_createdByClip.setTextField( createdBy_mc.input_txt );										_startingChickenClip = new DynamicInputText();					_startingChickenClip.dynamicClip = startingChicken_mc;					_startingChickenClip.dynamicInit();					_startingChickenClip.setTextField( startingChicken_mc.input_txt );										_chickenSpawnRateMinClip = new DynamicInputText();					_chickenSpawnRateMinClip.dynamicClip = chickenSpawnRateMin_mc;					_chickenSpawnRateMinClip.dynamicInit();					_chickenSpawnRateMinClip.setTextField( chickenSpawnRateMin_mc.input_txt );										_chickenSpawnRateMaxClip = new DynamicInputText();					_chickenSpawnRateMaxClip.dynamicClip = chickenSpawnRateMax_mc;					_chickenSpawnRateMaxClip.dynamicInit();					_chickenSpawnRateMaxClip.setTextField( chickenSpawnRateMax_mc.input_txt );										_gateHealthClip = new DynamicInputText();					_gateHealthClip.dynamicClip = gateHealth_mc;					_gateHealthClip.dynamicInit();					_gateHealthClip.setTextField( gateHealth_mc.input_txt );										_slotWinningProbabilityClip = new DynamicInputText();					_slotWinningProbabilityClip.dynamicClip = slotWinningProbability_mc;					_slotWinningProbabilityClip.dynamicInit();					_slotWinningProbabilityClip.setTextField( slotWinningProbability_mc.input_txt );										_slotEnabledCheckBoxClip = new DynamicUICheckBox();					_slotEnabledCheckBoxClip.dynamicClip = slotEnabledCheckBox_mc;					_slotEnabledCheckBoxClip.dynamicInit();					_slotEnabledCheckBoxClip.markerClip = slotEnabledCheckBox_mc.marker_mc;										_buyChickenEnabledCheckBoxClip = new DynamicUICheckBox();					_buyChickenEnabledCheckBoxClip.dynamicClip = buyChickenEnabledCheckBox_mc;					_buyChickenEnabledCheckBoxClip.dynamicInit();					_buyChickenEnabledCheckBoxClip.markerClip = buyChickenEnabledCheckBox_mc.marker_mc;										_editModeClip = new DynamicUIButton();					_editModeClip.dynamicClip = editMode_mc;					_editModeClip.dynamicInit();										_playModeClip = new DynamicUIButton();					_playModeClip.dynamicClip = playMode_mc;					_playModeClip.dynamicInit();										_resetClip = new DynamicUIButton();					_resetClip.dynamicClip = reset_mc;					_resetClip.dynamicInit();										_saveClip = new DynamicUIButton();					_saveClip.dynamicClip = save_mc;					_saveClip.dynamicInit();										_waveEditorClip = new DynamicUIButton();					_waveEditorClip.dynamicClip = waveEditor_mc;					_waveEditorClip.dynamicInit();										_startMonsterPathClip = new DynamicUIButton();					_startMonsterPathClip.dynamicClip = startMonsterPath_mc;					_startMonsterPathClip.dynamicInit();										_endMonsterPathClip = new DynamicUIButton();					_endMonsterPathClip.dynamicClip = endMonsterPath_mc;					_endMonsterPathClip.dynamicInit();										_pathListClip = new PathList();					_pathListClip.contentClip = pathList_mc;					_pathListClip.init();										_environmentObjectListClip = new EnvironmentObjectList();					_environmentObjectListClip.dynamicClip = environmentObjectList_mc;					_environmentObjectListClip.dynamicInit();										_gameLevelSnapToTileCheckBoxClip = new DynamicUICheckBox();					_gameLevelSnapToTileCheckBoxClip.dynamicClip = gameLevelSnapToTileCheckBox_mc;					_gameLevelSnapToTileCheckBoxClip.dynamicInit();					_gameLevelSnapToTileCheckBoxClip.markerClip = gameLevelSnapToTileCheckBox_mc.marker_mc;										_gameLevelMoveObjectClip = new DynamicUIButton();					_gameLevelMoveObjectClip.dynamicClip = gameLevelMoveObject_mc;					_gameLevelMoveObjectClip.dynamicInit();										_gameLevelSendToFrontClip = new DynamicUIButton();					_gameLevelSendToFrontClip.dynamicClip = gameLevelSendToFront_mc;					_gameLevelSendToFrontClip.dynamicInit();										_gameLevelSendToBackClip = new DynamicUIButton();					_gameLevelSendToBackClip.dynamicClip = gameLevelSendToBack_mc;					_gameLevelSendToBackClip.dynamicInit();										controls_mc = _contentClip.controls_mc;					_controlsClip = new PlayViewControls();					_controlsClip.contentClip = controls_mc;					_controlsClip.init();					//_controlsClip.contentClip.visible = false;					//_controlsClip.showGameLevelControls();										diggingEditorInterface_mc = _contentClip.diggingEditorInterface_mc;					addDigSpotTiles_mc = diggingEditorInterface_mc.addDigSpotTiles_mc;					addDigSpotTiles_mc.mouseChildren = false;					endDigSpotTiles_mc = diggingEditorInterface_mc.endDigSpotTiles_mc;					endDigSpotTiles_mc.mouseChildren = false;					digSave_mc = diggingEditorInterface_mc.digSave_mc;					digSave_mc.mouseChildren = false;					digReset_mc = diggingEditorInterface_mc.digReset_mc;					digReset_mc.mouseChildren = false;					availableTreasureScroller_mc = diggingEditorInterface_mc.availableTreasureScroller_mc;					treasureScroller_mc = diggingEditorInterface_mc.treasureScroller_mc;										_addDigSpotTilesClip = new DynamicUIButton();					_addDigSpotTilesClip.dynamicClip = addDigSpotTiles_mc;					_addDigSpotTilesClip.dynamicInit();										_endDigSpotTilesClip = new DynamicUIButton();					_endDigSpotTilesClip.dynamicClip = endDigSpotTiles_mc;					_endDigSpotTilesClip.dynamicInit();										_digSaveClip = new DynamicUIButton();					_digSaveClip.dynamicClip = digSave_mc;					_digSaveClip.dynamicInit();										_digResetClip = new DynamicUIButton();					_digResetClip.dynamicClip = digReset_mc;					_digResetClip.dynamicInit();										_availableTreasureScrollerClip = new AvailableTreasureScroller();					_availableTreasureScrollerClip.dynamicClip = availableTreasureScroller_mc;					_availableTreasureScrollerClip.dynamicInit();										_treasureScrollerClip = new TreasureScroller();					_treasureScrollerClip.dynamicClip = treasureScroller_mc;					_treasureScrollerClip.dynamicInit();										villageEditorInterface_mc = _contentClip.villageEditorInterface_mc;					villageReset_mc = villageEditorInterface_mc.villageReset_mc;					villageReset_mc.mouseChildren = false;					villageObjectList_mc = villageEditorInterface_mc.villageObjectList_mc;					villagerObjectList_mc = villageEditorInterface_mc.villagerObjectList_mc;					villageSnapToTileCheckBox_mc = villageEditorInterface_mc.snapToTileCheckBox_mc;					villageMoveObject_mc = villageEditorInterface_mc.moveObject_mc;					villageMoveObject_mc.mouseChildren = false;					villageMoveObject_mc.visible = false;					villageSendToFront_mc = villageEditorInterface_mc.sendToFront_mc;					villageSendToFront_mc.mouseChildren = false;					villageSendToFront_mc.visible = false;					villageSendToBack_mc = villageEditorInterface_mc.sendToBack_mc;					villageSendToBack_mc.mouseChildren = false;					villageSendToBack_mc.visible = false;										_villageResetClip = new DynamicUIButton();					_villageResetClip.dynamicClip = villageReset_mc;					_villageResetClip.dynamicInit();										_villageObjectListClip = new EnvironmentObjectList();					_villageObjectListClip.dynamicClip = villageObjectList_mc;					_villageObjectListClip.dynamicInit();										_villagerObjectListClip = new EnvironmentObjectList();					_villagerObjectListClip.dynamicClip = villagerObjectList_mc;					_villagerObjectListClip.dynamicInit();										_villageSnapToTileCheckBoxClip = new DynamicUICheckBox();					_villageSnapToTileCheckBoxClip.dynamicClip = villageSnapToTileCheckBox_mc;					_villageSnapToTileCheckBoxClip.dynamicInit();					_villageSnapToTileCheckBoxClip.markerClip = villageSnapToTileCheckBox_mc.marker_mc;										_villageMoveObjectClip = new DynamicUIButton();					_villageMoveObjectClip.dynamicClip = villageMoveObject_mc;					_villageMoveObjectClip.dynamicInit();										_villageSendToFrontClip = new DynamicUIButton();					_villageSendToFrontClip.dynamicClip = villageSendToFront_mc;					_villageSendToFrontClip.dynamicInit();										_villageSendToBackClip = new DynamicUIButton();					_villageSendToBackClip.dynamicClip = villageSendToBack_mc;					_villageSendToBackClip.dynamicInit();										spawnPointEditorInterface_mc = _contentClip.spawnPointEditorInterface_mc;					spawnPointSave_mc = spawnPointEditorInterface_mc.spawnPointSave_mc;					spawnPointSave_mc.mouseChildren = false;					addSpawnPoint_mc = spawnPointEditorInterface_mc.addSpawnPoint_mc;					addSpawnPoint_mc.mouseChildren = false;					resetSpawnPoint_mc = spawnPointEditorInterface_mc.resetSpawnPoint_mc;					resetSpawnPoint_mc.mouseChildren = false;					addChickenArea_mc = spawnPointEditorInterface_mc.addChickenArea_mc;					addChickenArea_mc.mouseChildren = false;					resetChickenArea_mc = spawnPointEditorInterface_mc.resetChickenArea_mc;					resetChickenArea_mc.mouseChildren = false;										_spawnPointSaveClip = new DynamicUIButton();					_spawnPointSaveClip.dynamicClip = spawnPointSave_mc;					_spawnPointSaveClip.dynamicInit();										_addSpawnPointClip = new DynamicUIButton();					_addSpawnPointClip.dynamicClip = addSpawnPoint_mc;					_addSpawnPointClip.dynamicInit();										_resetSpawnPointClip = new DynamicUIButton();					_resetSpawnPointClip.dynamicClip = resetSpawnPoint_mc;					_resetSpawnPointClip.dynamicInit();										_addChickenAreaClip = new DynamicUIButton();					_addChickenAreaClip.dynamicClip = addChickenArea_mc;					_addChickenAreaClip.dynamicInit();										_resetChickenAreaClip = new DynamicUIButton();					_resetChickenAreaClip.dynamicClip = resetChickenArea_mc;					_resetChickenAreaClip.dynamicInit();															gameLevelEditor_mc = _contentClip.gameLevelEditor_mc;					gameLevelEditor_mc.mouseChildren = false;					diggingEditor_mc = _contentClip.diggingEditor_mc;					diggingEditor_mc.mouseChildren = false;					villageEditor_mc = _contentClip.villageEditor_mc;					villageEditor_mc.mouseChildren = false;					spawnPointEditor_mc = _contentClip.spawnPointEditor_mc;					spawnPointEditor_mc.mouseChildren = false;					challengeLevelEditor_mc = _contentClip.challengeLevelEditor_mc;					challengeLevelEditor_mc.mouseChildren = false;					challengeLevelEditor_mc.visible = false;										_gameLevelEditorClip = new DynamicUIButton();					_gameLevelEditorClip.dynamicClip = gameLevelEditor_mc;					_gameLevelEditorClip.dynamicInit();										_diggingEditorClip = new DynamicUIButton();					_diggingEditorClip.dynamicClip = diggingEditor_mc;					_diggingEditorClip.dynamicInit();										_villageEditorClip = new DynamicUIButton();					_villageEditorClip.dynamicClip = villageEditor_mc;					_villageEditorClip.dynamicInit();										_spawnPointEditorClip = new DynamicUIButton();					_spawnPointEditorClip.dynamicClip = spawnPointEditor_mc;					_spawnPointEditorClip.dynamicInit();										_challengeLevelEditorClip = new DynamicUIButton();					_challengeLevelEditorClip.dynamicClip = challengeLevelEditor_mc;					_challengeLevelEditorClip.dynamicInit();										switchTo2D_mc = _contentClip.switchTo2D_mc;					switchTo2D_mc.mouseChildren = false;					switchToIsometric_mc = _contentClip.switchToIsometric_mc;					switchToIsometric_mc.mouseChildren = false;										_switchTo2DClip = new DynamicUIButton();					_switchTo2DClip.dynamicClip = switchTo2D_mc;					_switchTo2DClip.dynamicInit();										_switchToIsometricClip = new DynamicUIButton();					_switchToIsometricClip.dynamicClip = switchToIsometric_mc;					_switchToIsometricClip.dynamicInit();										toggleBackground_mc = _contentClip.toggleBackground_mc;										_toggleBackgroundClip = new DynamicUICheckBox();					_toggleBackgroundClip.dynamicClip = toggleBackground_mc;					_toggleBackgroundClip.dynamicInit();					_toggleBackgroundClip.markerClip = toggleBackground_mc.marker_mc;										waveEditorView_mc = _contentClip.waveEditorView_mc;					_waveEditorViewClip = new WaveEditorView();					_waveEditorViewClip.contentClip = waveEditorView_mc;					_waveEditorViewClip.init();										loadingAssetView_mc = _contentClip.loadingAssetView_mc;					_loadingAssetViewClip = new LoadingAssetView();					_loadingAssetViewClip.contentClip = loadingAssetView_mc;					_loadingAssetViewClip.init();															_challengeLevelEditorInterfaceClip = new ChallengeLevelEditorInterface();					_challengeLevelEditorInterfaceClip.contentClip = challengeLevelEditorInterface_mc;					_challengeLevelEditorInterfaceClip.init();				}				public function get contentClip():MovieClip { return _contentClip; }								public function get gameboardController():GameboardController { return _gameboardController; }								public function set editingGameLevel( b:Boolean ):void				{					_editingGameLevel = b;										if( _editingGameLevel )					{						gameLevelEditor_mc.visible = true;						diggingEditor_mc.visible = true;						gameLevelEditorInterface_mc.visible = true;												challengeLevelEditor_mc.visible = false;						challengeLevelEditorInterface_mc.visible = false;					}					else					{						challengeLevelEditor_mc.visible = true;						challengeLevelEditorInterface_mc.visible = true;												gameLevelEditor_mc.visible = false;						diggingEditor_mc.visible = false;						gameLevelEditorInterface_mc.visible = false;					}				}							/** init			  *	---------------------------------------------------------------------------- */				public function init():void				{					_editingGameLevel = true;										_gameLevelEditorClip.addEventListener( "onClick", handleGameLevelEditorClicked, false, 0, true );					_diggingEditorClip.addEventListener( "onClick", handleDiggingEditorClicked, false, 0, true );					_villageEditorClip.addEventListener( "onClick", handleVillageEditorClicked, false, 0, true );					_spawnPointEditorClip.addEventListener( "onClick", handleSpawnPointEditorClicked, false, 0, true );					_challengeLevelEditorClip.addEventListener( "onClick", handleChallengeLevelEditorClicked, false, 0, true );										_editModeClip.addEventListener( "onClick", handleEditModeClicked, false, 0, true );					_playModeClip.addEventListener( "onClick", handlePlayModeClicked, false, 0, true );					_resetClip.addEventListener( "onClick", handleResetClicked, false, 0, true );					_saveClip.addEventListener( "onClick", handleSaveClicked, false, 0, true );					_waveEditorClip.addEventListener( "onClick", handleWaveEditorClicked, false, 0, true );										_startMonsterPathClip.addEventListener( "onClick", handleStartMonsterPathClicked, false, 0, true );					_endMonsterPathClip.addEventListener( "onClick", handleEndMonsterPathClicked, false, 0, true );										_environmentObjectListClip.addEventListener( "onEnvironmentObjectClicked", handleEnvironmentObjectClicked, false, 0, true );					_gameLevelSnapToTileCheckBoxClip.checked = true;															_gameLevelMoveObjectClip.addEventListener( "onClick", handleGameLevelMoveObjectClicked, false, 0, true );					_gameLevelSendToFrontClip..addEventListener( "onClick", handleGameLevelSendToFrontClicked, false, 0, true );					_gameLevelSendToBackClip.addEventListener( "onClick", handleGameLevelSendToBackClicked, false, 0, true );										_editModeClip.setDeactive( true );					_playModeClip.setActive( true );										_pathListClip.addEventListener( "onRollOverPath", handlePathRolledOver, false, 0, true );					_pathListClip.addEventListener( "onRollOutPath", handlePathRolledOut, false, 0, true );					_pathListClip.addEventListener( "onDeletePath", handlePathDeleted, false, 0, true );					_pathListClip.addEventListener( "onDeleteAllPaths", handleAllPathsDeleted, false, 0, true );										_addDigSpotTilesClip.addEventListener( "onClick", handleAddDigSpotTilesClicked, false, 0, true );					_endDigSpotTilesClip.addEventListener( "onClick", handleEndDigSpotTilesClicked, false, 0, true );					_digSaveClip.addEventListener( "onClick", handleDigSaveClicked, false, 0, true );					_digResetClip.addEventListener( "onClick", handleDigResetClicked, false, 0, true );					_availableTreasureScrollerClip.addEventListener( "onTreasureClicked", handleAvailableTreasureClicked, false, 0, true );					_treasureScrollerClip.addEventListener( "onTreasureDeleted", handleTreasureDeleted, false, 0, true );					_treasureScrollerClip.addEventListener( "onAllTreasuresDeleted", handleAllTreasuresDeleted, false, 0, true );										//villageSave_mc = villageEditorInterface_mc.villageSave_mc;					//villageSave_mc.addEventListener( "onClick", handleVillageSaveClicked, false, 0, true );					//villageSave_mc.mouseChildren = false;					//villageSave_mc.visible = false;					_villageResetClip.addEventListener( "onClick", handleVillageResetClicked, false, 0, true );					_villageObjectListClip.addEventListener( "onEnvironmentObjectClicked", handleEnvironmentObjectClicked, false, 0, true );					//_villageObjectListClip.addEventListener( "onVillagerObjectClicked", handleVillagerObjectClicked, false, 0, true );					_villagerObjectListClip.addEventListener( "onVillagerObjectClicked", handleVillagerObjectClicked, false, 0, true );					_villageSnapToTileCheckBoxClip.checked = true;					_villageMoveObjectClip.addEventListener( "onClick", handleGameLevelMoveObjectClicked, false, 0, true );					_villageSendToFrontClip.addEventListener( "onClick", handleGameLevelSendToFrontClicked, false, 0, true );					_villageSendToBackClip.addEventListener( "onClick", handleGameLevelSendToBackClicked, false, 0, true );										_spawnPointSaveClip.addEventListener( "onClick", handleSaveClicked, false, 0, true );					_addSpawnPointClip.addEventListener( "onClick", handleAddSpawnPointClicked, false, 0, true );					_resetSpawnPointClip.addEventListener( "onClick", handleResetSpawnPointClicked, false, 0, true );					_addChickenAreaClip.addEventListener( "onClick", handleAddChickenAreaClicked, false, 0, true );					_resetChickenAreaClip.addEventListener( "onClick", handleResetChickenAreaClicked, false, 0, true );										_switchTo2DClip.addEventListener( "onClick", handleSwitchTo2DClicked, false, 0, true );					_switchToIsometricClip.addEventListener( "onClick", handleSwitchToIsometricClicked, false, 0, true );										_switchTo2DClip.setDeactive( true );										_toggleBackgroundClip.addEventListener( "onClick", handleToggleBackgroundClicked, false, 0, true );					_toggleBackgroundClip.checked = false;										_weaponSelectionViewClip = new WeaponSelectionEditorView();					_weaponSelectionViewClip.contentClip = new (getDefinitionByName("WeaponSelectionViewLibrary") as Class)();					_weaponSelectionViewClip.contentClip.x = 0;					_weaponSelectionViewClip.contentClip.y = 200;					weaponSelectionViewContainer_mc.addChild( _weaponSelectionViewClip.contentClip );					_weaponSelectionViewClip.init();					_weaponSelectionViewClip.addEventListener( BoogaEvent.WEAPON_SELECTION_DONE, handleWeaponSelectionDone, false, 0, true );					_weaponSelectionViewClip.addEventListener( BoogaEvent.WEAPON_SELECTION_CANCEL, handleWeaponSelectionCancel, false, 0, true );					_weaponSelectionViewClip.contentClip.visible = false;					//_weaponSelectionViewClip.alpha = 1;										_loadingAssetViewClip.contentClip.visible = false;					_loadingAssetViewClip.contentClip.alpha = 1;										trace( "waveEditorView_mc: "+waveEditorView_mc );					trace( "_waveEditorViewClip: "+_waveEditorViewClip.contentClip );										waveEditorView_mc.visible = false;					waveEditorView_mc.alpha = 1;					_waveEditorViewClip.contentClip.visible = false;					_waveEditorViewClip.contentClip.alpha = 1;					_waveEditorViewClip.addEventListener( "onWaveZonesSaved", handleWaveZonesSaved, false, 0, true );										//play_mc = controls_mc.play_mc;					//play_mc.addEventListener( "onClick", handlePlayClicked, false, 0, true );					//pause_mc = controls_mc.pause_mc;					//pause_mc.addEventListener( "onClick", handlePauseClicked, false, 0, true );					/*					muteSound_mc = controls_mc.muteSound_mc;					muteSound_mc.addEventListener( "onClick", handleMuteSoundClicked, false, 0, true );					unmuteSound_mc = controls_mc.unmuteSound_mc;					unmuteSound_mc.addEventListener( "onClick", handleUnmuteSoundClicked, false, 0, true );					muteMusic_mc = controls_mc.muteMusic_mc;					muteMusic_mc.addEventListener( "onClick", handleMuteMusicClicked, false, 0, true );					unmuteMusic_mc = controls_mc.unmuteMusic_mc;					unmuteMusic_mc.addEventListener( "onClick", handleUnmuteMusicClicked, false, 0, true );					*/					//fullScreen_mc = controls_mc.fullScreen_mc;					//fullScreen_mc.addEventListener( "onClick", handleFullScreenClicked, false, 0, true );										//trace( "error_mc: "+error_mc );										error_mc.visible = false;					error_mc.buttonMode = true;					error_mc.mouseChildren = false;					error_mc.addEventListener( MouseEvent.CLICK, handleErrorClicked, false, 0, true );										//trace( "gameboardContainer_mc: "+gameboardContainer_mc );										_gameboardContainerPositionIn2D = new Point( gameboardContainer_mc.x, gameboardContainer_mc.y );					_gameboardContainerPositionInIsometric = new Point( gameboardContainer_mc.x-150, gameboardContainer_mc.y );										//var gameboardClass:Class = getDefinitionByName("GameboardLibrary") as Class;					_gameboardReference = new GameboardEditor();					_gameboardReference.contentClip = new (getDefinitionByName("GameboardLibrary") as Class)();					gameboardContainer_mc.addChild( _gameboardReference.contentClip );					_gameboardReference.init();					_gameboardReference.tileOpacity = 1;					_gameboardReference.inIsometricView = false;					//_gameboardReference.backgroundContainer_mc.visible = false;					_gameboardReference.hideGameLevelBackground();					_gameboardReference.addEventListener( "onTileClicked", handleGameTileClicked, false, 0, true );					_gameboardReference.addEventListener( "onDiggingTileArea1Clicked", handleDiggingTileArea1Clicked, false, 0, true );					_gameboardReference.addEventListener( "onDiggingTileArea2Clicked", handleDiggingTileArea2Clicked, false, 0, true );					_gameboardReference.addEventListener( "onDiggingTileArea3Clicked", handleDiggingTileArea3Clicked, false, 0, true );										_gameboardController = new GameboardController();					_gameboardController.gameboardReference = _gameboardReference;										_gameLevel = new GameLevel();					_diggingSpots = new DiggingSpots();					_villagerDisplayObjects = new Vector.<VillagerDisplayObject>;					_challengeLevel = new ChallengeLevel();										_controlsClip.gameboardController = _gameboardController;					_controlsClip.showGameLevelControls();										_challengeLevelEditorInterfaceClip.gameboardReference = _gameboardReference;										//initEnvironmentObjectContextMenu();										//trace( GameLevelDataIndex.getInstance().weapons );										//loadEnvironmentObjectAssets();										showGameLevelEditorUI();										//loadTreasureAssets();				}				/*				protected function initEnvironmentObjectContextMenu():void				{					_environmentObjectContextMenu = new ContextMenu();										var sendToBack_cmi:ContextMenuItem = new ContextMenuItem( "Send to Back" );						sendToBack_cmi.addEventListener( ContextMenuEvent.MENU_ITEM_SELECT, handleSendEnvironmentObjectToBack, false, 0, true );										var sendToFront_cmi:ContextMenuItem = new ContextMenuItem( "Send to Front" );						sendToFront_cmi.addEventListener( ContextMenuEvent.MENU_ITEM_SELECT, handleSendEnvironmentObjectToFront, false, 0, true );										_environmentObjectContextMenu.hideBuiltInItems();					_environmentObjectContextMenu.customItems = [ sendToBack_cmi, sendToFront_cmi ];										//this.contextMenu = _environmentObjectContextMenu;				}								protected function handleSendEnvironmentObjectToBack( event:ContextMenuEvent ):void				{					trace( "handleSendEnvironmentObjectToBack();" );					trace( "event.mouseTarget: "+event.mouseTarget );										checkContainer_mc.x = this.mouseX;					checkContainer_mc.y = this.mouseY;										var tileSelected:GameboardTile;					var i:int, j:int;										for( i=0; i<_gameboardReference.tiles.length; ++i )					{						for( j=0; j<_gameboardReference.tiles[i].length; ++j )						{							if( !UtilFunctions.getCollisionRect( checkContainer_mc, _gameboardReference.tiles[i][j].contentClip, this, true ).isEmpty() )							{								tileSelected = _gameboardReference.tiles[i][j];								break;							}						}					}										if( tileSelected != null )					{						for( i=0; i<_gameLevel.environmentObjects.length; ++i )						{							if( _gameLevel.environmentObjects[i].row == tileSelected.row && _gameLevel.environmentObjects[i].column == tileSelected.column )							{								trace( _gameLevel.environmentObjects[i] );							}						}					}				}								protected function handleSendEnvironmentObjectToFront( event:ContextMenuEvent ):void				{					trace( "handleSendEnvironmentObjectToFront();" );					trace( "event.mouseTarget: "+event.mouseTarget.name );					trace( event.mouseTarget.parent );				}				*/							/** handleGameLevelEditorClicked			  *	---------------------------------------------------------------------------- *			  *	Changes to editing the game level.			  *	---------------------------------------------------------------------------- */				protected function handleGameLevelEditorClicked( event:Event ):void				{					if( _editorType == EDITOR_TYPE_DIGGING_LEVEL )						handleEndDigSpotTilesClicked(null);										_editorType = EDITOR_TYPE_GAME_LEVEL;										showGameLevelEditorUI();					/*					for( var i:int=0; i<_gameboardReference.gateTiles.length; ++i )					{						_gameboardReference.gateTiles[i].positionIn2D.y = -GameLevelUtil.TILE_2D_HEIGHT;						_gameboardReference.gateTiles[i].render();					}					*/				}							/** handleDiggingEditorClicked			  *	---------------------------------------------------------------------------- *			  *	Changes to editing the digging level.			  *	---------------------------------------------------------------------------- */				protected function handleDiggingEditorClicked( event:Event ):void				{					if( _editorType == EDITOR_TYPE_GAME_LEVEL )						handleEndMonsterPathClicked(null);										/*					else if( _editorType == EDITOR_TYPE_VILLAGE_LEVEL )					{						var i:int, j:int, k:int;						for( i=0; i<_gameboardReference.villageDisplayObjects.length; ++i )						{							for( j=0; j<_gameboardReference.villageDisplayObjects[i].length; ++j )							{								for( k=0; k<_gameboardReference.villageDisplayObjects[i][j].length; ++k )								{									_gameboardReference.villageDisplayObjects[i][j][k].editable = false;								}							}						}					}					*/					_editorType = EDITOR_TYPE_DIGGING_LEVEL;										showDiggingEditorUI();				}							/** handleVillageEditorClicked			  *	---------------------------------------------------------------------------- *			  *	Changes to editing the village level.			  *	---------------------------------------------------------------------------- */				protected function handleVillageEditorClicked( event:Event ):void				{					if( _editorType == EDITOR_TYPE_GAME_LEVEL )						handleEndMonsterPathClicked(null);					else if( _editorType == EDITOR_TYPE_DIGGING_LEVEL )						handleEndDigSpotTilesClicked(null);										_editorType = EDITOR_TYPE_VILLAGE_LEVEL;										//handleEndMonsterPathClicked(null);										showVillageEditorUI();				}							/** handleSpawnPointEditorClicked			  *	---------------------------------------------------------------------------- *			  *	Changes to editing the spawn point locations.			  *	---------------------------------------------------------------------------- */				protected function handleSpawnPointEditorClicked( event:Event ):void				{					if( _editorType == EDITOR_TYPE_GAME_LEVEL )						handleEndMonsterPathClicked(null);					else if( _editorType == EDITOR_TYPE_DIGGING_LEVEL )						handleEndDigSpotTilesClicked(null);										_editorType = EDITOR_TYPE_SPAWN_POINT;										showSpawnPointEditorUI();				}								protected function handleChallengeLevelEditorClicked( event:Event ):void				{					_editorType = EDITOR_TYPE_CHALLENGE_LEVEL;										showChallengeLevelEditorUI();				}							/** showGameLevelEditorUI			  *	---------------------------------------------------------------------------- *			  *	Shows UI buttons for game level editor.			  *	---------------------------------------------------------------------------- */				protected function showGameLevelEditorUI():void				{					ConsoleBroadcaster.broadcast( "GameEditor", "showGameLevelEditorUI():" );										if( !_environmentObjectAssetsLoaded )						loadEnvironmentObjectAssets();										_gameLevelEditorClip.setDeactive( true );					_diggingEditorClip.setActive( true );					_villageEditorClip.setActive( true );					_spawnPointEditorClip.setActive( true );										gameLevelEditorInterface_mc.visible = true;					pathList_mc.visible = true;															_addSpawnPointClip.setActive( true );					_addChickenAreaClip.setActive( true );										//availableTreasureScroller_mc.visible = false;					//treasureScroller_mc.visible = false;										villageEditorInterface_mc.visible = false;					diggingEditorInterface_mc.visible = false;					spawnPointEditorInterface_mc.visible = false;					challengeLevelEditorInterface_mc.visible = false;										_gameboardReference.showChickenAreas();										_gameboardReference.hideDiggingTiles();					_gameboardReference.showGameTiles();					_gameboardReference.hideVillageTiles();										removeHighlightDigSpots();					removeHighlightSpawnPointsAndChickenAreas();										enableEnvironmentObjects();										gameboardContainer_mc.x = _gameboardReference.inIsometricView ? _gameboardContainerPositionInIsometric.x : _gameboardContainerPositionIn2D.x;					gameboardContainer_mc.y = _gameboardReference.inIsometricView ? _gameboardContainerPositionInIsometric.y : _gameboardContainerPositionIn2D.y;					gameboardContainer_mc.scaleX = 1;					gameboardContainer_mc.scaleY = 1;										//trace( "gameboardContainer_mc.x: "+gameboardContainer_mc.x+", y:"+gameboardContainer_mc.y );									}							/** showDiggingEditorUI			  *	---------------------------------------------------------------------------- *			  *	Shows UI buttons for digging level editor.			  *	---------------------------------------------------------------------------- */				protected function showDiggingEditorUI():void				{					ConsoleBroadcaster.broadcast( "GameEditor", "showDiggingEditorUI();" );										if( !_treasureAssetsLoaded )						loadTreasureAssets();										_diggingEditorClip.setDeactive( true );					_villageEditorClip.setActive( true );					_spawnPointEditorClip.setActive( true );										if( _editingGameLevel )						_gameLevelEditorClip.setActive( true );					else						_challengeLevelEditorClip.setActive( true );										gameLevelEditorInterface_mc.visible = false;					//pathList_mc.visible = false;					challengeLevelEditorInterface_mc.visible = false;										villageEditorInterface_mc.visible = false;					//availableTreasureScroller_mc.visible = false;					//treasureScroller_mc.visible = false;										spawnPointEditorInterface_mc.visible = false;										diggingEditorInterface_mc.visible = true;										_waveEditorViewClip.contentClip.visible = false;					_weaponSelectionViewClip.hide();					_weaponSelectionViewClip.reset();										removeHighlightSpawnPointsAndChickenAreas();					removeHighlightDigSpots();										_gameboardReference.hideChickenAreas();					_gameboardReference.hideGameTiles();					_gameboardReference.showDiggingTiles();					highlightDigSpots();					_gameboardReference.hideVillageTiles();										for( var i:int=0; i<_villagerDisplayObjects.length; ++i )					{						_villagerDisplayObjects[i].contentClip.visible = false;					}										gameboardContainer_mc.x = _gameboardReference.inIsometricView ? _gameboardContainerPositionInIsometric.x : _gameboardContainerPositionIn2D.x+100;					gameboardContainer_mc.y = _gameboardReference.inIsometricView ? _gameboardContainerPositionInIsometric.y : _gameboardContainerPositionIn2D.y;					gameboardContainer_mc.scaleX = .6;					gameboardContainer_mc.scaleY = .6;										//trace( "gameboardContainer_mc.x: "+gameboardContainer_mc.x+", y:"+gameboardContainer_mc.y );									}							/** showVillageEditorUI			  *	---------------------------------------------------------------------------- *			  *	Shows UI buttons for village editor.			  *	---------------------------------------------------------------------------- */				protected function showVillageEditorUI():void				{					ConsoleBroadcaster.broadcast( "GameEditor", "showVillageEditorUI();" );										//if( !_villageObjectAssetsLoaded )						//loadVillageAssets();										_villageEditorClip.setDeactive( true );					_diggingEditorClip.setActive( true );					_spawnPointEditorClip.setActive( true );										if( _editingGameLevel )						_gameLevelEditorClip.setActive( true );					else						_challengeLevelEditorClip.setActive( true );										gameLevelEditorInterface_mc.visible = false;					//pathList_mc.visible = false;					challengeLevelEditorInterface_mc.visible = false;										//availableTreasureScroller_mc.visible = false;					//treasureScroller_mc.visible = false;					diggingEditorInterface_mc.visible = false;					spawnPointEditorInterface_mc.visible = false;										villageEditorInterface_mc.visible = true;										_waveEditorViewClip.contentClip.visible = false;					_weaponSelectionViewClip.hide();					_weaponSelectionViewClip.reset();										removeHighlightSpawnPointsAndChickenAreas();					removeHighlightDigSpots();										_gameboardReference.hideChickenAreas();					_gameboardReference.hideGameTiles();					_gameboardReference.hideDiggingTiles();					_gameboardReference.showVillageTiles();					gameboardContainer_mc.x = _gameboardReference.inIsometricView ? _gameboardContainerPositionInIsometric.x+300 : _gameboardContainerPositionIn2D.x;					gameboardContainer_mc.y = _gameboardReference.inIsometricView ? _gameboardContainerPositionInIsometric.y : _gameboardContainerPositionIn2D.y+360;					gameboardContainer_mc.scaleX = 1;					gameboardContainer_mc.scaleY = 1;										for( var i:int=0; i<_villagerDisplayObjects.length; ++i )					{						_villagerDisplayObjects[i].editable = true;						_villagerDisplayObjects[i].contentClip.visible = true;					}										//trace( "gameboardContainer_mc.x: "+gameboardContainer_mc.x+", y:"+gameboardContainer_mc.y );										/*					var i:int, j:int, k:int;					for( i=0; i<_gameboardReference.villageDisplayObjects.length; ++i )					{						for( j=0; j<_gameboardReference.villageDisplayObjects[i].length; ++j )						{							for( k=0; k<_gameboardReference.villageDisplayObjects[i][j].length; ++k )							{								_gameboardReference.villageDisplayObjects[i][j][k].editable = true;							}						}					}					*/				}							/** showSpawnPointEditorUI			  *	---------------------------------------------------------------------------- *			  *	Shows UI buttons for spawn point editor.			  *	---------------------------------------------------------------------------- */				protected function showSpawnPointEditorUI():void				{					ConsoleBroadcaster.broadcast( "GameEditor", "showSpawnPointEditorUI();" );										_spawnPointEditorClip.setDeactive( true );					_villageEditorClip.setActive( true );					_diggingEditorClip.setActive( true );										if( _editingGameLevel )						_gameLevelEditorClip.setActive( true );					else						_challengeLevelEditorClip.setActive( true );										gameLevelEditorInterface_mc.visible = false;					challengeLevelEditorInterface_mc.visible = false;					diggingEditorInterface_mc.visible = false;					villageEditorInterface_mc.visible = false;										spawnPointEditorInterface_mc.visible = true;										_waveEditorViewClip.contentClip.visible = false;					_weaponSelectionViewClip.hide();					_weaponSelectionViewClip.reset();										removeHighlightDigSpots();										_gameboardReference.hideChickenAreas();					_gameboardReference.hideGameTiles();					_gameboardReference.hideVillageTiles();										for( var i:int=0; i<_villagerDisplayObjects.length; ++i )					{						_villagerDisplayObjects[i].contentClip.visible = false;					}										_gameboardReference.showDiggingTiles();										highlightSpawnPointsAndChickenAreas();										gameboardContainer_mc.x = _gameboardReference.inIsometricView ? _gameboardContainerPositionInIsometric.x+300 : _gameboardContainerPositionIn2D.x+300;					gameboardContainer_mc.y = _gameboardReference.inIsometricView ? _gameboardContainerPositionInIsometric.y : _gameboardContainerPositionIn2D.y;					gameboardContainer_mc.scaleX = .8;					gameboardContainer_mc.scaleY = .8;				}											/** showChallengeLevelEditorUI			  *	---------------------------------------------------------------------------- *			  *	Shows UI buttons for challenge level editor.			  *	---------------------------------------------------------------------------- */				protected function showChallengeLevelEditorUI():void				{					ConsoleBroadcaster.broadcast( "GameEditor", "showGameLevelEditorUI():" );										if( !_environmentObjectAssetsLoaded )						loadEnvironmentObjectAssets();										_challengeLevelEditorClip.setDeactive( true );					_villageEditorClip.setActive( true );					_spawnPointEditorClip.setActive( true );										challengeLevelEditorInterface_mc.visible = true;										_addSpawnPointClip.setActive( true );					_addChickenAreaClip.setActive( true );										villageEditorInterface_mc.visible = false;					spawnPointEditorInterface_mc.visible = false;										_gameboardReference.showChickenAreas();										_gameboardReference.hideDiggingTiles();					_gameboardReference.showGameTiles();					_gameboardReference.hideVillageTiles();										removeHighlightDigSpots();					removeHighlightSpawnPointsAndChickenAreas();										enableEnvironmentObjects();										gameboardContainer_mc.x = _gameboardReference.inIsometricView ? _gameboardContainerPositionInIsometric.x : _gameboardContainerPositionIn2D.x;					gameboardContainer_mc.y = _gameboardReference.inIsometricView ? _gameboardContainerPositionInIsometric.y : _gameboardContainerPositionIn2D.y;					gameboardContainer_mc.scaleX = 1;					gameboardContainer_mc.scaleY = 1;										//trace( "gameboardContainer_mc.x: "+gameboardContainer_mc.x+", y:"+gameboardContainer_mc.y );									}							/** loadGameLevel			  *	---------------------------------------------------------------------------- *			  *	Loads game level data.			  *	---------------------------------------------------------------------------- */				public function loadGameLevel( id:int ):void				{					ConsoleBroadcaster.broadcast( "GameEditor", "loadGameLevel("+id+");" );										_loadingAssetViewClip.showLoadingProgress();										if( _editingGameLevel )					{						_gameLevelDataController = new GameLevelDataController();						_gameLevelDataController.addEventListener( "onComplete", handleLoadGameLevelDataComplete, false, 0, true );						_gameLevelDataController.addEventListener( "onError", handleLoadGameLevelDataError, false, 0, true );						_gameLevelDataController.loadGameLevels( [id], 0 );					}					else					{						_gameLevelDataController = new GameLevelDataController();						_gameLevelDataController.addEventListener( "onComplete", handleLoadChallengeLevelDataComplete, false, 0, true );						_gameLevelDataController.addEventListener( "onError", handleLoadChallengeLevelDataError, false, 0, true );						_gameLevelDataController.loadChallengeLevels( [id] );					}				}							/** handleLoadGameLevelDataComplete			  *	---------------------------------------------------------------------------- *			  *	Dispatched when the game level data loaded completely.			  *	---------------------------------------------------------------------------- */				protected function handleLoadGameLevelDataComplete( event:CustomEvent ):void				{					_gameLevelDataController.removeEventListener( "onComplete", handleLoadGameLevelDataComplete );					_gameLevelDataController.removeEventListener( "onError", handleLoadGameLevelDataError );										_loadingAssetViewClip.hideLoadingProgress();										_gameLevel = GameLevelDataIndex.getInstance().getGameLevel( event.customParameters.ids[0] );										MainGameController.getInstance().assetLoaderController.addEventListener( AssetLoaderEvent.COMPLETE, handleLoadGameLevelBackgroundComplete );					MainGameController.getInstance().assetLoaderController.addEventListener( AssetLoaderEvent.ERROR, handleLoadGameLevelBackgroundError );					MainGameController.getInstance().assetLoaderController.loadAssets( [{id:_gameLevel.gameLevelBackgroundLinkageId, url:_gameLevel.gameLevelBackgroundAssetURL}] );										villageEditor_mc.visible = true;					diggingEditor_mc.visible = true;					spawnPointEditor_mc.visible = true;										_waveEditorViewClip.waveZones = _gameLevel.waveZones;										for( var i:int=0; i<_gameLevel.paths.length; ++i )					{						_pathListClip.addPath( i );					}										_levelNameClip.setValue( _gameLevel.name );					_createdByClip.setValue( _gameLevel.createdBy );					_startingChickenClip.setValue( String(_gameLevel.startingChicken) );					_gateHealthClip.setValue( String(_gameLevel.gateHealth) );					_chickenSpawnRateMinClip.setValue( String(_gameLevel.chickenSpawnRateMin) );					_chickenSpawnRateMaxClip.setValue( String(_gameLevel.chickenSpawnRateMax) );					_slotWinningProbabilityClip.setValue( String(_gameLevel.slotWinningProbability) );					_slotEnabledCheckBoxClip.checked = _gameLevel.slotEnabled;					_buyChickenEnabledCheckBoxClip.checked = _gameLevel.buyChickenEnabled;										_diggingSpots = _gameLevel.diggingSpots;					for( i=0; i<_diggingSpots.treasures.length; ++i )					{						_treasureScrollerClip.addTreasure( _diggingSpots.treasures[i] );					}										for( i=0; i<_diggingSpots.weapons.length; ++i )					{						_treasureScrollerClip.addWeapon( _diggingSpots.weapons[i] );					}										for( i=0; i<_diggingSpots.gods.length; ++i )					{						_treasureScrollerClip.addGod( _diggingSpots.gods[i] );					}										//highlightDigSpots();										var envDisplayObject:EnvironmentDisplayObject;					for( i=0; i<_gameLevel.environmentObjects.length; ++i )					{						envDisplayObject = _gameboardReference.addEnvironmentObject( _gameLevel.environmentObjects[i] );						envDisplayObject.editable = true;						envDisplayObject.addEventListener( "onClick", handleEnvironmentDisplayObjectClicked, false, 0, true );					}										for( i=0; i<_gameLevel.villageObjects.length; ++i )					{						//envDisplayObject = _gameboardReference.addVillageObject( _gameLevel.villageObjects[i] );						//envDisplayObject.editable = true;						envDisplayObject = _gameboardReference.addVillageObject( _gameLevel.villageObjects[i] );						envDisplayObject.editable = true;						envDisplayObject.addEventListener( "onClick", handleEnvironmentDisplayObjectClicked, false, 0, true );					}										var villagerDisplayObject:VillagerDisplayObject;					for( i=0; i<_gameLevel.villagerObjects.length; ++i )					{						villagerDisplayObject = new VillagerDisplayObject();						villagerDisplayObject.contentClip = new (getDefinitionByName("VillagerDisplayObjectLibrary") as Class)();						villagerDisplayObject.init();						villagerDisplayObject.villager = GameLevelDataIndex.getInstance().getVillager( _gameLevel.villagerObjects[i].villagerId );						villagerDisplayObject.gameLevelVillagerObject = _gameLevel.villagerObjects[i];						villagerDisplayObject.positionIn2D = _gameboardReference.villageTiles[villagerDisplayObject.gameLevelVillagerObject.row][villagerDisplayObject.gameLevelVillagerObject.column].positionIn2D.clone().add( new Point(villagerDisplayObject.gameLevelVillagerObject.positionX, villagerDisplayObject.gameLevelVillagerObject.positionY) );						villagerDisplayObject.inIsometricView = _gameboardReference.inIsometricView;						villagerDisplayObject.render();						_gameboardReference.displayLayerClip.addClipToLayerInFront( villagerDisplayObject.contentClip, GameLevelDataIndex.getInstance().boardMaxRows-villagerDisplayObject.gameLevelVillagerObject.column+villagerDisplayObject.gameLevelVillagerObject.row, GameLevelDisplayLayerItem.LAYER_BACKGROUND );						_villagerDisplayObjects.push( villagerDisplayObject );												villagerDisplayObject.editable = true;						villagerDisplayObject.addEventListener( "onClick", handleVillagerDisplayObjectClicked, false, 0, true );						villagerDisplayObject.contentClip.visible = false;					}										_gameboardReference.hideVillageTiles();				}							/** handleLoadGameLevelDataError			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function handleLoadGameLevelDataError( event:CustomEvent ):void				{					_gameLevelDataController.removeEventListener( "onComplete", handleLoadGameLevelDataComplete );					_gameLevelDataController.removeEventListener( "onError", handleLoadGameLevelDataError );				}								protected function handleLoadGameLevelBackgroundComplete( event:AssetLoaderEvent ):void				{					MainGameController.getInstance().assetLoaderController.removeEventListener( AssetLoaderEvent.COMPLETE, handleLoadGameLevelBackgroundComplete );					MainGameController.getInstance().assetLoaderController.removeEventListener( AssetLoaderEvent.ERROR, handleLoadGameLevelBackgroundError );										_gameboardReference.loadGameLevelBackground( _gameLevel.gameLevelBackgroundLinkageId );				}								protected function handleLoadGameLevelBackgroundError( event:AssetLoaderEvent ):void				{					MainGameController.getInstance().assetLoaderController.removeEventListener( AssetLoaderEvent.COMPLETE, handleLoadGameLevelBackgroundComplete );					MainGameController.getInstance().assetLoaderController.removeEventListener( AssetLoaderEvent.ERROR, handleLoadGameLevelBackgroundError );				}							/** handleLoadChallengeLevelDataComplete			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */			  	protected function handleLoadChallengeLevelDataComplete( event:CustomEvent ):void				{					_gameLevelDataController.removeEventListener( "onComplete", handleLoadChallengeLevelDataComplete );					_gameLevelDataController.removeEventListener( "onError", handleLoadChallengeLevelDataError );										_loadingAssetViewClip.hideLoadingProgress();										_challengeLevel = GameLevelDataIndex.getInstance().getChallengeLevel( event.customParameters.ids[0] );										MainGameController.getInstance().assetLoaderController.addEventListener( AssetLoaderEvent.COMPLETE, handleLoadGameLevelBackgroundComplete );					MainGameController.getInstance().assetLoaderController.addEventListener( AssetLoaderEvent.ERROR, handleLoadGameLevelBackgroundError );					MainGameController.getInstance().assetLoaderController.loadAssets( [{id:_challengeLevel.gameLevelBackgroundId, url:_challengeLevel.gameLevelBackgroundAssetURL}] );										villageEditor_mc.visible = true;					spawnPointEditor_mc.visible = true;										_challengeLevelEditorInterfaceClip.challengeLevel = _challengeLevel;															var envDisplayObject:EnvironmentDisplayObject;					for( var i:int=0; i<_challengeLevel.environmentObjects.length; ++i )					{						envDisplayObject = _gameboardReference.addEnvironmentObject( _challengeLevel.environmentObjects[i] );						envDisplayObject.editable = true;						envDisplayObject.addEventListener( "onClick", handleEnvironmentDisplayObjectClicked, false, 0, true );					}				}							/** handleLoadChallengeLevelDataError			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function handleLoadChallengeLevelDataError( event:CustomEvent ):void				{					_gameLevelDataController.removeEventListener( "onComplete", handleLoadChallengeLevelDataComplete );					_gameLevelDataController.removeEventListener( "onError", handleLoadChallengeLevelDataError );				}											/** loadEnvironmentObjectAssets			  *	---------------------------------------------------------------------------- *			  *	Load environment objects asset and display the loading asset view.			  *	---------------------------------------------------------------------------- */				protected function loadEnvironmentObjectAssets():void				{					ConsoleBroadcaster.broadcast( "GameEditor", "loadEnvironmentObjectAssets();" );										var assets:Array = new Array();										for( var i:int=0; i<GameLevelDataIndex.getInstance().environmentObjectsCount; ++i )					{						assets.push( {id:GameLevelDataIndex.getInstance().environmentObjects[i].name, url:GameLevelDataIndex.getInstance().environmentObjects[i].assetURL} );					}										for( i=0; i<GameLevelDataIndex.getInstance().villagersCount; ++i )					{						//trace( "cacheIconId: "+GameLevelDataIndex.getInstance().villagers[i].cacheIconId );						//trace( "url: "+GameLevelDataIndex.getInstance().villagers[i].iconURL );						assets.push( {id:GameLevelDataIndex.getInstance().villagers[i].cacheIconId, url:GameLevelDataIndex.getInstance().villagers[i].iconURL} );						assets.push( {id:GameLevelDataIndex.getInstance().villagers[i].regularAnimationObject.cacheId, url:GameLevelDataIndex.getInstance().villagers[i].regularAnimationObject.assetURL} );					}										//trace( "assets.length: "+assets.length );										MainGameController.getInstance().urgentAssetLoaderController.addEventListener( AssetLoaderEvent.COMPLETE, handleLoadEnvironmentAssetsComplete );					MainGameController.getInstance().urgentAssetLoaderController.addEventListener( AssetLoaderEvent.ERROR, handleLoadEnvironmentAssetsError );					MainGameController.getInstance().urgentAssetLoaderController.loadAssets( assets );										_loadingAssetViewClip.showLoadingProgress();				}							/** handleLoadEnvironmentAssetsComplete			  *	---------------------------------------------------------------------------- */				protected function handleLoadEnvironmentAssetsComplete( event:AssetLoaderEvent ):void				{					ConsoleBroadcaster.broadcast( "GameEditor", "handleLoadEnvironmentAssetsComplete" );										_environmentObjectAssetsLoaded = true;										MainGameController.getInstance().urgentAssetLoaderController.removeEventListener( AssetLoaderEvent.COMPLETE, handleLoadEnvironmentAssetsComplete );					MainGameController.getInstance().urgentAssetLoaderController.removeEventListener( AssetLoaderEvent.ERROR, handleLoadEnvironmentAssetsError );										_loadingAssetViewClip.hideLoadingProgress();										_environmentObjectListClip.initObjects();					_villageObjectListClip.initObjects();					_villagerObjectListClip.initVillagers();										if( gameLevelIdToLoad >= 0 )					{						loadGameLevel( gameLevelIdToLoad );						gameLevelIdToLoad = -1;					}				}							/** handleLoadEnvironmentalAssetsError			  *	---------------------------------------------------------------------------- */				protected function handleLoadEnvironmentAssetsError( event:AssetLoaderEvent ):void				{					ConsoleBroadcaster.broadcast( "GameEditor", "handleLoadEnvironmentAssetsError" );										MainGameController.getInstance().assetLoaderController.removeEventListener( AssetLoaderEvent.COMPLETE, handleLoadEnvironmentAssetsComplete );					MainGameController.getInstance().assetLoaderController.removeEventListener( AssetLoaderEvent.ERROR, handleLoadEnvironmentAssetsError );				}							/** loadTreasureAssets			  *	---------------------------------------------------------------------------- */				protected function loadTreasureAssets():void				{					var assets:Array = new Array();										for( var i:int=0; i<MainGameDataIndex.getInstance().treasuresCount; ++i )					{						assets.push( {id:MainGameDataIndex.getInstance().treasures[i].cacheIconId, url:MainGameDataIndex.getInstance().treasures[i].iconURL} );					}										for( i=0; i<GameLevelDataIndex.getInstance().weaponsCount; ++i )					{						if( GameLevelDataIndex.getInstance().weapons[i].listed && GameLevelDataIndex.getInstance().weapons[i].consumable )							assets.push( {id:GameLevelDataIndex.getInstance().weapons[i].cacheIconId, url:GameLevelDataIndex.getInstance().weapons[i].iconURL} );					}										for( i=0; i<GameLevelDataIndex.getInstance().godsCount; ++i )					{						if( GameLevelDataIndex.getInstance().gods[i].consumable )							assets.push( {id:GameLevelDataIndex.getInstance().gods[i].cacheIconId, url:GameLevelDataIndex.getInstance().gods[i].iconURL} );					}										assets = assets.concat( GameLevelUtil.getGameLevelAssets(_gameLevel) );										MainGameController.getInstance().assetLoaderController.addEventListener( AssetLoaderEvent.COMPLETE, handleLoadTreasureAssetsComplete );					MainGameController.getInstance().assetLoaderController.addEventListener( AssetLoaderEvent.ERROR, handleLoadTreasureAssetsError );					MainGameController.getInstance().assetLoaderController.loadAssets( assets );										_loadingAssetViewClip.showLoadingProgress();				}								protected function handleLoadTreasureAssetsComplete( event:AssetLoaderEvent ):void				{					_treasureAssetsLoaded = true;										MainGameController.getInstance().assetLoaderController.removeEventListener( AssetLoaderEvent.COMPLETE, handleLoadTreasureAssetsComplete );					MainGameController.getInstance().assetLoaderController.removeEventListener( AssetLoaderEvent.ERROR, handleLoadTreasureAssetsError );										_loadingAssetViewClip.hideLoadingProgress();										_availableTreasureScrollerClip.initContent();				}								protected function handleLoadTreasureAssetsError( event:AssetLoaderEvent ):void				{					MainGameController.getInstance().assetLoaderController.removeEventListener( AssetLoaderEvent.COMPLETE, handleLoadTreasureAssetsComplete );					MainGameController.getInstance().assetLoaderController.removeEventListener( AssetLoaderEvent.ERROR, handleLoadTreasureAssetsError );										_loadingAssetViewClip.hideLoadingProgress();				}				/*				protected function loadVillageAssets():void				{									}								protected function handleLoadVillageAssetsComplete( event:AssetLoaderEvent ):void				{					MainGameController.getInstance().assetLoaderController.removeEventListener( AssetLoaderEvent.COMPLETE, handleLoadVillageAssetsComplete );					MainGameController.getInstance().assetLoaderController.removeEventListener( AssetLoaderEvent.ERROR, handleLoadVillageAssetsError );										_villageObjectAssetsLoaded = true;				}								protected function handleLoadVillageAssetsError( event:AssetLoaderEvent ):void				{					MainGameController.getInstance().assetLoaderController.removeEventListener( AssetLoaderEvent.COMPLETE, handleLoadVillageAssetsComplete );					MainGameController.getInstance().assetLoaderController.removeEventListener( AssetLoaderEvent.ERROR, handleLoadVillageAssetsError );										_loadingAssetViewClip.hideLoadingProgress();				}				*/											/** enableEnvironmentObjects			  *	---------------------------------------------------------------------------- */				protected function enableEnvironmentObjects():void				{					var i:int, j:int, k:int;					for( i=0; i<_gameboardReference.environmentDisplayObjects.length; ++i )					{						for( j=0; j<_gameboardReference.environmentDisplayObjects[i].length; ++j )						{							for( k=0; k<_gameboardReference.environmentDisplayObjects[i][j].length; ++k )							{								_gameboardReference.environmentDisplayObjects[i][j][k].editable = true;								_gameboardReference.environmentDisplayObjects[i][j][k].contentClip.mouseEnabled = true;								//_gameboardReference.environmentDisplayObjects[i][j][k].addEventListener( "onClick", handleEnvironmentDisplayObjectClicked, false, 0, true );							}						}					}				}								protected function disableEnvironmentObjects():void				{					var i:int, j:int, k:int;					for( i=0; i<_gameboardReference.environmentDisplayObjects.length; ++i )					{						for( j=0; j<_gameboardReference.environmentDisplayObjects[i].length; ++j )						{							for( k=0; k<_gameboardReference.environmentDisplayObjects[i][j].length; ++k )							{								_gameboardReference.environmentDisplayObjects[i][j][k].editable = false;								_gameboardReference.environmentDisplayObjects[i][j][k].contentClip.mouseEnabled = false;								//_gameboardReference.environmentDisplayObjects[i][j][k].removeEventListener( "onClick", handleEnvironmentDisplayObjectClicked );							}						}					}				}							/**	******************************************* *			  * Game Level Editor Events			  *	******************************************* */			 				/** handleEditModeClicked			  *	---------------------------------------------------------------------------- *			  *	Changes to edit mode so the GameLevel is editable.			  *	---------------------------------------------------------------------------- */				protected function handleEditModeClicked( event:Event ):void				{					ConsoleBroadcaster.broadcast( "GameLevelEditorMain", "handleEditModeClicked();" );										_gameboardController.pause();					_gameboardReference.pauseScreenViewClip.hide();					_gameboardController.kill();										resetBoard();										//trace( gameboardContainer_mc.getChildAt(0) );					_gameboardReference.inIsometricView = false;					_gameboardReference.tileOpacity = 1;					//_gameboardReference.backgroundContainer_mc.visible = false;					_gameboardReference.hideGameLevelBackground();					//_gameboardReference.villageObjectsDisplayLayer_mc.visible = false;					_gameboardReference.hideVillageTiles();										_editModeClip.setDeactive( true );					_playModeClip.setActive( true );										reset_mc.visible = true;					waveEditor_mc.visible = true;					save_mc.visible = true;					startMonsterPath_mc.visible = true;					endMonsterPath_mc.visible = true;					pathList_mc.visible = true;					environmentObjectList_mc.visible = true;										_controlsClip.contentClip.visible = false;										enableEnvironmentObjects();				}							/** handlePlayModeClicked			  *	---------------------------------------------------------------------------- *			  *	Changes to play mode in isometric view.			  *	---------------------------------------------------------------------------- */				protected function handlePlayModeClicked( event:Event ):void				{					/*					_gameboardReference.inIsometricView = true;					_gameboardReference.tileOpacity = .5;										_gameboardController.gameLevel = _gameLevel;					_gameboardController.loadGameLevelBitmapAssets();					*/										_waveEditorViewClip.hide();										_gameLevel.startingChicken = uint( _startingChickenClip.getValue() );					_gameLevel.slotWinningProbability = uint( _slotWinningProbabilityClip.getValue() );					_gameLevel.gateHealth = uint( _gateHealthClip.getValue() );					_gameLevel.chickenSpawnRateMin = uint( _chickenSpawnRateMinClip.getValue() );					_gameLevel.chickenSpawnRateMax = uint( _chickenSpawnRateMaxClip.getValue() );										_gameLevel.slotEnabled = _slotEnabledCheckBoxClip.checked;					_gameLevel.buyChickenEnabled = _buyChickenEnabledCheckBoxClip.checked;										_gameboardReference.resultScreenWinClip.randomizeVillagerCelebration();										var i:int, j:int, k:int;										var assets:Array = new Array();										for( i=0; i<GameLevelDataIndex.getInstance().weapons.length; ++i )					{						assets.push( {id:GameLevelDataIndex.getInstance().weapons[i].cacheIconId, url:GameLevelDataIndex.getInstance().weapons[i].iconURL} );						//MainGameController.getInstance().assetLoaderController.addBitmapToLoad( GameLevelDataIndex.getInstance().weapons[i].cacheIconId, GameLevelDataIndex.getInstance().weapons[i].iconURL );					}										for( i=0; i<GameLevelDataIndex.getInstance().gods.length; ++i )					{						assets.push( {id:GameLevelDataIndex.getInstance().gods[i].cacheIconId, url:GameLevelDataIndex.getInstance().gods[i].iconURL} );					}										assets = assets.concat( GameLevelUtil.getGameLevelAssets(_gameLevel) );										assets.push( {id:_gameboardReference.resultScreenWinClip.villagerCelebrationSfx.id, url:_gameboardReference.resultScreenWinClip.villagerCelebrationSfx.url} );										_loadingAssetViewClip.showLoadingProgress();										MainGameController.getInstance().assetLoaderController.addEventListener( AssetLoaderEvent.COMPLETE, handleLoadWeaponIconsComplete, false, 0, true );					MainGameController.getInstance().assetLoaderController.addEventListener( AssetLoaderEvent.ERROR, handleLoadWeaponIconsError, false, 0, true );					MainGameController.getInstance().assetLoaderController.loadAssets( assets );					//MainGameController.getInstance().assetLoaderController.startLoadAssets();										disableEnvironmentObjects();										for( i=0; i<_villagerDisplayObjects.length; ++i )					{						_villagerDisplayObjects[i].editable = false;						_villagerDisplayObjects[i].contentClip.visible = false;					}				}								protected function handleLoadWeaponIconsError( event:AssetLoaderEvent ):void				{					ConsoleBroadcaster.broadcast( "GameEditor", "handleLoadWeaponIconsError();" );										MainGameController.getInstance().assetLoaderController.removeEventListener( AssetLoaderEvent.COMPLETE, handleLoadWeaponIconsComplete );					MainGameController.getInstance().assetLoaderController.removeEventListener( AssetLoaderEvent.ERROR, handleLoadWeaponIconsError );				}								protected function handleLoadWeaponIconsComplete( event:AssetLoaderEvent ):void				{					ConsoleBroadcaster.broadcast( "GameEditor", "handleLoadWeaponIconsComplete();" );										MainGameController.getInstance().assetLoaderController.removeEventListener( AssetLoaderEvent.COMPLETE, handleLoadWeaponIconsComplete );					MainGameController.getInstance().assetLoaderController.removeEventListener( AssetLoaderEvent.ERROR, handleLoadWeaponIconsError );										_loadingAssetViewClip.hideLoadingProgress();										trace( "attackSlots: "+MainGameController.getInstance().currentUser.attackSlots );										//_weaponSelectionViewClip.initAvailableWeapons( GameLevelDataIndex.getInstance().weapons );					_weaponSelectionViewClip.gameLevel = _gameLevel;					_weaponSelectionViewClip.initAvailableItems( GameLevelDataIndex.getInstance().weapons, GameLevelDataIndex.getInstance().gods );					_weaponSelectionViewClip.initEnemies( _gameLevel.distinctEnemiesInLevel );					_weaponSelectionViewClip.initMonstersPaths();					_weaponSelectionViewClip.show();										MainGameController.getInstance().playGameLevelAfterLoading = false;					//MainGameController.getInstance().assetLoaderController.loadGameLevelAssets( _gameLevel );					MainGameController.getInstance().assetLoaderController.loadAssets( GameLevelUtil.getGameLevelAssets(_gameLevel) );				}							/** handleEnvironmentObjectClicked			  *	---------------------------------------------------------------------------- *			  *	This event is dispatched when the environment object list is clicked			  *	---------------------------------------------------------------------------- */				protected function handleEnvironmentObjectClicked( event:CustomEvent ):void				{					ConsoleBroadcaster.broadcast( "GameEditor", "handleEnvironmentObjectClicked("+event.customParameters.environmentObject.id+");" );										_addingNewEnvironmentObject = true;										_currentEnvironmentDisplayObject = new EnvironmentDisplayObject();					_currentEnvironmentDisplayObject.contentClip = new (getDefinitionByName(event.customParameters.environmentObject.name) as Class)();					_currentEnvironmentDisplayObject.init();					_currentEnvironmentDisplayObject.gameLevelEnvironmentObject = new GameLevelEnvironmentObject();					_currentEnvironmentDisplayObject.gameLevelEnvironmentObject.environmentObjectId = event.customParameters.environmentObject.id;					_currentEnvironmentDisplayObject.gameLevelEnvironmentObject.gameLevelId = _gameLevel.id;					_currentEnvironmentDisplayObject.contentClip.contextMenu = _environmentObjectContextMenu;										//var environmentDisplayObject:MovieClip = new (getDefinitionByName(event.customParameters.environmentObject.name) as Class)();					iconContainer_mc.addChild( _currentEnvironmentDisplayObject.contentClip );										var localPosition:Point = _contentClip.globalToLocal( new Point(_contentClip.stage.mouseX, _contentClip.stage.mouseY) );										mouseMarker_mc.x = localPosition.x;					mouseMarker_mc.y = localPosition.y;					mouseMarker_mc.visible = true;										//checkContainer_mc.visible = false;										iconContainer_mc.x = localPosition.x;					iconContainer_mc.y = localPosition.y;					iconContainer_mc.visible = true;										_contentClip.stage.addEventListener( MouseEvent.MOUSE_MOVE, handleEnvironmentObjectMouseMove, false, 0, true );					_contentClip.stage.addEventListener( MouseEvent.MOUSE_DOWN, handleEnvironmentObjectMouseDown, false, 0, true );					//_contentClip.stage.addEventListener( MouseEvent.MOUSE_UP, handleEnvironmentObjectMouseUp, false, 0, true );										//Mouse.hide();				}							/** handleEnvironmentObjectMouseMove			  *	---------------------------------------------------------------------------- */				protected function handleEnvironmentObjectMouseMove( event:MouseEvent ):void				{					var localPosition:Point = _contentClip.globalToLocal( new Point(event.stageX, event.stageY) );										mouseMarker_mc.x = localPosition.x;					mouseMarker_mc.y = localPosition.y;										//trace( "localPosition: "+localPosition );										var newTile:GameboardTile;					var i:uint, j:uint;					//var pathClip:MovieClip = _gameboardReference.inIsometricView ? _gameboardReference.tiles[i][j].currentTile										if( _editorType == EDITOR_TYPE_GAME_LEVEL )					{						for( i=0; i<_gameboardReference.tiles.length; ++i )						{							for( j=0; j<_gameboardReference.tiles[i].length; ++j )							{								if( !UtilFunctions.getCollisionRect(_gameboardReference.tiles[i][j].currentTile, mouseMarker_mc, _contentClip, true).isEmpty() )								{									newTile = _gameboardReference.tiles[i][j];									break;								}							}						}					}					else if( _editorType == EDITOR_TYPE_VILLAGE_LEVEL )					{						for( i=0; i<_gameboardReference.villageTiles.length; ++i )						{							for( j=0; j<_gameboardReference.tiles[i].length; ++j )							{								if( !UtilFunctions.getCollisionRect(_gameboardReference.villageTiles[i][j].currentTile, mouseMarker_mc, _contentClip, true).isEmpty() )								{									newTile = _gameboardReference.villageTiles[i][j];									break;								}							}						}					}					/*					if( newTile == null )					{						for( i=0; i<_gameboardReference.gateTiles.length; ++i )						{							if( !UtilFunctions.getCollisionRect(_gameboardReference.gateTiles[i].currentTile, mouseMarker_mc, this, true).isEmpty() )							{								newTile = _gameboardReference.gateTiles[i];								break;							}						}					}					*/					if( newTile != null )					{						//trace( "newTile: "+newTile );						//trace( "_newIconContainerTile: "+_newIconContainerTile );												var snapToTile:Boolean = true;						if( _editorType == EDITOR_TYPE_GAME_LEVEL )						{							snapToTile = _gameLevelSnapToTileCheckBoxClip.checked;						}						else if( _editorType == EDITOR_TYPE_VILLAGE_LEVEL )						{							snapToTile = _villageSnapToTileCheckBoxClip.checked;						}												if( snapToTile )						{							if( newTile != _newIconContainerTile )							{								//trace( "reposition? wtf" );								_newIconContainerTile = newTile;																var tilePosition:Point = UtilFunctions.localToLocal( _newIconContainerTile.isometricPath_mc.parent, _contentClip );																iconContainer_mc.x = tilePosition.x;								iconContainer_mc.y = tilePosition.y;							}						}						else						{							_newIconContainerTile = newTile;														iconContainer_mc.x = localPosition.x;							iconContainer_mc.y = localPosition.y;						}												iconContainer_mc.alpha = 1;					}					else					{						iconContainer_mc.x = localPosition.x;						iconContainer_mc.y = localPosition.y;						iconContainer_mc.alpha = .5;						_newIconContainerTile = null;					}				}				/*				protected function handleEnvironmentObjectMouseUp( event:MouseEvent ):void				{					trace( "handleEnvironmentObjectMouseUp();" );				}				*/							/** handleEnvironmentObjectMouseDown			  *	---------------------------------------------------------------------------- */				protected function handleEnvironmentObjectMouseDown( event:MouseEvent ):void				{					trace( "handleEnvironmentObjectMouseDown();" );										_contentClip.stage.removeEventListener( MouseEvent.MOUSE_MOVE, handleEnvironmentObjectMouseMove );					_contentClip.stage.removeEventListener( MouseEvent.MOUSE_DOWN, handleEnvironmentObjectMouseDown );					//_contentClip.stage.removeEventListener( MouseEvent.MOUSE_UP, handleEnvironmentObjectMouseUp );										iconContainer_mc.removeChildAt(0);					iconContainer_mc.visible = false;										if( _newIconContainerTile != null )					{						//Add it to game level						//var gameLevelEnvironmentObject:GameLevelEnvironmentObject = new GameLevelEnvironmentObject();							//gameLevelEnvironmentObject.environmentObjectId = _currentEnvironmentDisplayObject.environmentObjectId;												var localPosition:Point;												if( _editorType == EDITOR_TYPE_VILLAGE_LEVEL )							localPosition = UtilFunctions.localToLocal( iconContainer_mc, _gameboardReference.villageTilesContainer_mc );						else							localPosition = UtilFunctions.localToLocal( iconContainer_mc, _gameboardReference.tilesContainer_mc );												var tilePosition:Point = _newIconContainerTile.positionIn2D.clone();												if( _gameboardReference.inIsometricView )						{							localPosition = GameLevelUtil.getPositionIn2D( localPosition );						}												if( _addingNewEnvironmentObject )						{							_currentEnvironmentDisplayObject.gameLevelEnvironmentObject.positionX = localPosition.x - tilePosition.x;							_currentEnvironmentDisplayObject.gameLevelEnvironmentObject.positionY = localPosition.y - tilePosition.y;							_currentEnvironmentDisplayObject.gameLevelEnvironmentObject.row = _newIconContainerTile.row;							_currentEnvironmentDisplayObject.gameLevelEnvironmentObject.column = _newIconContainerTile.column;							//_currentEnvironmentDisplayObject.gameLevelEnvironmentObject.layer = _gameboardReference.environmentDisplayObjects[_newIconContainerTile.row][_newIconContainerTile.column].length;							_currentEnvironmentDisplayObject.positionIn2D = _newIconContainerTile.positionIn2D.clone().add( new Point(_currentEnvironmentDisplayObject.gameLevelEnvironmentObject.positionX, _currentEnvironmentDisplayObject.gameLevelEnvironmentObject.positionY) );							_currentEnvironmentDisplayObject.inIsometricView = _gameboardReference.inIsometricView;							_currentEnvironmentDisplayObject.render();														_currentEnvironmentDisplayObject.editable = true;							_currentEnvironmentDisplayObject.addEventListener( "onClick", handleEnvironmentDisplayObjectClicked, false, 0, true );														trace( "localPosition: "+localPosition );							trace( "tilePosition: "+tilePosition );							trace( "x offset: "+_currentEnvironmentDisplayObject.gameLevelEnvironmentObject.positionX );							trace( "y offset: "+_currentEnvironmentDisplayObject.gameLevelEnvironmentObject.positionY );						}						else if( _addingNewVillager )						{							_currentVillagerDisplayObject.gameLevelVillagerObject.positionX = localPosition.x - tilePosition.x;							_currentVillagerDisplayObject.gameLevelVillagerObject.positionY = localPosition.y - tilePosition.y;							_currentVillagerDisplayObject.gameLevelVillagerObject.row = _newIconContainerTile.row;							_currentVillagerDisplayObject.gameLevelVillagerObject.column = _newIconContainerTile.column;							_currentVillagerDisplayObject.positionIn2D = _newIconContainerTile.positionIn2D.clone().add( new Point(_currentVillagerDisplayObject.gameLevelVillagerObject.positionX, _currentVillagerDisplayObject.gameLevelVillagerObject.positionY) );							_currentVillagerDisplayObject.inIsometricView = _gameboardReference.inIsometricView;							_currentVillagerDisplayObject.render();														_currentVillagerDisplayObject.editable = true;							_currentVillagerDisplayObject.addEventListener( "onClick", handleVillagerDisplayObjectClicked, false, 0, true );														//_villagerDisplayObjects.push( _currentVillagerDisplayObject );						}												//_currentEnvironmentDisplayObject.environmentObject.row = _newIconContainerTile.row;						//_currentEnvironmentDisplayObject.environmentObject.column = _newIconContainerTile.column;						//_currentEnvironmentDisplayObject.gameLevelEnvironmentObject = gameLevelEnvironmentObject;						//_currentEnvironmentDisplayObject.row = _newIconContainerTile.row;						//_currentEnvironmentDisplayObject.column = _newIconContainerTile.column;						//_currentEnvironmentDisplayObject.offsetPosition = new Point(_currentEnvironmentDisplayObject.gameLevelEnvironmentObject.positionX, _currentEnvironmentDisplayObject.gameLevelEnvironmentObject.positionY);						//_currentEnvironmentDisplayObject.contentClip.buttonMode = true;						//_currentEnvironmentDisplayObject.contentClip.addEventListener( MouseEvent.CLICK, handleEnvironmentDisplayObjectClicked, false, 0, true );												//trace( "tile.row: "+_newIconContainerTile.row+", tile.column: "+_newIconContainerTile.column );						//trace( _currentEnvironmentDisplayObject.positionIn2D );						//trace( _currentEnvironmentDisplayObject.contentClip.x );						//trace( _currentEnvironmentDisplayObject.contentClip.y );												if( _editorType == EDITOR_TYPE_GAME_LEVEL )						{							_gameLevel.environmentObjects.push( _currentEnvironmentDisplayObject.gameLevelEnvironmentObject );							_gameboardReference.environmentDisplayObjects[_currentEnvironmentDisplayObject.gameLevelEnvironmentObject.row][_currentEnvironmentDisplayObject.gameLevelEnvironmentObject.column].push( _currentEnvironmentDisplayObject );							//_gameboardReference.environmentObjectsDisplayLayerClip.addChild( _currentEnvironmentDisplayObject.contentClip );							_gameboardReference.environmentObjectsDisplayLayerClip.addClipToLayerInFront( _currentEnvironmentDisplayObject.contentClip, _newIconContainerTile.layerNumber, GameLevelDisplayLayerItem.LAYER_BACKGROUND );						}						else if( _editorType == EDITOR_TYPE_VILLAGE_LEVEL )						{							if( _addingNewEnvironmentObject )							{								_gameLevel.villageObjects.push( _currentEnvironmentDisplayObject.gameLevelEnvironmentObject );								_gameboardReference.villageDisplayObjects[_currentEnvironmentDisplayObject.gameLevelEnvironmentObject.row][_currentEnvironmentDisplayObject.gameLevelEnvironmentObject.column].push( _currentEnvironmentDisplayObject );								//_gameboardReference.environmentObjectsDisplayLayerClip.addChild( _currentEnvironmentDisplayObject.contentClip );								_gameboardReference.displayLayerClip.addClipToLayerInFront( _currentEnvironmentDisplayObject.contentClip, _newIconContainerTile.layerNumber, GameLevelDisplayLayerItem.LAYER_BACKGROUND );							}							else if( _addingNewVillager )							{								_gameLevel.villagerObjects.push( _currentVillagerDisplayObject.gameLevelVillagerObject );								_gameboardReference.displayLayerClip.addClipToLayerInFront( _currentVillagerDisplayObject.contentClip, _newIconContainerTile.layerNumber, GameLevelDisplayLayerItem.LAYER_BACKGROUND );								_villagerDisplayObjects.push( _currentVillagerDisplayObject );								//_currentVillagerDisplayObject.showAnimation( Villager.VILLAGER_REGULAR_ANIMATION, false );							}						}												if( _addingNewEnvironmentObject )						{							_currentEnvironmentDisplayObject.gameLevelEnvironmentObject.layer = _currentEnvironmentDisplayObject.contentClip.parent.numChildren-1;							//updateLayer( _currentEnvironmentDisplayObject.contentClip.parent as MovieClip );														if( _gameLevel.id != 0 )							{								var save_gldc:GameLevelDataController = new GameLevelDataController();									save_gldc.addEventListener( "onComplete", handleSaveGameLevelEnvironmentObjectComplete );									save_gldc.addEventListener( "onError", handleSaveGameLevelEnvironmentObjectError );																	if( _editorType == EDITOR_TYPE_GAME_LEVEL )								{									save_gldc.saveGameLevelEnvironmentObject( _currentEnvironmentDisplayObject.gameLevelEnvironmentObject );								}								else if( _editorType == EDITOR_TYPE_VILLAGE_LEVEL )								{									save_gldc.saveGameLevelVillageObject( _currentEnvironmentDisplayObject.gameLevelEnvironmentObject );								}							}														_addingNewEnvironmentObject = false;						}						else if( _addingNewVillager )						{							_currentVillagerDisplayObject.gameLevelVillagerObject.layer = _currentVillagerDisplayObject.contentClip.parent.numChildren-1;														if( _gameLevel.id != 0 )							{								var save_gldc:GameLevelDataController = new GameLevelDataController();									save_gldc.addEventListener( "onComplete", handleSaveGameLevelVillagerObjectComplete );									save_gldc.addEventListener( "onError", handleSaveGameLevelVillagerObjectError );																save_gldc.saveGameLevelVillagerObject( _currentVillagerDisplayObject.gameLevelVillagerObject );							}														_addingNewVillager = false;						}												_newIconContainerTile = null;						//_currentEnvironmentDisplayObject = null;					}					else					{						if( _addingNewEnvironmentObject )						{							if( _currentEnvironmentDisplayObject.gameLevelEnvironmentObject.id != 0 )							{								//delete the item from database too								var gameLevelDataController:GameLevelDataController = new GameLevelDataController();																if( _editorType == EDITOR_TYPE_GAME_LEVEL )								{									gameLevelDataController.deleteGameLevelEnvironmentObject( _currentEnvironmentDisplayObject.gameLevelEnvironmentObject.id );								}								else if( _editorType == EDITOR_TYPE_VILLAGE_LEVEL )								{									gameLevelDataController.deleteGameLevelVillageObject( _currentEnvironmentDisplayObject.gameLevelEnvironmentObject.id );								}							}														_currentEnvironmentDisplayObject.kill();							_currentEnvironmentDisplayObject = null;														_addingNewEnvironmentObject = false;						}						else if( _addingNewVillager )						{							if( _currentVillagerDisplayObject.gameLevelVillagerObject.id != 0 )							{								var gameLevelDataController:GameLevelDataController = new GameLevelDataController();									gameLevelDataController.deleteGameLevelVillagerObject( _currentVillagerDisplayObject.gameLevelVillagerObject.id );							}														_currentVillagerDisplayObject.kill();							_currentVillagerDisplayObject = null;														_addingNewVillager = false;						}					}										//Mouse.show();				}							/** handleEnvironmentDisplayObjectClicked			  *	---------------------------------------------------------------------------- */				protected function handleEnvironmentDisplayObjectClicked( event:Event ):void				{					trace( "handleEnvironmentDisplayObjectClicked();" );										//_currentEnvironmentDisplayObject = _gameLevel										//event.currentTarget.editable = false;										_addingNewEnvironmentObject = true;										if( _currentEnvironmentDisplayObject != null )						_currentEnvironmentDisplayObject.contentClip.filters = [];										_currentEnvironmentDisplayObject = event.currentTarget as EnvironmentDisplayObject;										_currentEnvironmentDisplayObject.contentClip.filters = [ new GlowFilter(0xFFFFFF, 1, 10, 10, 3, 3) ];										if( _editorType == EDITOR_TYPE_GAME_LEVEL )					{						gameLevelMoveObject_mc.visible = true;						gameLevelSendToFront_mc.visible = true;						gameLevelSendToBack_mc.visible = true;					}					else if( _editorType == EDITOR_TYPE_VILLAGE_LEVEL )					{						villageMoveObject_mc.visible = true;						villageSendToFront_mc.visible = true;						villageSendToBack_mc.visible = true;					}					else if( _editorType == EDITOR_TYPE_CHALLENGE_LEVEL )					{											}					else if()					{											}				}							/** handleEnvironmentObjectAddListenerDelayTimerComplete			  *	---------------------------------------------------------------------------- */				protected function handleEnvironmentObjectAddListenerDelayTimerComplete( event:TimerEvent ):void				{					event.currentTarget.removeEventListener( TimerEvent.TIMER_COMPLETE, handleEnvironmentObjectAddListenerDelayTimerComplete );										_contentClip.stage.addEventListener( MouseEvent.MOUSE_MOVE, handleEnvironmentObjectMouseMove, false, 0, true );					_contentClip.stage.addEventListener( MouseEvent.MOUSE_DOWN, handleEnvironmentObjectMouseDown, false, 0, true );					//_contentClip.stage.addEventListener( MouseEvent.MOUSE_UP, handleEnvironmentObjectMouseUp, false, 0, true );				}							/** handleSaveGameLevelEnvironmentObjectComplete			  *	---------------------------------------------------------------------------- */				protected function handleSaveGameLevelEnvironmentObjectComplete( event:CustomEvent ):void				{					trace( "handleSaveGameLevelEnvironmentObjectComplete();" );										_currentEnvironmentDisplayObject.gameLevelEnvironmentObject.id = event.customParameters.id;				}								protected function handleSaveGameLevelEnvironmentObjectError( event:CustomEvent ):void				{					trace( "handleSaveGameLevelEnvironmentObjectError();" );				}							/** handleGameLevelMoveObjectClicked			  *	---------------------------------------------------------------------------- */				protected function handleGameLevelMoveObjectClicked( event:Event ):void				{					if( _addingNewEnvironmentObject )					{						_currentEnvironmentDisplayObject.contentClip.filters = [];						_currentEnvironmentDisplayObject.removeEventListener( "onClick", handleEnvironmentDisplayObjectClicked );						_currentEnvironmentDisplayObject.editable = false;												if( _editorType == EDITOR_TYPE_GAME_LEVEL )						{							gameLevelMoveObject_mc.visible = false;							gameLevelSendToFront_mc.visible = false;							gameLevelSendToBack_mc.visible = false;						}						else if( _editorType == EDITOR_TYPE_VILLAGE_LEVEL )						{							villageMoveObject_mc.visible = false;							villageSendToFront_mc.visible = false;							villageSendToBack_mc.visible = false;						}												trace( "_currentEnvironmentDisplayObject: "+_currentEnvironmentDisplayObject );						trace( "gameLevelEnvironmentObject id: "+_currentEnvironmentDisplayObject.gameLevelEnvironmentObject.id );												if( _editorType == EDITOR_TYPE_GAME_LEVEL )						{							VectorUtil.remove( _gameLevel.environmentObjects, _currentEnvironmentDisplayObject.gameLevelEnvironmentObject );							VectorUtil.remove( _gameboardReference.environmentDisplayObjects[_currentEnvironmentDisplayObject.gameLevelEnvironmentObject.row][_currentEnvironmentDisplayObject.gameLevelEnvironmentObject.column], _currentEnvironmentDisplayObject );						}						else if( _editorType == EDITOR_TYPE_VILLAGE_LEVEL )						{							VectorUtil.remove( _gameLevel.villageObjects, _currentEnvironmentDisplayObject.gameLevelEnvironmentObject );							VectorUtil.remove( _gameboardReference.villageDisplayObjects[_currentEnvironmentDisplayObject.gameLevelEnvironmentObject.row][_currentEnvironmentDisplayObject.gameLevelEnvironmentObject.column], _currentEnvironmentDisplayObject );						}												_currentEnvironmentDisplayObject.contentClip.parent.removeChild( _currentEnvironmentDisplayObject.contentClip );												_currentEnvironmentDisplayObject.contentClip.x = 0;						_currentEnvironmentDisplayObject.contentClip.y = 0;						iconContainer_mc.addChild( _currentEnvironmentDisplayObject.contentClip );					}					else if( _addingNewVillager )					{						_currentVillagerDisplayObject.contentClip.filters = [];						_currentVillagerDisplayObject.removeEventListener( "onClick", handleVillagerDisplayObjectClicked );						_currentVillagerDisplayObject.editable = false;												villageMoveObject_mc.visible = false;						villageSendToFront_mc.visible = false;						villageSendToBack_mc.visible = false;												VectorUtil.remove( _gameLevel.villagerObjects, _currentVillagerDisplayObject.gameLevelVillagerObject );						VectorUtil.remove( _villagerDisplayObjects, _currentVillagerDisplayObject );												_currentVillagerDisplayObject.contentClip.parent.removeChild( _currentVillagerDisplayObject.contentClip );						_currentVillagerDisplayObject.contentClip.x = 0;						_currentVillagerDisplayObject.contentClip.y = 0;												var bitmap:Bitmap = new Bitmap( BitmapDataManager.getInstance().getBitmapData( GameLevelDataIndex.getInstance().getVillager(_currentVillagerDisplayObject.gameLevelVillagerObject.villagerId).cacheIconId).bitmapData );							bitmap.x = -bitmap.width / 2;							bitmap.y = -bitmap.height / 2;						iconContainer_mc.addChild( bitmap );					}										var localPosition:Point = _contentClip.globalToLocal( new Point(_contentClip.stage.mouseX, _contentClip.stage.mouseY) );										mouseMarker_mc.x = localPosition.x;					mouseMarker_mc.y = localPosition.y;					mouseMarker_mc.visible = true;										iconContainer_mc.x = localPosition.x;					iconContainer_mc.y = localPosition.y;					iconContainer_mc.visible = true;										var timer:Timer = new Timer(100, 1);						timer.addEventListener( TimerEvent.TIMER_COMPLETE, handleEnvironmentObjectAddListenerDelayTimerComplete, false, 0, true );						timer.start();										//Mouse.hide();				}							/** handleGameLevelSendToFrontClicked			  *	---------------------------------------------------------------------------- */				protected function handleGameLevelSendToFrontClicked( event:Event ):void				{					_currentEnvironmentDisplayObject.contentClip.filters = [];					_currentEnvironmentDisplayObject.removeEventListener( "onClick", handleEnvironmentDisplayObjectClicked );					_currentEnvironmentDisplayObject.editable = false;										if( _editorType == EDITOR_TYPE_GAME_LEVEL )					{						gameLevelMoveObject_mc.visible = false;						gameLevelSendToFront_mc.visible = false;						gameLevelSendToBack_mc.visible = false;					}					else if( _editorType == EDITOR_TYPE_VILLAGE_LEVEL )					{						villageMoveObject_mc.visible = false;						villageSendToFront_mc.visible = false;						villageSendToBack_mc.visible = false;					}										trace( "number of env object in the same tile: "+_gameboardReference.environmentDisplayObjects[_currentEnvironmentDisplayObject.gameLevelEnvironmentObject.row][_currentEnvironmentDisplayObject.gameLevelEnvironmentObject.column].length );										//var save_gldc:GameLevelDataController = new GameLevelDataController();					//var envDisplayObjects:Vector.<EnvironmentDisplayObject>;					trace( "_currentEnvironmentDisplayObject.contentClip.parent: "+_currentEnvironmentDisplayObject.contentClip.parent.name );					trace( "_currentEnvironmentDisplayObject.contentClip.numChildren: "+_currentEnvironmentDisplayObject.contentClip.parent.numChildren );					_currentEnvironmentDisplayObject.contentClip.parent.setChildIndex( _currentEnvironmentDisplayObject.contentClip, _currentEnvironmentDisplayObject.contentClip.parent.numChildren-1 );										updateLayer( _currentEnvironmentDisplayObject.contentClip.parent as MovieClip );				}							/** handleGameLevelSendToBackClicked			  *	---------------------------------------------------------------------------- */				protected function handleGameLevelSendToBackClicked( event:Event ):void				{					_currentEnvironmentDisplayObject.contentClip.filters = [];					_currentEnvironmentDisplayObject.removeEventListener( "onClick", handleEnvironmentDisplayObjectClicked );					_currentEnvironmentDisplayObject.editable = false;										if( _editorType == EDITOR_TYPE_GAME_LEVEL )					{						gameLevelMoveObject_mc.visible = false;						gameLevelSendToFront_mc.visible = false;						gameLevelSendToBack_mc.visible = false;					}					else if( _editorType == EDITOR_TYPE_VILLAGE_LEVEL )					{						villageMoveObject_mc.visible = false;						villageSendToFront_mc.visible = false;						villageSendToBack_mc.visible = false;					}										trace( "number of env object in the same tile: "+_gameboardReference.environmentDisplayObjects[_currentEnvironmentDisplayObject.gameLevelEnvironmentObject.row][_currentEnvironmentDisplayObject.gameLevelEnvironmentObject.column].length );										//var save_gldc:GameLevelDataController = new GameLevelDataController();					//var envDisplayObjects:Vector.<EnvironmentDisplayObject>;					trace( "_currentEnvironmentDisplayObject.contentClip.parent: "+_currentEnvironmentDisplayObject.contentClip.parent.name );					trace( "_currentEnvironmentDisplayObject.contentClip.numChildren: "+_currentEnvironmentDisplayObject.contentClip.parent.numChildren );					_currentEnvironmentDisplayObject.contentClip.parent.setChildIndex( _currentEnvironmentDisplayObject.contentClip, 0 );										updateLayer( _currentEnvironmentDisplayObject.contentClip.parent as MovieClip );				}							/** updateLayer			  *	---------------------------------------------------------------------------- */				protected function updateLayer( container:MovieClip ):void				{					var save_gldc:GameLevelDataController = new GameLevelDataController();					//var envDisplayObjects:Vector.<EnvironmentDisplayObject>;					var i:int, j:int, k:int;										//envDisplayObjects = _gameboardReference.environmentDisplayObjects[row][column];										if( _editorType == EDITOR_TYPE_GAME_LEVEL )					{						for( i=0; i<_gameboardReference.environmentDisplayObjects.length; ++i )						{							for( j=0; j<_gameboardReference.environmentDisplayObjects[i].length; ++j )							{								for( k=0; k<_gameboardReference.environmentDisplayObjects[i][j].length; ++k )								{									if( _gameboardReference.environmentDisplayObjects[i][j][k].contentClip.parent == container )									{										_gameboardReference.environmentDisplayObjects[i][j][k].gameLevelEnvironmentObject.layer = _gameboardReference.environmentDisplayObjects[i][j][k].contentClip.parent.getChildIndex( _gameboardReference.environmentDisplayObjects[i][j][k].contentClip );										//trace( "environmentObjectId: "+_gameboardReference.environmentDisplayObjects[i][j][k].gameLevelEnvironmentObject.environmentObjectId );										//trace( "layer: "+_gameboardReference.environmentDisplayObjects[i][j][k].gameLevelEnvironmentObject.layer );																				save_gldc = new GameLevelDataController();										save_gldc.saveGameLevelEnvironmentObject( _gameboardReference.environmentDisplayObjects[i][j][k].gameLevelEnvironmentObject );									}								}							}						}					}					else if( _editorType == EDITOR_TYPE_VILLAGE_LEVEL )					{						for( i=0; i<_gameboardReference.villageDisplayObjects.length; ++i )						{							for( j=0; j<_gameboardReference.villageDisplayObjects[i].length; ++j )							{								for( k=0; k<_gameboardReference.villageDisplayObjects[i][j].length; ++k )								{									if( _gameboardReference.villageDisplayObjects[i][j][k].contentClip.parent == container )									{										_gameboardReference.villageDisplayObjects[i][j][k].gameLevelEnvironmentObject.layer = _gameboardReference.villageDisplayObjects[i][j][k].contentClip.parent.getChildIndex( _gameboardReference.villageDisplayObjects[i][j][k].contentClip );										//trace( "environmentObjectId: "+_gameboardReference.villageDisplayObjects[i][j][k].gameLevelEnvironmentObject.environmentObjectId );										//trace( "layer: "+_gameboardReference.villageDisplayObjects[i][j][k].gameLevelEnvironmentObject.layer );																				save_gldc = new GameLevelDataController();										save_gldc.saveGameLevelVillageObject( _gameboardReference.villageDisplayObjects[i][j][k].gameLevelEnvironmentObject );									}								}							}						}					}									}											/** handleVillagerObjectClicked			  *	---------------------------------------------------------------------------- */				protected function handleVillagerObjectClicked( event:CustomEvent ):void				{					trace( "handleVillagerObjectClicked();" );										_addingNewVillager = true;										//_currentVillager = event.customParameters.villager;					//_currentVillager = new GameLevelVillagerObject();					//_currentVillager.gameLevelId = _gameLevel.id;					//_currentVillager.villagerId = event.customParameters.villager.id;					//_currentVillagerDisplayObject										_currentVillagerDisplayObject = new VillagerDisplayObject();					_currentVillagerDisplayObject.contentClip = new (getDefinitionByName("VillagerDisplayObjectLibrary") as Class)();					_currentVillagerDisplayObject.init();					_currentVillagerDisplayObject.villager = event.customParameters.villager;					_currentVillagerDisplayObject.gameLevelVillagerObject = new GameLevelVillagerObject();					_currentVillagerDisplayObject.gameLevelVillagerObject.gameLevelId = _gameLevel.id;					_currentVillagerDisplayObject.gameLevelVillagerObject.villagerId = event.customParameters.villager.id;					//_currentVillagerDisplayObject.contentClip.contextMenu = _environmentObjectContextMenu;					//var environmentDisplayObject:MovieClip = new (getDefinitionByName(event.customParameters.environmentObject.name) as Class)();					//iconContainer_mc.addChild( _currentVillagerDisplayObject.contentClip );										var bitmap:Bitmap = new Bitmap(BitmapDataManager.getInstance().getBitmapData(event.customParameters.villager.cacheIconId).bitmapData);						bitmap.x = -bitmap.width / 2;						bitmap.y = -bitmap.height / 2;					iconContainer_mc.addChild( bitmap );										var localPosition:Point = _contentClip.globalToLocal( new Point(_contentClip.stage.mouseX, _contentClip.stage.mouseY) );										mouseMarker_mc.x = localPosition.x;					mouseMarker_mc.y = localPosition.y;					mouseMarker_mc.visible = true;										//checkContainer_mc.visible = false;										iconContainer_mc.x = localPosition.x;					iconContainer_mc.y = localPosition.y;					iconContainer_mc.visible = true;										_contentClip.stage.addEventListener( MouseEvent.MOUSE_MOVE, handleEnvironmentObjectMouseMove, false, 0, true );					_contentClip.stage.addEventListener( MouseEvent.MOUSE_DOWN, handleEnvironmentObjectMouseDown, false, 0, true );				}							/** handleVillagerDisplayObjectClicked			  *	---------------------------------------------------------------------------- */				protected function handleVillagerDisplayObjectClicked( event:Event ):void				{					trace( "handleVillagerDisplayObjectClicked();" );										//_currentEnvironmentDisplayObject = _gameLevel										//event.currentTarget.editable = false;										_addingNewVillager = true;										if( _currentVillagerDisplayObject != null )						_currentVillagerDisplayObject.contentClip.filters = [];										if( _currentEnvironmentDisplayObject != null )						_currentEnvironmentDisplayObject.contentClip.filters = [];										_currentVillagerDisplayObject = event.currentTarget as VillagerDisplayObject;										_currentVillagerDisplayObject.contentClip.filters = [ new GlowFilter(0xFFFFFF, 1, 10, 10, 3, 3) ];										villageMoveObject_mc.visible = true;					villageSendToFront_mc.visible = true;					villageSendToBack_mc.visible = true;				}								protected function handleSaveGameLevelVillagerObjectComplete( event:CustomEvent ):void				{					trace( "handleSaveGameLevelVillagerObjectComplete();" );										_currentVillagerDisplayObject.gameLevelVillagerObject.id = event.customParameters.id;										//_currentEnvironmentDisplayObject.gameLevelEnvironmentObject.id = event.customParameters.id;				}								protected function handleSaveGameLevelVillagerObjectError( event:CustomEvent ):void				{					trace( "handleSaveGameLevelVillagerObjectError();" );				}				/*				protected function handleSpawnPointSaveClicked( event:Event ):void				{									}				*/							/** handleAddSpawnPointClicked			  *	---------------------------------------------------------------------------- */				protected function handleAddSpawnPointClicked( event:Event ):void				{					_addSpawnPointClip.setDeactive( true );					_tileEditorType = TILE_EDITOR_TYPE_SPAWN_POINT;										//removeSpawnPoint_mc.setActive( true );					_resetSpawnPointClip.setActive( true );					_addChickenAreaClip.setActive( true );					//removeChickenArea_mc.setActive( true );					_resetChickenAreaClip.setActive( true );				}				/*				protected function handleRemoveSpawnPointClicked( event:Event ):void				{					removeSpawnPoint_mc.setDeactive( true );					_tileEditorType = TILE_EDITOR_TYPE_SPAWN_POINT;										_addSpawnPointClip.setActive( true );					_addChickenAreaClip.setActive( true );					removeChickenArea_mc.setActive( true );				}				*/							/** handleResetSpawnPointClicked			  *	---------------------------------------------------------------------------- */				protected function handleResetSpawnPointClicked( event:Event ):void				{					//_resetSpawnPointClip.setDeactive( true );										_addSpawnPointClip.setActive( true );					_addChickenAreaClip.setActive( true );										var i:int=0;										for( i=0; i<_gameLevel.spawnPoints[0].length; ++i )					{						_gameboardReference.diggingTiles1[_gameLevel.spawnPoints[0][i].r][_gameLevel.spawnPoints[0][i].c].tileType = GameboardTile.TILE_TYPE_PLACEABLE;					}					VectorUtil.removeAll( _gameLevel.spawnPoints[0] );										for( i=0; i<_gameLevel.spawnPoints[1].length; ++i )					{						_gameboardReference.diggingTiles2[_gameLevel.spawnPoints[1][i].r][_gameLevel.spawnPoints[1][i].c].tileType = GameboardTile.TILE_TYPE_PLACEABLE;					}					VectorUtil.removeAll( _gameLevel.spawnPoints[1] );										for( i=0; i<_gameLevel.spawnPoints[2].length; ++i )					{						_gameboardReference.diggingTiles3[_gameLevel.spawnPoints[2][i].r][_gameLevel.spawnPoints[2][i].c].tileType = GameboardTile.TILE_TYPE_PLACEABLE;					}					VectorUtil.removeAll( _gameLevel.spawnPoints[2] );				}							/** handleAddChickenAreaClicked			  *	---------------------------------------------------------------------------- */				protected function handleAddChickenAreaClicked( event:Event ):void				{					_addChickenAreaClip.setDeactive( true );					_tileEditorType = TILE_EDITOR_TYPE_CHICKEN_AREA;										_addSpawnPointClip.setActive( true );					_resetSpawnPointClip.setActive( true );					_resetChickenAreaClip.setActive( true );					//removeSpawnPoint_mc.setActive( true );					//removeChickenArea_mc.setActive( true );				}				/*				protected function handleRemoveChickenAreaClicked( event:Event ):void				{					removeChickenArea_mc.setDeactive( true );					_tileEditorType = TILE_EDITOR_TYPE_CHICKEN_AREA;										_addSpawnPointClip.setActive( true );					removeSpawnPoint_mc.setActive( true );					_addChickenAreaClip.setActive( true );				}				*/							/** handleResetChickenAreaClicked			  *	---------------------------------------------------------------------------- */				protected function handleResetChickenAreaClicked( event:Event ):void				{					//_resetChickenAreaClip.setDeactive( true );										_addSpawnPointClip.setActive( true );					_addChickenAreaClip.setActive( true );										var i:int;					for( i=0; i<_gameLevel.chickenMovementAreaDatas[0].tiles.length; ++i )					{						_gameboardReference.diggingTiles1[_gameLevel.chickenMovementAreaDatas[0].tiles[i].r][_gameLevel.chickenMovementAreaDatas[0].tiles[i].c].tileType = GameboardTile.TILE_TYPE_PLACEABLE;					}					ArrayUtil.removeAll( _gameLevel.chickenMovementAreaDatas[0].tiles );					_gameLevel.chickenMovementAreaDatas[0].calculateBounds();										for( i=0; i<_gameLevel.chickenMovementAreaDatas[1].tiles.length; ++i )					{						_gameboardReference.diggingTiles2[_gameLevel.chickenMovementAreaDatas[1].tiles[i].r][_gameLevel.chickenMovementAreaDatas[1].tiles[i].c].tileType = GameboardTile.TILE_TYPE_PLACEABLE;					}					ArrayUtil.removeAll( _gameLevel.chickenMovementAreaDatas[1].tiles );					_gameLevel.chickenMovementAreaDatas[1].calculateBounds();										for( i=0; i<_gameLevel.chickenMovementAreaDatas[2].tiles.length; ++i )					{						_gameboardReference.diggingTiles3[_gameLevel.chickenMovementAreaDatas[2].tiles[i].r][_gameLevel.chickenMovementAreaDatas[2].tiles[i].c].tileType = GameboardTile.TILE_TYPE_PLACEABLE;					}					ArrayUtil.removeAll( _gameLevel.chickenMovementAreaDatas[2].tiles );					_gameLevel.chickenMovementAreaDatas[2].calculateBounds();				}							/** handleSwitchTo2DClicked			  *	---------------------------------------------------------------------------- *			  *	Switches the gameboard view to 2D.			  *	---------------------------------------------------------------------------- */				protected function handleSwitchTo2DClicked( event:Event ):void				{					_gameboardReference.inIsometricView = false;										_switchTo2DClip.setDeactive( true );					_switchToIsometricClip.setActive( true );										if( _editorType == EDITOR_TYPE_VILLAGE_LEVEL )					{						gameboardContainer_mc.x = _gameboardContainerPositionIn2D.x;						gameboardContainer_mc.y = _gameboardContainerPositionIn2D.y+360;					}					else if( _editorType == EDITOR_TYPE_SPAWN_POINT )					{						gameboardContainer_mc.x = _gameboardContainerPositionIn2D.x+300;						gameboardContainer_mc.y = _gameboardContainerPositionIn2D.y;					}					else					{						gameboardContainer_mc.x = _gameboardContainerPositionIn2D.x;						gameboardContainer_mc.y = _gameboardContainerPositionIn2D.y;					}										for( var i:int=0; i<_villagerDisplayObjects.length; ++i )					{						_villagerDisplayObjects[i].inIsometricView = false;						_villagerDisplayObjects[i].render();					}									}							/** handleSwitchToIsometricClicked			  *	---------------------------------------------------------------------------- *			  *	Switches the gameboard view to isometric.			  *	---------------------------------------------------------------------------- */				protected function handleSwitchToIsometricClicked( event:Event ):void				{					_gameboardReference.inIsometricView = true;										_switchTo2DClip.setActive( true );					_switchToIsometricClip.setDeactive( true );										if( _editorType == EDITOR_TYPE_VILLAGE_LEVEL )					{						gameboardContainer_mc.x = _gameboardContainerPositionInIsometric.x+300;						gameboardContainer_mc.y = _gameboardContainerPositionInIsometric.y;					}					else if( _editorType == EDITOR_TYPE_SPAWN_POINT )					{						gameboardContainer_mc.x = _gameboardContainerPositionInIsometric.x+300;						gameboardContainer_mc.y = _gameboardContainerPositionInIsometric.y;					}					else					{						gameboardContainer_mc.x = _gameboardContainerPositionInIsometric.x;						gameboardContainer_mc.y = _gameboardContainerPositionInIsometric.y;					}										for( var i:int=0; i<_villagerDisplayObjects.length; ++i )					{						_villagerDisplayObjects[i].inIsometricView = true;						_villagerDisplayObjects[i].render();					}									}							/** handleToggleBackgroundClicked			  *	---------------------------------------------------------------------------- */				protected function handleToggleBackgroundClicked( event:Event ):void				{					//_gameboardReference.backgroundContainer_mc.visible = _toggleBackgroundClip.checked ;					if( _toggleBackgroundClip.checked )					{						_gameboardReference.showGameLevelBackground();					}					else					{						_gameboardReference.hideGameLevelBackground();					}				}							/** handleResetClicked			  *	---------------------------------------------------------------------------- *			  *	Resets the current GameLevel object.			  *	---------------------------------------------------------------------------- */				protected function handleResetClicked( event:Event ):void				{					//this._gameboardController.gameLevel = new GameLevel();										resetBoard();										_levelNameClip.setValue( '' );					_createdByClip.setValue( '' );										_startingChickenClip.setValue( "30" );					_chickenSpawnRateMinClip.setValue( "1" );					_chickenSpawnRateMaxClip.setValue( "1" );					_gateHealthClip.setValue( "100" );					_slotWinningProbabilityClip.setValue( "60" );					_slotEnabledCheckBoxClip.checked = true;					_buyChickenEnabledCheckBoxClip.checked = true;										//_gameLevel = new GameLevel();					/*					villageEditor_mc.visible = false;					diggingEditor_mc.visible = false;					spawnPointEditor_mc.visible = false;					*/					_waveEditorViewClip.reset();					_pathListClip.reset();										var delete_gldc:GameLevelDataController;					var i:int, j:int, k:int;					for( i=0; i<_gameboardReference.environmentDisplayObjects.length; ++i )					{						for( j=0; j<_gameboardReference.environmentDisplayObjects[i].length; ++j )						{							for( k=0; k<_gameboardReference.environmentDisplayObjects[i][j].length; ++k )							{								_gameboardReference.environmentDisplayObjects[i][j][k].editable = false;								_gameboardReference.environmentDisplayObjects[i][j][k].removeEventListener( "onClick", handleEnvironmentDisplayObjectClicked );																delete_gldc = new GameLevelDataController();								delete_gldc.deleteGameLevelEnvironmentObject( _gameboardReference.environmentDisplayObjects[i][j][k].gameLevelEnvironmentObject.id );							}						}					}					_gameboardReference.removeEnvironmentObjects();										VectorUtil.removeAll( _gameLevel.environmentObjects );				}							/** handleSaveClicked			  *	---------------------------------------------------------------------------- *			  *	Saves the game level data.			  *	---------------------------------------------------------------------------- */				protected function handleSaveClicked( event:Event ):void				{					trace( "handleSaveClicked();" );										_gameLevel.name = _levelNameClip.getValue();					_gameLevel.createdBy = _createdByClip.getValue();					_gameLevel.startingChicken = uint( _startingChickenClip.getValue() );					_gameLevel.chickenSpawnRateMin = uint( _chickenSpawnRateMinClip.getValue() );					_gameLevel.chickenSpawnRateMax = uint( _chickenSpawnRateMaxClip.getValue() );					_gameLevel.gateHealth = uint( _gateHealthClip.getValue() );					_gameLevel.slotWinningProbability = uint( _slotWinningProbabilityClip.getValue() );					_gameLevel.slotEnabled = _slotEnabledCheckBoxClip.checked;					_gameLevel.buyChickenEnabled = _buyChickenEnabledCheckBoxClip.checked;										_gameLevel.waveZones = _waveEditorViewClip.waveZones;										trace( "paths: "+new JSONEncoder(_gameLevel.paths).getString() );					//trace( "waveZones: "+new JSONEncoder(_gameLevel.waveZones).getString() );										trace( "game level serialized data: "+_gameLevel.serialize() );										_loadingAssetViewClip.contentClip.visible = true;										var gameLevelDataController:GameLevelDataController = new GameLevelDataController();						gameLevelDataController.addEventListener( "onComplete", handleSaveGameLevelComplete );						gameLevelDataController.addEventListener( "onError", handleSaveGameLevelError );						gameLevelDataController.saveGameLevel( _gameLevel );				}							/** handleWaveEditorClicked			  *	---------------------------------------------------------------------------- *			  *	Pops up the wave editor view to edit monsters.			  *	---------------------------------------------------------------------------- */				protected function handleWaveEditorClicked( event:Event ):void				{					//TODO:					//	Show the monster wave editor					_waveEditorViewClip.contentClip.visible = true;				}							/** handleStartMonsterPathClicked			  *	---------------------------------------------------------------------------- *			  *	Starts logging gameboard tile users click so we can check if it's a 			  *	valid path in the gameboard or not.			  *	---------------------------------------------------------------------------- */				protected function handleStartMonsterPathClicked( event:Event ):void				{					_tileEditorType = TILE_EDITOR_TYPE_PATH;										_startMonsterPathClip.setDeactive( true );										_currentMonsterPath = new Vector.<GameboardTile>;										disableEnvironmentObjects();				}							/** handleEndMonsterPathClicked			  *	---------------------------------------------------------------------------- *			  *	Ends logging gameboard tiles and check if it's a valid path or not.			  *	---------------------------------------------------------------------------- */				protected function handleEndMonsterPathClicked( event:Event ):void				{					_startMonsterPathClip.setActive( true );										var validPath:Array = checkIfPathIsValid();					if( validPath != null )					{						_gameLevel.paths.push( GameLevel.formatPath(validPath) );												_pathListClip.addPath( _gameLevel.paths.length-1 );					}										resetBoard();										_tileEditorType = -1;										enableEnvironmentObjects();				}							/** handleGameTileClicked			  *	---------------------------------------------------------------------------- *			  *	When designers click on gameboard tiles 			  *	---------------------------------------------------------------------------- */				protected function handleGameTileClicked( event:CustomEvent ):void				{					//trace( "_tileEditorType: "+_tileEditorType );										if( _tileEditorType == TILE_EDITOR_TYPE_PATH )					{						//trace( event.customParameters.tile.editable );												if( event.customParameters.tile.tileType == GameboardTile.TILE_TYPE_PLACEABLE )						{							event.customParameters.tile.tileType = GameboardTile.TILE_TYPE_PATH;							//event.customParameters.tile.showTileClip( GameboardTile.TILE_TYPE_PATH_INDEX );							_currentMonsterPath.push( event.customParameters.tile );						}						else if( event.customParameters.tile.tileType == GameboardTile.TILE_TYPE_PATH )						{							event.customParameters.tile.tileType = GameboardTile.TILE_TYPE_PLACEABLE;							VectorUtil.remove( _currentMonsterPath, event.customParameters.tile );						}												//trace( _currentMonsterPath );					}				}							/** hightlightCurrentPath			  *	---------------------------------------------------------------------------- *			  *	Highlights current path on the board by showing the path tiles ( red ).			  *	---------------------------------------------------------------------------- */				protected function highlightCurrentPath():void				{					if( _currentMonsterPath != null )					{						for( var i:int=0; i<_currentMonsterPath.length; ++i )						{							_currentMonsterPath[i].tileType = GameboardTile.TILE_TYPE_PATH;						}					}				}							/** removeHighlightOnPaths			  *	---------------------------------------------------------------------------- *			  *	Turns all the tiles to the placeable type ( grey color ).			  *	---------------------------------------------------------------------------- */				protected function removeHighlightOnPaths():void				{					var i:int, j:int;										for( i=0; i<_gameboardReference.tiles.length; ++i )					{						for( j=0; j<_gameboardReference.tiles[i].length; ++j )						{							_gameboardReference.tiles[i][j].tileType = GameboardTile.TILE_TYPE_PLACEABLE;						}					}				}							/** handlePathRolledOver			  *	---------------------------------------------------------------------------- */				protected function handlePathRolledOver( event:CustomEvent ):void				{					for( var i:int=0; i<_gameLevel.paths[event.customParameters.id].length; ++i )					{						_gameboardReference.tiles[_gameLevel.paths[event.customParameters.id][i].r][_gameLevel.paths[event.customParameters.id][i].c].tileType = GameboardTile.TILE_TYPE_PATH;					}				}							/** handlePathRolledOut			  *	---------------------------------------------------------------------------- *			  *	Removes the currently highlighted path and shows the current path if there			  *	is one.			  *	---------------------------------------------------------------------------- */				protected function handlePathRolledOut( event:CustomEvent ):void				{					removeHighlightOnPaths();										highlightCurrentPath();				}							/** handlePathDeleted			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function handlePathDeleted( event:CustomEvent ):void				{					ConsoleBroadcaster.broadcast( "GameEditor", "handlePathDeleted("+event.customParameters.id+");" );										ArrayUtil.remove( _gameLevel.paths, _gameLevel.paths[event.customParameters.id] );					_gameLevel.findSpawnPaths();										//trace( _gameLevel.paths );					//trace( _gameLevel.paths.length );										removeHighlightOnPaths();										highlightCurrentPath();				}							/** handleAllPathsDeleted			  *	---------------------------------------------------------------------------- *			  *	Delete all paths			  *	---------------------------------------------------------------------------- */				protected function handleAllPathsDeleted( event:CustomEvent ):void				{					ConsoleBroadcaster.broadcast( "GameEditor", "handleAllPathsDeleted();" );										ArrayUtil.removeAll( _gameLevel.paths );										removeHighlightOnPaths();										if( _currentMonsterPath != null )						VectorUtil.removeAll( _currentMonsterPath );										_currentMonsterPath = null;				}							/** handleWaveZonesSaved			  *	---------------------------------------------------------------------------- *			  *	Saves the wave zones to _gameLevel object			  *	---------------------------------------------------------------------------- */				protected function handleWaveZonesSaved( event:CustomEvent ):void				{					_gameLevel.waveZones = event.currentTarget.waveZones;				}											/**	******************************************* *			  * Digging Level Editor Events			  *	******************************************* */			 				/** handleDiggingTileArea1Clicked			  *	---------------------------------------------------------------------------- */				protected function handleDiggingTileArea1Clicked( event:CustomEvent ):void				{					var i:int;					if( _tileEditorType == TILE_EDITOR_TYPE_DIG_SPOT )					{						if( event.customParameters.tile.tileType == GameboardTile.TILE_TYPE_PLACEABLE )						{							event.customParameters.tile.tileType = GameboardTile.TILE_TYPE_DIG_SPOT;							_diggingSpots.spots[0].push( {r:event.customParameters.tile.row, c:event.customParameters.tile.column} );						}						else if( event.customParameters.tile.tileType == GameboardTile.TILE_TYPE_DIG_SPOT )						{							event.customParameters.tile.tileType = GameboardTile.TILE_TYPE_PLACEABLE;							//VectorUtil.remove( _diggingSpots.spots[0], event.customParameters.tile );							for( i=0; i<_diggingSpots.spots[0].length; ++i )							{								if( _diggingSpots.spots[0][i].r == event.customParameters.tile.row && _diggingSpots.spots[0][i].c == event.customParameters.tile.column )								{									_diggingSpots.spots[0].splice( i, 1 );									break;								}							}						}					}					else if( _tileEditorType == TILE_EDITOR_TYPE_SPAWN_POINT )					{						if( event.customParameters.tile.tileType == GameboardTile.TILE_TYPE_PLACEABLE )						{							event.customParameters.tile.tileType = GameboardTile.TILE_TYPE_SPAWN_POINT;							_gameLevel.spawnPoints[0].push( {r:event.customParameters.tile.row, c:event.customParameters.tile.column} );						}						else if( event.customParameters.tile.tileType == GameboardTile.TILE_TYPE_SPAWN_POINT )						{							for( i=0; i<_gameLevel.spawnPoints[0].length; ++i )							{								if( _gameLevel.spawnPoints[0][i].r == event.customParameters.tile.row && _gameLevel.spawnPoints[0][i].c == event.customParameters.tile.column )								{									event.customParameters.tile.tileType = GameboardTile.TILE_TYPE_PLACEABLE;									_gameLevel.spawnPoints[0].splice( i, 1 );									break;								}							}						}												_gameLevel.findSpawnPaths();					}					else if( _tileEditorType == TILE_EDITOR_TYPE_CHICKEN_AREA )					{						if( event.customParameters.tile.tileType == GameboardTile.TILE_TYPE_PLACEABLE )						{							event.customParameters.tile.tileType = GameboardTile.TILE_TYPE_CHICKEN_AREA;							//_gameLevel.chickenMovementAreaDatas[0].addTile( event.customParameters.tile.row, event.customParameters.tile.column );							_gameLevel.chickenMovementAreaDatas[0].tiles.push( {r:event.customParameters.tile.row, c:event.customParameters.tile.column} );						}						else if( event.customParameters.tile.tileType == GameboardTile.TILE_TYPE_CHICKEN_AREA )						{							for( i=0; i<_gameLevel.chickenMovementAreaDatas[0].tiles.length; ++i )							{								if( _gameLevel.chickenMovementAreaDatas[0].tiles[i].r == event.customParameters.tile.row && _gameLevel.chickenMovementAreaDatas[0].tiles[i].c == event.customParameters.tile.column )								{									event.customParameters.tile.tileType = GameboardTile.TILE_TYPE_PLACEABLE;									_gameLevel.chickenMovementAreaDatas[0].tiles.splice( i, 1 );									break;								}							}						}												_gameLevel.chickenMovementAreaDatas[0].calculateBounds();					}				}							/** handleDiggingTileArea2Clicked			  *	---------------------------------------------------------------------------- */				protected function handleDiggingTileArea2Clicked( event:CustomEvent ):void				{					if( _tileEditorType == TILE_EDITOR_TYPE_DIG_SPOT )					{						if( event.customParameters.tile.tileType == GameboardTile.TILE_TYPE_PLACEABLE )						{							event.customParameters.tile.tileType = GameboardTile.TILE_TYPE_DIG_SPOT;							_diggingSpots.spots[1].push( {r:event.customParameters.tile.row, c:event.customParameters.tile.column} );						}						else if( event.customParameters.tile.tileType == GameboardTile.TILE_TYPE_DIG_SPOT )						{							event.customParameters.tile.tileType = GameboardTile.TILE_TYPE_PLACEABLE;							//VectorUtil.remove( _diggingSpots.spots[1], event.customParameters.tile );							for( var i:int=0; i<_diggingSpots.spots[1].length; ++i )							{								if( _diggingSpots.spots[1][i].r == event.customParameters.tile.row && _diggingSpots.spots[1][i].c == event.customParameters.tile.column )								{									_diggingSpots.spots[1].splice( i, 1 );									break;								}							}						}					}					else if( _tileEditorType == TILE_EDITOR_TYPE_SPAWN_POINT )					{						if( event.customParameters.tile.tileType == GameboardTile.TILE_TYPE_PLACEABLE )						{							event.customParameters.tile.tileType = GameboardTile.TILE_TYPE_SPAWN_POINT;							_gameLevel.spawnPoints[1].push( {r:event.customParameters.tile.row, c:event.customParameters.tile.column} );						}						else if( event.customParameters.tile.tileType == GameboardTile.TILE_TYPE_SPAWN_POINT )						{							for( i=0; i<_gameLevel.spawnPoints[1].length; ++i )							{								if( _gameLevel.spawnPoints[1][i].r == event.customParameters.tile.row && _gameLevel.spawnPoints[1][i].c == event.customParameters.tile.column )								{									event.customParameters.tile.tileType = GameboardTile.TILE_TYPE_PLACEABLE;									_gameLevel.spawnPoints[1].splice( i, 1 );									break;								}							}						}												_gameLevel.findSpawnPaths();					}					else if( _tileEditorType == TILE_EDITOR_TYPE_CHICKEN_AREA )					{						if( event.customParameters.tile.tileType == GameboardTile.TILE_TYPE_PLACEABLE )						{							event.customParameters.tile.tileType = GameboardTile.TILE_TYPE_CHICKEN_AREA;							//_gameLevel.chickenMovementAreaDatas[0].addTile( event.customParameters.tile.row, event.customParameters.tile.column );							_gameLevel.chickenMovementAreaDatas[1].tiles.push( {r:event.customParameters.tile.row, c:event.customParameters.tile.column} );						}						else if( event.customParameters.tile.tileType == GameboardTile.TILE_TYPE_CHICKEN_AREA )						{							for( i=0; i<_gameLevel.chickenMovementAreaDatas[1].tiles.length; ++i )							{								if( _gameLevel.chickenMovementAreaDatas[1].tiles[i].r == event.customParameters.tile.row && _gameLevel.chickenMovementAreaDatas[1].tiles[i].c == event.customParameters.tile.column )								{									event.customParameters.tile.tileType = GameboardTile.TILE_TYPE_PLACEABLE;									_gameLevel.chickenMovementAreaDatas[1].tiles.splice( i, 1 );									break;								}							}						}												_gameLevel.chickenMovementAreaDatas[1].calculateBounds();					}				}							/** handleDiggingTileArea3Clicked			  *	---------------------------------------------------------------------------- */				protected function handleDiggingTileArea3Clicked( event:CustomEvent ):void				{					if( _tileEditorType == TILE_EDITOR_TYPE_DIG_SPOT )					{						if( event.customParameters.tile.tileType == GameboardTile.TILE_TYPE_PLACEABLE )						{							event.customParameters.tile.tileType = GameboardTile.TILE_TYPE_DIG_SPOT;							_diggingSpots.spots[2].push( {r:event.customParameters.tile.row, c:event.customParameters.tile.column} );						}						else if( event.customParameters.tile.tileType == GameboardTile.TILE_TYPE_DIG_SPOT )						{							event.customParameters.tile.tileType = GameboardTile.TILE_TYPE_PLACEABLE;							//VectorUtil.remove( _diggingSpots.spots[2], event.customParameters.tile );							for( var i:int=0; i<_diggingSpots.spots[2].length; ++i )							{								if( _diggingSpots.spots[2][i].r == event.customParameters.tile.row && _diggingSpots.spots[2][i].c == event.customParameters.tile.column )								{									_diggingSpots.spots[2].splice( i, 1 );									break;								}							}						}					}					else if( _tileEditorType == TILE_EDITOR_TYPE_SPAWN_POINT )					{						if( event.customParameters.tile.tileType == GameboardTile.TILE_TYPE_PLACEABLE )						{							event.customParameters.tile.tileType = GameboardTile.TILE_TYPE_SPAWN_POINT;							_gameLevel.spawnPoints[2].push( {r:event.customParameters.tile.row, c:event.customParameters.tile.column} );						}						else if( event.customParameters.tile.tileType == GameboardTile.TILE_TYPE_SPAWN_POINT )						{							for( i=0; i<_gameLevel.spawnPoints[2].length; ++i )							{								if( _gameLevel.spawnPoints[2][i].r == event.customParameters.tile.row && _gameLevel.spawnPoints[2][i].c == event.customParameters.tile.column )								{									event.customParameters.tile.tileType = GameboardTile.TILE_TYPE_PLACEABLE;									_gameLevel.spawnPoints[2].splice( i, 1 );									break;								}							}						}												_gameLevel.findSpawnPaths();					}					else if( _tileEditorType == TILE_EDITOR_TYPE_CHICKEN_AREA )					{						if( event.customParameters.tile.tileType == GameboardTile.TILE_TYPE_PLACEABLE )						{							event.customParameters.tile.tileType = GameboardTile.TILE_TYPE_CHICKEN_AREA;							//_gameLevel.chickenMovementAreaDatas[0].addTile( event.customParameters.tile.row, event.customParameters.tile.column );							_gameLevel.chickenMovementAreaDatas[2].tiles.push( {r:event.customParameters.tile.row, c:event.customParameters.tile.column} );						}						else if( event.customParameters.tile.tileType == GameboardTile.TILE_TYPE_CHICKEN_AREA )						{							for( i=0; i<_gameLevel.chickenMovementAreaDatas[2].tiles.length; ++i )							{								if( _gameLevel.chickenMovementAreaDatas[2].tiles[i].r == event.customParameters.tile.row && _gameLevel.chickenMovementAreaDatas[2].tiles[i].c == event.customParameters.tile.column )								{									event.customParameters.tile.tileType = GameboardTile.TILE_TYPE_PLACEABLE;									_gameLevel.chickenMovementAreaDatas[2].tiles.splice( i, 1 );									break;								}							}						}												_gameLevel.chickenMovementAreaDatas[2].calculateBounds();					}				}							/** handleAddDigSpotTilesClicked			  *	---------------------------------------------------------------------------- *			  *	Enables users to be able to edit the digging spot tiles in the game			  *	---------------------------------------------------------------------------- */				protected function handleAddDigSpotTilesClicked( event:Event=null ):void				{					_tileEditorType = TILE_EDITOR_TYPE_DIG_SPOT;										_addDigSpotTilesClip.setDeactive(true);				}								protected function handleEndDigSpotTilesClicked( event:Event ):void				{					_addDigSpotTilesClip.setActive(true);										_tileEditorType = -1;				}							/** handleDigSaveClicked			  *	---------------------------------------------------------------------------- *			  *	Saves the dig data to database			  *	---------------------------------------------------------------------------- */				protected function handleDigSaveClicked( event:Event ):void				{					if( _diggingSpots.totalDiggingSpots == (_diggingSpots.treasureIds.length+_diggingSpots.weaponIds.length+_diggingSpots.godIds.length) )					{						//trace( "_diggingSpots.serialize : "+_diggingSpots.serialize() );												_diggingSpots.generateDiggingMap();												var treasureDataController:TreasureDataController = new TreasureDataController();							treasureDataController.addEventListener( "onComplete", handleSaveDiggingComplete );							treasureDataController.addEventListener( "onError", handleSaveDiggingError );							treasureDataController.saveDiggingSpots( _diggingSpots, _gameLevel.id );					}					else					{						error_mc.label_txt.text = "Error in saving data\n"													+"You have "+_diggingSpots.totalDiggingSpots+" digging spots\n"													+"and you have "+_diggingSpots.treasures.length+" treasures,\n"													+_diggingSpots.weapons.length+" weapons,\n"													+_diggingSpots.gods.length+" gods\n";						error_mc.visible = true;					}				}								protected function handleDigResetClicked( event:Event ):void				{					resetBoard();										_diggingSpots = null;					_diggingSpots = new DiggingSpots();				}							/** handleAvailableTreasureClicked			  *	---------------------------------------------------------------------------- *			  *	User selects an available item from the treasure list. It can be a Treasure,			  *	a Weapon or a God.			  *	---------------------------------------------------------------------------- */				protected function handleAvailableTreasureClicked( event:CustomEvent ):void				{					if( event.customParameters.type == 'TREASURE' )					{						_treasureScrollerClip.addTreasure( event.customParameters.treasure );						_diggingSpots.treasures.push( event.customParameters.treasure );					}					else if( event.customParameters.type == 'WEAPON' )					{						_treasureScrollerClip.addWeapon( event.customParameters.weapon );						_diggingSpots.weapons.push( event.customParameters.weapon );					}					else if( event.customParameters.type == 'GOD' )					{						_treasureScrollerClip.addGod( event.customParameters.god );						_diggingSpots.gods.push( event.customParameters.god );					}									}							/** handleTreasureDeleted			  *	---------------------------------------------------------------------------- *			  *	User deletes a selected treasure from the list. Removes the matching item,			  *	which can be a Treasure, a Weapon or a God, from the DiggingSpots object.			  *	---------------------------------------------------------------------------- */				protected function handleTreasureDeleted( event:CustomEvent ):void				{					//var treasure:Treasure = MainGameDataIndex.getInstance().getTreasure( event.customParameters.treasure );										trace( 'handleTreasureDeleted();' );					trace( 'type: '+event.customParameters.type );										if( event.customParameters.type == 'TREASURE' )						VectorUtil.remove( _diggingSpots.treasures, event.customParameters.treasure, "id" );					else if( event.customParameters.type == 'WEAPON' )						VectorUtil.remove( _diggingSpots.weapons, event.customParameters.weapon, "id" );					else if( event.customParameters.type == 'GOD' )						VectorUtil.remove( _diggingSpots.gods, event.customParameters.god, "id" );				}							/** handleAllTreasuresDeleted			  *	---------------------------------------------------------------------------- *			  *	Deletes all treasures, weapons and gods from DiggingSpots object.			  *	---------------------------------------------------------------------------- */				protected function handleAllTreasuresDeleted( event:CustomEvent ):void				{					VectorUtil.removeAll( _diggingSpots.treasures );					VectorUtil.removeAll( _diggingSpots.weapons );					VectorUtil.removeAll( _diggingSpots.gods );				}							/** highlightDigSpots			  *	---------------------------------------------------------------------------- *			  *	Highlights the digging tiles so user can see them.			  *	---------------------------------------------------------------------------- */				protected function highlightDigSpots():void				{					var i:int;										//for( i=0; i<_diggingSpots.spots.length; ++i )					//{						//_gameboardReference.tiles[_diggingSpots.spots[i].r][_diggingSpots.spots[i].c].tileType = GameboardTile.TILE_TYPE_DIG_SPOT;					//}										_diggingSpots.output();										for( i=0; i<_diggingSpots.spots[0].length; ++i )					{						_gameboardReference.diggingTiles1[_diggingSpots.spots[0][i].r][_diggingSpots.spots[0][i].c].tileType = GameboardTile.TILE_TYPE_DIG_SPOT;					}										for( i=0; i<_diggingSpots.spots[1].length; ++i )					{						_gameboardReference.diggingTiles2[_diggingSpots.spots[1][i].r][_diggingSpots.spots[1][i].c].tileType = GameboardTile.TILE_TYPE_DIG_SPOT;					}										for( i=0; i<_diggingSpots.spots[2].length; ++i )					{						_gameboardReference.diggingTiles3[_diggingSpots.spots[2][i].r][_diggingSpots.spots[2][i].c].tileType = GameboardTile.TILE_TYPE_DIG_SPOT;					}				}							/** removeHighlightDigSpots			  *	---------------------------------------------------------------------------- *			  *	Removes the highlights of the digging tiles.			  *	---------------------------------------------------------------------------- */				protected function removeHighlightDigSpots():void				{					var i:int;										for( i=0; i<_diggingSpots.spots[0].length; ++i )					{						_gameboardReference.diggingTiles1[_diggingSpots.spots[0][i].r][_diggingSpots.spots[0][i].c].tileType = GameboardTile.TILE_TYPE_PLACEABLE;					}										for( i=0; i<_diggingSpots.spots[1].length; ++i )					{						_gameboardReference.diggingTiles2[_diggingSpots.spots[1][i].r][_diggingSpots.spots[1][i].c].tileType = GameboardTile.TILE_TYPE_PLACEABLE;					}										for( i=0; i<_diggingSpots.spots[2].length; ++i )					{						_gameboardReference.diggingTiles3[_diggingSpots.spots[2][i].r][_diggingSpots.spots[2][i].c].tileType = GameboardTile.TILE_TYPE_PLACEABLE;					}				}							/** highlightSpawnPointsAndChickenArea			  *	---------------------------------------------------------------------------- *			  *	Highlights spawn points and the chicken areas so user can see them.			  *	---------------------------------------------------------------------------- */				protected function highlightSpawnPointsAndChickenAreas():void				{					var i:int, j:int;										for( i=0; i<_gameLevel.spawnPoints[0].length; ++i )					{						_gameboardReference.diggingTiles1[_gameLevel.spawnPoints[0][i].r][_gameLevel.spawnPoints[0][i].c].tileType = GameboardTile.TILE_TYPE_SPAWN_POINT;					}										for( i=0; i<_gameLevel.spawnPoints[1].length; ++i )					{						_gameboardReference.diggingTiles2[_gameLevel.spawnPoints[1][i].r][_gameLevel.spawnPoints[1][i].c].tileType = GameboardTile.TILE_TYPE_SPAWN_POINT;					}										for( i=0; i<_gameLevel.spawnPoints[2].length; ++i )					{						_gameboardReference.diggingTiles3[_gameLevel.spawnPoints[2][i].r][_gameLevel.spawnPoints[2][i].c].tileType = GameboardTile.TILE_TYPE_SPAWN_POINT;					}										for( i=0; i<_gameLevel.chickenMovementAreaDatas[0].tiles.length; ++i )					{						_gameboardReference.diggingTiles1[_gameLevel.chickenMovementAreaDatas[0].tiles[i].r][_gameLevel.chickenMovementAreaDatas[0].tiles[i].c].tileType = GameboardTile.TILE_TYPE_CHICKEN_AREA;					}					for( i=0; i<_gameLevel.chickenMovementAreaDatas[1].tiles.length; ++i )					{						_gameboardReference.diggingTiles2[_gameLevel.chickenMovementAreaDatas[1].tiles[i].r][_gameLevel.chickenMovementAreaDatas[1].tiles[i].c].tileType = GameboardTile.TILE_TYPE_CHICKEN_AREA;					}					for( i=0; i<_gameLevel.chickenMovementAreaDatas[2].tiles.length; ++i )					{						_gameboardReference.diggingTiles3[_gameLevel.chickenMovementAreaDatas[2].tiles[i].r][_gameLevel.chickenMovementAreaDatas[2].tiles[i].c].tileType = GameboardTile.TILE_TYPE_CHICKEN_AREA;					}				}							/** removeHighlightSpawnPointsAndChickenAreas			  *	---------------------------------------------------------------------------- *			  *	Removes the highlights of spawn points and chicken areas.			  *	---------------------------------------------------------------------------- */				protected function removeHighlightSpawnPointsAndChickenAreas():void				{					var i:int, j:int;										for( i=0; i<_gameLevel.spawnPoints[0].length; ++i )					{						_gameboardReference.diggingTiles1[_gameLevel.spawnPoints[0][i].r][_gameLevel.spawnPoints[0][i].c].tileType = GameboardTile.TILE_TYPE_PLACEABLE;					}										for( i=0; i<_gameLevel.spawnPoints[1].length; ++i )					{						_gameboardReference.diggingTiles2[_gameLevel.spawnPoints[1][i].r][_gameLevel.spawnPoints[1][i].c].tileType = GameboardTile.TILE_TYPE_PLACEABLE;					}										for( i=0; i<_gameLevel.spawnPoints[2].length; ++i )					{						_gameboardReference.diggingTiles3[_gameLevel.spawnPoints[2][i].r][_gameLevel.spawnPoints[2][i].c].tileType = GameboardTile.TILE_TYPE_PLACEABLE;					}										for( i=0; i<_gameLevel.chickenMovementAreaDatas[0].tiles.length; ++i )					{						_gameboardReference.diggingTiles1[_gameLevel.chickenMovementAreaDatas[0].tiles[i].r][_gameLevel.chickenMovementAreaDatas[0].tiles[i].c].tileType = GameboardTile.TILE_TYPE_PLACEABLE;					}					for( i=0; i<_gameLevel.chickenMovementAreaDatas[1].tiles.length; ++i )					{						_gameboardReference.diggingTiles2[_gameLevel.chickenMovementAreaDatas[1].tiles[i].r][_gameLevel.chickenMovementAreaDatas[1].tiles[i].c].tileType = GameboardTile.TILE_TYPE_PLACEABLE;					}					for( i=0; i<_gameLevel.chickenMovementAreaDatas[2].tiles.length; ++i )					{						_gameboardReference.diggingTiles3[_gameLevel.chickenMovementAreaDatas[2].tiles[i].r][_gameLevel.chickenMovementAreaDatas[2].tiles[i].c].tileType = GameboardTile.TILE_TYPE_PLACEABLE;					}				}							/**	******************************************* *			  * Village Level Editor Events			  *	******************************************* */			 					protected function handleVillageSaveClicked( event:Event ):void				{									}							/** handleVillageResetClicked			  *	---------------------------------------------------------------------------- *			  *	Resets the village environment objects, remove them.			  *	---------------------------------------------------------------------------- */				protected function handleVillageResetClicked( event:Event ):void				{					VectorUtil.removeAll( _gameLevel.villageObjects );										var delete_gldc:GameLevelDataController;										var i:int, j:int, k:int;					for( i=0; i<_gameboardReference.villageDisplayObjects.length; ++i )					{						for( j=0; j<_gameboardReference.villageDisplayObjects[i].length; ++j )						{							for( k=0; k<_gameboardReference.villageDisplayObjects[i][j].length; ++k )							{								_gameboardReference.villageDisplayObjects[i][j][k].editable = false;								_gameboardReference.villageDisplayObjects[i][j][k].removeEventListener( "onClick", handleEnvironmentDisplayObjectClicked );																delete_gldc = new GameLevelDataController();								delete_gldc.deleteGameLevelVillageObject( _gameboardReference.villageDisplayObjects[i][j][k].gameLevelEnvironmentObject.id );							}						}					}					_gameboardReference.removeVillageObjects();				}							/** resetBoard			  *	---------------------------------------------------------------------------- *			  *	Resets the board.			  *	---------------------------------------------------------------------------- */				protected function resetBoard():void				{					if( _editorType == EDITOR_TYPE_GAME_LEVEL )					{						if( _currentMonsterPath != null )						{							VectorUtil.removeAll( _currentMonsterPath );							_currentMonsterPath = null;						}												_gameboardReference.resetGameTiles();					}					else if( _editorType == EDITOR_TYPE_DIGGING_LEVEL )					{						_gameboardReference.resetDiggingTiles();					}					else if( _editorType == EDITOR_TYPE_VILLAGE_LEVEL )					{											}				}							/** checkIfPathIsValid			  *	---------------------------------------------------------------------------- *			  *	Checks if the current path is valid or not.			  *	---------------------------------------------------------------------------- */				protected function checkIfPathIsValid():Array				{					if( _currentMonsterPath == null )						return null;										var valid:Boolean = true;										var tempPath:Vector.<GameboardTile> = _currentMonsterPath.concat();					var actualPath:Array = [];					var i:int, j:int;					var actualPathLength:int = 0;					var nextTileFound:Boolean;					var tile:GameboardTile;										while( tempPath.length > 0 )					{						//nextTileFound = false;						tile = null;												for( i=0; i<tempPath.length; ++i )						{							if( actualPath.length == 0 )							{								if( tempPath[i].row == 0 )								{									tile = tempPath.splice(i, 1)[0];									actualPath.push( {r:tile.row, c:tile.column} );									actualPathLength = actualPath.length;									//nextTileFound = true;									break;								}							}							else							{								if( (actualPath[actualPathLength-1].r == tempPath[i].row && Math.abs(actualPath[actualPathLength-1].c - tempPath[i].column) == 1) ||									(actualPath[actualPathLength-1].c == tempPath[i].column && Math.abs(actualPath[actualPathLength-1].r - tempPath[i].row) == 1) )								{									tile = tempPath.splice(i, 1)[0];									actualPath.push( {r:tile.row, c:tile.column} );									actualPathLength = actualPath.length;									//nextTileFound = true;									break;								}							}						}												if( tile != null )						{							continue;						}						else						{							break;						}					}										if( actualPathLength != 0 && 						(actualPath[actualPathLength-1].r == GameLevelDataIndex.getInstance().boardMaxColumns-1 || 						actualPath[actualPathLength-1].c == 0 || 						actualPath[actualPathLength-1].c == GameLevelDataIndex.getInstance().boardMaxColumns-1) )					{						trace( "found a valid path" );						//_gameLevel.paths.push( GameLevel.formatPath(actualPath) );												trace( "actualPath:" );						for( i=0; i<actualPath.length; ++i )						{							trace( "r: "+actualPath[i].r +", c: "+actualPath[i].c );						}						trace( "--" );						//trace( "did not find a path" );												//return true;						return actualPath;					}										trace( "actualPath:" );					for( i=0; i<actualPath.length; ++i )					{						trace( "r: "+actualPath[i].r +", c: "+actualPath[i].c );					}					trace( "--" );					trace( "did not find a path" );					return null;				}							/**	******************************************* *			  * WeaponSelectionView Events			  *	******************************************* */							/** handleWeaponSelectionDone			  *	---------------------------------------------------------------------------- *			  *	Delete all paths			  *	---------------------------------------------------------------------------- */				protected function handleWeaponSelectionDone( event:BoogaEvent ):void				{					ConsoleBroadcaster.broadcast( "GameEditor", "handleWeaponSelectionDone();" );										//trace( "event.currentTarget.selectedWeapons.length: "+event.currentTarget.selectedWeapons.length );					/*					VectorUtil.removeAll( GameLevelCurrentData.getInstance().selectedAttacks );										for( var i:int=0; i<event.currentTarget.selectedWeapons.length; ++i )					{						GameLevelCurrentData.getInstance().selectedAttacks.push( event.currentTarget.selectedWeapons[i] );					}					*/					//trace( "weapon selected : "+GameLevelCurrentData.getInstance().selectedAttacks.length );										_gameboardReference.inIsometricView = true;					_gameboardReference.tileOpacity = .5;										_gameboardController.gameLevel = _gameLevel;										//TODO:					//	Check if it's done loading all assets					//	If done, start playing the level					//	If not, wait for it to be done before starting the level										ConsoleBroadcaster.broadcast( "GameEditor", "is loading asset: "+MainGameController.getInstance().isLoading );										_loadingAssetViewClip.showLoadingProgress();										MainGameController.getInstance().assetLoaderController.addEventListener( AssetLoaderEvent.COMPLETE, handleLoadSelectedAttacksComplete, false, 0, true );					//MainGameController.getInstance().assetLoaderController.loadSelectedAttacks();					MainGameController.getInstance().assetLoaderController.loadAssets( GameLevelUtil.getAttackAssets(GameLevelCurrentData.getInstance().selectedAttacks) );										_weaponSelectionViewClip.hide();					_weaponSelectionViewClip.reset();				}								protected function handleWeaponSelectionCancel( event:BoogaEvent ):void				{					ConsoleBroadcaster.broadcast( "GameEditor", "handleWeaponSelectionCancel();" );										_weaponSelectionViewClip.hide();					_weaponSelectionViewClip.reset();				}							/** handleLoadSelectedAttacksComplete			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function handleLoadSelectedAttacksComplete( event:AssetLoaderEvent ):void				{					ConsoleBroadcaster.broadcast( "GameEditor", "handleLoadSelectedAttacksComplete();" );										MainGameController.getInstance().assetLoaderController.removeEventListener( AssetLoaderEvent.COMPLETE, handleLoadSelectedAttacksComplete );										_loadingAssetViewClip.hideLoadingProgress();										_playModeClip.setDeactive( true );					_editModeClip.setActive( true );										reset_mc.visible = false;					waveEditor_mc.visible = false;					save_mc.visible = false;					startMonsterPath_mc.visible = false;					endMonsterPath_mc.visible = false;					pathList_mc.visible = false;					environmentObjectList_mc.visible = false;										var gift:Gift = new Gift();						gift.fromFirstName = "Avatar";						gift.fromLastName = "Labs";						gift.fromProfilePicURL = "http://profile.ak.fbcdn.net/hprofile-ak-snc4/41403_1763131906_8514_t.jpg ";						gift.count = 1;						gift.id = 0;						gift.itemId = 10;						gift.item = GameLevelDataIndex.getInstance().getWeapon(10);					GameLevelCurrentData.getInstance().gift = gift;										_gameboardReference.tileOpacity = 0;					//_gameboardReference.backgroundContainer_mc.visible = true;					//_gameboardReference.villageObjectsDisplayLayer_mc.visible = true;					_gameboardReference.showGameLevelBackground();					_gameboardReference.showVillageTiles();										_gameboardController.start();										_controlsClip.contentClip.visible = true;					_controlsClip.showGameLevelControls();									}								//public function loadEnvironmentObjects():void				//{				//					//}											/**	******************************************* *			  * GameLevelDataController Events			  *	******************************************* */							/** handleSaveGameLevelComplete			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function handleSaveGameLevelComplete( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleSaveGameLevelComplete );					event.currentTarget.removeEventListener( "onError", handleSaveGameLevelError );										_loadingAssetViewClip.contentClip.visible = false;										_gameLevel.id = event.customParameters.id;					/*					var i:int, j:int;										if( event.customParameters.resultEnvironmentObjects )					{						trace( "resultEnvironmentObjects length: "+event.customParameters.resultEnvironmentObjects.length );						for( i=0; i<event.customParameters.resultEnvironmentObjects.length; ++i )						{							for( j=0; j<_gameLevel.environmentObjects.length; ++j )							{								if( _gameLevel.environmentObjects[j].id > 0							}						}					}										if( event.customParameters.resultVillageObjects )					{											}					*/					villageEditor_mc.visible = true;										error_mc.label_txt.text = "Success in saving game level data";					error_mc.visible = true;				}							/** handleSaveGameLevelError			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function handleSaveGameLevelError( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleSaveGameLevelComplete );					event.currentTarget.removeEventListener( "onError", handleSaveGameLevelError );										_loadingAssetViewClip.contentClip.visible = false;										error_mc.label_txt.text = "Error in saving game level data, please try again";					error_mc.visible = true;				}											/**	******************************************* *			  * TreasureDataController Events			  *	******************************************* */								protected function handleSaveDiggingComplete( event:CustomEvent ):void				{					ConsoleBroadcaster.broadcast( "GameEditor", "handleSaveDiggingComplete();" );										event.currentTarget.removeEventListener( "onComplete", handleSaveDiggingComplete );					event.currentTarget.removeEventListener( "onError", handleSaveDiggingError );										_diggingSpots.id = event.customParameters.id;										error_mc.label_txt.text = "Success in saving village data";					error_mc.visible = true;				}								protected function handleSaveDiggingError( event:CustomEvent ):void				{					ConsoleBroadcaster.broadcast( "GameEditor", "handleSaveDiggingError();" );										event.currentTarget.removeEventListener( "onComplete", handleSaveDiggingComplete );					event.currentTarget.removeEventListener( "onError", handleSaveDiggingError );										error_mc.label_txt.text = "Error in saving village data, please try again";					error_mc.visible = true;				}												protected function handleErrorClicked( event:MouseEvent ):void				{					error_mc.visible = false;				}		}	}