/** EnvironmentObjectList  *	---------------------------------------------------------------------------- *  *	@desc:  *		A list for the paths  *	@author:  *		Christian Widodo [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.gameleveleditor	{		import flash.display.Bitmap;		import flash.display.MovieClip;		import flash.display.StageDisplayState;		import flash.events.Event;		import flash.events.EventDispatcher;		import flash.events.MouseEvent;		import flash.geom.Rectangle;		import flash.text.TextField;		import flash.text.TextFieldAutoSize;		import flash.utils.getDefinitionByName;		import flash.utils.getQualifiedClassName;				import com.greensock.TweenLite;		import com.greensock.easing.Sine;		import com.avatarlabs.utils.ArrayUtil;		import com.avatarlabs.utils.UtilFunctions;		import com.avatarlabs.utils.VectorUtil;		import com.avatarlabs.utils.cache.BitmapDataManager;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.userinterface.DynamicUIScroller;		import com.avatarlabs.utils.userinterface.DynamicUISlider;				import com.boogabooga.data.gamelevel.EnvironmentObject;		import com.boogabooga.data.gamelevel.GameLevelDataIndex;		import com.boogabooga.data.gamelevel.Villager;				public class EnvironmentObjectList extends DynamicUIScroller		{			//protected var _contentClip:MovieClip;						protected var _environmentObjectClips:Array;						/**	Stage Instances **/			//public var scroller_mc:UIScroller;			public var mask_mc:MovieClip;			public var content_mc:MovieClip;			public var slider_mc:MovieClip;			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function EnvironmentObjectList()				{					//init();				}				/*				public function set contentClip( m:MovieClip ):void				{					_contentClip = m;									}				public function get contentClip():MovieClip { return _contentClip; }				*/								override public function set dynamicClip( m:MovieClip ):void				{					_dynamicClip = m;										mask_mc = _dynamicClip.mask_mc;					content_mc = _dynamicClip.content_mc;					slider_mc = _dynamicClip.slider_mc;										var sliderClip:DynamicUISlider = new DynamicUISlider();						sliderClip.dynamicClip = slider_mc;						sliderClip.dynamicInit();						sliderClip.setProperty( "y" );						sliderClip.setHandle( slider_mc.handle_mc );						sliderClip.setBounds( slider_mc.bound_mc );										setProperty( "y" );					setSlider( sliderClip );					setContent( content_mc );					setMask( mask_mc );				}							/** init			  *	---------------------------------------------------------------------------- */				override public function init():void				{					super.init();										_environmentObjectClips = new Array();									}								override public function dynamicInit():void				{					super.dynamicInit();										_dynamicClip.mouseChildren = true;				}								public function initObjects( showVillagers:Boolean=false ):void				{					var clip:MovieClip;					var environmentObject:EnvironmentObject;					var environmentObjectAsset:MovieClip;					var environmentObjectAssetBound:Rectangle;										for( var i:int=0; i<GameLevelDataIndex.getInstance().environmentObjectsCount; ++i )					{						environmentObject = GameLevelDataIndex.getInstance().environmentObjects[i];						clip = new (getDefinitionByName("EnvironmentObjectScroller.content.item") as Class)();						clip.id = environmentObject.id;						clip.environmentObject = environmentObject;						clip.name_txt.autoSize = TextFieldAutoSize.LEFT;						clip.name_txt.text = environmentObject.name;						clip.image_mc.y = clip.name_txt.y + clip.name_txt.height + 1;												environmentObjectAsset = new (getDefinitionByName(environmentObject.name) as Class)();						environmentObjectAsset.x = 0;						environmentObjectAsset.y = 0;						environmentObjectAssetBound = environmentObjectAsset.getBounds(clip.image_mc);						environmentObjectAsset.x = -environmentObjectAssetBound.left;						environmentObjectAsset.y = -environmentObjectAssetBound.top;												trace( "environmentObjectAssetBound: "+environmentObjectAssetBound );												clip.image_mc.addChild( environmentObjectAsset );						clip.y = ( i == 0 ) ? 0 : _environmentObjectClips[i-1].y + _environmentObjectClips[i-1].height;						clip.buttonMode = true;						clip.addEventListener( MouseEvent.CLICK, handleClipClicked );						clip.backgroundEven_mc.height = clip.height;						clip.backgroundOdd_mc.height = clip.height;												if( i % 2 == 0 )						{							clip.backgroundEven_mc.visible = true;							clip.backgroundOdd_mc.visible = false;						}						else						{							clip.backgroundEven_mc.visible = false;							clip.backgroundOdd_mc.visible = true;						}												_contentClip.addChild( clip );						_environmentObjectClips.push( clip );					}										toggleSlider();										clip = null;					environmentObject = null;					environmentObjectAsset =  null;					environmentObjectAssetBound = null;				}								public function initVillagers():void				{					var clip:MovieClip;					var environmentObjectAsset:MovieClip;					var environmentObjectAssetBound:Rectangle;					var villager:Villager;					for( var i:int=0; i<GameLevelDataIndex.getInstance().villagersCount; ++i )					{						villager = GameLevelDataIndex.getInstance().villagers[i];						//trace( "villager.cacheIconId: "+villager.cacheIconId );												clip = new (getDefinitionByName("EnvironmentObjectScroller.content.item") as Class)();						clip.id = villager.id;						clip.villager = villager;						clip.name_txt.autoSize = TextFieldAutoSize.LEFT;						clip.name_txt.text = villager.name;						clip.image_mc.y = clip.name_txt.y + clip.name_txt.height+1;												//trace( "cache icon exist ? "+BitmapDataManager.getInstance().getBitmapData(villager.cacheIconId) );												clip.image_mc.addChild( new Bitmap(BitmapDataManager.getInstance().getBitmapData(villager.cacheIconId).bitmapData) );						clip.y = ( _environmentObjectClips.length == 0 ) ? 0 : (_environmentObjectClips[_environmentObjectClips.length-1].y + _environmentObjectClips[_environmentObjectClips.length-1].height);						clip.buttonMode = true;						clip.addEventListener( MouseEvent.CLICK, handleVillagerClipClicked );						clip.backgroundEven_mc.height = clip.height;						clip.backgroundOdd_mc.height = clip.height;												if( _environmentObjectClips.length % 2 == 0 )						{							clip.backgroundEven_mc.visible = true;							clip.backgroundOdd_mc.visible = false;						}						else						{							clip.backgroundEven_mc.visible = false;							clip.backgroundOdd_mc.visible = true;						}												_contentClip.addChild( clip );						_environmentObjectClips.push( clip );					}										toggleSlider();				}								public function reset():void				{					toggleSlider();					//scroller_mc.toggleSlider();				}							/** addEnvironmentObject			  *	---------------------------------------------------------------------------- */				public function addEnvironmentObject( environment:EnvironmentObject ):void				{					ConsoleBroadcaster.broadcast( "EnvironmentObjectList", "addEnvironmentObject("+environment.id+");" );										//scroller_mc.toggleSlider();				}								protected function handleClipClicked( event:MouseEvent ):void				{					dispatchEvent( new CustomEvent("onEnvironmentObjectClicked", {environmentObject:event.currentTarget.environmentObject}) );				}								protected function handleVillagerClipClicked( event:MouseEvent ):void				{					trace( "handleVillagerClipClicked("+event.currentTarget.villager.id+");" );										dispatchEvent( new CustomEvent("onVillagerObjectClicked", {villager:event.currentTarget.villager}) );				}						}	}