/** WaveZoneClip  *	---------------------------------------------------------------------------- *  *	@desc:  *		This is the gameboard editor class used in the editor file.  *		This class provides a way for users to modify game levels.  *	@author:  *		Christian Widodo [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.gameleveleditor	{		import flash.display.MovieClip;		import flash.display.StageDisplayState;		import flash.events.Event;		import flash.events.EventDispatcher;		import flash.text.TextField;		import flash.utils.getDefinitionByName;		import flash.utils.getQualifiedClassName;				import com.greensock.TweenLite;		import com.greensock.easing.Sine;		import com.avatarlabs.utils.UtilFunctions;		import com.avatarlabs.utils.VectorUtil;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.forms.DynamicInputText;		import com.avatarlabs.utils.userinterface.DynamicUIButton;				import com.boogabooga.controller.gamelevel.GameboardController;		import com.boogabooga.controller.gamelevel.WeaponDisplayObjectController;		import com.boogabooga.ui.gamelevel.Gameboard;		import com.boogabooga.ui.gamelevel.GameboardTile;		import com.boogabooga.ui.gamelevel.GameLevelDisplayLayer;		import com.boogabooga.data.gamelevel.GameLevel;		import com.boogabooga.data.gamelevel.GameLevelDataIndex;		import com.boogabooga.data.gamelevel.Wave;		import com.boogabooga.data.gamelevel.WaveZone;						public class WaveZoneClip extends EventDispatcher		{			protected var _contentClip:MovieClip;						protected var _waveZone:WaveZone;			protected var _waves:Vector.<Wave>;			protected var _waveClips:Vector.<WaveClip>;			protected var _waveClipLinkageId:String;			protected var _waveClipClass:Class;						protected var _boundsDefaultHeight:Number;						protected var _addWaveClip:DynamicUIButton;			protected var _startDelayIntervalClip:DynamicInputText;			protected var _spawnIntervalClip:DynamicInputText;			protected var _waveIntervalClip:DynamicInputText;						/**	Stage Instances **/			public var addWave_mc:MovieClip;			public var wavesContainer_mc:MovieClip;			public var bounds_mc:MovieClip;			public var header_mc:MovieClip;			public var startDelayInterval_mc:MovieClip;			public var spawnInterval_mc:MovieClip;			public var waveInterval_mc:MovieClip;			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function WaveZoneClip()				{					//init();				}								public function set contentClip( m:MovieClip ):void				{					_contentClip = m;										addWave_mc = _contentClip.addWave_mc;					addWave_mc.mouseChildren = false;					wavesContainer_mc = _contentClip.wavesContainer_mc;					bounds_mc = _contentClip.bounds_mc;					header_mc = _contentClip.header_mc;					startDelayInterval_mc = _contentClip.startDelayInterval_mc;					spawnInterval_mc = _contentClip.spawnInterval_mc;					waveInterval_mc = _contentClip.waveInterval_mc;										_addWaveClip = new DynamicUIButton();					_addWaveClip.dynamicClip = addWave_mc;					_addWaveClip.dynamicInit();										_startDelayIntervalClip = new DynamicInputText();					_startDelayIntervalClip.dynamicClip = startDelayInterval_mc;					_startDelayIntervalClip.dynamicInit();					_startDelayIntervalClip.setTextField( startDelayInterval_mc.input_txt );										_spawnIntervalClip = new DynamicInputText();					_spawnIntervalClip.dynamicClip = spawnInterval_mc;					_spawnIntervalClip.dynamicInit();					_spawnIntervalClip.setTextField( spawnInterval_mc.input_txt );										_waveIntervalClip = new DynamicInputText();					_waveIntervalClip.dynamicClip = waveInterval_mc;					_waveIntervalClip.dynamicInit();					_waveIntervalClip.setTextField( waveInterval_mc.input_txt );				}				public function get contentClip():MovieClip { return _contentClip; }								public function set x( n:Number ):void { _contentClip.x = n; }				public function get x():Number { return _contentClip.x; }				public function set y( n:Number ):void { _contentClip.y = n; }				public function get y():Number { return _contentClip.y; }								public function set waves( w:Vector.<Wave> ):void				{					_waves = w;										while( wavesContainer_mc.numChildren > 0 )						wavesContainer_mc.removeChildAt(0);										_waveClips = new Vector.<WaveClip>;										if( _waves.length > 0 )					{						var waveClip:WaveClip;												for( var i:int=0; i<_waves.length; ++i )						{							waveClip = addWaveClip();							waveClip.wave = _waves[i];						}												_addWaveClip.dynamicClip.y = Math.round( wavesContainer_mc.y + waveClip.y + waveClip.bounds_mc.height + 10 );												bounds_mc.height = _addWaveClip.dynamicClip.y + _addWaveClip.dynamicClip.height;												dispatchEvent( new CustomEvent("onWaveAdded") );					}				}				public function get waves():Vector.<Wave>				{					var tempWaves:Vector.<Wave> = new Vector.<Wave>;										for( var i:int=0; i<_waveClips.length; ++i )					{						if( _waveClips[i].wave != null )							tempWaves.push( _waveClips[i].wave );					}										for( i=0; i<_waves.length; ++i )					{						_waves[i] = null;					}					_waves = null;					_waves = tempWaves;					tempWaves = null;										return _waves;				}								public function set waveZone( w:WaveZone ):void				{					if( w != null )					{						_waveZone = w;						this.waves = _waveZone.waves;												_startDelayIntervalClip.dynamicClip.input_txt.text = _waveZone.startDelayInterval / 1000;						_spawnIntervalClip.dynamicClip.input_txt.text = _waveZone.spawnInterval / 1000;						_waveIntervalClip.dynamicClip.input_txt.text = _waveZone.waveInterval / 1000;					}				}				public function get waveZone():WaveZone				{					var tempWaveZone:WaveZone = new WaveZone();						tempWaveZone.startDelayInterval = Number(_startDelayIntervalClip.getValue()) * 1000;						tempWaveZone.spawnInterval = Number(_spawnIntervalClip.getValue()) * 1000;						tempWaveZone.waveInterval = Number(_waveIntervalClip.getValue()) * 1000;						tempWaveZone.waves = this.waves;											return tempWaveZone;				}							/** init			  *	---------------------------------------------------------------------------- */				public function init():void				{					_waves = new Vector.<Wave>;					_waveClips = new Vector.<WaveClip>;										_waveClipClass = getDefinitionByName("WaveZoneClip.WaveClip") as Class;										_addWaveClip.addEventListener( "onClick", handleAddWaveClicked, false, 0, true );										_boundsDefaultHeight = bounds_mc.height;										//_startDelayIntervalClip.setValue( "1" );					//_spawnIntervalClip.setValue( "1" );					//_waveIntervalClip.setValue( "1" );				}							/** reset			  *	---------------------------------------------------------------------------- */				public function reset():void				{					if( _waves != null )					{						for( var i:int=0; i<_waveClips.length; ++i )						{							_waveClips[i].removeEventListener( "onDelete", handleWaveClipDeleted );							wavesContainer_mc.removeChild( _waveClips[i].contentClip );						}												VectorUtil.removeAll( _waves );						VectorUtil.removeAll( _waveClips );					}										_startDelayIntervalClip.setValue( '1' );					_spawnIntervalClip.setValue( '1' );					_waveIntervalClip.setValue( '5' );										//_waves = new Vector.<Wave>;										bounds_mc.height = _boundsDefaultHeight;					_addWaveClip.dynamicClip.y = Math.round( bounds_mc.height - _addWaveClip.dynamicClip.height );				}							/** addWaveClip			  *	---------------------------------------------------------------------------- */				protected function addWaveClip():WaveClip				{					ConsoleBroadcaster.broadcast( "WaveZoneClip", "addWaveClip();" );										var waveClip:WaveClip = new WaveClip();						waveClip.contentClip = new _waveClipClass();						waveClip.init();						waveClip.x = 0;						waveClip.y = (waveClip.bounds_mc.height+5) * wavesContainer_mc.numChildren;						waveClip.waveName = "WAVE "+(_waveClips.length+1);						waveClip.addEventListener( "onDelete", handleWaveClipDeleted, false, 0, true );										wavesContainer_mc.addChildAt( waveClip.contentClip, 0 );					_waveClips.push( waveClip );										return waveClip;				}							/** handleAddWaveClicked			  *	---------------------------------------------------------------------------- */				private function handleAddWaveClicked( event:Event ):void				{					ConsoleBroadcaster.broadcast( "WaveZoneClip", "handleAddWaveClicked();" );										var waveClip:WaveClip = addWaveClip();										_addWaveClip.dynamicClip.y = Math.round( wavesContainer_mc.y + waveClip.y + waveClip.bounds_mc.height + 10 );										bounds_mc.height = _addWaveClip.dynamicClip.y + _addWaveClip.dynamicClip.height;										//trace( waveClip.y );					//trace( contentClip.height );										dispatchEvent( new CustomEvent("onWaveAdded") );				}							/** handleWaveClipDeleted			  *	---------------------------------------------------------------------------- */				private function handleWaveClipDeleted( event:CustomEvent ):void				{					trace( "handleWaveClipDeleted();" );										var i:int;										for( i=0; i<_waveClips.length; i++ )					{						if( _waveClips[i] == event.currentTarget )						{							wavesContainer_mc.removeChild( _waveClips[i].contentClip );							_waveClips.splice( i, 1 );						}					}										for( i=0; i<_waveClips.length; i++ )					{						_waveClips[i].x = 0;						_waveClips[i].y = (_waveClips[i].bounds_mc.height+5) * i;						_waveClips[i].waveName = "WAVE "+(i+1);					}										if( _waveClips.length > 0 )						_addWaveClip.dynamicClip.y = Math.round( wavesContainer_mc.y + _waveClips[_waveClips.length-1].y + _waveClips[_waveClips.length-1].bounds_mc.height + 10 );					else						_addWaveClip.dynamicClip.y = wavesContainer_mc.y;										dispatchEvent( new CustomEvent("onWaveDeleted") );				}						}	}