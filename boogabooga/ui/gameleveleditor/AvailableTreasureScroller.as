/** AvailableTreasureScroller  *	---------------------------------------------------------------------------- *  *	@desc:  *		A list for the treasures  *	@author:  *		Christian Widodo [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.gameleveleditor	{		import flash.display.Bitmap;		import flash.display.MovieClip;		import flash.display.StageDisplayState;		import flash.events.Event;		import flash.events.EventDispatcher;		import flash.events.MouseEvent;		import flash.text.TextField;		import flash.text.TextFieldAutoSize;		import flash.utils.getDefinitionByName;		import flash.utils.getQualifiedClassName;				import com.greensock.TweenLite;		import com.greensock.easing.Sine;		import com.avatarlabs.utils.ArrayUtil;		import com.avatarlabs.utils.UtilFunctions;		import com.avatarlabs.utils.VectorUtil;		import com.avatarlabs.utils.cache.BitmapDataManager;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.forms.InputText;		import com.avatarlabs.utils.userinterface.DynamicUIScroller;		import com.avatarlabs.utils.userinterface.DynamicUISlider;				import com.boogabooga.data.StringsIndex;		import com.boogabooga.data.gamelevel.GameLevelDataIndex;		import com.boogabooga.data.maingame.MainGameDataIndex;		import com.boogabooga.data.maingame.Treasure;				public class AvailableTreasureScroller extends DynamicUIScroller		{			//protected var _contentClip:MovieClip;						protected var _treasureClips:Array;						/**	Stage Instances **/			public var mask_mc:MovieClip;			public var content_mc:MovieClip;			public var slider_mc:MovieClip;			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function AvailableTreasureScroller()				{					//init();				}				/*				public function set contentClip( m:MovieClip ):void				{					_contentClip = m;									}				public function get contentClip():MovieClip { return _contentClip; }				*/								override public function set dynamicClip( m:MovieClip ):void				{					_dynamicClip = m;										mask_mc = _dynamicClip.mask_mc;					content_mc = _dynamicClip.content_mc;					slider_mc = _dynamicClip.slider_mc;										var sliderClip:DynamicUISlider = new DynamicUISlider();						sliderClip.dynamicClip = slider_mc;						sliderClip.dynamicInit();						sliderClip.setProperty( "y" );						sliderClip.setHandle( slider_mc.handle_mc );						sliderClip.setBounds( slider_mc.bound_mc );										setProperty( "y" );					setSlider( sliderClip );					setContent( content_mc );					setMask( mask_mc );				}							/** init			  *	---------------------------------------------------------------------------- */				override public function init():void				{					super.init();										_treasureClips = new Array();				}								override public function dynamicInit():void				{					super.dynamicInit();										_dynamicClip.mouseChildren = true;				}								public function reset():void				{					for( var i:int=0; i<_treasureClips.length; ++i )					{						//_treasureClips[i].removeEventListener( "onClick", handleDeleteTreasureClicked );						_treasureClips[i].removeEventListener( MouseEvent.CLICK, handleTreasureClipClicked );						_contentClip.removeChildAt(_treasureClips[i]);					}										ArrayUtil.removeAll( _treasureClips );										toggleSlider();				}								public function initContent():void				{					ConsoleBroadcaster.broadcast( "AvailableTreasureScroller", "initContent();" );										var treasureClip:MovieClip;					var treasure:Treasure;										for( var i:int=0; i<MainGameDataIndex.getInstance().treasuresCount; ++i )					{						treasure = MainGameDataIndex.getInstance().treasures[i];												//trace( "treasure.name: "+treasure.name );						//trace( "treasure localized name: "+StringsIndex.getInstance().getString(String(treasure.name)) );												treasureClip = new (getDefinitionByName("AvailableTreasureScroller.content.item") );						treasureClip.name_txt.autoSize = TextFieldAutoSize.LEFT;						treasureClip.name_txt.text = StringsIndex.getInstance().getString(String(treasure.name))+"("+treasure.value+")";						treasureClip.type = 'TREASURE';						treasureClip.id = treasure.id;						treasureClip.image_mc.y = treasureClip.name_txt.y + treasureClip.name_txt.height + 1;						treasureClip.image_mc.addChild( new Bitmap(BitmapDataManager.getInstance().getBitmapData( treasure.cacheIconId ).bitmapData) );						treasureClip.image_mc.scaleX = treasureClip.image_mc.scaleY = .5;						treasureClip.y = ( i == 0 ) ? 0 : _treasureClips[i-1].y + _treasureClips[i-1].height;						treasureClip.buttonMode = true;						treasureClip.addEventListener( MouseEvent.CLICK, handleTreasureClipClicked );												_contentClip.addChild( treasureClip );												_treasureClips.push( treasureClip );												if( (_treasureClips.length & 1) == 0 )						{							treasureClip.backgroundOdd_mc.visible = true;							treasureClip.backgroundEven_mc.visible = false;							treasureClip.backgroundOdd_mc.height = treasureClip.height;						}						else						{							treasureClip.backgroundOdd_mc.visible = false;							treasureClip.backgroundEven_mc.visible = true;							treasureClip.backgroundEven_mc.height = treasureClip.height;						}					}										for( i=0; i<GameLevelDataIndex.getInstance().weaponsCount; ++i )					{						if( GameLevelDataIndex.getInstance().weapons[i].consumable && GameLevelDataIndex.getInstance().weapons[i].listed )						{							treasureClip = new (getDefinitionByName("AvailableTreasureScroller.content.item") );							treasureClip.name_txt.autoSize = TextFieldAutoSize.LEFT;							treasureClip.name_txt.text = StringsIndex.getInstance().getString(String(GameLevelDataIndex.getInstance().weapons[i].name));							treasureClip.type = 'WEAPON';							treasureClip.id = GameLevelDataIndex.getInstance().weapons[i].id;							treasureClip.image_mc.y = treasureClip.name_txt.y + treasureClip.name_txt.height + 1;							treasureClip.image_mc.addChild( new Bitmap(BitmapDataManager.getInstance().getBitmapData( GameLevelDataIndex.getInstance().weapons[i].cacheIconId ).bitmapData) );							treasureClip.image_mc.scaleX = treasureClip.image_mc.scaleY = .5;							treasureClip.y = _treasureClips[_treasureClips.length-1].y + _treasureClips[_treasureClips.length-1].height;							treasureClip.buttonMode = true;							treasureClip.addEventListener( MouseEvent.CLICK, handleTreasureClipClicked );														_contentClip.addChild( treasureClip );														_treasureClips.push( treasureClip );														if( (_treasureClips.length & 1) == 0 )							{								treasureClip.backgroundOdd_mc.visible = true;								treasureClip.backgroundEven_mc.visible = false;								treasureClip.backgroundOdd_mc.height = treasureClip.height;							}							else							{								treasureClip.backgroundOdd_mc.visible = false;								treasureClip.backgroundEven_mc.visible = true;								treasureClip.backgroundEven_mc.height = treasureClip.height;							}						}					}										for( i=0; i<GameLevelDataIndex.getInstance().godsCount; ++i )					{						treasureClip = new (getDefinitionByName("AvailableTreasureScroller.content.item") );						treasureClip.name_txt.autoSize = TextFieldAutoSize.LEFT;						treasureClip.name_txt.text = StringsIndex.getInstance().getString(String(GameLevelDataIndex.getInstance().gods[i].name));						treasureClip.type = 'GOD';						treasureClip.id = GameLevelDataIndex.getInstance().gods[i].id;						treasureClip.image_mc.y = treasureClip.name_txt.y + treasureClip.name_txt.height + 1;						treasureClip.image_mc.addChild( new Bitmap(BitmapDataManager.getInstance().getBitmapData( GameLevelDataIndex.getInstance().gods[i].cacheIconId ).bitmapData) );						treasureClip.image_mc.scaleX = treasureClip.image_mc.scaleY = .5;						treasureClip.y = _treasureClips[_treasureClips.length-1].y + _treasureClips[_treasureClips.length-1].height;						treasureClip.buttonMode = true;						treasureClip.addEventListener( MouseEvent.CLICK, handleTreasureClipClicked );												_contentClip.addChild( treasureClip );												_treasureClips.push( treasureClip );												if( (_treasureClips.length & 1) == 0 )						{							treasureClip.backgroundOdd_mc.visible = true;							treasureClip.backgroundEven_mc.visible = false;							treasureClip.backgroundOdd_mc.height = treasureClip.height;						}						else						{							treasureClip.backgroundOdd_mc.visible = false;							treasureClip.backgroundEven_mc.visible = true;							treasureClip.backgroundEven_mc.height = treasureClip.height;						}					}										treasureClip = null;					treasure = null;										toggleSlider();				}							/** handleTreasureClipClicked			  *	---------------------------------------------------------------------------- */				protected function handleTreasureClipClicked( event:Event ):void				{					if( event.currentTarget.type == 'TREASURE' )					{						dispatchEvent( new CustomEvent("onTreasureClicked", {treasure:MainGameDataIndex.getInstance().getTreasure(event.currentTarget.id), type:event.currentTarget.type}) );					}					else if( event.currentTarget.type == 'WEAPON' )					{						dispatchEvent( new CustomEvent("onTreasureClicked", {weapon:GameLevelDataIndex.getInstance().getWeapon(event.currentTarget.id), type:event.currentTarget.type}) );					}					else if( event.currentTarget.type == 'GOD' )					{						dispatchEvent( new CustomEvent("onTreasureClicked", {god:GameLevelDataIndex.getInstance().getGod(event.currentTarget.id), type:event.currentTarget.type}) );					}				}							/** handleDeleteTreasureClicked			  *	---------------------------------------------------------------------------- 				protected function handleDeleteTreasureClicked( event:Event ):void				{					ConsoleBroadcaster.broadcast( "AvailableTreasureScroller", "handleDeleteTreasureClicked("+event.currentTarget.parent.id+");" );										var id:int = event.currentTarget.parent.id;										var treasureClip:MovieClip = ArrayUtil.remove( _treasureClips, event.currentTarget.parent, "id" );					if( treasureClip != null )					{						treasureClip.delete_mc.removeEventListener( "onClick", handleDeleteTreasureClicked );						_contentClip.removeChild( treasureClip );					}										for( var i:int=0; i<_treasureClips.length; ++i )					{						_treasureClips[i].id = i;						_treasureClips[i].y = (_treasureClips[i].height + 5) * i;						_treasureClips[i].name_txt.text = "PATH "+(i+1);					}										dispatchEvent( new CustomEvent("onDeleteTreasure", {id:event.currentTarget.parent.id}) );				}*/							/** handleDeleteAllTreasuresClicked			  *	---------------------------------------------------------------------------- *			  *	Delete all treasures in the board, removes treasure buttons from the list.			  *	---------------------------------------------------------------------------- 				protected function handleDeleteAllTreasuresClicked( event:Event ):void				{					//while( _contentClip.numChildren > 0 )					for( var i:int=0; i<_treasureClips.length; ++i )					{						_treasureClips[i].delete_mc.removeEventListener( "onClick", handleDeleteTreasureClicked );						_contentClip.removeChildAt(_treasureClips[i]);					}										ArrayUtil.removeAll( _treasureClips );										//trace( "_treasureClips: "+_treasureClips );										dispatchEvent( new CustomEvent("onDeleteAllTreasures") );				}*/						}	}