/** ChallengeLevelEditorInterface  *	---------------------------------------------------------------------------- *  *	@desc:  *		This is the gameboard editor class used in the editor file.  *		This class provides a way for users to modify game levels.  *	@author:  *		Christian Widodo [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.gameleveleditor	{		import flash.display.MovieClip;		import flash.display.StageDisplayState;		import flash.events.Event;		import flash.events.FullScreenEvent;		import flash.events.IOErrorEvent;		import flash.events.MouseEvent;		import flash.events.ProgressEvent;		import flash.events.TimerEvent;		import flash.external.ExternalInterface;		import flash.geom.Point;		import flash.geom.Rectangle;		import flash.net.LocalConnection;		import flash.net.URLLoader;		import flash.net.URLRequest;		import flash.net.URLRequestMethod;		import flash.net.URLVariables;		import flash.system.System;		import flash.utils.getDefinitionByName;		import flash.utils.getQualifiedClassName;		import flash.utils.Timer;				import com.avatarlabs.utils.UtilFunctions;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.forms.DynamicInputText;		import com.avatarlabs.utils.loader.CustomLoader;		import com.avatarlabs.utils.sound.SoundEffectPlayer;		import com.avatarlabs.utils.timers.CustomTimer;		import com.avatarlabs.utils.timers.ElapsedTime;		import com.avatarlabs.utils.userinterface.DynamicUIButton;		import com.avatarlabs.utils.userinterface.DynamicUICheckBox;		import com.greensock.TweenLite;		import com.greensock.easing.Sine;				import com.boogabooga.data.challengelevel.ChallengeLevel;		import com.boogabooga.ui.gamelevel.EnvironmentDisplayObject;		import com.boogabooga.ui.gamelevel.Gameboard;						public class ChallengeLevelEditorInterface extends Object		{			private var _contentClip:MovieClip;			private var _challengeLevel:ChallengeLevel;						private var _gameboardReference:GameboardEditor;						private var _startingChickenClip:DynamicInputText;			private var _gateHealthClip:DynamicInputText;			private var _slotEnabledCheckBoxClip:DynamicUICheckBox;			private var _buyChickenEnabledCheckBoxClip:DynamicUICheckBox;			private var _editModeClip:DynamicUIButton;			private var _playModeClip:DynamicUIButton;			private var _resetClip:DynamicUIButton;			private var _saveClip:DynamicUIButton;			private var _waveEditorClip:DynamicUIButton;			private var _startMonsterPathClip:DynamicUIButton;			private var _endMonsterPathClip:DynamicUIButton;			private var _pathListClip:PathList;			private var _environmentObjectListClip:EnvironmentObjectList;			private var _snapToTileCheckBoxClip:DynamicUICheckBox;			private var _moveObjectClip:DynamicUIButton;			private var _sendToFrontClip:DynamicUIButton;			private var _sendToBackClip:DynamicUIButton;						/**	Stage Instances **/			public var startingChicken_mc:MovieClip;			public var gateHealth_mc:MovieClip;			public var slotEnabledCheckBox_mc:MovieClip;			public var buyChickenEnabledCheckBox_mc:MovieClip;			public var editMode_mc:MovieClip;			public var playMode_mc:MovieClip;			public var reset_mc:MovieClip;			public var save_mc:MovieClip;			public var waveEditor_mc:MovieClip;			public var startMonsterPath_mc:MovieClip;			public var endMonsterPath_mc:MovieClip;			public var pathList_mc:MovieClip;			public var environmentObjectList_mc:MovieClip;			public var snapToTileCheckBox_mc:MovieClip;			public var moveObject_mc:MovieClip;			public var sendToFront_mc:MovieClip;			public var sendToBack_mc:MovieClip;			/**	End Stage Instances **/						/** Constructor			 *	---------------------------------------------------------------------------- */				public function ChallengeLevelEditorInterface()				{									}								public function set contentClip( m:MovieClip ):void				{					_contentClip = m;										startingChicken_mc = _contentClip.startingChicken_mc;					gateHealth_mc = _contentClip.gateHealth_mc;					slotEnabledCheckBox_mc = _contentClip.slotEnabledCheckBox_mc;					buyChickenEnabledCheckBox_mc = _contentClip.buyChickenEnabledCheckBox_mc;					editMode_mc = _contentClip.editMode_mc;					playMode_mc = _contentClip.playMode_mc;					reset_mc = _contentClip.reset_mc;					save_mc = _contentClip.save_mc;					waveEditor_mc = _contentClip.waveEditor_mc;					startMonsterPath_mc = _contentClip.startMonsterPath_mc;					endMonsterPath_mc = _contentClip.endMonsterPath_mc;					pathList_mc = _contentClip.pathList_mc;					environmentObjectList_mc = _contentClip.environmentObjectList_mc;					snapToTileCheckBox_mc = _contentClip.snapToTileCheckBox_mc;					moveObject_mc = _contentClip.moveObject_mc;					sendToFront_mc = _contentClip.sendToFront_mc;					sendToBack_mc = _contentClip.sendToBack_mc;										_startingChickenClip = new DynamicInputText();					_startingChickenClip.dynamicClip = startingChicken_mc;					_startingChickenClip.dynamicInit();					_startingChickenClip.setTextField( startingChicken_mc.input_txt );										//_chickenSpawnRateMinClip = new DynamicInputText();					//_chickenSpawnRateMinClip.dynamicClip = chickenSpawnRateMin_mc;					//_chickenSpawnRateMinClip.dynamicInit();					//_chickenSpawnRateMinClip.setTextField( chickenSpawnRateMin_mc.input_txt );										//_chickenSpawnRateMaxClip = new DynamicInputText();					//_chickenSpawnRateMaxClip.dynamicClip = chickenSpawnRateMax_mc;					//_chickenSpawnRateMaxClip.dynamicInit();					//_chickenSpawnRateMaxClip.setTextField( chickenSpawnRateMax_mc.input_txt );										_gateHealthClip = new DynamicInputText();					_gateHealthClip.dynamicClip = gateHealth_mc;					_gateHealthClip.dynamicInit();					_gateHealthClip.setTextField( gateHealth_mc.input_txt );										//_slotWinningProbabilityClip = new DynamicInputText();					//_slotWinningProbabilityClip.dynamicClip = slotWinningProbability_mc;					//_slotWinningProbabilityClip.dynamicInit();					//_slotWinningProbabilityClip.setTextField( slotWinningProbability_mc.input_txt );										_slotEnabledCheckBoxClip = new DynamicUICheckBox();					_slotEnabledCheckBoxClip.dynamicClip = slotEnabledCheckBox_mc;					_slotEnabledCheckBoxClip.dynamicInit();					_slotEnabledCheckBoxClip.markerClip = slotEnabledCheckBox_mc.marker_mc;										_buyChickenEnabledCheckBoxClip = new DynamicUICheckBox();					_buyChickenEnabledCheckBoxClip.dynamicClip = buyChickenEnabledCheckBox_mc;					_buyChickenEnabledCheckBoxClip.dynamicInit();					_buyChickenEnabledCheckBoxClip.markerClip = buyChickenEnabledCheckBox_mc.marker_mc;										_editModeClip = new DynamicUIButton();					_editModeClip.dynamicClip = editMode_mc;					_editModeClip.dynamicInit();										_playModeClip = new DynamicUIButton();					_playModeClip.dynamicClip = playMode_mc;					_playModeClip.dynamicInit();										_resetClip = new DynamicUIButton();					_resetClip.dynamicClip = reset_mc;					_resetClip.dynamicInit();										_saveClip = new DynamicUIButton();					_saveClip.dynamicClip = save_mc;					_saveClip.dynamicInit();										_waveEditorClip = new DynamicUIButton();					_waveEditorClip.dynamicClip = waveEditor_mc;					_waveEditorClip.dynamicInit();										_startMonsterPathClip = new DynamicUIButton();					_startMonsterPathClip.dynamicClip = startMonsterPath_mc;					_startMonsterPathClip.dynamicInit();										_endMonsterPathClip = new DynamicUIButton();					_endMonsterPathClip.dynamicClip = endMonsterPath_mc;					_endMonsterPathClip.dynamicInit();										_pathListClip = new PathList();					_pathListClip.contentClip = pathList_mc;					_pathListClip.init();										_environmentObjectListClip = new EnvironmentObjectList();					_environmentObjectListClip.dynamicClip = environmentObjectList_mc;					_environmentObjectListClip.dynamicInit();										_snapToTileCheckBoxClip = new DynamicUICheckBox();					_snapToTileCheckBoxClip.dynamicClip = snapToTileCheckBox_mc;					_snapToTileCheckBoxClip.dynamicInit();					_snapToTileCheckBoxClip.markerClip = snapToTileCheckBox_mc.marker_mc;										_moveObjectClip = new DynamicUIButton();					_moveObjectClip.dynamicClip = moveObject_mc;					_moveObjectClip.dynamicInit();										_sendToFrontClip = new DynamicUIButton();					_sendToFrontClip.dynamicClip = sendToFront_mc;					_sendToFrontClip.dynamicInit();										_sendToBackClip = new DynamicUIButton();					_sendToBackClip.dynamicClip = sendToBack_mc;					_sendToBackClip.dynamicInit();									}				public function get contentClip():MovieClip { return _contentClip; }								public function get pathListClip():PathList { return _pathListClip; }				public function get environmentObjectListClip():EnvironmentObjectList { return _environmentObjectListClip; }								public function set gameboardReference( g:Gameboard ):void { _gameboardReference = g; }								public function set challengeLevel( c:ChallengeLevel ):void				{					_challengeLevel = c;										for( var i:int=0; i<challengeLevel.paths.length; ++i )					{						_pathListClip.addPath( i );					}										_startingChickenClip.setValue( String(_challengeLevel.startingChicken) );					_gateHealthClip.setValue( String(_challengeLevel.gateHealth) );					_slotEnabledCheckBoxClip.checked = _challengeLevel.slotEnabled;					_buyChickenEnabledCheckBoxClip.checked = _challengeLevel.buyChickenEnabled;									}											/** init			  *	---------------------------------------------------------------------------- */				public function init():void				{					_editModeClip.addEventListener( "onClick", handleEditModeClicked, false, 0, true );					_playModeClip.addEventListener( "onClick", handlePlayModeClicked, false, 0, true );					_resetClip.addEventListener( "onClick", handleResetClicked, false, 0, true );					_saveClip.addEventListener( "onClick", handleSaveClicked, false, 0, true );					_waveEditorClip.addEventListener( "onClick", handleWaveEditorClicked, false, 0, true );					_startMonsterPathClip.addEventListener( "onClick", handleStartMonsterPathClicked, false, 0, true );					_endMonsterPathClip.addEventListener( "onClick", handleEndMonsterPathClicked, false, 0, true );				}								public function showEnvironmentObjectButtons():void				{					moveObject_mc.visible = true;					sendToFront_mc.visible = true;					sendToBack_mc.visible = true;				}								public function hideEnvironmentObjectButtons():void				{					moveObject_mc.visible = false;					sendToFront_mc.visible = false;					sendToBack_mc.visible = false;				}								private function handleEditModeClicked( event:Event ):void				{									}								private function handlePlayModeClicked( event:Event ):void				{									}								private function handleResetClicked( event:Event ):void				{									}								private function handleSaveClicked( event:Event ):void				{									}								private function handleWaveEditorClicked( event:Event ):void				{									}								private function handleStartMonsterPathClicked( event:Event ):void				{									}								private function handleEndMonsterPathClicked( event:Event ):void				{									}								private function handleMoveObjectClicked( event:Event ):void				{									}		}	}	