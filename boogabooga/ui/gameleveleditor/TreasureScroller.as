/** TreasureScroller  *	---------------------------------------------------------------------------- *  *	@desc:  *		A list for the treasures  *	@author:  *		Christian Widodo [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.gameleveleditor	{		import flash.display.MovieClip;		import flash.display.StageDisplayState;		import flash.events.Event;		import flash.events.EventDispatcher;		import flash.events.MouseEvent;		import flash.text.TextField;		import flash.text.TextFieldAutoSize;		import flash.utils.getDefinitionByName;		import flash.utils.getQualifiedClassName;				import com.greensock.TweenLite;		import com.greensock.easing.Sine;		import com.avatarlabs.utils.ArrayUtil;		import com.avatarlabs.utils.UtilFunctions;		import com.avatarlabs.utils.VectorUtil;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.forms.InputText;		import com.avatarlabs.utils.userinterface.DynamicUIButton;		import com.avatarlabs.utils.userinterface.DynamicUIScroller;		import com.avatarlabs.utils.userinterface.DynamicUISlider;				import com.boogabooga.data.StringsIndex;		import com.boogabooga.data.gamelevel.GameLevelDataIndex;		import com.boogabooga.data.maingame.MainGameDataIndex;		import com.boogabooga.data.maingame.Treasure;		import com.boogabooga.data.gamelevel.Weapon;		import com.boogabooga.data.gamelevel.God;						public class TreasureScroller extends DynamicUIScroller		{			//protected var _contentClip:MovieClip;						protected var _treasureClips:Array;						protected var _deleteAllTreasuresClip:DynamicUIButton;						/**	Stage Instances **/			public var mask_mc:MovieClip;			public var content_mc:MovieClip;			public var slider_mc:MovieClip;			public var deleteAllTreasures_mc:MovieClip;			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function TreasureScroller()				{					//init();				}				/*				public function set contentClip( m:MovieClip ):void				{					_contentClip = m;									}				public function get contentClip():MovieClip { return _contentClip; }				*/								override public function set dynamicClip( m:MovieClip ):void				{					_dynamicClip = m;										mask_mc = _dynamicClip.mask_mc;					content_mc = _dynamicClip.content_mc;					slider_mc = _dynamicClip.slider_mc;										var sliderClip:DynamicUISlider = new DynamicUISlider();						sliderClip.dynamicClip = slider_mc;						sliderClip.dynamicInit();						sliderClip.setProperty( "y" );						sliderClip.setHandle( slider_mc.handle_mc );						sliderClip.setBounds( slider_mc.bound_mc );										setProperty( "y" );					setSlider( sliderClip );					setContent( content_mc );					setMask( mask_mc );										deleteAllTreasures_mc = _dynamicClip.deleteAllTreasures_mc;					deleteAllTreasures_mc.mouseChildren = false;										_deleteAllTreasuresClip = new DynamicUIButton();					_deleteAllTreasuresClip.dynamicClip = deleteAllTreasures_mc;					_deleteAllTreasuresClip.dynamicInit();				}							/** init			  *	---------------------------------------------------------------------------- */				override public function init():void				{					super.init();										_treasureClips = new Array();										//deleteAllTreasures_mc.addEventListener( "onClick", handleDeleteAllTreasuresClicked, false, 0, true );									}								override public function dynamicInit():void				{					super.dynamicInit();										_dynamicClip.mouseChildren = true;					content_mc.mouseChildren = true;										_deleteAllTreasuresClip.addEventListener( "onClick", handleDeleteAllTreasuresClicked, false, 0, true );				}								public function reset():void				{					for( var i:int=0; i<_treasureClips.length; ++i )					{						_treasureClips[i].delete_mc.removeEventListener( "onClick", handleDeleteTreasureClicked );						_contentClip.removeChildAt(_treasureClips[i]);					}										ArrayUtil.removeAll( _treasureClips );										toggleSlider();				}							/** addTreasure			  *	---------------------------------------------------------------------------- */				public function addTreasure( treasure:Treasure ):void				{					ConsoleBroadcaster.broadcast( "TreasureScroller", "addTreasure("+treasure.id+");" );										var treasureClip:MovieClip = new (getDefinitionByName("TreasureScroller.content.item") );						treasureClip.name_txt.autoSize = TextFieldAutoSize.LEFT;						treasureClip.name_txt.text = StringsIndex.getInstance().getString(String(treasure.name))+"("+treasure.value+")";						treasureClip.delete_mc.addEventListener( MouseEvent.CLICK, handleDeleteTreasureClicked, false, 0, true );						treasureClip.delete_mc.buttonMode = true;						treasureClip.delete_mc.mouseChildren = false;						treasureClip.id = _treasureClips.length;						treasureClip.treasure = treasure;						treasureClip.type = 'TREASURE';						treasureClip.y = _treasureClips.length == 0 ? 0 : _treasureClips[_treasureClips.length-1].y + _treasureClips[_treasureClips.length-1].height + 5;										_contentClip.addChild( treasureClip );										_treasureClips.push( treasureClip );										toggleSlider();					this.setValue(1);										toggleBackgrounds();				}							/** handleDeleteTreasureClicked			  *	---------------------------------------------------------------------------- */				protected function handleDeleteTreasureClicked( event:Event ):void				{					ConsoleBroadcaster.broadcast( "TreasureScroller", "handleDeleteTreasureClicked("+event.currentTarget.parent.id+");" );										var id:int = event.currentTarget.parent.id;										var treasureClip:MovieClip = ArrayUtil.remove( _treasureClips, event.currentTarget.parent, "id" );					if( treasureClip != null )					{						treasureClip.delete_mc.removeEventListener( "onClick", handleDeleteTreasureClicked );						_contentClip.removeChild( treasureClip );					}										for( var i:int=1; i<_treasureClips.length; ++i )					{						_treasureClips[i].id = i;						_treasureClips[i].y = _treasureClips[i-1].y + _treasureClips[i-1].height + 5;					}										toggleSlider();					//this.setValue( 0 );										toggleBackgrounds();										if( event.currentTarget.parent.type == 'TREASURE' )						dispatchEvent( new CustomEvent("onTreasureDeleted", {id:event.currentTarget.parent.id, treasure:event.currentTarget.parent.treasure, type:event.currentTarget.parent.type}) );					else if( event.currentTarget.parent.type == 'WEAPON' )						dispatchEvent( new CustomEvent("onTreasureDeleted", {id:event.currentTarget.parent.id, weapon:event.currentTarget.parent.weapon, type:event.currentTarget.parent.type}) );					else if( event.currentTarget.parent.type == 'GOD' )						dispatchEvent( new CustomEvent("onTreasureDeleted", {id:event.currentTarget.parent.id, god:event.currentTarget.parent.god, type:event.currentTarget.parent.type}) );				}							/** addWeapon			  *	---------------------------------------------------------------------------- */				public function addWeapon( weapon:Weapon ):void				{					ConsoleBroadcaster.broadcast( "TreasureScroller", "addWeapon("+weapon.id+");" );										var treasureClip:MovieClip = new (getDefinitionByName("TreasureScroller.content.item") );						treasureClip.name_txt.autoSize = TextFieldAutoSize.LEFT;						treasureClip.name_txt.text = StringsIndex.getInstance().getString(String(weapon.name));						treasureClip.delete_mc.addEventListener( MouseEvent.CLICK, handleDeleteTreasureClicked, false, 0, true );						treasureClip.delete_mc.buttonMode = true;						treasureClip.delete_mc.mouseChildren = false;						treasureClip.id = _treasureClips.length;						treasureClip.weapon = weapon;						treasureClip.type = 'WEAPON';						treasureClip.y = _treasureClips.length == 0 ? 0 : _treasureClips[_treasureClips.length-1].y + _treasureClips[_treasureClips.length-1].height + 5;										_contentClip.addChild( treasureClip );										_treasureClips.push( treasureClip );										toggleSlider();					this.setValue(1);										toggleBackgrounds();				}							/** addGod			  *	---------------------------------------------------------------------------- */				public function addGod( god:God ):void				{					ConsoleBroadcaster.broadcast( "TreasureScroller", "addGod("+god.id+");" );										var treasureClip:MovieClip = new (getDefinitionByName("TreasureScroller.content.item") );						treasureClip.name_txt.autoSize = TextFieldAutoSize.LEFT;						treasureClip.name_txt.text = StringsIndex.getInstance().getString(String(god.name));						treasureClip.delete_mc.addEventListener( MouseEvent.CLICK, handleDeleteTreasureClicked, false, 0, true );						treasureClip.delete_mc.buttonMode = true;						treasureClip.delete_mc.mouseChildren = false;						treasureClip.id = _treasureClips.length;						treasureClip.god = god;						treasureClip.type = 'GOD';						treasureClip.y = _treasureClips.length == 0 ? 0 : _treasureClips[_treasureClips.length-1].y + _treasureClips[_treasureClips.length-1].height + 5;										_contentClip.addChild( treasureClip );										_treasureClips.push( treasureClip );										toggleSlider();					this.setValue(1);										toggleBackgrounds();				}								protected function toggleBackgrounds():void				{					for( var i:int=0; i<_treasureClips.length; ++i )					{						if( (i & 1) == 0 )						{							_treasureClips[i].darkBackground_mc.visible = true;							_treasureClips[i].darkBackground_mc.height = _treasureClips[i].height;						}						else							_treasureClips[i].darkBackground_mc.visible = false;					}				}							/** handleDeleteAllTreasuresClicked			  *	---------------------------------------------------------------------------- *			  *	Delete all treasures in the board, removes treasure buttons from the list.			  *	---------------------------------------------------------------------------- */				protected function handleDeleteAllTreasuresClicked( event:Event ):void				{					//while( _contentClip.numChildren > 0 )					for( var i:int=0; i<_treasureClips.length; ++i )					{						_treasureClips[i].delete_mc.removeEventListener( "onClick", handleDeleteTreasureClicked );						_contentClip.removeChildAt(_treasureClips[i]);					}										ArrayUtil.removeAll( _treasureClips );										//trace( "_treasureClips: "+_treasureClips );										dispatchEvent( new CustomEvent("onAllTreasuresDeleted") );				}						}	}