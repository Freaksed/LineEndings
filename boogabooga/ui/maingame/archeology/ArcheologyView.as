/** ArcheologyView  *	---------------------------------------------------------------------------- *  *	@author:  *		Christian Widodo [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.maingame.archeology	{		import flash.display.MovieClip;		import flash.events.Event;		import flash.utils.getDefinitionByName;				import com.avatarlabs.utils.cache.AssetsIndex;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.AssetLoaderEvent;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.navigation.UINavigation;		import com.avatarlabs.utils.navigation.UINavigationButton;				import com.boogabooga.controller.gamelevel.GameLevelDataController;		import com.boogabooga.controller.maingame.MainGameController;		import com.boogabooga.controller.maingame.IslandDataController;		import com.boogabooga.data.gamelevel.DiggingMap;		import com.boogabooga.data.gamelevel.DiggingSpots;		import com.boogabooga.data.gamelevel.GameLevel;		import com.boogabooga.data.gamelevel.GameLevelDataIndex;		import com.boogabooga.data.maingame.Village;		import com.boogabooga.events.BoogaEvent;		import com.boogabooga.ui.maingame.AbstractContentView;		import com.boogabooga.ui.maingame.IContentView;		import com.boogabooga.ui.maingame.LoadingAssetView;		import com.boogabooga.ui.maingame.gameboard.GameboardView;		import com.boogabooga.ui.maingame.islandselection.IslandSelectionView;		import com.boogabooga.ui.maingame.weaponselection.BuySingleItemPopupView;		import com.boogabooga.utils.GameLevelUtil;		import com.boogabooga.data.maingame.DigEarly;				public class ArcheologyView extends AbstractContentView implements IContentView		{			protected var _loadingAssetViewClip:LoadingAssetView;			protected var _islandSelectionViewClip:IslandSelectionView;			protected var _currentVillage:Village;			protected var _gameboardView:GameboardView;						protected var _loadingServerTime:Boolean;			protected var _loadingDiggingData:Boolean;						protected var _buySingleItemPopupViewClip:BuySingleItemPopupView;						/**	Stage Instances **/			public var buySingleItemPopupViewContainer_mc;			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function ArcheologyView()				{									}								override public function set contentClip( m:MovieClip ):void				{					super.contentClip = m;										buySingleItemPopupViewContainer_mc = _contentClip.buySingleItemPopupViewContainer_mc;				}								public function set islandSelectionViewClip( clip:IslandSelectionView ):void				{					_islandSelectionViewClip = clip;					//_islandSelectionViewClip.addEventListener( BoogaEvent.ISLAND_SELECTION_ARCHEOLOGY_ICON_ROLLED_OVER, handleIconRolledOver );					//_islandSelectionViewClip.addEventListener( BoogaEvent.ON_ARCHEOLOGY_DIG, handleArcheologyDig );					//_islandSelectionViewClip.addEventListener( BoogaEvent.ON_ARCHEOLOGY_DIG_EARLY, handleArcheologyDigEarly );				}				public function set loadingAssetViewClip( clip:LoadingAssetView ):void { _loadingAssetViewClip = clip; }				public function set gameboardView( clip:GameboardView ):void				{					_gameboardView = clip;					//_gameboardView.gameboardReference.addEventListener( BoogaEvent.ON_BUY_CHICKEN, handleBuyChickenClicked, false, 0, true );					//_gameboardView.gameboardReference.addEventListener( BoogaEvent.ON_PLAY_AGAIN, handlePlayAgainClicked, false, 0, true );					//_gameboardView.gameboardReference.addEventListener( BoogaEvent.ON_ISLAND_SELECT, handleIslandSelectClicked, false, 0, true );										//_gameboardView.gameboardController.addEventListener( GameLevelEvent.GAME_END, handleGameEnded );					//_gameboardView.gameboardController.addEventListener( BoogaEvent.ON_ISLAND_SELECT, handleIslandSelectClicked, false, 0, true );				}								override public function init():void				{					super.init();										EventNotificationCenter.getInstance().addEventListener( BoogaEvent.ON_ISLAND_CHANGED, handleIslandChanged );				}								protected function handleIslandChanged( event:CustomEvent ):void				{					show();				}							/** show			  *	---------------------------------------------------------------------------- */				override public function show():void				{					ConsoleBroadcaster.broadcast( "ArcheologyView", "show();" );										super.show();										checkServerUnixTime();										var gameLevelsToLoad:Array = new Array();										for( var i:int=0; i<_islandSelectionViewClip.island.villages.length; ++i )					{						if( MainGameController.getInstance().currentUser.getDiggingMap(_islandSelectionViewClip.island.villages[i].id) == null )						{							gameLevelsToLoad.push( _islandSelectionViewClip.island.villages[i].gameLevelId );						}						else						{							trace( "user already has digging map for village "+_islandSelectionViewClip.island.villages[i].id );							gameLevelsToLoad.push( _islandSelectionViewClip.island.villages[i].gameLevelId );						}					}										if( gameLevelsToLoad.length > 0 )					{						trace( "loading game levels for "+gameLevelsToLoad );												_loadingAssetViewClip.showLoadingProgress();												_loadingDiggingData = true;												//Load in game levels						var gameLevelDataController:GameLevelDataController = new GameLevelDataController();							gameLevelDataController.addEventListener( "onComplete", handleLoadGameLevelsComplete );							gameLevelDataController.addEventListener( "onError", handleLoadGameLevelsError );							gameLevelDataController.loadGameLevels( gameLevelsToLoad, MainGameController.getInstance().currentUser.id );													MainGameController.getInstance().urgentAssetLoaderController.loadAssets( [{id:"BoogaBoogaAsset1Swf", url:"boogabooga_asset1.swf"}] );					}					else					{						//We have all the data needed, so display the view						showArcheologyOverlay();					}										_islandSelectionViewClip.showArcheologyView();										_gameboardView.gameboardController.addEventListener( BoogaEvent.ON_ISLAND_SELECT, handleIslandSelectClicked, false, 0, true );				}							/** hide			  *	---------------------------------------------------------------------------- */				override public function hide():void				{					ConsoleBroadcaster.broadcast( "ArcheologyView", "hide();" );										_gameboardView.gameboardController.removeEventListener( BoogaEvent.ON_ISLAND_SELECT, handleIslandSelectClicked );										super.hide();										if( _buySingleItemPopupViewClip != null )						_buySingleItemPopupViewClip.hide();				}											/** initBuySingleItemPopupView			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function initBuySingleItemPopupView():void				{					_buySingleItemPopupViewClip = new BuySingleItemPopupView();					_buySingleItemPopupViewClip.contentClip = new (getDefinitionByName("WeaponSelection.BuySingleItemPopupLibrary") as Class)();					_buySingleItemPopupViewClip.contentClip.visible = false;					_buySingleItemPopupViewClip.addEventListener( BoogaEvent.ON_POPUP_HIDE, handleBuyPopupHide, false, 0, true );					_buySingleItemPopupViewClip.addEventListener( BoogaEvent.ON_BUY_DIG_EARLY, handleBuyDigEarlyClicked, false, 0, true );					_buySingleItemPopupViewClip.init();					buySingleItemPopupViewContainer_mc.addChild( _buySingleItemPopupViewClip.contentClip );				}							/** handleLoadGameLevelsComplete			  *	---------------------------------------------------------------------------- */				protected function handleLoadGameLevelsComplete( event:CustomEvent ):void				{					ConsoleBroadcaster.broadcast( "ArcheologyView", "handleLoadGameLevelComplete();" );										event.currentTarget.removeEventListener( "onComplete", handleLoadGameLevelsComplete );					event.currentTarget.removeEventListener( "onError", handleLoadGameLevelsError );										_loadingDiggingData = false;										checkIfLoadingIsComplete();										showArcheologyOverlay();				}								protected function handleLoadGameLevelsError( event:CustomEvent ):void				{					ConsoleBroadcaster.broadcast( "ArcheologyView", "handleLoadGameLevelError();" );										event.currentTarget.removeEventListener( "onComplete", handleLoadGameLevelsComplete );					event.currentTarget.removeEventListener( "onError", handleLoadGameLevelsError );				}								protected function checkServerUnixTime():void				{					_loadingServerTime = true;					var islandDataController:IslandDataController = new IslandDataController();						islandDataController.addEventListener( "onComplete", handleLoadServerUnixTimeComplete );						islandDataController.addEventListener( "onError", handleLoadServerUnixTimeError );						islandDataController.loadServerUnixTime();									}							/** handleLoadServerUnixTimeComplete			  *	---------------------------------------------------------------------------- */				protected function handleLoadServerUnixTimeComplete( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleLoadServerUnixTimeComplete );					event.currentTarget.removeEventListener( "onError", handleLoadServerUnixTimeError );										MainGameController.getInstance().currentServerUnixTime = event.customParameters.time;										_loadingServerTime = false;										checkIfLoadingIsComplete();										_islandSelectionViewClip.showArcheologyNextDig();				}								protected function handleLoadServerUnixTimeError( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleLoadServerUnixTimeComplete );					event.currentTarget.removeEventListener( "onError", handleLoadServerUnixTimeError );				}							/** checkIfLoadingIsComplete			  *	---------------------------------------------------------------------------- *			  *	Checks if loading digging data and loading server time are complete.			  *	If they are, we can hide the loading progress			  *	---------------------------------------------------------------------------- */				protected function checkIfLoadingIsComplete():void				{					if( !_loadingDiggingData && !_loadingServerTime )					{						_loadingAssetViewClip.hideLoadingProgress();					}				}							/** showArcheologyOverlay			  *	---------------------------------------------------------------------------- *			  *	Shows the archeology overlay with the number of dug and available common			  *	treasures and rare treasures.			  *	---------------------------------------------------------------------------- */				protected function showArcheologyOverlay():void				{					ConsoleBroadcaster.broadcast( "ArcheologyView", "showArcheologyOverlay();" );										var dugCommonTreasuresCount:int = 0;					var commonTreasuresCount:int = 0;					var dugRareTreasuresCount:int = 0;					var rareTreasuresCount:int = 0;					var diggingMap:DiggingMap;					var diggingSpots:DiggingSpots;										for( var i:int=0; i<_islandSelectionViewClip.island.villages.length; ++i )					{						diggingMap = MainGameController.getInstance().currentUser.getDiggingMap(_islandSelectionViewClip.island.villages[i].id);						if( diggingMap == null )						{							try							{								diggingSpots = GameLevelDataIndex.getInstance().getGameLevel( _islandSelectionViewClip.island.villages[i].gameLevelId ).diggingSpots;																if( diggingSpots != null )								{									commonTreasuresCount += diggingSpots.commonTreasuresCount;									rareTreasuresCount += diggingSpots.rareTreasuresCount;								}								else								{									ConsoleBroadcaster.broadcast( "ArcheologyView", "this diggingSpot for village "+_islandSelectionViewClip.island.villages[i].id+" should not be null !!!" );								}							}							catch( e:Error )							{								ConsoleBroadcaster.broadcast( "ArcheologyView", "this diggingSpot for village "+_islandSelectionViewClip.island.villages[i].id+" should not be null !!!" );							}						}						else						{							dugCommonTreasuresCount += diggingMap.dugCommonTreasuresCount;							commonTreasuresCount += diggingMap.commonTreasuresCount;							dugRareTreasuresCount += diggingMap.dugRareTreasuresCount;							rareTreasuresCount += diggingMap.rareTreasuresCount;						}					}										_islandSelectionViewClip.showArcheologyOverlay( dugCommonTreasuresCount, commonTreasuresCount, dugRareTreasuresCount, rareTreasuresCount );									}								protected function handleIconRolledOver( event:BoogaEvent ):void				{					//Moved this to IslandSelectionView					/*					var diggingMap:DiggingMap = MainGameController.getInstance().currentUser.getDiggingMap( Village(event.customParameters.village).id );										if( diggingMap != null )					{						_islandSelectionViewClip.showArcheologyPopup( diggingMap.dugCommonTreasuresCount, diggingMap.commonTreasuresCount, diggingMap.dugRareTreasuresCount, diggingMap.rareTreasuresCount );					}					else if( GameLevelDataIndex.getInstance().getGameLevel(event.customParameters.village.gameLevelId) != null )					{						var diggingSpots:DiggingSpots = GameLevelDataIndex.getInstance().getGameLevel(event.customParameters.village.gameLevelId).diggingSpots;						_islandSelectionViewClip.showArcheologyPopup( diggingSpots.dugCommonTreasuresCount, diggingSpots.commonTreasuresCount, diggingSpots.dugRareTreasuresCount, diggingSpots.rareTreasuresCount );					}					*/				}							/** handleArcheologyDig			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function handleArcheologyDig( event:BoogaEvent ):void				{					playDiggingLevel( event.customParameters.village );										_islandSelectionViewClip.hide();				}							/** playDiggingLevel			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				public function playDiggingLevel( village:Village ):void				{					ConsoleBroadcaster.broadcast( "ArcheologyView", "playDiggingLevel("+village.id+");" );										//trace( "_gameboardView: "+_gameboardView );										_currentVillage = village;					_gameboardView.gameboardController.currentVillage = _currentVillage;										//trace( "_currentVillage: "+_currentVillage );										//TODO;					//	We have to make sure that we load the assets for the digging					var diggingMap:DiggingMap = MainGameController.getInstance().currentUser.getDiggingMap( village.id );					if( diggingMap != null )					{						trace( "digging map is not null, "+diggingMap );						_gameboardView.gameboardController.diggingMap = diggingMap;						//_gameboardView.gameboardController.showDiggingLevel();						//_gameboardView.startPlayDigLevel();												//trace( "diggingMap: "+diggingMap );						diggingMap.output();					}					else					{						trace( "digging map is null, we need to generate a digging map here" );						//var gameLevel:GameLevel = GameLevelDataIndex.getInstance().getGameLevel( village.gameLevelId );												diggingMap = GameLevelDataIndex.getInstance().getGameLevel( village.gameLevelId ).diggingSpots.generateDiggingMap();						diggingMap.villageId = village.id;						diggingMap.countTreasures();						MainGameController.getInstance().currentUser.saveDiggingMap( diggingMap );												GameLevelDataIndex.getInstance().getGameLevel( village.gameLevelId ).diggingSpots.output();						diggingMap.output();												//trace( "diggingSpots: "+GameLevelDataIndex.getInstance().getGameLevel( village.gameLevelId ).diggingSpots );						//trace( "diggingMap: "+diggingMap );												_gameboardView.gameboardController.diggingMap = diggingMap;						//_gameboardView.startPlayDigLevel();					}										//trace( "village.gameLevelid: "+village.gameLevelId );										var gameLevel:GameLevel = GameLevelDataIndex.getInstance().getGameLevel( village.gameLevelId );					_gameboardView.gameboardController.gameLevel = gameLevel;										//trace( "gameLevel: "+gameLevel );					/*					if( AssetsIndex.getInstance().isAssetLoaded(gameLevel.gameLevelBackgroundLinkageId) )					{						//trace( "gameLevelBackground asset is loaded" );						_gameboardView.loadGameLevelBackground();						_gameboardView.startPlayDigLevel();					}					else					{						_loadingAssetViewClip.showLoadingProgress();												//trace( "load gameLevelBackground asset" );						MainGameController.getInstance().urgentAssetLoaderController.addEventListener( AssetLoaderEvent.COMPLETE, handleLoadGameLevelAssetsComplete );						MainGameController.getInstance().urgentAssetLoaderController.addEventListener( AssetLoaderEvent.ERROR, handleLoadGameLevelAssetsError );												var assets:Array = new Array();							assets.push( {id:gameLevel.gameLevelBackgroundId, url:gameLevel.gameLevelBackgroundAssetURL} );							assets = assets.concat( GameLevelUtil.getVillageAssets(gameLevel) );							assets = assets.concat( GameLevelUtil.getGameLevelAssets(gameLevel) );												MainGameController.getInstance().urgentAssetLoaderController.loadAssets( assets );											}					*/										_loadingAssetViewClip.showLoadingProgress();										//trace( "load gameLevelBackground asset" );					MainGameController.getInstance().urgentAssetLoaderController.addEventListener( AssetLoaderEvent.COMPLETE, handleLoadGameLevelAssetsComplete );					MainGameController.getInstance().urgentAssetLoaderController.addEventListener( AssetLoaderEvent.ERROR, handleLoadGameLevelAssetsError );										var assets:Array = new Array();						assets.push( {id:gameLevel.gameLevelBackgroundId, url:gameLevel.gameLevelBackgroundAssetURL} );						assets = assets.concat( GameLevelUtil.getVillageAssets(gameLevel) );						assets = assets.concat( GameLevelUtil.getGameLevelAssets(gameLevel) );										MainGameController.getInstance().urgentAssetLoaderController.loadAssets( assets );				}								protected function handleLoadGameLevelAssetsComplete( event:AssetLoaderEvent ):void				{					MainGameController.getInstance().urgentAssetLoaderController.removeEventListener( AssetLoaderEvent.COMPLETE, handleLoadGameLevelAssetsComplete );					MainGameController.getInstance().urgentAssetLoaderController.removeEventListener( AssetLoaderEvent.ERROR, handleLoadGameLevelAssetsError );										_loadingAssetViewClip.hideLoadingProgress();										_gameboardView.loadGameLevelBackground();					_gameboardView.startPlayDigLevel();				}								protected function handleLoadGameLevelAssetsError( event:AssetLoaderEvent ):void				{					//TODO:					//	Do something if there's an error in loading game level assets										MainGameController.getInstance().urgentAssetLoaderController.removeEventListener( AssetLoaderEvent.COMPLETE, handleLoadGameLevelAssetsComplete );					MainGameController.getInstance().urgentAssetLoaderController.removeEventListener( AssetLoaderEvent.ERROR, handleLoadGameLevelAssetsError );										EventNotificationCenter.getInstance().sendNotification( BoogaEvent.LOADING_ERROR, this );				}							/** handleIslandSelectClicked			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function handleIslandSelectClicked( event:BoogaEvent ):void				{					ConsoleBroadcaster.broadcast( "ArcheologyView", "handleIslandSelectClicked();" );										if( MainGameController.getInstance().saveUserDataComplete )					{						ConsoleBroadcaster.broadcast( "ArcheologyView", "showing island select" );						showIslandSelect();					}					else					{						ConsoleBroadcaster.broadcast( "ArcheologyView", "waiting for update user data to finish" );						MainGameController.getInstance().addEventListener( BoogaEvent.ON_UPDATE_USER_DATA_COMPLETE, showIslandSelect );					}				}							/** showIslandSelect			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function showIslandSelect( event:BoogaEvent=null )				{					ConsoleBroadcaster.broadcast( "ArcheologyView", "showIslandSelect();" );										if( event != null )						MainGameController.getInstance().removeEventListener( BoogaEvent.ON_UPDATE_USER_DATA_COMPLETE, showIslandSelect );											checkServerUnixTime();										_islandSelectionViewClip.showArcheologyView();					_gameboardView.stopPlayDigLevel();										if( _buySingleItemPopupViewClip != null )						_buySingleItemPopupViewClip.hide();				}							/** handleArcheologyDigEarly			  *	---------------------------------------------------------------------------- *			  *	This event is fired when user clicks on the dig early button. It will prompt			  *	the facebook payment so user can bypass the cooldown timer for the digging.			  *	---------------------------------------------------------------------------- */				protected function handleArcheologyDigEarly( event:BoogaEvent ):void				{					ConsoleBroadcaster.broadcast( "IslandSelectionView", "handleArcheologyDigEarly();" );										//TODO:					//	Ask user if they're going to pay					//	If purchase is successful, update the island timer					//MainGameController.getInstance().currentUser.getUnlockedIsland(_island.id).lastDigTime = 0;					/*					MainGameController.getInstance().addEventListener( BoogaEvent.ON_PURCHASE_SUCCESS, handlePurchaseToDigEarlySuccess );					MainGameController.getInstance().addEventListener( BoogaEvent.ON_PURCHASE_FAIL, handlePurchaseToDigEarlyFail );					MainGameController.getInstance().purchaseToDigEarly();					*/										//dispatchEvent( new BoogaEvent(BoogaEvent.ON_ARCHEOLOGY_DIG_EARLY) );										if( _buySingleItemPopupViewClip == null )					{						initBuySingleItemPopupView();					}										_buySingleItemPopupViewClip.show();										var digEarly:DigEarly = new DigEarly();						digEarly.name = 138;						digEarly.description = 350;						digEarly.prices.push( {id:1, quantity:1, price:3} );										_buySingleItemPopupViewClip.item = digEarly;					_buySingleItemPopupViewClip.show();				}							/** handleBuyPopupHide			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function handleBuyPopupHide( event:BoogaEvent ):void				{					_islandSelectionViewClip.showMagnifyingGlassMouseCursor();				}							/** handleBuyDigEarlyClicked			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function handleBuyDigEarlyClicked( event:BoogaEvent ):void				{					MainGameController.getInstance().addEventListener( BoogaEvent.ON_PURCHASE_SUCCESS, handlePurchaseToDigEarlySuccess );					MainGameController.getInstance().addEventListener( BoogaEvent.ON_PURCHASE_FAIL, handlePurchaseToDigEarlyFail );					MainGameController.getInstance().purchaseToDigEarly();				}							/** handlePurchaseToDigEarlySuccess			  *	---------------------------------------------------------------------------- *			  *	This event is fired when the purchase to dig early is successful.			  *	---------------------------------------------------------------------------- */				protected function handlePurchaseToDigEarlySuccess( event:BoogaEvent ):void				{					ConsoleBroadcaster.broadcast( "IslandSelectionView", "handlePurchaseToDigEarlySuccess();" );										MainGameController.getInstance().removeEventListener( BoogaEvent.ON_PURCHASE_SUCCESS, handlePurchaseToDigEarlySuccess );					MainGameController.getInstance().removeEventListener( BoogaEvent.ON_PURCHASE_FAIL, handlePurchaseToDigEarlyFail );										_buySingleItemPopupViewClip.hide();										//MainGameController.getInstance().currentUser.getUnlockedIsland(_island.id).lastDigTime = 0;										//_islandSelectionViewClip.archeologyPopupClip.showIncompleteView( MainGameController.getInstance().currentUser.getUnlockedIsland( _islandSelectionViewClip.island.id).nextDigTime < MainGameController.getInstance().currentServerUnixTime );										//_islandSelectionViewClip.nextExpeditionClip.hide();				}							/** handlePurchaseToDigEarlyFail			  *	---------------------------------------------------------------------------- */				protected function handlePurchaseToDigEarlyFail( event:BoogaEvent ):void				{					ConsoleBroadcaster.broadcast( "IslandSelectionView", "handlePurchaseToDigEarlyFail();" );										MainGameController.getInstance().removeEventListener( BoogaEvent.ON_PURCHASE_SUCCESS, handlePurchaseToDigEarlySuccess );					MainGameController.getInstance().removeEventListener( BoogaEvent.ON_PURCHASE_FAIL, handlePurchaseToDigEarlyFail );										EventNotificationCenter.getInstance().sendNotification( BoogaEvent.LOADING_ERROR, this );										//TODO:					//	Do something when there is an error in the purchase.				}		}	}