/** ChooseGiftViewRowClip  *	---------------------------------------------------------------------------- *  *	@author:  *		Christian Widodo [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.maingame.play	{		import flash.display.Bitmap;		import flash.display.BitmapData;		import flash.display.Loader;		import flash.display.MovieClip;		import flash.events.Event;		import flash.events.EventDispatcher;		import flash.events.MouseEvent;		import flash.net.URLRequest;		import flash.system.ApplicationDomain;		import flash.system.LoaderContext;		import flash.text.TextField;		import flash.text.TextFieldAutoSize;		import flash.utils.getDefinitionByName;				import com.avatarlabs.utils.VectorUtil;		import com.avatarlabs.utils.cache.BitmapDataManager;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.sound.SoundEffectPlayer;		import com.avatarlabs.utils.text.TextFormatting;		import com.avatarlabs.utils.userinterface.DynamicUIButton;		import com.avatarlabs.utils.userinterface.DynamicUICheckBox;		import org.osflash.signals.Signal;				import com.boogabooga.controller.maingame.MainGameController;		import com.boogabooga.data.SettingsIndex;		import com.boogabooga.data.SoundsIndex;		import com.boogabooga.data.StringsIndex;		import com.boogabooga.data.gamelevel.AbstractGameObject;		import com.boogabooga.data.gamelevel.GameLevelDataIndex;		import com.boogabooga.data.maingame.Gift;		import com.boogabooga.data.maingame.Treasure;		import com.boogabooga.data.maingame.Village;		import com.boogabooga.events.BoogaEvent;		import com.boogabooga.ui.maingame.DescriptionScroller;		import com.boogabooga.utils.GameLevelUtil;				public class ChooseGiftViewRowClip extends EventDispatcher		{			protected var _contentClip:MovieClip;			protected var _gift:Gift;			protected var _checkBox:DynamicUICheckBox;			protected var _rowHeight:Number;						public var onCheckBoxClicked:Signal;						/**	Stage Instances **/			public var darkBg_mc:MovieClip;			public var lightBg_mc:MovieClip;			public var gift_mc:MovieClip;			public var elements_mc:MovieClip;			public var image_mc:MovieClip;			public var from_txt:TextField;			public var name_mc:MovieClip;			public var person_mc:MovieClip;			public var checkBox_mc:MovieClip;			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function ChooseGiftViewRowClip()				{					//init();				}								public function set contentClip( m:MovieClip ):void				{					_contentClip = m;										darkBg_mc = _contentClip.darkBg_mc;					lightBg_mc = _contentClip.lightBg_mc;					gift_mc = _contentClip.gift_mc;					gift_mc.mouseEnabled = false;					elements_mc = _contentClip.elements_mc;					elements_mc.mouseChildren = false;					elements_mc.mouseEnabled = false;					image_mc = _contentClip.image_mc;					from_txt = _contentClip.from_txt;					from_txt.mouseEnabled = false;					name_mc = _contentClip.name_mc;					name_mc.mouseEnabled = false;					person_mc = _contentClip.person_mc;					person_mc.mouseChildren = false;					person_mc.mouseEnabled = false;					checkBox_mc = _contentClip.checkBox_mc;										_rowHeight = darkBg_mc.height;										_checkBox = new DynamicUICheckBox();					_checkBox.dynamicClip = checkBox_mc;					_checkBox.markerClip = checkBox_mc.marker_mc;					_checkBox.dynamicInit();				}				public function get contentClip():MovieClip { return _contentClip; }								public function get gift():Gift { return _gift; }							/** init			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				public function init():void				{					_checkBox.addEventListener( "onClick", handleCheckBoxClicked, false, 0, true );					_checkBox.addEventListener( "onSetFocus", handleCheckBoxRolledOver, false, 0, true );					//_checkBox.addEventListener( "onKillFocus", handleCheckBoxRolledOut, false, 0, true );										image_mc.addEventListener( MouseEvent.ROLL_OVER, handleImageRolledOver, false, 0, true );					image_mc.addEventListener( MouseEvent.ROLL_OUT, handleImageRolledOut, false, 0, true );										onCheckBoxClicked = new Signal( ChooseGiftViewRowClip );										//TextFormatting.formatTextWithFontName( header_mc.label_txt, "Choose a gift !", "SF Fedora", false, TextFieldAutoSize.CENTER );					TextFormatting.formatTextWithFontName( from_txt, 'FROM', "Lithos Pro Black", false, TextFieldAutoSize.CENTER );										EventNotificationCenter.getInstance().addSignalListener( BoogaEvent.ON_LANGUAGE_CHANGED, handleLanguageChanged, this );				}								public function kill():void				{					_checkBox.removeEventListener( "onClick", handleCheckBoxClicked );					_checkBox.removeEventListener( "onSetFocus", handleCheckBoxRolledOver );					//_checkBox.removeEventListener( "onKillFocus", handleCheckBoxRolledOut );					_checkBox.kill();										image_mc.removeEventListener( MouseEvent.ROLL_OVER, handleImageRolledOver );					image_mc.removeEventListener( MouseEvent.ROLL_OUT, handleImageRolledOut );										EventNotificationCenter.getInstance().removeSignalListener( BoogaEvent.ON_LANGUAGE_CHANGED, handleLanguageChanged );				}								public function check():void				{					_checkBox.checked = true;					_checkBox.setDeactive();				}								public function uncheck():void				{					_checkBox.checked = false;					_checkBox.setActive();				}							/** reset			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				public function reset():void				{					while( image_mc.numChildren > 0 )						image_mc.removeChildAt(0);										while( person_mc.image_mc.numChildren > 0 )						person_mc.image_mc.removeChildAt(0);										while( elements_mc.numChildren > 0 )						elements_mc.removeChildAt(0);									}							/** setGift			  *	---------------------------------------------------------------------------- *			  *	Shows the current gift based on the index.			  *	---------------------------------------------------------------------------- */				public function setGift( g:Gift ):void				{					_gift = g;										if( _gift != null )					{						//var item:AbstractGameObject = MainGameController.getInstance().currentUser.getItemForGift( _gift.id );												TextFormatting.formatTextWithFontName( name_mc.label_txt, StringsIndex.getInstance().getString(String(_gift.item.name)), "Lithos Pro Black", false, TextFieldAutoSize.LEFT );												name_mc.y = int((_rowHeight - name_mc.height)*.5);												var element:MovieClip;						var elements:Array = GameLevelUtil.getItemElements( _gift.item );												for( var i:int=0; i<elements.length; ++i )						{							element = new (getDefinitionByName(elements[i]) as Class)();							element.width = 24;							element.height = 25;							//element.x = -12;							element.y = -25 * i;							elements_mc.addChild( element );						}												TextFormatting.formatTextWithFontName( person_mc.name_txt, (_gift.fromFirstName+" "+_gift.fromLastName), "Lithos Pro Black", false, TextFieldAutoSize.LEFT );						person_mc.name_txt.y = int((_rowHeight - person_mc.name_txt.height)*.5);												if( BitmapDataManager.getInstance().getBitmapData("UserFBProfilePic_"+_gift.fromId)== null )						{							BitmapDataManager.getInstance().addEventListener( Event.COMPLETE, handleLoadBitmapComplete );							BitmapDataManager.getInstance().loadBitmapToCache( _gift.fromProfilePicURL, "UserFBProfilePic_"+_gift.fromId );						}						else						{							addUserImage();						}												if( BitmapDataManager.getInstance().getBitmapData(_gift.item.cacheIconId) == null )						{							BitmapDataManager.getInstance().addEventListener( Event.COMPLETE, handleLoadIconComplete );							BitmapDataManager.getInstance().loadBitmapToCache( SettingsIndex.getInstance().contentURL+_gift.item.iconURL, _gift.item.cacheIconId );						}						else						{							addIconImage();						}											}				}								protected function handleLoadBitmapComplete( event:CustomEvent ):void				{					if( event.customParameters.cacheId == "UserFBProfilePic_"+_gift.fromId )					{						BitmapDataManager.getInstance().removeEventListener( Event.COMPLETE, handleLoadBitmapComplete );												addUserImage();					}				}								protected function addUserImage():void				{					var bitmap:Bitmap = new Bitmap(BitmapDataManager.getInstance().getBitmapData("UserFBProfilePic_"+_gift.fromId).bitmapData);						bitmap.smoothing = true;						bitmap.width = bitmap.height = 50;										person_mc.image_mc.addChild( bitmap );				}								protected function handleLoadIconComplete( event:CustomEvent ):void				{					if( event.customParameters.cacheId == _gift.item.cacheIconId )					{						BitmapDataManager.getInstance().removeEventListener( Event.COMPLETE, handleLoadIconComplete );												addIconImage();					}				}								protected function addIconImage():void				{					var bitmap:Bitmap = new Bitmap(BitmapDataManager.getInstance().getBitmapData(_gift.item.cacheIconId).bitmapData);						bitmap.smoothing = true;						bitmap.width = bitmap.height = 50;						bitmap.x = bitmap.y = -25;										image_mc.addChild( bitmap );				}								private function handleImageRolledOver( event:MouseEvent ):void				{					var text:String = StringsIndex.getInstance().getString(String(_gift.item.name));					var text2:String = StringsIndex.getInstance().getString(String(_gift.item.description));					var text3:String = _gift.item.statistic;										EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_TEXT_HOVER_SHOW, this, {clip:image_mc, text:text, text2:text2, text3:text3, align:TextFieldAutoSize.CENTER} );				}								private function handleImageRolledOut( event:MouseEvent ):void				{					EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_TEXT_HOVER_HIDE, this );				}								private function handleCheckBoxClicked( event:Event ):void				{					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav" );										_checkBox.setDeactive();										onCheckBoxClicked.dispatch( this );				}								private function handleCheckBoxRolledOver( event:Event ):void				{					trace( 'handleCheckBoxRolledOver();' );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav" );				}							/** handleLanguageChanged			  *	---------------------------------------------------------------------------- *			  *	When a language is changed, update the text accordingly.			  *	---------------------------------------------------------------------------- */				protected function handleLanguageChanged( customParameters:Object ):void				{					TextFormatting.formatTextWithFontName( name_mc.label_txt, StringsIndex.getInstance().getString(String(_gift.item.name)), "Lithos Pro Black", false, TextFieldAutoSize.LEFT );					name_mc.y = int((_rowHeight - name_mc.height)*.5);				}						}	}