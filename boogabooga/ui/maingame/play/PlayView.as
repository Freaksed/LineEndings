/** PlayView  *	---------------------------------------------------------------------------- *  *	@author:  *		Christian Widodo [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.maingame.play	{		import flash.display.MovieClip;		import flash.events.Event;		import flash.events.TimerEvent;		import flash.geom.Point;		import flash.ui.Mouse;		import flash.utils.getDefinitionByName;		import flash.text.TextFieldAutoSize;		import flash.utils.Timer;		import flash.utils.getTimer;				import com.avatarlabs.utils.UtilFunctions;		import com.avatarlabs.utils.VectorUtil;		import com.avatarlabs.utils.cache.AssetsIndex;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.AssetLoaderEvent;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.sound.SoundEffectPlayer;		import com.avatarlabs.utils.text.TextFormatting;		import com.avatarlabs.utils.timers.CustomTimer;		import com.avatarlabs.utils.userinterface.DynamicUIButton;				import com.boogabooga.controller.gamelevel.GameboardController;		import com.boogabooga.controller.gamelevel.GameLevelDataController;		import com.boogabooga.controller.maingame.GiftDataController;		import com.boogabooga.controller.maingame.IslandDataController;		import com.boogabooga.controller.maingame.MainGameController;		import com.boogabooga.controller.maingame.StoreDataController;		import com.boogabooga.data.StringsIndex;		//import com.boogabooga.data.gamelevel.Chicken;		import com.boogabooga.data.gamelevel.DiggingMap;		import com.boogabooga.data.gamelevel.DiggingSpots;		import com.boogabooga.data.gamelevel.GameLevel;		import com.boogabooga.data.gamelevel.GameLevelDataIndex;		import com.boogabooga.data.gamelevel.GameLevelCurrentData;		import com.boogabooga.data.gamelevel.Weapon;		import com.boogabooga.data.maingame.DigEarly;		import com.boogabooga.data.maingame.Island;		import com.boogabooga.data.maingame.Village;		import com.boogabooga.events.BoogaEvent;		import com.boogabooga.events.GameLevelEvent;		import com.boogabooga.ui.gamelevel.Gameboard;		import com.boogabooga.ui.maingame.AbstractContentView;		import com.boogabooga.ui.maingame.IContentView;		import com.boogabooga.ui.maingame.LoadingAssetView;		import com.boogabooga.ui.maingame.gameboard.GameboardView;		import com.boogabooga.ui.maingame.islandselection.IslandSelectionView;		import com.boogabooga.ui.maingame.weaponselection.BuyPopupView;		import com.boogabooga.ui.maingame.weaponselection.BuySingleItemPopupView;		import com.boogabooga.ui.maingame.weaponselection.WeaponSelectionView;		import com.boogabooga.utils.GameLevelUtil;				public class PlayView extends AbstractContentView implements IContentView		{			//protected var _playing;						protected var _loadingAssetViewClip:LoadingAssetView;			protected var _gameLevelDataController:GameLevelDataController;			//protected var _gameboardController:GameboardController;			//protected var _gameboardReference:Gameboard;			//protected var _gameLevelId:int;			//protected var _playViewControlsClip:PlayViewControls;			protected var _islandSelectionViewClip:IslandSelectionView;			protected var _currentVillage:Village;			protected var _gameboardView:GameboardView;						protected var _adventureLevelNormalScreenY:Number;			protected var _adventureLevelProgressBarNormalScreenY:Number;			protected var _villageNameNormalScreenY:Number;			protected var _replayNormalScreenY:Number;			protected var _exitNormalScreenY:Number;						protected var _weaponSelectionView:WeaponSelectionView;			protected var _buyPopupViewClip:BuyPopupView;			protected var _buySingleItemPopupViewClip:BuySingleItemPopupView;						protected var _isWeaponSelectionAssetLoaded:Boolean;						protected var _chooseGiftViewClip:ChooseGiftView;			protected var _exitClip:DynamicUIButton;			protected var _replayClip:DynamicUIButton;						protected var _loadingServerTime:Boolean;			protected var _loadingDiggingData:Boolean;						private var _resetAdventureLevelProgressBarTimer:Timer;			private var _buyDigEarlyFromDigResultView:Boolean;			private var _minimumJungleLoadingTimer:CustomTimer;			private var _passedMinimumJungleLoading:Boolean;			private var _loadingInitialAssets:Boolean;						/**	Stage Instances **/			//public var gameboardContainer_mc:MovieClip;			public var weaponSelectionViewContainer_mc:MovieClip;			public var chooseGiftView_mc:MovieClip;			public var buyChickenPopupViewContainer_mc:MovieClip;			public var buySingleItemPopupViewContainer_mc:MovieClip;			public var adventureLevel_mc:MovieClip;			public var adventureLevelProgressBar_mc:MovieClip;			public var replay_mc:MovieClip;			public var exit_mc:MovieClip;			public var villageName_mc:MovieClip;			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function PlayView()				{									}								override public function set contentClip( m:MovieClip ):void				{					super.contentClip = m;										weaponSelectionViewContainer_mc = _contentClip.weaponSelectionViewContainer_mc;					chooseGiftView_mc = _contentClip.chooseGiftView_mc;					buyChickenPopupViewContainer_mc = _contentClip.buyChickenPopupViewContainer_mc;					buySingleItemPopupViewContainer_mc = _contentClip.buySingleItemPopupViewContainer_mc;					adventureLevel_mc = _contentClip.adventureLevel_mc;					adventureLevelProgressBar_mc = _contentClip.adventureLevelProgressBar_mc;					adventureLevelProgressBar_mc.stop();					replay_mc = _contentClip.replay_mc;					exit_mc = _contentClip.exit_mc;					villageName_mc = _contentClip.villageName_mc;					villageName_mc.visible = false;										_adventureLevelNormalScreenY = adventureLevel_mc.y;					_adventureLevelProgressBarNormalScreenY = adventureLevelProgressBar_mc.y;					_villageNameNormalScreenY = villageName_mc.y;					_replayNormalScreenY = replay_mc.y;					_exitNormalScreenY = exit_mc.y;										_chooseGiftViewClip = new ChooseGiftView();					_chooseGiftViewClip.contentClip = chooseGiftView_mc;					_chooseGiftViewClip.init();										_exitClip = new DynamicUIButton();					_exitClip.dynamicClip = exit_mc;					_exitClip.dynamicInit();					_exitClip.dynamicClip.visible = false;										_replayClip = new DynamicUIButton();					_replayClip.dynamicClip = replay_mc;					_replayClip.dynamicInit();					_replayClip.dynamicClip.visible = false;				}								public function set islandSelectionViewClip( clip:IslandSelectionView ):void				{					_islandSelectionViewClip = clip;					_islandSelectionViewClip.addEventListener( BoogaEvent.ON_PLAY_LEVEL, handlePlayLevel );					//_islandSelectionViewClip.addEventListener( BoogaEvent.ISLAND_SELECTION_GAME_LEVEL_ICON_ROLLED_OVER, handleIconRolledOver );					_islandSelectionViewClip.addEventListener( BoogaEvent.ON_ARCHEOLOGY_DIG, handleArcheologyDig );					_islandSelectionViewClip.addEventListener( BoogaEvent.ON_ARCHEOLOGY_DIG_EARLY, handleArcheologyDigEarly );										_islandSelectionViewClip.onIslandChanged.add( handleIslandChanged );				}				public function set loadingAssetViewClip( clip:LoadingAssetView ):void { _loadingAssetViewClip = clip; }				public function set gameboardView( clip:GameboardView ):void				{					_gameboardView = clip;					_gameboardView.playViewClip = this;					//_gameboardView.gameboardReference.addEventListener( BoogaEvent.ON_BUY_CHICKEN, handleBuyChickenClicked, false, 0, true );					//_gameboardView.gameboardReference.addEventListener( BoogaEvent.ON_PLAY_AGAIN, handlePlayAgainClicked, false, 0, true );					//_gameboardView.gameboardReference.addEventListener( BoogaEvent.ON_ISLAND_SELECT, handleIslandSelectClicked, false, 0, true );										//_gameboardView.gameboardController.addEventListener( GameLevelEvent.GAME_END, handleGameEnded );					//_gameboardView.gameboardController.addEventListener( BoogaEvent.ON_ISLAND_SELECT, handleIslandSelectClicked, false, 0, true );					_gameboardView.gameboardReference.addEventListener( BoogaEvent.ON_DIG_RESULT_VIEW_LEAVE_EARLY, handleDigResultDigEarly );				}				public function get gameboardView():GameboardView { return _gameboardView; }								/*				public function set playViewControlsClip( clip:PlayViewControls ):void 				{					_playViewControlsClip = clip;					//_playViewControlsClip.gameboardController = _gameboardController;				}				*/				override public function init():void				{					super.init();										_contentClip.mouseChildren = true;					_contentClip.mouseEnabled = false;										//gameboardContainer_mc.mouseChildren = true;					//gameboardContainer_mc.mouseEnabled = false;										//trace( "GameboardLibrary Class "+(getDefinitionByName("GameboardLibrary") as Class) );										//_gameboardReference = new Gameboard();					//_gameboardReference.contentClip = new (getDefinitionByName("GameboardLibrary") as Class)();					//gameboardContainer_mc.addChild( _gameboardReference.contentClip );					//_gameboardReference.init();					//_gameboardReference.tileOpacity = 0;					//_gameboardReference.inIsometricView = true;					//_gameboardReference.addEventListener( BoogaEvent.ON_BUY_CHICKEN, handleBuyChickenClicked, false, 0, true );					//_gameboardReference.addEventListener( BoogaEvent.ON_PLAY_AGAIN, handlePlayAgainClicked, false, 0, true );					//_gameboardReference.addEventListener( BoogaEvent.ON_ISLAND_SELECT, handleIslandSelectClicked, false, 0, true );										//_gameboardController = new GameboardController();					//_gameboardController.gameboardReference = _gameboardReference;					//_gameboardController.addEventListener( GameLevelEvent.GAME_END, handleGameEnded );					//_gameboardController.addEventListener( BoogaEvent.ON_ISLAND_SELECT, handleIslandSelectClicked, false, 0, true );										_isWeaponSelectionAssetLoaded = false;										_chooseGiftViewClip.contentClip.visible = false;					_chooseGiftViewClip.onGiftSelectionCancelled.add( handleGiftSelectionCancel );					_chooseGiftViewClip.onGiftSelectionDone.add( handleGiftSelectionDone );										_exitClip.addEventListener( "onSetFocus", handleExitRolledOver );					_exitClip.addEventListener( "onKillFocus", handleExitRolledOut );					_exitClip.addEventListener( "onClick", handleExitClicked );					_replayClip.addEventListener( "onSetFocus", handleReplayRolledOver );					_replayClip.addEventListener( "onKillFocus", handleReplayRolledOut );					_replayClip.addEventListener( "onClick", handleReplayClicked );										//EventNotificationCenter.getInstance().addEventListener( BoogaEvent.ON_SMALL_ADVENTURE_LEVEL_SHOW, showSmallAdventureLevel, false, 0, true );					//EventNotificationCenter.getInstance().addEventListener( BoogaEvent.ON_SMALL_ADVENTURE_LEVEL_HIDE, hideSmallAdventureLevel, false, 0, true );					EventNotificationCenter.getInstance().addSignalListener( BoogaEvent.ON_ADVENTURE_LEVEL_UPDATE, handleUpdateAdventureLevel, this );					//EventNotificationCenter.getInstance().addEventListener( BoogaEvent.ON_ADVENTURE_LEVEL_POPUP_SHOW, handleUpdateAdventureLevel, false, 0, true );					TextFormatting.formatTextWithFontName( adventureLevel_mc.score_mc.label_txt, String(MainGameController.getInstance().currentUser.adventureLevel), "Lithos Pro Black", false, TextFieldAutoSize.CENTER );					TextFormatting.formatTextWithFontName( adventureLevelProgressBar_mc.level_txt, String(MainGameController.getInstance().currentUser.adventureLevel+1), "Lithos Pro Black", false, TextFieldAutoSize.CENTER );					//adventureLevelProgressBar_mc.mask_mc.scaleX = (MainGameController.getInstance().currentUser.adventureScore - MainGameController.getInstance().currentUser.prevAdventureScore) / (MainGameController.getInstance().currentUser.nextAdventureScore - MainGameController.getInstance().currentUser.prevAdventureScore);					handleAdventureScoreUpdated();										MainGameController.getInstance().currentUser.onAdventureScoreUpdated.add( handleAdventureScoreUpdated );										//TweenLite.to( adventureLevel_mc, .5, {alpha:1} );					adventureLevel_mc.visible = false;					adventureLevel_mc.alpha = 1;					adventureLevelProgressBar_mc.visible = false;										//TextFormatting.formatTextWithFontName( villageName_mc.label_txt, "Village 29", "Lithos Pro Black", false, TextFieldAutoSize.CENTER );				}							/** show			  *	---------------------------------------------------------------------------- */				override public function show():void				{					super.show();										_islandSelectionViewClip.showGameLevelView();										_gameboardView.gameboardReference.addEventListener( BoogaEvent.ON_BUY_CHICKEN, handleBuyChickenClicked, false, 0, true );					_gameboardView.gameboardReference.addEventListener( BoogaEvent.ON_PLAY_AGAIN, handlePlayAgainClicked, false, 0, true );					_gameboardView.gameboardReference.addEventListener( BoogaEvent.ON_ISLAND_SELECT, handleIslandSelectClicked, false, 0, true );										EventNotificationCenter.getInstance().addEventListener( GameLevelEvent.ON_MENU_ICON_BUY_CLICKED, handleMenuIconBuyClicked, false, 0, true );										_gameboardView.gameboardController.addEventListener( GameLevelEvent.GAME_END, handleGameEnded );					_gameboardView.gameboardController.addEventListener( BoogaEvent.ON_ISLAND_SELECT, handleIslandSelectClicked, false, 0, true );					_gameboardView.gameboardController.addEventListener( BoogaEvent.ON_PLAY_NEXT_LEVEL, handlePlayNextLevel, false, 0, true );										//TODO:					//	Always load user latest data here.					//	Not sure which ones to load really.. gifts? weapon use counts?					checkServerUnixTime();					checkForGameLevelsData();									}							/** hide			  *	---------------------------------------------------------------------------- */				override public function hide():void				{					ConsoleBroadcaster.broadcast( "PlayView", "hide();" );										_gameboardView.gameboardReference.removeEventListener( BoogaEvent.ON_BUY_CHICKEN, handleBuyChickenClicked );					_gameboardView.gameboardReference.removeEventListener( BoogaEvent.ON_PLAY_AGAIN, handlePlayAgainClicked );					_gameboardView.gameboardReference.removeEventListener( BoogaEvent.ON_ISLAND_SELECT, handleIslandSelectClicked );										EventNotificationCenter.getInstance().removeEventListener( GameLevelEvent.ON_MENU_ICON_BUY_CLICKED, handleMenuIconBuyClicked );										_gameboardView.gameboardController.removeEventListener( GameLevelEvent.GAME_END, handleGameEnded );					_gameboardView.gameboardController.removeEventListener( BoogaEvent.ON_ISLAND_SELECT, handleIslandSelectClicked );					_gameboardView.gameboardController.removeEventListener( BoogaEvent.ON_PLAY_NEXT_LEVEL, handlePlayNextLevel );										_gameboardView.hide();										if( _weaponSelectionView != null && _weaponSelectionView.isContentVisible )						_weaponSelectionView.hide();										villageName_mc.visible = false;										super.hide();				}							/** toggleFullScreen			  *	---------------------------------------------------------------------------- */				public function toggleFullScreen( fullScreen:Boolean, yDifference:Number=120 ):void				{					if( fullScreen )					{						adventureLevel_mc.y = _adventureLevelNormalScreenY - yDifference;						adventureLevelProgressBar_mc.y = _adventureLevelProgressBarNormalScreenY - yDifference;						villageName_mc.y = _villageNameNormalScreenY - yDifference;						replay_mc.y = _replayNormalScreenY - yDifference;						exit_mc.y = _exitNormalScreenY - yDifference;					}					else					{						adventureLevel_mc.y = _adventureLevelNormalScreenY;						adventureLevelProgressBar_mc.y = _adventureLevelProgressBarNormalScreenY;						villageName_mc.y = _villageNameNormalScreenY;						replay_mc.y = _replayNormalScreenY;						exit_mc.y = _exitNormalScreenY;					}										_gameboardView.gameboardReference.toggleFullScreen( fullScreen );				}							/** checkForGameLevelsData			  *	---------------------------------------------------------------------------- */				protected function checkForGameLevelsData():void				{					var gameLevelsToLoad:Array = new Array();										for( var i:int=0; i<_islandSelectionViewClip.island.villages.length; ++i )					{						if( MainGameController.getInstance().currentUser.getDiggingMap(_islandSelectionViewClip.island.villages[i].id) == null )						{							gameLevelsToLoad.push( _islandSelectionViewClip.island.villages[i].gameLevelId );						}						else						{							trace( "user already has digging map for village "+_islandSelectionViewClip.island.villages[i].id );							gameLevelsToLoad.push( _islandSelectionViewClip.island.villages[i].gameLevelId );						}					}										if( gameLevelsToLoad.length > 0 )					{						trace( "loading game levels for "+gameLevelsToLoad );												_loadingAssetViewClip.showLoadingProgress();												_loadingDiggingData = true;												//Load in game levels						var gameLevelDataController:GameLevelDataController = new GameLevelDataController();							gameLevelDataController.addEventListener( "onComplete", handleLoadGameLevelsComplete );							gameLevelDataController.addEventListener( "onError", handleLoadGameLevelsError );							gameLevelDataController.loadGameLevels( gameLevelsToLoad, MainGameController.getInstance().currentUser.id );					}				}							/** handleLoadGameLevelsComplete			  *	---------------------------------------------------------------------------- */				protected function handleLoadGameLevelsComplete( event:CustomEvent ):void				{					ConsoleBroadcaster.broadcast( "PlayView", "handleLoadGameLevelComplete();" );										event.currentTarget.removeEventListener( "onComplete", handleLoadGameLevelsComplete );					event.currentTarget.removeEventListener( "onError", handleLoadGameLevelsError );										_loadingDiggingData = false;										checkIfLoadingIsComplete();				}								protected function handleLoadGameLevelsError( event:CustomEvent ):void				{					ConsoleBroadcaster.broadcast( "PlayView", "handleLoadGameLevelError();" );										event.currentTarget.removeEventListener( "onComplete", handleLoadGameLevelsComplete );					event.currentTarget.removeEventListener( "onError", handleLoadGameLevelsError );				}							/** checkServerUnixTime			  *	---------------------------------------------------------------------------- */				protected function checkServerUnixTime():void				{					_loadingServerTime = true;					var islandDataController:IslandDataController = new IslandDataController();						islandDataController.addEventListener( "onComplete", handleLoadServerUnixTimeComplete );						islandDataController.addEventListener( "onError", handleLoadServerUnixTimeError );						islandDataController.loadServerUnixTime();				}							/** handleLoadServerUnixTimeComplete			  *	---------------------------------------------------------------------------- */				protected function handleLoadServerUnixTimeComplete( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleLoadServerUnixTimeComplete );					event.currentTarget.removeEventListener( "onError", handleLoadServerUnixTimeError );										MainGameController.getInstance().currentServerUnixTime = event.customParameters.time;										_loadingServerTime = false;										if( MainGameController.getInstance().currentUser.getUnlockedIsland(_islandSelectionViewClip.island.id) != null && MainGameController.getInstance().currentUser.getUnlockedIsland(_islandSelectionViewClip.island.id).nextDigTime > MainGameController.getInstance().currentServerUnixTime )					{						_islandSelectionViewClip.startNextDigCountDown( MainGameController.getInstance().currentServerUnixTime, MainGameController.getInstance().currentUser.getUnlockedIsland(_islandSelectionViewClip.island.id).nextDigTime );					}										checkIfLoadingIsComplete();				}								protected function handleLoadServerUnixTimeError( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleLoadServerUnixTimeComplete );					event.currentTarget.removeEventListener( "onError", handleLoadServerUnixTimeError );				}							/** checkIfLoadingIsComplete			  *	---------------------------------------------------------------------------- *			  *	Checks if loading digging data and loading server time are complete.			  *	If they are, we can hide the loading progress			  *	---------------------------------------------------------------------------- */				protected function checkIfLoadingIsComplete():void				{					if( !_loadingDiggingData && !_loadingServerTime )					{						_loadingAssetViewClip.hideLoadingProgress();												dispatchEvent( new BoogaEvent(BoogaEvent.ON_LOAD_ISLANDS_DATA_COMPLETED) );					}				}							/** initBuySingleItemPopupView			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function initBuySingleItemPopupView():void				{					if( AssetsIndex.getInstance().isAssetLoaded("BoogaBoogaAsset1Swf") )					{						ConsoleBroadcaster.broadcast( "PlayView", "initializing buy single item popup" );												_buySingleItemPopupViewClip = new BuySingleItemPopupView();						_buySingleItemPopupViewClip.contentClip = new (getDefinitionByName("WeaponSelection.BuySingleItemPopupLibrary") as Class)();						_buySingleItemPopupViewClip.contentClip.visible = false;						_buySingleItemPopupViewClip.addEventListener( BoogaEvent.ON_POPUP_HIDE, handleBuySingleItemPopupHide, false, 0, true );						_buySingleItemPopupViewClip.addEventListener( BoogaEvent.ON_BUY_DIG_EARLY, handleBuyDigEarlyClicked, false, 0, true );						_buySingleItemPopupViewClip.init();						buySingleItemPopupViewContainer_mc.addChild( _buySingleItemPopupViewClip.contentClip );												var digEarly:DigEarly = new DigEarly();							digEarly.name = 138;							digEarly.description = 350;							digEarly.prices.push( {id:1, quantity:1, price:2} );												_buySingleItemPopupViewClip.item = digEarly;						_buySingleItemPopupViewClip.show();					}					else					{						ConsoleBroadcaster.broadcast( "PlayView", "loading boogabooga asset1 swf" );												_loadingAssetViewClip.showLoadingProgress();												MainGameController.getInstance().urgentAssetLoaderController.addEventListener( AssetLoaderEvent.COMPLETE, handleLoadBuySingleItemAssetComplete );						MainGameController.getInstance().urgentAssetLoaderController.addEventListener( AssetLoaderEvent.ERROR, handleLoadBuySingleItemAssetError );						MainGameController.getInstance().urgentAssetLoaderController.loadAssets( [{id:"BoogaBoogaAsset1Swf", url:"boogabooga_asset1.swf"}] );					}				}								protected function handleLoadBuySingleItemAssetComplete( event:AssetLoaderEvent ):void				{					ConsoleBroadcaster.broadcast( "PlayView", "handleLoadBuySingleItemAssetComplete();" );										MainGameController.getInstance().urgentAssetLoaderController.removeEventListener( AssetLoaderEvent.COMPLETE, handleLoadBuySingleItemAssetComplete );					MainGameController.getInstance().urgentAssetLoaderController.removeEventListener( AssetLoaderEvent.ERROR, handleLoadBuySingleItemAssetError );										initBuySingleItemPopupView();										var digEarly:DigEarly = new DigEarly();						digEarly.name = 138;						digEarly.description = 350;						digEarly.prices.push( {id:1, quantity:1, price:2} );										_buySingleItemPopupViewClip.item = digEarly;					_buySingleItemPopupViewClip.show();										_loadingAssetViewClip.hideLoadingProgress();				}								protected function handleLoadBuySingleItemAssetError( event:AssetLoaderEvent ):void				{					ConsoleBroadcaster.broadcast( "PlayView", "handleLoadBuySingleItemAssetError();" );										MainGameController.getInstance().urgentAssetLoaderController.removeEventListener( AssetLoaderEvent.COMPLETE, handleLoadBuySingleItemAssetComplete );					MainGameController.getInstance().urgentAssetLoaderController.removeEventListener( AssetLoaderEvent.ERROR, handleLoadBuySingleItemAssetError );										trace( " do something when there is an error" );					EventNotificationCenter.getInstance().sendNotification( BoogaEvent.LOADING_ERROR, this );				}								protected function handleRefreshAcceptedGiftsCompleted():void				{					//ConsoleBroadcaster.broadcast( "PlayView", "handleRefreshAcceptedGiftsCompleted();" );										//MainGameController.getInstance().removeEventListener( "onRefreshAcceptedGiftsComplete", handleRefreshAcceptedGiftsComplete );					//MainGameController.getInstance().removeEventListener( "onRefreshAcceptedGiftsError", handleRefreshAcceptedGiftsError );					MainGameController.getInstance().onRefreshAcceptedGiftsCompleted.remove( handleRefreshAcceptedGiftsCompleted );					MainGameController.getInstance().onRefreshAcceptedGiftsErred.remove( handleRefreshAcceptedGiftsErred );										//_loadingAssetViewClip.hideLoadingProgress();				}								protected function handleRefreshAcceptedGiftsErred():void				{					//ConsoleBroadcaster.broadcast( "PlayView", "handleRefreshAcceptedGiftsErred();" );										//MainGameController.getInstance().removeEventListener( "onRefreshAcceptedGiftsComplete", handleRefreshAcceptedGiftsComplete );					//MainGameController.getInstance().removeEventListener( "onRefreshAcceptedGiftsError", handleRefreshAcceptedGiftsError );					MainGameController.getInstance().onRefreshAcceptedGiftsCompleted.remove( handleRefreshAcceptedGiftsCompleted );					MainGameController.getInstance().onRefreshAcceptedGiftsErred.remove( handleRefreshAcceptedGiftsErred );										//_loadingAssetViewClip.hideLoadingProgress();										EventNotificationCenter.getInstance().sendNotification( BoogaEvent.LOADING_ERROR, this );				}				/*				public function pauseGame():void				{					_gameboardController.pause();				}								public function unpauseGame():void				{					_gameboardController.unpause();				}				*/			/** initGameLevelDataController			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function initGameLevelDataController():void				{					if( _gameLevelDataController == null )					{						_gameLevelDataController = new GameLevelDataController();						_gameLevelDataController.addEventListener( "onComplete", handleLoadGameLevelDataComplete, false, 0, true );						_gameLevelDataController.addEventListener( "onError", handleLoadGameLevelDataError, false, 0, true );					}				}							/** initBuyPopupView			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function initBuyPopupView():void				{					_buyPopupViewClip = new BuyPopupView();					_buyPopupViewClip.contentClip = new (getDefinitionByName("WeaponSelection.BuyPopupLibrary") as Class)();					_buyPopupViewClip.contentClip.visible = false;					_buyPopupViewClip.addEventListener( BoogaEvent.ON_POPUP_HIDE, handleBuyPopupHide, false, 0, true );					_buyPopupViewClip.addEventListener( BoogaEvent.ON_BUY_CHICKEN, handleBuyPopupBuyChickenClicked, false, 0, true );					_buyPopupViewClip.addEventListener( BoogaEvent.ON_BUY_GOD, handleBuyPopupBuyItemClicked, false, 0, true );					_buyPopupViewClip.addEventListener( BoogaEvent.ON_BUY_WEAPON, handleBuyPopupBuyItemClicked, false, 0, true );					_buyPopupViewClip.init();					buyChickenPopupViewContainer_mc.addChild( _buyPopupViewClip.contentClip );				}								protected function initWeaponSelectionView():void				{					_weaponSelectionView = new WeaponSelectionView();					_weaponSelectionView.contentClip = new (getDefinitionByName("WeaponSelectionViewLibrary") as Class)();					weaponSelectionViewContainer_mc.addChild( _weaponSelectionView.contentClip );					_weaponSelectionView.addEventListener( BoogaEvent.WEAPON_SELECTION_DONE, handleWeaponSelectionDone, false, 0, true );					_weaponSelectionView.addEventListener( BoogaEvent.WEAPON_SELECTION_CANCEL, handleWeaponSelectionCancel, false, 0, true );					_weaponSelectionView.init();				}							/** playGameLevel			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				public function playGameLevel( village:Village ):void				{					ConsoleBroadcaster.broadcast( "PlayView", "playGameLevel("+village.id+");" );					Mouse.show();					_currentVillage = village;					_gameboardView.gameboardController.currentVillage = _currentVillage;					_gameboardView.gameboardController.resetState();					_gameboardView.gameboardReference.resultScreenWinClip.randomizeVillagerCelebration();										GameLevelCurrentData.getInstance().kill();					if( _weaponSelectionView )						_weaponSelectionView.reset();										GameLevelCurrentData.getInstance().playingIsland = _islandSelectionViewClip.island;					GameLevelCurrentData.getInstance().playingVillage = _currentVillage;										MainGameController.getInstance().stopMainBackgroundMusic();										//_loadingAssetViewClip.showLoadingProgress();										EventNotificationCenter.getInstance().sendNotification( BoogaEvent.ON_STORE_HIDE, this );										//MainGameController.getInstance().addEventListener( "onRefreshAcceptedGiftsComplete", handleRefreshAcceptedGiftsCompleted );					//MainGameController.getInstance().addEventListener( "onRefreshAcceptedGiftsError", handleRefreshAcceptedGiftsError );					MainGameController.getInstance().onRefreshAcceptedGiftsCompleted.add( handleRefreshAcceptedGiftsCompleted );					MainGameController.getInstance().onRefreshAcceptedGiftsErred.add( handleRefreshAcceptedGiftsErred );					MainGameController.getInstance().refreshAcceptedGifts();										if( GameLevelDataIndex.getInstance().getGameLevel(_currentVillage.gameLevelId) == null )					{						initGameLevelDataController();												_gameLevelDataController.loadGameLevels( [village.gameLevelId], MainGameController.getInstance().currentUser.id );												_loadingAssetViewClip.showLoadingProgress( MainGameController.getInstance().urgentAssetLoaderController );					}					else					{						_gameboardView.gameboardController.gameLevel = GameLevelDataIndex.getInstance().getGameLevel(_currentVillage.gameLevelId);						//_gameboardView.gameboardController.gameLevel.level = _currentVillage.level;						loadGameLevelAssets();					}										TextFormatting.formatTextWithFontName( villageName_mc.label_txt, _currentVillage.name, "Lithos Pro Black", false, TextFieldAutoSize.CENTER );					//villageName_mc.visible = true;				}							/** handleLoadGameLevelDataComplete			  *	---------------------------------------------------------------------------- *			  *	After GameLevel data is loaded, either loads assets and play game directly			  *	or display WeaponSelectionView if user has more weapons than the attack slots.			  *	---------------------------------------------------------------------------- */				protected function handleLoadGameLevelDataComplete( event:CustomEvent ):void				{					ConsoleBroadcaster.broadcast( "PlayView", "handleLoadGameLevelDataComplete();" );					//trace( "gameLevelId: "+event.customParameters.id );										_gameboardView.gameboardController.gameLevel = GameLevelDataIndex.getInstance().getGameLevel( _currentVillage.gameLevelId );					//_gameboardView.gameboardController.gameLevel.level = _currentVillage.level;					//_gameboardController.cryptologyId = _currentVillage.cryptologyId;					//_gameboardView.gameboardController.currentVillage = _currentVillage;										loadGameLevelAssets();				}							/** handleLoadGameLevelDataError			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function handleLoadGameLevelDataError( event:CustomEvent ):void				{					ConsoleBroadcaster.broadcast( "PlayView", "handleLoadGameLevelDataError();" );										//TODO:					//	Do something when loading game level data encounters an error										EventNotificationCenter.getInstance().sendNotification( BoogaEvent.LOADING_ERROR, this );				}							/** loadGameLevelAssets			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function loadGameLevelAssets():void				{					//TODO:					//	If user has more weapons unlocked than user's attack slots, display WeaponSelectionView					//	else we can just go straight to game play										var assets:Array = new Array();					var i:int;										for( i=0; i<MainGameController.getInstance().currentUser.unlockedWeapons.length; ++i )					{						assets.push( {id:MainGameController.getInstance().currentUser.unlockedWeapons[i].cacheIconId, url:MainGameController.getInstance().currentUser.unlockedWeapons[i].iconURL} );					}										for( i=0; i<MainGameController.getInstance().currentUser.unlockedGods.length; ++i )					{						assets.push( {id:MainGameController.getInstance().currentUser.unlockedGods[i].cacheIconId, url:MainGameController.getInstance().currentUser.unlockedGods[i].iconURL} );					}										//assets = assets.concat( GameLevelUtil.getVillageAssets(_currentVillage) );					assets.push( {id:_gameboardView.gameboardController.gameLevel.gameLevelBackgroundLinkageId, url:_gameboardView.gameboardController.gameLevel.gameLevelBackgroundAssetURL} );										if( !_isWeaponSelectionAssetLoaded )					{						//trace( "WeaponSelectionViewLibrary: "+getDefinitionByName("WeaponSelectionViewLibrary") );												_isWeaponSelectionAssetLoaded = true;						assets.push( {id:"BoogaBoogaAsset1Swf", url:"boogabooga_asset1.swf"} );					}										if( MainGameController.getInstance().currentUser.tutorialGameLevel )					{						assets.push( {id:"GameIntroSwf", url:"files/assets/sounds/game_intro.swf"} );					}										var weapon:Weapon;					for( i=0; i<MainGameController.getInstance().currentUser.gifts.length; ++i )					{						assets.push( {id:MainGameController.getInstance().currentUser.getItemForGift( MainGameController.getInstance().currentUser.gifts[i].id ).cacheIconId, url:MainGameController.getInstance().currentUser.getItemForGift( MainGameController.getInstance().currentUser.gifts[i].id ).iconURL} );					}										if( MainGameController.getInstance().currentUser.unlockedAttacksLength > MainGameController.getInstance().currentUser.attackSlots )					{						assets = assets.concat( GameLevelUtil.getGameLevelAssets(_gameboardView.gameboardController.gameLevel) );					}					else					{						VectorUtil.removeAll( GameLevelCurrentData.getInstance().selectedAttacks );												for( i=0; i<MainGameController.getInstance().currentUser.unlockedWeapons.length; ++i )						{							GameLevelCurrentData.getInstance().selectedAttacks.push( MainGameController.getInstance().currentUser.unlockedWeapons[i] );						}												assets = assets.concat( GameLevelUtil.getAttackAssets(GameLevelCurrentData.getInstance().selectedAttacks) );						assets = assets.concat( GameLevelUtil.getGameLevelAssets(_gameboardView.gameboardController.gameLevel) );					}										assets.push( {id:_gameboardView.gameboardReference.resultScreenWinClip.villagerCelebrationSfx.id, url:_gameboardView.gameboardReference.resultScreenWinClip.villagerCelebrationSfx.url} );										//_loadingAssetViewClip.showLoadingProgress( MainGameController.getInstance().urgentAssetLoaderController, true );					_loadingAssetViewClip.showLoadingJungleAnimation();					_passedMinimumJungleLoading = false;					_loadingInitialAssets = true;										if( _minimumJungleLoadingTimer == null )					{						_minimumJungleLoadingTimer = new CustomTimer( 5000, 1 );						//_minimumJungleLoadingTimer.addEventListener( TimerEvent.TIMER_COMPLETE, handleMinimumJungleLoadingTimerCompleted );						_minimumJungleLoadingTimer.onTimerCompleted.add( handleMinimumJungleLoadingTimerCompleted );					}										_minimumJungleLoadingTimer.start();										MainGameController.getInstance().urgentAssetLoaderController.addEventListener( AssetLoaderEvent.COMPLETE, handleLoadInitialAssetsComplete );					MainGameController.getInstance().urgentAssetLoaderController.addEventListener( AssetLoaderEvent.ERROR, handleLoadInitialAssetsError );					MainGameController.getInstance().urgentAssetLoaderController.loadAssets( assets );									}							/** handleLoadInitialAssetsComplete			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function handleLoadInitialAssetsComplete( event:AssetLoaderEvent ):void				{					MainGameController.getInstance().urgentAssetLoaderController.removeEventListener( AssetLoaderEvent.COMPLETE, handleLoadInitialAssetsComplete );					MainGameController.getInstance().urgentAssetLoaderController.removeEventListener( AssetLoaderEvent.ERROR, handleLoadInitialAssetsError );										_loadingInitialAssets = false;										if( _passedMinimumJungleLoading )						showGamePlayAfterInitialAssetsLoadComplete();				}							/** handleLoadInitialAssetsError			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function handleLoadInitialAssetsError( event:AssetLoaderEvent ):void				{					EventNotificationCenter.getInstance().sendNotification( BoogaEvent.LOADING_ERROR, this );										MainGameController.getInstance().urgentAssetLoaderController.removeEventListener( AssetLoaderEvent.COMPLETE, handleLoadInitialAssetsComplete );					MainGameController.getInstance().urgentAssetLoaderController.removeEventListener( AssetLoaderEvent.ERROR, handleLoadInitialAssetsError );										EventNotificationCenter.getInstance().sendNotification( BoogaEvent.LOADING_ERROR, this );				}								private function showGamePlayAfterInitialAssetsLoadComplete():void				{					_loadingAssetViewClip.hideLoadingJungleAnimation();										_gameboardView.loadGameLevelBackground();										if( MainGameController.getInstance().currentUser.unlockedAttacksLength > MainGameController.getInstance().currentUser.attackSlots )					{						// show the weapon selection view						if( _weaponSelectionView == null )							initWeaponSelectionView();												EventNotificationCenter.getInstance().sendNotification( BoogaEvent.ON_TRANSITION_SHOW, this );												_weaponSelectionView.gameLevel = _gameboardView.gameboardController.gameLevel;						_weaponSelectionView.initEnemies( _gameboardView.gameboardController.gameLevel.distinctEnemiesInLevel );						_weaponSelectionView.initAvailableItems( GameLevelDataIndex.getInstance().weapons, GameLevelDataIndex.getInstance().gods );						_weaponSelectionView.initMonstersPaths();						_weaponSelectionView.show();												if( _islandSelectionViewClip.island.islandOrder == 2 && _currentVillage.villageOrder == 1 && _currentVillage.id == MainGameController.getInstance().currentUser.currentVillageId )						{							EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_WARNING_SHOW, this, {showIceWarning:true} );						}						else if( _islandSelectionViewClip.island.islandOrder == 3 && _currentVillage.villageOrder == 1 && _currentVillage.id == MainGameController.getInstance().currentUser.currentVillageId )						{							EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_WARNING_SHOW, this, {showFireWarning:true} );						}												//_loadingAssetViewClip.showLoadingProgress( MainGameController.getInstance().assetLoaderController );						//_loadingAssetViewClip.visible = true;												MainGameController.getInstance().playGameLevelAfterLoading = false;						//MainGameController.getInstance().assetLoaderController.loadAssets( GameLevelUtil.getGameLevelAssets(_gameboardController.gameLevel) );												_gameboardView.show();												trace( "show weapon selection view" );					}					else if( !MainGameController.getInstance().currentUser.tutorialGameLevel && MainGameController.getInstance().currentUser.gifts.length > 0 )					{						EventNotificationCenter.getInstance().sendNotification( BoogaEvent.ON_TRANSITION_SHOW, this );												//_gameboardView.loadGameLevelBackground();						_gameboardView.show();						_chooseGiftViewClip.initGifts();						_chooseGiftViewClip.show();					}					else					{						EventNotificationCenter.getInstance().sendNotification( BoogaEvent.ON_TRANSITION_SHOW, this );												_gameboardView.startPlayGameLevel();					}				}								private function handleMinimumJungleLoadingTimerCompleted( timer:CustomTimer ):void				{					_passedMinimumJungleLoading = true;					_minimumJungleLoadingTimer.reset();										if( !_loadingInitialAssets )					{						showGamePlayAfterInitialAssetsLoadComplete();					}				}							/** handleWeaponSelectionDone			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function handleWeaponSelectionDone( event:BoogaEvent ):void				{					if( MainGameController.getInstance().currentUser.gifts.length > 0 )					{						_chooseGiftViewClip.initGifts();						_chooseGiftViewClip.show();					}					else					{						loadAllGameAssetsAndPlay();					}										_weaponSelectionView.hide();				}							/** handleWeaponSelectionCancel			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function handleWeaponSelectionCancel( event:BoogaEvent ):void				{					_weaponSelectionView.hide();					_gameboardView.hide();										hideSmallAdventureLevel();					hideReplayExitButtons();										_islandSelectionViewClip.showGameLevelView();										MainGameController.getInstance().startMainBackgroundMusic();										if( MainGameController.getInstance().currentUser.level >= 7 )						EventNotificationCenter.getInstance().sendNotification( BoogaEvent.ON_NAVIGATION_STORE_SHOW, this );				}							/** handleGiftSelectionCancel			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function handleGiftSelectionCancel():void				{					//_gameboardView.startPlayGameLevel();										loadAllGameAssetsAndPlay();										_chooseGiftViewClip.hide();				}								protected function handleGiftSelectionDone():void				{					//GameLevelCurrentData.getInstance().gift = MainGameController.getInstance().currentUser.gifts[_chooseGiftViewClip.currentGiftIndex];					GameLevelCurrentData.getInstance().gift = _chooseGiftViewClip.selectedGift;										loadAllGameAssetsAndPlay();										_chooseGiftViewClip.hide();				}							/** loadAllGameAssetsAndPlay			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				public function loadAllGameAssetsAndPlay():void				{					//_loadingAssetViewClip.showLoadingProgress( MainGameController.getInstance().assetLoaderController );					_loadingAssetViewClip.showBuildingItem( MainGameController.getInstance().assetLoaderController );										MainGameController.getInstance().playGameLevelAfterLoading = true;					MainGameController.getInstance().assetLoaderController.addEventListener( AssetLoaderEvent.COMPLETE, handleLoadAllGameAssetsComplete, false, 0, true );					MainGameController.getInstance().assetLoaderController.addEventListener( AssetLoaderEvent.ERROR, handleLoadAllGameAssetsError, false, 0, true );										var assets:Array = new Array();						assets.push( {id:_gameboardView.gameboardReference.resultScreenWinClip.villagerCelebrationSfx.id, url:_gameboardView.gameboardReference.resultScreenWinClip.villagerCelebrationSfx.url} );						assets = assets.concat( GameLevelUtil.getAttackAssets(GameLevelCurrentData.getInstance().selectedAttacks) );										if( GameLevelCurrentData.getInstance().gift != null )						assets = assets.concat( GameLevelUtil.getAttackAssets([GameLevelCurrentData.getInstance().gift.item]) );						//MainGameController.getInstance().assetLoaderController.loadAssets( GameLevelUtil.getAttackAssets(GameLevelCurrentData.getInstance().selectedAttacks.concat(GameLevelCurrentData.getInstance().gift.item)) );					//else						//MainGameController.getInstance().assetLoaderController.loadAssets( GameLevelUtil.getAttackAssets(GameLevelCurrentData.getInstance().selectedAttacks) );										MainGameController.getInstance().assetLoaderController.loadAssets( assets );				}							/** handleLoadAllGameAssetsComplete			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function handleLoadAllGameAssetsComplete( event:AssetLoaderEvent ):void				{					MainGameController.getInstance().assetLoaderController.removeEventListener( AssetLoaderEvent.COMPLETE, handleLoadAllGameAssetsComplete );					MainGameController.getInstance().assetLoaderController.removeEventListener( AssetLoaderEvent.ERROR, handleLoadAllGameAssetsError );										//_loadingAssetViewClip.hideLoadingProgress();					_loadingAssetViewClip.hideBuildingItem();										_gameboardView.startPlayGameLevel();					/*					if( !MainGameController.getInstance().currentUser.tutorialGameLevel )					{						//_exitClip.dynamicClip.visible = true;						//_replayClip.dynamicClip.visible = true;					}					else					{						EventNotificationCenter.getInstance().sendNotification( BoogaEvent.ON_UI_ELEMENTS_HIDE, this );					}					*/				}								protected function handleLoadAllGameAssetsError( event:AssetLoaderEvent ):void				{					MainGameController.getInstance().assetLoaderController.removeEventListener( AssetLoaderEvent.COMPLETE, handleLoadAllGameAssetsComplete );					MainGameController.getInstance().assetLoaderController.removeEventListener( AssetLoaderEvent.ERROR, handleLoadAllGameAssetsError );										EventNotificationCenter.getInstance().sendNotification( BoogaEvent.LOADING_ERROR, this );				}				/*				protected function handleIconRolledOver( event:BoogaEvent ):void				{									}				*/							/** handleIslandChanged			  *	---------------------------------------------------------------------------- *			  *	When island is changed, we have to make sure to load the last digging time			  *	for the island and check if we need to load any game levels.			  *	---------------------------------------------------------------------------- */				protected function handleIslandChanged():void				{					checkServerUnixTime();					checkForGameLevelsData();				}								protected function handlePlayLevel( event:BoogaEvent ):void				{					_islandSelectionViewClip.hide();										EventNotificationCenter.getInstance().sendNotification( BoogaEvent.ON_NAVIGATION_STORE_HIDE, this );										playGameLevel( event.customParameters.village );				}											/**	******************************************* *			  * Digging Events			  *	******************************************* */							/** handleArcheologyDig			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function handleArcheologyDig( event:BoogaEvent ):void				{					playDiggingLevel( event.customParameters.village );										_islandSelectionViewClip.hide();				}							/** playDiggingLevel			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				public function playDiggingLevel( village:Village ):void				{					ConsoleBroadcaster.broadcast( "ArcheologyView", "playDiggingLevel("+village.id+");" );										//trace( "_gameboardView: "+_gameboardView );										_currentVillage = village;					_gameboardView.gameboardController.currentVillage = _currentVillage;										//trace( "_currentVillage: "+_currentVillage );										//TODO;					//	We have to make sure that we load the assets for the digging					var diggingMap:DiggingMap = MainGameController.getInstance().currentUser.getDiggingMap( village.id );					if( diggingMap != null )					{						//trace( "digging map is not null, "+diggingMap );						_gameboardView.gameboardController.diggingMap = diggingMap;						//_gameboardView.gameboardController.showDiggingLevel();						//_gameboardView.startPlayDigLevel();												//trace( "diggingMap: "+diggingMap );						//diggingMap.output();					}					else					{						//trace( "digging map is null, we need to generate a digging map here" );						//var gameLevel:GameLevel = GameLevelDataIndex.getInstance().getGameLevel( village.gameLevelId );												diggingMap = GameLevelDataIndex.getInstance().getGameLevel( village.gameLevelId ).diggingSpots.generateDiggingMap();						diggingMap.villageId = village.id;						diggingMap.countTreasures();						MainGameController.getInstance().currentUser.saveDiggingMap( diggingMap );												//GameLevelDataIndex.getInstance().getGameLevel( village.gameLevelId ).diggingSpots.output();						//diggingMap.output();												//trace( "diggingSpots: "+GameLevelDataIndex.getInstance().getGameLevel( village.gameLevelId ).diggingSpots );						//trace( "diggingMap: "+diggingMap );												_gameboardView.gameboardController.diggingMap = diggingMap;						//_gameboardView.startPlayDigLevel();					}										//trace( "village.gameLevelid: "+village.gameLevelId );										var gameLevel:GameLevel = GameLevelDataIndex.getInstance().getGameLevel( village.gameLevelId );					_gameboardView.gameboardController.gameLevel = gameLevel;										//trace( "gameLevel: "+gameLevel );					/*					if( AssetsIndex.getInstance().isAssetLoaded(gameLevel.gameLevelBackgroundLinkageId) )					{						//trace( "gameLevelBackground asset is loaded" );						_gameboardView.loadGameLevelBackground();						_gameboardView.startPlayDigLevel();					}					else					{						_loadingAssetViewClip.showLoadingProgress();												//trace( "load gameLevelBackground asset" );						MainGameController.getInstance().urgentAssetLoaderController.addEventListener( AssetLoaderEvent.COMPLETE, handleLoadGameLevelAssetsComplete );						MainGameController.getInstance().urgentAssetLoaderController.addEventListener( AssetLoaderEvent.ERROR, handleLoadGameLevelAssetsError );												var assets:Array = new Array();							assets.push( {id:gameLevel.gameLevelBackgroundId, url:gameLevel.gameLevelBackgroundAssetURL} );							assets = assets.concat( GameLevelUtil.getVillageAssets(gameLevel) );							assets = assets.concat( GameLevelUtil.getGameLevelAssets(gameLevel) );												MainGameController.getInstance().urgentAssetLoaderController.loadAssets( assets );											}					*/										_loadingAssetViewClip.showLoadingProgress();										//trace( "load gameLevelBackground asset" );					MainGameController.getInstance().urgentAssetLoaderController.addEventListener( AssetLoaderEvent.COMPLETE, handleLoadGameLevelAssetsComplete );					MainGameController.getInstance().urgentAssetLoaderController.addEventListener( AssetLoaderEvent.ERROR, handleLoadGameLevelAssetsError );										var assets:Array = new Array();						assets.push( {id:gameLevel.gameLevelBackgroundId, url:gameLevel.gameLevelBackgroundAssetURL} );						assets = assets.concat( GameLevelUtil.getVillageAssets(gameLevel) );						//assets = assets.concat( GameLevelUtil.getGameLevelAssets(gameLevel) );										MainGameController.getInstance().urgentAssetLoaderController.loadAssets( assets );										TextFormatting.formatTextWithFontName( villageName_mc.label_txt, _currentVillage.name, "Lithos Pro Black", false, TextFieldAutoSize.CENTER );					//villageName_mc.visible = true;				}								protected function handleLoadGameLevelAssetsComplete( event:AssetLoaderEvent ):void				{					MainGameController.getInstance().urgentAssetLoaderController.removeEventListener( AssetLoaderEvent.COMPLETE, handleLoadGameLevelAssetsComplete );					MainGameController.getInstance().urgentAssetLoaderController.removeEventListener( AssetLoaderEvent.ERROR, handleLoadGameLevelAssetsError );										_loadingAssetViewClip.hideLoadingProgress();										_gameboardView.loadGameLevelBackground();					_gameboardView.startPlayDigLevel();				}								protected function handleLoadGameLevelAssetsError( event:AssetLoaderEvent ):void				{					//TODO:					//	Do something if there's an error in loading game level assets										MainGameController.getInstance().urgentAssetLoaderController.removeEventListener( AssetLoaderEvent.COMPLETE, handleLoadGameLevelAssetsComplete );					MainGameController.getInstance().urgentAssetLoaderController.removeEventListener( AssetLoaderEvent.ERROR, handleLoadGameLevelAssetsError );										EventNotificationCenter.getInstance().sendNotification( BoogaEvent.LOADING_ERROR, this );				}							/** handleArcheologyDigEarly			  *	---------------------------------------------------------------------------- *			  *	This event is fired when user clicks on the dig early button. It will prompt			  *	the facebook payment so user can bypass the cooldown timer for the digging.			  *	---------------------------------------------------------------------------- */				protected function handleArcheologyDigEarly( event:BoogaEvent ):void				{					ConsoleBroadcaster.broadcast( "IslandSelectionView", "handleArcheologyDigEarly();" );										//TODO:					//	Ask user if they're going to pay					//	If purchase is successful, update the island timer					//MainGameController.getInstance().currentUser.getUnlockedIsland(_island.id).lastDigTime = 0;					/*					MainGameController.getInstance().addEventListener( BoogaEvent.ON_PURCHASE_SUCCESS, handlePurchaseToDigEarlySuccess );					MainGameController.getInstance().addEventListener( BoogaEvent.ON_PURCHASE_FAIL, handlePurchaseToDigEarlyFail );					MainGameController.getInstance().purchaseToDigEarly();					*/										//dispatchEvent( new BoogaEvent(BoogaEvent.ON_ARCHEOLOGY_DIG_EARLY) );										_buyDigEarlyFromDigResultView = false;										if( _buySingleItemPopupViewClip == null )					{						initBuySingleItemPopupView();					}					else					{						var digEarly:DigEarly = new DigEarly();							digEarly.name = 138;							digEarly.description = 350;							digEarly.prices.push( {id:1, quantity:1, price:2} );												//_buySingleItemPopupViewClip.removeEventListener( BoogaEvent.ON_BUY_DIG_EARLY, handleBuyDigEarlyFromDigResultViewClicked );						//_buySingleItemPopupViewClip.removeEventListener( BoogaEvent.ON_BUY_DIG_EARLY, handleBuyDigEarlyClicked );												_buySingleItemPopupViewClip.item = digEarly;						//_buySingleItemPopupViewClip.addEventListener( BoogaEvent.ON_BUY_DIG_EARLY, handleBuyDigEarlyClicked, false, 0, true );						_buySingleItemPopupViewClip.show();					}				}								private function handleDigResultDigEarly( event:BoogaEvent ):void				{					_buyDigEarlyFromDigResultView = true;										if( _buySingleItemPopupViewClip == null )					{						initBuySingleItemPopupView();					}					else					{						var digEarly:DigEarly = new DigEarly();							digEarly.name = 138;							digEarly.description = 350;							digEarly.prices.push( {id:1, quantity:1, price:2} );												//_buySingleItemPopupViewClip.removeEventListener( BoogaEvent.ON_BUY_DIG_EARLY, handleBuyDigEarlyFromDigResultViewClicked );						//_buySingleItemPopupViewClip.removeEventListener( BoogaEvent.ON_BUY_DIG_EARLY, handleBuyDigEarlyClicked );												_buySingleItemPopupViewClip.item = digEarly;						//_buySingleItemPopupViewClip.addEventListener( BoogaEvent.ON_BUY_DIG_EARLY, handleBuyDigEarlyFromDigResultViewClicked, false, 0, true );						_buySingleItemPopupViewClip.show();					}				}				/*				private function handleBuyDigEarlyFromDigResultViewClicked( event:BoogaEvent ):void				{					MainGameController.getInstance().addEventListener( BoogaEvent.ON_PURCHASE_SUCCESS, handlePurchaseToDigEarlyFromDigResultViewSuccess );					MainGameController.getInstance().addEventListener( BoogaEvent.ON_PURCHASE_FAIL, handlePurchaseToDigEarlyFromDigResultViewFail );					MainGameController.getInstance().purchaseToDigEarly();				}								private function handlePurchaseToDigEarlyFromDigResultViewSuccess( event:BoogaEvent ):void				{					MainGameController.getInstance().removeEventListener( BoogaEvent.ON_PURCHASE_SUCCESS, handlePurchaseToDigEarlyFromDigResultViewSuccess );					MainGameController.getInstance().removeEventListener( BoogaEvent.ON_PURCHASE_FAIL, handlePurchaseToDigEarlyFromDigResultViewFail );										_buySingleItemPopupViewClip.hide();										_gameboardView.gameboardReference.digResultViewClip.hide();					_gameboardView.gameboardReference.highlightDiggingTiles( MainGameController.getInstance().currentUser.getDiggingMap( _currentVillage.id ) );				}								private function handlePurchaseToDigEarlyFromDigResultViewFail( event:BoogaEvent ):void				{					MainGameController.getInstance().removeEventListener( BoogaEvent.ON_PURCHASE_SUCCESS, handlePurchaseToDigEarlyFromDigResultViewSuccess );					MainGameController.getInstance().removeEventListener( BoogaEvent.ON_PURCHASE_FAIL, handlePurchaseToDigEarlyFromDigResultViewFail );									}				*/			/** handleBuyDigEarlyClicked			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function handleBuyDigEarlyClicked( event:BoogaEvent ):void				{					MainGameController.getInstance().addEventListener( BoogaEvent.ON_PURCHASE_SUCCESS, handlePurchaseToDigEarlySuccess );					MainGameController.getInstance().addEventListener( BoogaEvent.ON_PURCHASE_FAIL, handlePurchaseToDigEarlyFail );					MainGameController.getInstance().purchaseToDigEarly();				}							/** handlePurchaseToDigEarlySuccess			  *	---------------------------------------------------------------------------- *			  *	This event is fired when the purchase to dig early is successful.			  *	---------------------------------------------------------------------------- */				protected function handlePurchaseToDigEarlySuccess( event:BoogaEvent ):void				{					ConsoleBroadcaster.broadcast( "IslandSelectionView", "handlePurchaseToDigEarlySuccess();" );										MainGameController.getInstance().removeEventListener( BoogaEvent.ON_PURCHASE_SUCCESS, handlePurchaseToDigEarlySuccess );					MainGameController.getInstance().removeEventListener( BoogaEvent.ON_PURCHASE_FAIL, handlePurchaseToDigEarlyFail );										//MainGameController.getInstance().currentServerUnixTime = 0;										MainGameController.getInstance().currentUser.getUnlockedIsland(_islandSelectionViewClip.island.id).lastDigTime = 0;										_buySingleItemPopupViewClip.hide();										if( _buyDigEarlyFromDigResultView )					{						_gameboardView.gameboardReference.digResultViewClip.hide();						_gameboardView.gameboardReference.highlightDiggingTiles( MainGameController.getInstance().currentUser.getDiggingMap( _currentVillage.id ) );					}					else					{						//MainGameController.getInstance().currentUser.getUnlockedIsland(_island.id).lastDigTime = 0;												//_islandSelectionViewClip.archeologyPopupClip.showIncompleteView( MainGameController.getInstance().currentUser.getUnlockedIsland( _islandSelectionViewClip.island.id).nextDigTime < MainGameController.getInstance().currentServerUnixTime );						//_islandSelectionViewClip.nextExpeditionClip.hide();						_islandSelectionViewClip.hideDigNextCountDown();						_islandSelectionViewClip.showMagnifyingGlassMouseCursor();					}				}							/** handlePurchaseToDigEarlyFail			  *	---------------------------------------------------------------------------- */				protected function handlePurchaseToDigEarlyFail( event:BoogaEvent ):void				{					ConsoleBroadcaster.broadcast( "IslandSelectionView", "handlePurchaseToDigEarlyFail();" );										MainGameController.getInstance().removeEventListener( BoogaEvent.ON_PURCHASE_SUCCESS, handlePurchaseToDigEarlySuccess );					MainGameController.getInstance().removeEventListener( BoogaEvent.ON_PURCHASE_FAIL, handlePurchaseToDigEarlyFail );										EventNotificationCenter.getInstance().sendNotification( BoogaEvent.LOADING_ERROR, this );										//TODO:					//	Do something when there is an error in the purchase.				}							/**	******************************************* *			  * BuyChicken Events			  *	******************************************* */						/** handleBuyPopupHide			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function handleBuyPopupHide( event:BoogaEvent ):void				{					if( _gameboardView.isPlayingGameLevel )					{						_gameboardView.unpauseGame();					}					else if( _gameboardView.isPlayingDigLevel )					{											}					else					{						_islandSelectionViewClip.showMagnifyingGlassMouseCursor();					}				}								protected function handleBuySingleItemPopupHide( event:BoogaEvent ):void				{					if( _buyDigEarlyFromDigResultView )					{											}					else					{						_islandSelectionViewClip.showMagnifyingGlassMouseCursor();					}				}							/** handleBuyChickenClicked			  *	---------------------------------------------------------------------------- *			  *	Loads the chicken prices data and when it's done, show the buy chicken popup.			  *	---------------------------------------------------------------------------- */				protected function handleBuyChickenClicked( event:BoogaEvent ):void				{					ConsoleBroadcaster.broadcast( "PlayView", "handleBuyChickenClicked();" );										_gameboardView.pauseGame(false);										if( _buyPopupViewClip == null )					{						initBuyPopupView();					}										_loadingAssetViewClip.showLoadingProgress();										var storeDataController:StoreDataController = new StoreDataController();						storeDataController.addEventListener( "onComplete", handleGetChickenPricesComplete );						storeDataController.addEventListener( "onError", handleGetChickenPricesError );						storeDataController.getChickenPrices();											//_buyPopupViewClip.show();				}								protected function handleGetChickenPricesComplete( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleGetChickenPricesComplete );					event.currentTarget.removeEventListener( "onError", handleGetChickenPricesError );										_buyPopupViewClip.item = event.customParameters.chicken;					_buyPopupViewClip.show();										_loadingAssetViewClip.hideLoadingProgress();				}								protected function handleGetChickenPricesError( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleGetChickenPricesComplete );					event.currentTarget.removeEventListener( "onError", handleGetChickenPricesError );										EventNotificationCenter.getInstance().sendNotification( BoogaEvent.LOADING_ERROR, this );				}							/** handleBuyPopupBuyChickenClicked			  *	---------------------------------------------------------------------------- *			  *	Buys the popup			  *	---------------------------------------------------------------------------- */				protected function handleBuyPopupBuyChickenClicked( event:BoogaEvent ):void				{					MainGameController.getInstance().addEventListener( BoogaEvent.ON_PURCHASE_SUCCESS, handlePurchaseChickenSuccess );					MainGameController.getInstance().addEventListener( BoogaEvent.ON_PURCHASE_FAIL, handlePurchaseChickenFail );					MainGameController.getInstance().purchaseItem( event.customParameters.type, event.customParameters.itemId, event.customParameters.priceId );										_loadingAssetViewClip.showLoadingProgress();				}								protected function handlePurchaseChickenSuccess( event:BoogaEvent ):void				{					MainGameController.getInstance().removeEventListener( BoogaEvent.ON_PURCHASE_SUCCESS, handlePurchaseChickenSuccess );					MainGameController.getInstance().removeEventListener( BoogaEvent.ON_PURCHASE_FAIL, handlePurchaseChickenFail );										_buyPopupViewClip.hide();					_gameboardView.unpauseGame();										var quantity:int = 0;					/*					for( var i:int=0; i<_buyPopupViewClip.item.prices[ _buyPopupViewClip.selectedItemPrice ].quantity; ++i )					{						_gameboardView.gameboardController.chickenDisplayObjectController.addChicken();					}					*/					GameLevelCurrentData.getInstance().chickenCount += Number(_buyPopupViewClip.item.prices[ _buyPopupViewClip.selectedItemPrice ].quantity);					_gameboardView.gameboardReference.gameboardMenuClip.updateMenu();					_gameboardView.gameboardReference.gameboardMenuClip.playPurchaseEffectForChicken();										_loadingAssetViewClip.hideLoadingProgress();				}								protected function handlePurchaseChickenFail( event:BoogaEvent ):void				{					MainGameController.getInstance().removeEventListener( BoogaEvent.ON_PURCHASE_SUCCESS, handlePurchaseChickenSuccess );					MainGameController.getInstance().removeEventListener( BoogaEvent.ON_PURCHASE_FAIL, handlePurchaseChickenFail );										EventNotificationCenter.getInstance().sendNotification( BoogaEvent.LOADING_ERROR, this );										_loadingAssetViewClip.hideLoadingProgress();				}							/** handleMenuIconBuyClicked			  *	---------------------------------------------------------------------------- *			  *	When users click on the buy icon, we can show this menu popup.			  *	---------------------------------------------------------------------------- */				protected function handleMenuIconBuyClicked( event:CustomEvent ):void				{					_gameboardView.pauseGame(false);										if( _buyPopupViewClip == null )					{						initBuyPopupView();					}										_buyPopupViewClip.item = event.customParameters.item;					_buyPopupViewClip.show();				}							/** handleBuyPopupBuyItemClicked			  *	---------------------------------------------------------------------------- *			  *	When users click to buy the item, we can process the payment.			  *	---------------------------------------------------------------------------- */				protected function handleBuyPopupBuyItemClicked( event:BoogaEvent ):void				{					trace( "priceId: "+event.customParameters.priceId );					trace( "itemId: "+event.customParameters.itemId );					trace( "type: "+event.customParameters.type );										MainGameController.getInstance().addEventListener( BoogaEvent.ON_PURCHASE_SUCCESS, handlePurchaseItemSuccess );					MainGameController.getInstance().addEventListener( BoogaEvent.ON_PURCHASE_FAIL, handlePurchaseItemFail );					MainGameController.getInstance().purchaseItem( event.customParameters.type, event.customParameters.itemId, event.customParameters.priceId, 'Gameplay' );										_loadingAssetViewClip.showLoadingProgress();				}							/** handlePurchaseItemSuccess			  *	---------------------------------------------------------------------------- *			  *	This event is fired when the purchase of a consumable item is successful.			  *	---------------------------------------------------------------------------- */				protected function handlePurchaseItemSuccess( event:BoogaEvent ):void				{					ConsoleBroadcaster.broadcast( "PlayView", "handlePurchaseItemSuccess();" );										MainGameController.getInstance().removeEventListener( BoogaEvent.ON_PURCHASE_SUCCESS, handlePurchaseItemSuccess );					MainGameController.getInstance().removeEventListener( BoogaEvent.ON_PURCHASE_FAIL, handlePurchaseItemFail );										_loadingAssetViewClip.hideLoadingProgress();										EventNotificationCenter.getInstance().sendNotificationWithParameters( BoogaEvent.ON_PURCHASE_SUCCESS, this, {from:"PlayView"} );										_buyPopupViewClip.hide();					_gameboardView.unpauseGame();				}							/** handlePurchaseItemFail			  *	---------------------------------------------------------------------------- *			  *	This event is fired when the purchase of a consumable item has failed.			  *	---------------------------------------------------------------------------- */				protected function handlePurchaseItemFail( event:BoogaEvent ):void				{					ConsoleBroadcaster.broadcast( "PlayView", "handlePurchaseItemFail();" );										MainGameController.getInstance().removeEventListener( BoogaEvent.ON_PURCHASE_SUCCESS, handlePurchaseItemSuccess );					MainGameController.getInstance().removeEventListener( BoogaEvent.ON_PURCHASE_FAIL, handlePurchaseItemFail );										_loadingAssetViewClip.hideLoadingProgress();										//TODO:					//	Do something if purchase fails				}															/**	******************************************* *			  * Gameboard Events			  *	******************************************* */											/** handlePlayAgainClicked			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function handlePlayAgainClicked( event:BoogaEvent ):void				{					ConsoleBroadcaster.broadcast( "PlayView", "handlePlayAgainClicked();" );										//_gameboardController.kill();					//_gameboardReference.visible = false;					_gameboardView.gameboardController.kill();					//_gameboardView.gameboardReference.visible = false;										_gameboardView.gameboardController.resetState();					/*					if( MainGameController.getInstance().currentUser.unlockedAttacksLength > MainGameController.getInstance().currentUser.attackSlots )					{						if( _weaponSelectionView == null )							initWeaponSelectionView();												_weaponSelectionView.gameLevel = _gameboardView.gameboardController.gameLevel;						_weaponSelectionView.initEnemies( _gameboardView.gameboardController.gameLevel.distinctEnemiesInLevel );						_weaponSelectionView.initAvailableItems( GameLevelDataIndex.getInstance().weapons, GameLevelDataIndex.getInstance().gods );						_weaponSelectionView.show();					}					else					{						_gameboardView.startPlayGameLevel();					}					*/					playGameLevel( _currentVillage );				}							/** handleIslandSelectClicked			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function handleIslandSelectClicked( event:BoogaEvent ):void				{					ConsoleBroadcaster.broadcast( "PlayView", "handleIslandSelectClicked();" );										if( MainGameController.getInstance().saveUserDataComplete )					{						ConsoleBroadcaster.broadcast( "PlayView", "showing island select" );						showIslandSelect();					}					else					{						ConsoleBroadcaster.broadcast( "PlayView", "waiting for update user data to finish" );						MainGameController.getInstance().addEventListener( BoogaEvent.ON_UPDATE_USER_DATA_COMPLETE, showIslandSelect );					}				}							/** handlePlayNextLevel			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function handlePlayNextLevel( event:BoogaEvent ):void				{					//TODO:					//	If user just finished last level of an island, go back to map selection and open the next island instead of playing next level right away.					if( MainGameController.getInstance().newIslandUnlocked )					{						MainGameController.getInstance().newIslandUnlocked = false;						//_islandSelectionViewClip.initIsland( MainGameDataIndex.getInstance().islands[ _islandSelectionViewClip.island.islandOrder ] );						_islandSelectionViewClip.showNextIsland();						showIslandSelect();						dispatchEvent( new BoogaEvent(BoogaEvent.ON_NEW_ISLAND_UNLOCKED) );						return;					}										var nextVillage:Village = MainGameController.getInstance().currentUser.getUnlockedIsland( MainGameController.getInstance().islandSelectionViewCurrentIslandId ).getVillageAfter( event.customParameters.villageId );										if( nextVillage != null )					{						//_gameboardView.gameboardController.kill();						_gameboardView.stopPlayGameLevel();						playGameLevel( nextVillage );					}					else					{						//NOTE:						//	There is no more village on this island, go to next island												var nextIsland:Island = MainGameController.getInstance().currentUser.unlockedIslands[MainGameController.getInstance().currentUser.unlockedIslands.length-1];						nextVillage = nextIsland.villages[0];												//trace( "no more island, play village "+nextVillage.id );						//trace( "village order "+nextVillage.villageOrder );												//TODO:						//	What to do when user finishes island 1? Do we force user to go back out first?												_gameboardView.stopPlayGameLevel();						playGameLevel( nextVillage );					}				}							/** showIslandSelect			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				public function showIslandSelect( event:BoogaEvent=null )				{					ConsoleBroadcaster.broadcast( "PlayView", "showIslandSelect();" );										if( MainGameController.getInstance().currentUser.level >= 7 )						EventNotificationCenter.getInstance().sendNotification( BoogaEvent.ON_NAVIGATION_STORE_SHOW, this );										//EventNotificationCenter.getInstance().sendNotification( BoogaEvent.ON_STORE_SHOW, this );										if( event != null )						MainGameController.getInstance().removeEventListener( BoogaEvent.ON_UPDATE_USER_DATA_COMPLETE, showIslandSelect );										//_playViewControlsClip.hide();					//_gameboardReference.visible = false;					//_gameboardView.hidePlayViewControlsClip();					//_gameboardView.gameboardReference.visible = false;										_islandSelectionViewClip.showGameLevelView();										checkServerUnixTime();										if( _gameboardView.isPlayingGameLevel )					{						if( _weaponSelectionView != null )						{							_weaponSelectionView.reset();						}												//_gameboardController.kill();						//_gameboardView.gameboardController.kill();						//_gameboardView.hide();						_gameboardView.stopPlayGameLevel();					}					else if( _gameboardView.isPlayingDigLevel )					{						_gameboardView.stopPlayDigLevel();					}										//EventNotificationCenter.getInstance().sendNotification( BoogaEvent.ON_ADVENTURE_LEVEL_POPUP_SHOW, this );										//if( MainGameController.getInstance().currentUser.tutorialStore && MainGameController.getInstance().currentUser.level >= 7 )					//{						//EventNotificationCenter.getInstance().sendNotification( BoogaEvent.ON_TUTORIAL_SHOW_STORE, this );					//}										villageName_mc.visible = false;				}											/** handleGameEnded			  *	---------------------------------------------------------------------------- */				protected function handleGameEnded( event:GameLevelEvent ):void				{					hideReplayExitButtons();										if( event.customParameters.win )					{						MainGameController.getInstance().checkForNextVillage( _islandSelectionViewClip.island.id, _currentVillage.id );					}										if( _buyPopupViewClip != null && _buyPopupViewClip.isVisible )						_buyPopupViewClip.hide();				}											/** handleUpdateAdventureLevel			  *	---------------------------------------------------------------------------- */				protected function handleUpdateAdventureLevel( customParameters:Object ):void				{					TextFormatting.formatTextWithFontName( adventureLevel_mc.score_mc.label_txt, String(MainGameController.getInstance().currentUser.adventureLevel), "Lithos Pro Black", false, TextFieldAutoSize.CENTER );					TextFormatting.formatTextWithFontName( adventureLevelProgressBar_mc.level_txt, String(MainGameController.getInstance().currentUser.adventureLevel+1), "Lithos Pro Black", false, TextFieldAutoSize.CENTER );										adventureLevelProgressBar_mc.play();										if( _resetAdventureLevelProgressBarTimer == null )					{						_resetAdventureLevelProgressBarTimer = new Timer( 1000, 1 );						_resetAdventureLevelProgressBarTimer.addEventListener( TimerEvent.TIMER_COMPLETE, handleResetAdventureLevelProgressTimerCompleted );					}										_resetAdventureLevelProgressBarTimer.start();				}								private function handleAdventureScoreUpdated():void				{					//trace( "current score: "+MainGameController.getInstance().currentUser.adventureScore );					//trace( "prev required score: "+MainGameController.getInstance().currentUser.prevAdventureScore );					//trace( "next required score: "+MainGameController.getInstance().currentUser.nextAdventureScore );										var scale:Number = (MainGameController.getInstance().currentUser.adventureScore - MainGameController.getInstance().currentUser.prevAdventureScore) / (MainGameController.getInstance().currentUser.nextAdventureScore - MainGameController.getInstance().currentUser.prevAdventureScore);						scale = scale < .1 ? .1 : scale;					adventureLevelProgressBar_mc.mask_mc.scaleX = scale;				}								private function handleResetAdventureLevelProgressTimerCompleted( event:TimerEvent ):void				{					adventureLevelProgressBar_mc.mask_mc.scaleX = .1;				}								public function showSmallAdventureLevel( event:CustomEvent=null ):void				{					adventureLevel_mc.visible = true;					adventureLevelProgressBar_mc.visible = true;					villageName_mc.visible = true;				}								public function hideSmallAdventureLevel( event:CustomEvent=null ):void				{					adventureLevel_mc.visible = false;					adventureLevelProgressBar_mc.visible = false;					villageName_mc.visible = false;				}							/** showReplayExitButtons			  *	---------------------------------------------------------------------------- */				public function showReplayExitButtons():void				{					_exitClip.dynamicClip.visible = true;					_replayClip.dynamicClip.visible = true;				}							/** hideReplayExitButtons			  *	---------------------------------------------------------------------------- */				public function hideReplayExitButtons():void				{					_exitClip.dynamicClip.visible = false;					_replayClip.dynamicClip.visible = false;				}							/** handleExitRolledOver			  *	---------------------------------------------------------------------------- */				private function handleExitRolledOver( event:Event ):void				{					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav", SoundEffectPlayer.SOUND_PLAYER_SFX );					EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_TEXT_HOVER_SHOW, this, {clip:_exitClip.dynamicClip, text:StringsIndex.getInstance().getStringByName("PLAY_EXIT_GAME")} );				}								private function handleExitRolledOut( event:Event ):void				{					EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_TEXT_HOVER_HIDE, this );				}							/** handleExitClicked			  *	---------------------------------------------------------------------------- */				private function handleExitClicked( event:Event ):void				{					_gameboardView.pauseGame(false);										SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav", SoundEffectPlayer.SOUND_PLAYER_SFX );										dispatchEvent( new GameLevelEvent(GameLevelEvent.EXIT_GAME_CLICKED) );				}							/** handleReplayRolledOver			  *	---------------------------------------------------------------------------- */				private function handleReplayRolledOver( event:Event ):void				{					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav", SoundEffectPlayer.SOUND_PLAYER_SFX );					EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_TEXT_HOVER_SHOW, this, {clip:_replayClip.dynamicClip, text:StringsIndex.getInstance().getStringByName("PLAY_REPLAY_GAME")} );				}								private function handleReplayRolledOut( event:Event ):void				{					EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_TEXT_HOVER_HIDE, this );				}							/** handleReplayClicked			  *	---------------------------------------------------------------------------- */				private function handleReplayClicked( event:Event ):void				{					_gameboardView.pauseGame(false);										SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav", SoundEffectPlayer.SOUND_PLAYER_SFX );										dispatchEvent( new GameLevelEvent(GameLevelEvent.REPLAY_GAME_CLICKED) );				}								public function replayGameLevel():void				{					hideReplayExitButtons();					hideSmallAdventureLevel();										_gameboardView.gameboardController.kill();					_gameboardView.gameboardController.resetState();										playGameLevel( _currentVillage );				}		}	}