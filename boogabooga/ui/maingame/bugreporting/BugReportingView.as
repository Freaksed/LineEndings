/** BugReportingView  *	---------------------------------------------------------------------------- *  *	@author:  *		Christian Widodo [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.maingame.bugreporting	{		import flash.display.MovieClip;		import flash.display.StageDisplayState;		import flash.events.Event;		import flash.events.EventDispatcher;		import flash.events.IOErrorEvent;		import flash.net.URLLoader;		import flash.net.URLRequest;		import flash.net.URLRequestMethod;		import flash.net.URLVariables;		import flash.text.TextField;		import flash.text.TextFieldAutoSize;				import com.adobe.serialization.json.JSONEncoder;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.forms.DynamicInputText;		import com.avatarlabs.utils.navigation.NavigationController;		import com.avatarlabs.utils.sound.SoundEffectPlayer;		import com.avatarlabs.utils.userinterface.DynamicUIArrowedSlider;		import com.avatarlabs.utils.userinterface.DynamicUIButton;		import com.avatarlabs.utils.userinterface.DynamicUIDropDownScroller;		import com.avatarlabs.utils.userinterface.DynamicUIScroller;		import com.avatarlabs.utils.text.TextFormatting;				import com.boogabooga.controller.maingame.MainGameController;		import com.boogabooga.data.SoundsIndex;		import com.boogabooga.data.SettingsIndex;		import com.boogabooga.events.BoogaEvent;		import com.boogabooga.ui.maingame.bugreporting.BugReportingViewDropDownScroller;		import com.boogabooga.ui.maingame.bugreporting.BugReportingViewInputText;				public class BugReportingView extends DynamicUIScroller		{			protected var _isContentVisible:Boolean;			protected var _submitClip:DynamicUIButton;			protected var _closeClip:DynamicUIButton;			protected var _issueTypeDropDownClip:BugReportingViewDropDownScroller;			protected var _gamePartDropDownClip:BugReportingViewDropDownScroller;			protected var _problemDescriptionInputClip:BugReportingViewInputText;			protected var _reproduceDescriptionInputClip:BugReportingViewInputText;			protected var _emailInputClip:DynamicInputText;						/**	Stage Instances **/			public var close_mc:MovieClip;			public var submit_mc:MovieClip;			public var mask_mc:MovieClip;			public var content_mc:MovieClip;			public var slider_mc:MovieClip;			public var background_mc:MovieClip;						public var header_txt:TextField;			public var issueType_txt:TextField;			public var issueTypeDropDown_mc:MovieClip;			public var gamePart_txt:TextField;			public var gamePartDropDown_mc:MovieClip;			public var problemDescription_txt:TextField;			public var problemDescriptionInput_mc:MovieClip;			public var reproduceDescription_txt:TextField;			public var reproduceDescriptionInput_mc:MovieClip;			public var email_txt:TextField;			public var emailInput_mc:MovieClip;			public var emailOptional_txt:TextField;			public var error_txt:TextField;			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function BugReportingView()				{					//init();				}								override public function set dynamicClip( m:MovieClip ):void				{					_dynamicClip = m;										mask_mc = _dynamicClip.mask_mc;					content_mc = _dynamicClip.content_mc;					slider_mc = _dynamicClip.slider_mc;					background_mc = _dynamicClip.background_mc;					background_mc.cacheAsBitmap = true;										var sliderClip:DynamicUIArrowedSlider = new DynamicUIArrowedSlider();						sliderClip.dynamicClip = slider_mc;						sliderClip.dynamicInit();						sliderClip.setProperty( "y" );						sliderClip.setHandle( slider_mc.handle_mc );						sliderClip.setBounds( slider_mc.bound_mc );										setProperty( "y" );					setSlider( sliderClip );					setContent( content_mc );					setMask( mask_mc );					toggleSlider();										submit_mc = _dynamicClip.submit_mc;					close_mc = _dynamicClip.close_mc;					error_txt = _dynamicClip.error_txt;					error_txt.visible = false;										header_txt = content_mc.header_txt;					issueType_txt = content_mc.issueType_txt;					issueTypeDropDown_mc = content_mc.issueTypeDropDown_mc;					gamePart_txt = content_mc.gamePart_txt;					gamePartDropDown_mc = content_mc.gamePartDropDown_mc;					problemDescription_txt = content_mc.problemDescription_txt;					problemDescriptionInput_mc = content_mc.problemDescriptionInput_mc;					reproduceDescription_txt = content_mc.reproduceDescription_txt;					reproduceDescriptionInput_mc = content_mc.reproduceDescriptionInput_mc;					email_txt = content_mc.email_txt;					emailInput_mc = content_mc.emailInput_mc;					emailOptional_txt = content_mc.emailOptional_txt;										_submitClip = new DynamicUIButton();					_submitClip.dynamicClip = submit_mc;					_submitClip.dynamicInit();										_closeClip = new DynamicUIButton();					_closeClip.dynamicClip = close_mc;					_closeClip.dynamicInit();										_problemDescriptionInputClip = new BugReportingViewInputText();					_problemDescriptionInputClip.dynamicClip = problemDescriptionInput_mc;					_problemDescriptionInputClip.dynamicInit();					_problemDescriptionInputClip.setTextField( problemDescriptionInput_mc.input_txt );					_problemDescriptionInputClip.addEventListener( "onHeightChange", handleProblemDescriptionInputHeightChange );										_reproduceDescriptionInputClip = new BugReportingViewInputText();					_reproduceDescriptionInputClip.dynamicClip = reproduceDescriptionInput_mc;					_reproduceDescriptionInputClip.dynamicInit();					_reproduceDescriptionInputClip.setTextField( reproduceDescriptionInput_mc.input_txt );					_reproduceDescriptionInputClip.addEventListener( "onHeightChange", handleReproduceDescriptionInputHeightChange );										_emailInputClip = new DynamicInputText();					_emailInputClip.dynamicClip = emailInput_mc;					_emailInputClip.dynamicInit();					_emailInputClip.setTextField( emailInput_mc.input_txt );										var issueTypeDP:Array = new Array();						issueTypeDP.push( {id:0, label:"Something Broken"} );						issueTypeDP.push( {id:1, label:"Something Confusing"} );						issueTypeDP.push( {id:2, label:"Something Annoying"} );						issueTypeDP.push( {id:3, label:"Something Else"} );											_issueTypeDropDownClip = new BugReportingViewDropDownScroller();					_issueTypeDropDownClip.dynamicClip = issueTypeDropDown_mc;					_issueTypeDropDownClip.dropDownContentItemLinkage = "BugReportingForm.DropdownContent.item";					_issueTypeDropDownClip.dynamicInit();					_issueTypeDropDownClip.dp = issueTypeDP;										var gamePartDP:Array = new Array();						gamePartDP.push( {id:0, label:"Defense Gameplay (villages)"} );						gamePartDP.push( {id:1, label:"Digging"} );						gamePartDP.push( {id:2, label:"Journal"} );						gamePartDP.push( {id:3, label:"Store"} );						gamePartDP.push( {id:4, label:"Messages"} );						gamePartDP.push( {id:5, label:"Other"} );										_gamePartDropDownClip = new BugReportingViewDropDownScroller();					_gamePartDropDownClip.dynamicClip = gamePartDropDown_mc;					_gamePartDropDownClip.dropDownContentItemLinkage = "BugReportingForm.DropdownContent.item";					_gamePartDropDownClip.dynamicInit();					_gamePartDropDownClip.dp = gamePartDP;				}								public function get isContentVisible():Boolean { return _isContentVisible; }							/** init			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				override public function dynamicInit():void				{					super.dynamicInit();										_submitClip.addEventListener( "onClick", handleSubmitClicked, false, 0, true );					_submitClip.addEventListener( "onSetFocus", handleSubmitRolledOver, false, 0, true );					_closeClip.addEventListener( "onClick", handleCloseClicked, false, 0, true );					_closeClip.addEventListener( "onSetFocus", handleCloseRolledOver, false, 0, true );										//trace( "header_txt: "+header_txt );					//trace( "issueType_txt: "+issueType_txt );					//trace( "gamePart_txt: "+gamePart_txt );					//trace( "problemDescription_txt: "+problemDescription_txt );					//trace( "reproduceDescription_txt: "+reproduceDescription_txt );					//trace( "email_txt: "+email_txt );					//trace( "emailOptional_txt: "+emailOptional_txt );										TextFormatting.formatTextWithFontName( header_txt, "Feedback & bugs", "Lithos Pro Black" );					TextFormatting.formatTextWithFontName( issueType_txt, "What type of issue are you reporting?", "Lithos Pro Black" );					TextFormatting.formatTextWithFontName( gamePart_txt, "What part of the game are you referring to?", "Lithos Pro Black" );					TextFormatting.formatTextWithFontName( problemDescription_txt, "Please describe the problem or suggestion:", "Lithos Pro Black" );					TextFormatting.formatTextWithFontName( reproduceDescription_txt, "Please describe how we can reproduce what you experience:", "Lithos Pro Black" );					TextFormatting.formatTextWithFontName( email_txt, "YOUR EMAIL:", "Lithos Pro Black" );					TextFormatting.formatTextWithFontName( emailOptional_txt, "optional (in case we need to ask any questions)", "Lithos Pro Black" );					TextFormatting.formatTextWithFontName( problemDescriptionInput_mc.input_txt, 'description', "Lithos Pro Black" );					TextFormatting.formatTextWithFontName( reproduceDescriptionInput_mc.input_txt, 'description', "Lithos Pro Black" );					TextFormatting.formatTextWithFontName( emailInput_mc.input_txt, 'email', "Lithos Pro Black" );					TextFormatting.formatTextWithFontName( error_txt, "Error in submitting feedback, please try again later.", "Lithos Pro Black", false, TextFieldAutoSize.CENTER );										_problemDescriptionInputClip.reset();					_reproduceDescriptionInputClip.reset();					_emailInputClip.reset();				}								public function show():void				{					if( _dynamicClip.stage.displayState == StageDisplayState.FULL_SCREEN )					{						_dynamicClip.stage.displayState = StageDisplayState.NORMAL;					}					_dynamicClip.visible = true;					_isContentVisible = true;				}								public function hide():void				{					_dynamicClip.visible = false;					_isContentVisible = false;										dispatchEvent( new BoogaEvent(BoogaEvent.ON_POPUP_HIDE) );										_problemDescriptionInputClip.reset();					_reproduceDescriptionInputClip.reset();					_emailInputClip.reset();										reproduceDescription_txt.y = int(problemDescriptionInput_mc.y + problemDescriptionInput_mc.height + 15);					reproduceDescriptionInput_mc.y = reproduceDescription_txt.y + 15;										email_txt.y = int(reproduceDescriptionInput_mc.y + reproduceDescriptionInput_mc.height + 15);					emailInput_mc.y = email_txt.y - 4;					emailOptional_txt.y = email_txt.y;										toggleSlider();				}							/** kill			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				public function kill():void				{									}							/** handleSubmitClicked			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function handleSubmitClicked( event:Event ):void				{					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav", SoundEffectPlayer.SOUND_PLAYER_SFX );										error_txt.visible = false;										if( _issueTypeDropDownClip.selectedItem == null || _gamePartDropDownClip.selectedItem == null )					{						TextFormatting.formatTextWithFontName( error_txt, "Missing required field(s)", "Lithos Pro Black", false, TextFieldAutoSize.CENTER );						error_txt.visible = true;						return;					}										var dataObject:Object = new Object();						dataObject.issue_type = _issueTypeDropDownClip.selectedItem.label;						dataObject.game_part = _gamePartDropDownClip.selectedItem.label;						dataObject.problem_description = _problemDescriptionInputClip.getValue();						dataObject.reproduce_description = _reproduceDescriptionInputClip.getValue();						dataObject.email = _emailInputClip.getValue();						dataObject.user_id = MainGameController.getInstance().currentUser.id;										var data:URLVariables = new URLVariables();						data.data = new JSONEncoder(dataObject).getString();						data.url = "feedbacks/saveFeedback";										trace( "data: "+data.data );										var urlRequest:URLRequest = new URLRequest( SettingsIndex.getInstance().baseURL+"content.php" );						urlRequest.data = data;						urlRequest.method = URLRequestMethod.POST;										var urlLoader:URLLoader = new URLLoader();						urlLoader.addEventListener( Event.COMPLETE, handleSaveFeedbackComplete, false, 0, true );						urlLoader.addEventListener( IOErrorEvent.IO_ERROR, handleSaveFeedbackError, false, 0, true );						urlLoader.load( urlRequest );				}								protected function handleSubmitRolledOver( event:Event ):void				{					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav", SoundEffectPlayer.SOUND_PLAYER_SFX );				}							/** handleSubmitClicked			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function handleCloseClicked( event:Event ):void				{					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav", SoundEffectPlayer.SOUND_PLAYER_SFX );										hide();				}								protected function handleCloseRolledOver( event:Event ):void				{					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav", SoundEffectPlayer.SOUND_PLAYER_SFX );				}							/** handleSaveFeedbackComplete			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function handleSaveFeedbackComplete( event:Event ):void				{					ConsoleBroadcaster.broadcast( "BugReportingView", "handleSaveFeedbackComplete();" );										trace( "event.currentTarget.data: "+event.currentTarget.data );										event.currentTarget.removeEventListener( Event.COMPLETE, handleSaveFeedbackComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleSaveFeedbackError );										hide();				}								protected function handleSaveFeedbackError( event:IOErrorEvent ):void				{					ConsoleBroadcaster.broadcast( "BugReportingView", "handleSaveFeedbackError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleSaveFeedbackComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleSaveFeedbackError );										TextFormatting.formatTextWithFontName( error_txt, "Error in submitting feedback, please try again later.", "Lithos Pro Black", false, TextFieldAutoSize.CENTER );					error_txt.visible = true;				}								protected function handleProblemDescriptionInputHeightChange( event:Event ):void				{					reproduceDescription_txt.y = int(problemDescriptionInput_mc.y + problemDescriptionInput_mc.height + 15);					reproduceDescriptionInput_mc.y = reproduceDescription_txt.y + 15;										email_txt.y = int(reproduceDescriptionInput_mc.y + reproduceDescriptionInput_mc.height + 15);					emailInput_mc.y = email_txt.y - 4;					emailOptional_txt.y = email_txt.y;										toggleSlider();				}								protected function handleReproduceDescriptionInputHeightChange( event:Event ):void				{					email_txt.y = int(reproduceDescriptionInput_mc.y + reproduceDescriptionInput_mc.height + 15);					emailInput_mc.y = email_txt.y - 4;					emailOptional_txt.y = email_txt.y;										toggleSlider();				}		}	}