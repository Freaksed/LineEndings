/**	BugReportingViewInputText  *	--------------------------------------------------------- *  *	@desc:  *		an input text field class that will let users define  *		custom error message, custom textfield color  *	--------------------------------------------------------- *  *	@developer:	Christian Widodo [christian@avatarlabs.com]  *	--------------------------------------------------------- */    	package com.boogabooga.ui.maingame.bugreporting	{		import flash.display.MovieClip;		import flash.events.*;		import flash.text.TextField;				import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.text.TextFormatting;		import com.avatarlabs.utils.forms.DynamicInputText;				public class BugReportingViewInputText extends DynamicInputText		{			protected var _originalBackgroundHeight:Number;						/**	Stage Instances **/			public var background_mc:MovieClip;			/**	End of Stage Instances **/						/**	Constructor			  *	---------------------------------------------------------- */				public function BugReportingViewInputText()				{									}								override public function set dynamicClip( m:MovieClip ):void				{					super.dynamicClip = m;										background_mc = _dynamicClip.background_mc;					_originalBackgroundHeight = background_mc.height;				}								override public function dynamicInit():void				{					_dynamicClip.focusRect = false;				}							/**	setDefaultLabel			  *	---------------------------------------------------------- */				override public function setDefaultLabel( l:String ):void				{					//ConsoleBroadcaster.broadcast( "InputText", "setDefaultLabel("+l+");" );										_defaultLabel = l;										TextFormatting.formatTextWithFontName( _inputText, _defaultLabel, "Lithos Pro Black" );					//_inputText.text = _defaultLabel;				}							/**	handleOnBlur			  *	---------------------------------------------------------- */				override public function handleOnBlur( event:FocusEvent ):void				{					//ConsoleBroadcaster.broadcast( "InputText", "handleOnBlur();" );										_focus = false;										if ( _inputText.text == "" )					{						_inputText.textColor = _errorColor;						//_inputText.text = _errorLabel;						TextFormatting.formatTextWithFontName( _inputText, _errorLabel, "Lithos Pro Black" );					}					else					{						_inputText.textColor = _onBlurColor;					}										dispatchEvent( event );				}								override public function setValue( _t:String ):void				{					//ConsoleBroadcaster.broadcast( "InputText", "setValue();" );										//_inputText.text = _t;					TextFormatting.formatTextWithFontName( _inputText, _t, "Lithos Pro Black" );				}							/**	reset			  *	resets field to default label			  *	---------------------------------------------------------- */				override public function reset():void				{					//ConsoleBroadcaster.broadcast( "InputText", "reset();" );										_inputText.textColor = _defaultColor;					//_inputText.text = _defaultLabel;					TextFormatting.formatTextWithFontName( _inputText, _defaultLabel, "Lithos Pro Black" );										_inputText.height = _originalBackgroundHeight;					background_mc.height = _originalBackgroundHeight;				}							/**	showError			  *	shows error text			  *	---------------------------------------------------------- */				override public function showError():void				{					_inputText.textColor = _errorColor;					//_inputText.text = _errorLabel;					TextFormatting.formatTextWithFontName( _inputText, _errorLabel, "Lithos Pro Black" );				}							/**	handleOnChange			  *	---------------------------------------------------------- */				override public function handleOnChange( event:Event ):void				{					//ConsoleBroadcaster.broadcast( "InputText", "handleOnChange();" );										//trace( "_inputText.height: "+_inputText.height );					//trace( "background_mc.height: "+background_mc.height );										if( _inputText.height > background_mc.height )					{						background_mc.height = _inputText.height;						dispatchEvent( new Event("onHeightChange") );					}					else if( _inputText.height <= background_mc.height && _inputText.height >= _originalBackgroundHeight )					{						background_mc.height = _inputText.height;						dispatchEvent( new Event("onHeightChange") );					}					else					{						background_mc.height = _originalBackgroundHeight;					}										super.handleOnChange( event );				}						}	}