/** GameboardView  *	---------------------------------------------------------------------------- *  *	@author:  *		Christian Widodo [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.maingame.gameboard	{		import flash.display.MovieClip;		import flash.display.StageDisplayState;		import flash.events.Event;		import flash.geom.Rectangle;		import flash.utils.getDefinitionByName;				import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.navigation.UINavigation;		import com.avatarlabs.utils.navigation.UINavigationButton;				import com.boogabooga.controller.gamelevel.GameboardController;		import com.boogabooga.controller.maingame.MainGameController;		import com.boogabooga.events.BoogaEvent;		import com.boogabooga.events.GameLevelEvent;		import com.boogabooga.ui.gamelevel.Gameboard;		import com.boogabooga.ui.maingame.AbstractContentView;		import com.boogabooga.ui.maingame.IContentView;		import com.boogabooga.ui.maingame.gameboard.PlayViewControls;		import com.boogabooga.ui.maingame.play.PlayView;				public class GameboardView extends AbstractContentView implements IContentView		{			protected var _gameboardController:GameboardController;			protected var _gameboardReference:Gameboard;			protected var _gameLevelId:int;			protected var _isPlayingDigLevel:Boolean;			protected var _isPlayingGameLevel:Boolean;			protected var _playViewControlsClip:PlayViewControls;			protected var _playViewClip:PlayView;						/**	Stage Instances **/			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function GameboardView()				{									}								public function get isPlayingDigLevel():Boolean { return _isPlayingDigLevel; }				public function get isPlayingGameLevel():Boolean { return _isPlayingGameLevel; }								public function set playViewControlsClip( clip:PlayViewControls ):void 				{					_playViewControlsClip = clip;					_playViewControlsClip.gameboardController = _gameboardController;					_playViewControlsClip.onFullScreenToggled.add( handleFullScreenToggled );				}								public function set playViewClip( clip:PlayView ):void				{					_playViewClip = clip;				}								public function get gameboardController():GameboardController { return _gameboardController; }				public function get gameboardReference():Gameboard { return _gameboardReference; }								override public function init():void				{					super.init();										_isPlayingDigLevel = false;					_isPlayingGameLevel = false;										_gameboardReference = new Gameboard();					_gameboardReference.contentClip = new (getDefinitionByName("GameboardLibrary") as Class)();					_contentClip.addChild( _gameboardReference.contentClip );					_gameboardReference.init();					_gameboardReference.tileOpacity = 0;					_gameboardReference.inIsometricView = true;					//_gameboardReference.addEventListener( BoogaEvent.ON_BUY_CHICKEN, handleBuyChickenClicked, false, 0, true );					//_gameboardReference.addEventListener( BoogaEvent.ON_PLAY_AGAIN, handlePlayAgainClicked, false, 0, true );					//_gameboardReference.addEventListener( BoogaEvent.ON_ISLAND_SELECT, handleIslandSelectClicked, false, 0, true );										_gameboardController = new GameboardController();					_gameboardController.gameboardReference = _gameboardReference;					_gameboardController.addEventListener( GameLevelEvent.GAME_END, handleGameEnded );										EventNotificationCenter.getInstance().addSignalListener( GameLevelEvent.ON_RESUME_CLICKED, unpauseGame, this );									}							/** show			  *	---------------------------------------------------------------------------- */				override public function show():void				{					_gameboardReference.showGameLevelBackground();					super.show();				}							/** hide			  *	---------------------------------------------------------------------------- */				override public function hide():void				{					super.hide();										_isPlayingGameLevel = false;															_gameboardReference.hideGameLevelBackground();				}							/** pauseGame			  *	---------------------------------------------------------------------------- */			 	public function pauseGame( displayPauseScreen:Boolean=true ):void				{					//ConsoleBroadcaster.broadcast( "GameboardView", "pauseGame();" );										_gameboardController.pause();										if( displayPauseScreen )						_gameboardReference.pauseScreenViewClip.show();					else					{						_gameboardReference.pauseScreenViewClip.hide();						_playViewControlsClip.hideGameLevelControls();					}					//_playViewControlsClip.hide();				}							/** unpauseGame			  *	---------------------------------------------------------------------------- */			 	public function unpauseGame( customParameters:Object=null ):void				{					//ConsoleBroadcaster.broadcast( "GameboardView", "unpauseGame();" );										_gameboardController.unpause();					_playViewControlsClip.show();				}							/** showPlayViewControlsClip			  *	---------------------------------------------------------------------------- */			 	public function showPlayViewControlsClip():void				{					_playViewControlsClip.showGameLevelControls();					_playViewControlsClip.show();				}							/** hidePlayViewControlsClip			  *	---------------------------------------------------------------------------- */			 	public function hidePlayViewControlsClip():void				{					//_playViewControlsClip.hide();					_playViewControlsClip.hideGameLevelControls();				}							/** loadGameLevelBackground			  *	---------------------------------------------------------------------------- */			 	public function loadGameLevelBackground():void				{					_gameboardReference.loadGameLevelBackground( _gameboardController.gameLevel.gameLevelBackgroundLinkageId );				}							/** handleGameEnded			  *	---------------------------------------------------------------------------- */			 	protected function handleGameEnded( event:GameLevelEvent ):void				{					//_isPlayingGameLevel = false;					hidePlayViewControlsClip();				}								private function handleTutorialLevelIntroFinished():void				{					_gameboardController.onTutorialLevelIntroFinished.remove( handleTutorialLevelIntroFinished );					_playViewClip.showReplayExitButtons();				}							/** startPlayGameLevel			  *	---------------------------------------------------------------------------- *			  *	Starts playhing game level. Shows necessary elements.			  *	---------------------------------------------------------------------------- */			 	public function startPlayGameLevel():void				{					ConsoleBroadcaster.broadcast( "GameboardView", "startPlayGameLevel();" );										_isPlayingGameLevel = true;										MainGameController.getInstance().stopMainBackgroundMusic();										show();					_gameboardController.start();					//_gameboardReference.highlightPathTiles();					showPlayViewControlsClip();										//EventNotificationCenter.getInstance().sendNotification( BoogaEvent.ON_SMALL_ADVENTURE_LEVEL_SHOW, this );					_playViewClip.showSmallAdventureLevel();										if( !MainGameController.getInstance().currentUser.tutorialGameLevel )					{						_playViewClip.showReplayExitButtons();					}					else					{						_gameboardController.onTutorialLevelIntroFinished.add( handleTutorialLevelIntroFinished );						EventNotificationCenter.getInstance().sendNotification( BoogaEvent.ON_UI_ELEMENTS_HIDE, this );					}									}							/** stopPlayGameLevel			  *	---------------------------------------------------------------------------- *			  *	Stops playing game level. Hides necessary elements.			  *	---------------------------------------------------------------------------- */			 	public function stopPlayGameLevel():void				{					ConsoleBroadcaster.broadcast( "GameboardView", "stopPlayGameLevel();" );										_isPlayingGameLevel = false;										MainGameController.getInstance().startMainBackgroundMusic();										hide();					hidePlayViewControlsClip();					_gameboardController.kill();					_gameboardReference.hideGameLevelBackground();										//if( MainGameController.getInstance().currentUser.level >= 7 )					//	EventNotificationCenter.getInstance().sendNotification( BoogaEvent.ON_NAVIGATION_STORE_SHOW, this );										//EventNotificationCenter.getInstance().sendNotification( BoogaEvent.ON_SMALL_ADVENTURE_LEVEL_HIDE, this );					_playViewClip.hideSmallAdventureLevel();					_playViewClip.hideReplayExitButtons();				}							/** startPlayDigLevel			  *	---------------------------------------------------------------------------- *			  *	Starts playing dig level			  *	---------------------------------------------------------------------------- */			 	public function startPlayDigLevel():void				{					ConsoleBroadcaster.broadcast( "GameboardView", "startPlayDigLevel();" );										MainGameController.getInstance().stopMainBackgroundMusic();										_isPlayingDigLevel = true;					show();					_gameboardController.showDiggingLevel();										//EventNotificationCenter.getInstance().sendNotification( BoogaEvent.ON_SMALL_ADVENTURE_LEVEL_SHOW, this );					_playViewClip.showSmallAdventureLevel();				}							/** stopPlayDigLevel			  *	---------------------------------------------------------------------------- *			  *	Stops playing dig level			  *	---------------------------------------------------------------------------- */			 	public function stopPlayDigLevel():void				{					ConsoleBroadcaster.broadcast( "GameboardView", "stopPlayDigLevel();" );										MainGameController.getInstance().startMainBackgroundMusic();										_isPlayingDigLevel = false;					hide();					_gameboardController.hideDiggingLevel();					_gameboardReference.hideGameLevelBackground();										//EventNotificationCenter.getInstance().sendNotification( BoogaEvent.ON_SMALL_ADVENTURE_LEVEL_HIDE, this );					_playViewClip.hideSmallAdventureLevel();				}								protected function handleFullScreenToggled():void				{					if( _contentClip.stage.displayState == StageDisplayState.FULL_SCREEN )					{						_contentClip.scrollRect = null;					}					else					{						_contentClip.scrollRect = new Rectangle( 0, 0, 760, 625 );					}				}		}	}