/** WeaponSelectionView  *	---------------------------------------------------------------------------- *  *	@desc:  *		A list for the paths  *	@author:  *		Christian Widodo [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.maingame.weaponselection	{		import flash.display.Bitmap;		import flash.display.MovieClip;		import flash.display.StageDisplayState;		import flash.events.Event;		import flash.events.EventDispatcher;		import flash.events.MouseEvent;		import flash.events.TimerEvent;		import flash.geom.Point;		import flash.text.TextField;		import flash.text.TextFieldAutoSize;		import flash.utils.getDefinitionByName;		import flash.utils.getQualifiedClassName;		import flash.utils.Timer;				import com.greensock.TweenLite;		import com.greensock.easing.Sine;		import com.avatarlabs.utils.ArrayUtil;		import com.avatarlabs.utils.UtilFunctions;		import com.avatarlabs.utils.VectorUtil;		import com.avatarlabs.utils.cache.BitmapDataManager;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.forms.InputText;		import com.avatarlabs.utils.sound.SoundEffectPlayer;		import com.avatarlabs.utils.text.TextFormatting;		import com.avatarlabs.utils.userinterface.DynamicUIButton;		import com.avatarlabs.utils.userinterface.UIScroller;				import com.boogabooga.controller.maingame.MainGameController;		import com.boogabooga.controller.maingame.StoreDataController;		import com.boogabooga.controller.maingame.UserDataController;		import com.boogabooga.data.SoundsIndex;		import com.boogabooga.data.StringsIndex;		import com.boogabooga.data.gamelevel.AbstractGameObject;		import com.boogabooga.data.gamelevel.Enemy;		import com.boogabooga.data.gamelevel.GameLevel;		import com.boogabooga.data.gamelevel.GameLevelCurrentData;		import com.boogabooga.data.gamelevel.GameLevelDataIndex;		import com.boogabooga.data.gamelevel.God;		import com.boogabooga.data.gamelevel.Weapon;		import com.boogabooga.data.maingame.AttackSlot;		import com.boogabooga.data.maingame.MainGameDataIndex;		import com.boogabooga.events.BoogaEvent;		import com.boogabooga.events.GameLevelEvent;		import com.boogabooga.ui.maingame.weaponselection.WeaponSelectionEnemyCountIcon;		import com.boogabooga.utils.ElementCompatibility;		import com.boogabooga.utils.GameLevelUtil;						public class WeaponSelectionView extends EventDispatcher		{			protected var _contentClip:MovieClip;			protected var _isContentVisible:Boolean;						protected var _gameLevel:GameLevel;						protected var _availableDurableItems:Vector.<AbstractGameObject>;			protected var _availableConsumableItems:Vector.<AbstractGameObject>;						protected var _additionalSlotPricesLoaded:Boolean;			protected var _additionalSlot:int;						//protected var _availableItems:Vector.<AbstractGameObject>;			protected var _selectedItems:Vector.<AbstractGameObject>;			//protected var _availableItemClips:Vector.<WeaponSelectionItemIcon>;			protected var _selectedItemClips:Vector.<WeaponSelectionItemIcon>;			protected var _durableItemClips:Vector.<WeaponSelectionItemIcon>;			protected var _consumableItemClips:Vector.<WeaponSelectionConsumableItemIcon>;			protected var _durableItemPage:int;			protected var _totalDurableItemPages:int;			protected var _consumableItemPage:int;			protected var _totalConsumableItemPages:int;			protected var _userHasConsumable:Boolean;						protected var _enemyIcons:Vector.<WeaponSelectionEnemyCountIcon>;			private var _purchaseEffectPlayDelayTimer:Timer;						//protected var _availableWeapons:Vector.<Weapon>;			//protected var _selectedWeapons:Vector.<Weapon>;			//protected var _availableWeaponClips:Vector.<DynamicUIButton>;			//protected var _selectedWeaponClips:Array;						protected const totalDurableItemsPerPage:int = 10;			protected const totalConsumableItemsPerPage:int = 8;						protected var _buySingleItemPopupViewClip:BuySingleItemPopupView;			protected var _buyPopupViewClip:BuyPopupView;			protected var _exitClip:DynamicUIButton;			protected var _continueDoneClip:DynamicUIButton;			protected var _selectedItemIcon1Clip:WeaponSelectionItemIcon;			protected var _selectedItemIcon2Clip:WeaponSelectionItemIcon;			protected var _selectedItemIcon3Clip:WeaponSelectionItemIcon;			protected var _selectedItemIcon4Clip:WeaponSelectionItemIcon;			protected var _selectedItemIcon5Clip:WeaponSelectionItemIcon;			protected var _selectedItemIcon6Clip:WeaponSelectionItemIcon;			protected var _selectedItemIcon7Clip:WeaponSelectionItemIcon;			protected var _selectedItemIcon8Clip:WeaponSelectionItemIcon;						protected var _buyAttackSlot1Clip:DynamicUIButton;			protected var _buyAttackSlot2Clip:DynamicUIButton;						protected var _enemyIcon1Clip:WeaponSelectionEnemyCountIcon;			protected var _enemyIcon2Clip:WeaponSelectionEnemyCountIcon;			protected var _enemyIcon3Clip:WeaponSelectionEnemyCountIcon;			protected var _enemyIcon4Clip:WeaponSelectionEnemyCountIcon;			protected var _enemyIcon5Clip:WeaponSelectionEnemyCountIcon;			protected var _enemyIcon6Clip:WeaponSelectionEnemyCountIcon;			protected var _enemyIcon7Clip:WeaponSelectionEnemyCountIcon;			protected var _enemyIcon8Clip:WeaponSelectionEnemyCountIcon;			//protected var _enemyIcon9Clip:WeaponSelectionEnemyCountIcon;						protected var _durableItemIcon1Clip:WeaponSelectionItemIcon;			protected var _durableItemIcon2Clip:WeaponSelectionItemIcon;			protected var _durableItemIcon3Clip:WeaponSelectionItemIcon;			protected var _durableItemIcon4Clip:WeaponSelectionItemIcon;			protected var _durableItemIcon5Clip:WeaponSelectionItemIcon;			protected var _durableItemIcon6Clip:WeaponSelectionItemIcon;			protected var _durableItemIcon7Clip:WeaponSelectionItemIcon;			protected var _durableItemIcon8Clip:WeaponSelectionItemIcon;			protected var _durableItemIcon9Clip:WeaponSelectionItemIcon;			protected var _durableItemIcon10Clip:WeaponSelectionItemIcon;			//protected var _durableItemIcon11Clip:WeaponSelectionItemIcon;			//protected var _durableItemIcon12Clip:WeaponSelectionItemIcon;			//protected var _durableItemIcon13Clip:WeaponSelectionItemIcon;			//protected var _durableItemIcon14Clip:WeaponSelectionItemIcon;			//protected var _durableItemIcon15Clip:WeaponSelectionItemIcon;			//protected var _durableItemIcon16Clip:WeaponSelectionItemIcon;						protected var _durableItemsPrevClip:DynamicUIButton;			protected var _durableItemsNextClip:DynamicUIButton;						protected var _consumableItemIcon1Clip:WeaponSelectionConsumableItemIcon;			protected var _consumableItemIcon2Clip:WeaponSelectionConsumableItemIcon;			protected var _consumableItemIcon3Clip:WeaponSelectionConsumableItemIcon;			protected var _consumableItemIcon4Clip:WeaponSelectionConsumableItemIcon;			protected var _consumableItemIcon5Clip:WeaponSelectionConsumableItemIcon;			protected var _consumableItemIcon6Clip:WeaponSelectionConsumableItemIcon;			protected var _consumableItemIcon7Clip:WeaponSelectionConsumableItemIcon;			protected var _consumableItemIcon8Clip:WeaponSelectionConsumableItemIcon;			//protected var _consumableItemIcon9Clip:WeaponSelectionConsumableItemIcon;			//protected var _consumableItemIcon10Clip:WeaponSelectionConsumableItemIcon;			//protected var _consumableItemIcon11Clip:WeaponSelectionConsumableItemIcon;			//protected var _consumableItemIcon12Clip:WeaponSelectionConsumableItemIcon;			//protected var _consumableItemIcon13Clip:WeaponSelectionConsumableItemIcon;			//protected var _consumableItemIcon14Clip:WeaponSelectionConsumableItemIcon;			//protected var _consumableItemIcon15Clip:WeaponSelectionConsumableItemIcon;			//protected var _consumableItemIcon16Clip:WeaponSelectionConsumableItemIcon;						protected var _consumableItemsPrevClip:DynamicUIButton;			protected var _consumableItemsNextClip:DynamicUIButton;						protected var _monsterPathClips:Vector.<Vector.<MovieClip>>;			protected var _monsterPathClip:WeaponSelectionViewMonsterPath;						/**	Stage Instances **/			public var buyPopup_mc:MovieClip;			public var buySingleItemPopup_mc:MovieClip						public var selectedItemsLabel_mc:MovieClip;			public var durableItemsLabel_mc:MovieClip;			public var consumableItemsLabel_mc:MovieClip;			public var enemiesLabel_mc:MovieClip;			public var defenseType_mc:MovieClip;			public var superDefenseType_mc:MovieClip;			public var monsterType_mc:MovieClip;						public var exit_mc:MovieClip;			public var continueDone_mc:MovieClip;			public var selectedItemIcon1_mc:MovieClip;			public var selectedItemIcon2_mc:MovieClip;			public var selectedItemIcon3_mc:MovieClip;			public var selectedItemIcon4_mc:MovieClip;			public var selectedItemIcon5_mc:MovieClip;			public var selectedItemIcon6_mc:MovieClip;			public var selectedItemIcon7_mc:MovieClip;			public var selectedItemIcon8_mc:MovieClip;						public var buyAttackSlot1_mc:MovieClip;			public var buyAttackSlot2_mc:MovieClip;						public var enemies_mc:MovieClip;			public var enemyIcon1_mc:MovieClip;			public var enemyIcon2_mc:MovieClip;			public var enemyIcon3_mc:MovieClip;			public var enemyIcon4_mc:MovieClip;			public var enemyIcon5_mc:MovieClip;			public var enemyIcon6_mc:MovieClip;			public var enemyIcon7_mc:MovieClip;			public var enemyIcon8_mc:MovieClip;			//public var enemyIcon9_mc:MovieClip;						public var durableItemIcon1_mc:MovieClip;			public var durableItemIcon2_mc:MovieClip;			public var durableItemIcon3_mc:MovieClip;			public var durableItemIcon4_mc:MovieClip;			public var durableItemIcon5_mc:MovieClip;			public var durableItemIcon6_mc:MovieClip;			public var durableItemIcon7_mc:MovieClip;			public var durableItemIcon8_mc:MovieClip;			public var durableItemIcon9_mc:MovieClip;			public var durableItemIcon10_mc:MovieClip;			//public var durableItemIcon11_mc:MovieClip;			//public var durableItemIcon12_mc:MovieClip;			//public var durableItemIcon13_mc:MovieClip;			//public var durableItemIcon14_mc:MovieClip;			//public var durableItemIcon15_mc:MovieClip;			//public var durableItemIcon16_mc:MovieClip;						public var durableItemsPrev_mc:MovieClip;			public var durableItemsNext_mc:MovieClip;						public var consumableItemIcon1_mc:MovieClip;			public var consumableItemIcon2_mc:MovieClip;			public var consumableItemIcon3_mc:MovieClip;			public var consumableItemIcon4_mc:MovieClip;			public var consumableItemIcon5_mc:MovieClip;			public var consumableItemIcon6_mc:MovieClip;			public var consumableItemIcon7_mc:MovieClip;			public var consumableItemIcon8_mc:MovieClip;			//public var consumableItemIcon9_mc:MovieClip;			//public var consumableItemIcon10_mc:MovieClip;			//public var consumableItemIcon11_mc:MovieClip;			//public var consumableItemIcon12_mc:MovieClip;			//public var consumableItemIcon13_mc:MovieClip;			//public var consumableItemIcon14_mc:MovieClip;						public var consumableItemsPrev_mc:MovieClip;			public var consumableItemsNext_mc:MovieClip;						public var consumableGaps1_mc:MovieClip;			public var consumableGaps2_mc:MovieClip;			public var consumableGaps3_mc:MovieClip;			public var consumableGaps4_mc:MovieClip;			public var consumableGaps5_mc:MovieClip;			public var consumableGaps6_mc:MovieClip;			public var consumableGaps7_mc:MovieClip;			public var consumableGaps8_mc:MovieClip;			//public var consumableGaps9_mc:MovieClip;			//public var consumableGaps10_mc:MovieClip;			//public var consumableGaps11_mc:MovieClip;			//public var consumableGaps12_mc:MovieClip;			//public var consumableGaps13_mc:MovieClip;			//public var consumableGaps14_mc:MovieClip;			public var backlight_mc:MovieClip;						public var purchaseEffect_mc:MovieClip;			public var monstersPaths_mc:MovieClip;						public var version_mc:MovieClip;			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function WeaponSelectionView()				{					//init();				}								public function get isContentVisible():Boolean { return _isContentVisible; }				public function set gameLevel( g:GameLevel ):void { _gameLevel = g; }								public function set contentClip( m:MovieClip ):void				{					_contentClip = m;										buyPopup_mc = _contentClip.buyPopup_mc;					buySingleItemPopup_mc = _contentClip.buySingleItemPopup_mc;					selectedItemsLabel_mc = _contentClip.selectedItemsLabel_mc;					durableItemsLabel_mc = _contentClip.durableItemsLabel_mc;					consumableItemsLabel_mc = _contentClip.consumableItemsLabel_mc;					enemiesLabel_mc = _contentClip.enemiesLabel_mc;					defenseType_mc = _contentClip.defenseType_mc;					superDefenseType_mc = _contentClip.superDefenseType_mc;					monsterType_mc = _contentClip.monsterType_mc;					purchaseEffect_mc = _contentClip.purchaseEffect_mc;					purchaseEffect_mc.mouseChildren = false;					purchaseEffect_mc.mouseEnabled = false;					purchaseEffect_mc.shine_mc.stop();					monstersPaths_mc = _contentClip.monstersPaths_mc;										exit_mc = _contentClip.exit_mc;					continueDone_mc = _contentClip.continueDone_mc;					selectedItemIcon1_mc = _contentClip.selectedItemIcon1_mc;					selectedItemIcon2_mc = _contentClip.selectedItemIcon2_mc;					selectedItemIcon3_mc = _contentClip.selectedItemIcon3_mc;					selectedItemIcon4_mc = _contentClip.selectedItemIcon4_mc;					selectedItemIcon5_mc = _contentClip.selectedItemIcon5_mc;					selectedItemIcon6_mc = _contentClip.selectedItemIcon6_mc;					selectedItemIcon7_mc = _contentClip.selectedItemIcon7_mc;					selectedItemIcon8_mc = _contentClip.selectedItemIcon8_mc;										buyAttackSlot1_mc = _contentClip.buyAttackSlot1_mc;					buyAttackSlot2_mc = _contentClip.buyAttackSlot2_mc;										enemies_mc = _contentClip.enemies_mc;					enemyIcon1_mc = enemies_mc.enemyIcon1_mc;					enemyIcon2_mc = enemies_mc.enemyIcon2_mc;					enemyIcon3_mc = enemies_mc.enemyIcon3_mc;					enemyIcon4_mc = enemies_mc.enemyIcon4_mc;					enemyIcon5_mc = enemies_mc.enemyIcon5_mc;					enemyIcon6_mc = enemies_mc.enemyIcon6_mc;					enemyIcon7_mc = enemies_mc.enemyIcon7_mc;					enemyIcon8_mc = enemies_mc.enemyIcon8_mc;					//enemyIcon9_mc = enemies_mc.enemyIcon9_mc;										durableItemIcon1_mc = _contentClip.durableItemIcon1_mc;					durableItemIcon2_mc = _contentClip.durableItemIcon2_mc;					durableItemIcon3_mc = _contentClip.durableItemIcon3_mc;					durableItemIcon4_mc = _contentClip.durableItemIcon4_mc;					durableItemIcon5_mc = _contentClip.durableItemIcon5_mc;					durableItemIcon6_mc = _contentClip.durableItemIcon6_mc;					durableItemIcon7_mc = _contentClip.durableItemIcon7_mc;					durableItemIcon8_mc = _contentClip.durableItemIcon8_mc;					durableItemIcon9_mc = _contentClip.durableItemIcon9_mc;					durableItemIcon10_mc = _contentClip.durableItemIcon10_mc;					//durableItemIcon11_mc = _contentClip.durableItemIcon11_mc;					//durableItemIcon12_mc = _contentClip.durableItemIcon12_mc;					//durableItemIcon13_mc = _contentClip.durableItemIcon13_mc;					//durableItemIcon14_mc = _contentClip.durableItemIcon14_mc;					//durableItemIcon15_mc = _contentClip.durableItemIcon15_mc;					//durableItemIcon16_mc = _contentClip.durableItemIcon16_mc;										durableItemsPrev_mc = _contentClip.durableItemsPrev_mc;					durableItemsNext_mc = _contentClip.durableItemsNext_mc;										consumableItemIcon1_mc = _contentClip.consumableItemIcon1_mc;					consumableItemIcon2_mc = _contentClip.consumableItemIcon2_mc;					consumableItemIcon3_mc = _contentClip.consumableItemIcon3_mc;					consumableItemIcon4_mc = _contentClip.consumableItemIcon4_mc;					consumableItemIcon5_mc = _contentClip.consumableItemIcon5_mc;					consumableItemIcon6_mc = _contentClip.consumableItemIcon6_mc;					consumableItemIcon7_mc = _contentClip.consumableItemIcon7_mc;					consumableItemIcon8_mc = _contentClip.consumableItemIcon8_mc;					//consumableItemIcon9_mc = _contentClip.consumableItemIcon9_mc;					//consumableItemIcon10_mc = _contentClip.consumableItemIcon10_mc;					//consumableItemIcon11_mc = _contentClip.consumableItemIcon11_mc;					//consumableItemIcon12_mc = _contentClip.consumableItemIcon12_mc;					//consumableItemIcon13_mc = _contentClip.consumableItemIcon13_mc;					//consumableItemIcon14_mc = _contentClip.consumableItemIcon14_mc;										consumableItemsPrev_mc = _contentClip.consumableItemsPrev_mc;					consumableItemsNext_mc = _contentClip.consumableItemsNext_mc;										consumableGaps1_mc = _contentClip.consumableGaps1_mc;					consumableGaps2_mc = _contentClip.consumableGaps2_mc;					consumableGaps3_mc = _contentClip.consumableGaps3_mc;					consumableGaps4_mc = _contentClip.consumableGaps4_mc;					consumableGaps5_mc = _contentClip.consumableGaps5_mc;					consumableGaps6_mc = _contentClip.consumableGaps6_mc;					consumableGaps7_mc = _contentClip.consumableGaps7_mc;					consumableGaps8_mc = _contentClip.consumableGaps8_mc;					//consumableGaps9_mc = _contentClip.consumableGaps9_mc;					//consumableGaps10_mc = _contentClip.consumableGaps10_mc;					//consumableGaps11_mc = _contentClip.consumableGaps11_mc;					//consumableGaps12_mc = _contentClip.consumableGaps12_mc;					//consumableGaps13_mc = _contentClip.consumableGaps13_mc;					//consumableGaps14_mc = _contentClip.consumableGaps14_mc;										backlight_mc = _contentClip.backlight_mc;										version_mc = _contentClip.version_mc;					version_mc.visible = false;					version_mc.alpha = 1;					version_mc.mouseChildren = false;					version_mc.mouseEnabled = false;					version_mc.label_txt.mouseEnabled = false;										_buyPopupViewClip = new BuyPopupView();					_buyPopupViewClip.contentClip = buyPopup_mc;					_buyPopupViewClip.init();										_buySingleItemPopupViewClip = new BuySingleItemPopupView();					_buySingleItemPopupViewClip.contentClip = buySingleItemPopup_mc;					_buySingleItemPopupViewClip.init();										_exitClip = new DynamicUIButton();					_exitClip.dynamicClip = exit_mc;					_exitClip.dynamicInit();										_continueDoneClip = new DynamicUIButton();					_continueDoneClip.dynamicClip = continueDone_mc;					_continueDoneClip.dynamicInit();										_selectedItemIcon1Clip = new WeaponSelectionItemIcon();					_selectedItemIcon1Clip.contentClip = selectedItemIcon1_mc;					_selectedItemIcon1Clip.init();										_selectedItemIcon2Clip = new WeaponSelectionItemIcon();					_selectedItemIcon2Clip.contentClip = selectedItemIcon2_mc;					_selectedItemIcon2Clip.init();										_selectedItemIcon3Clip = new WeaponSelectionItemIcon();					_selectedItemIcon3Clip.contentClip = selectedItemIcon3_mc;					_selectedItemIcon3Clip.init();										_selectedItemIcon4Clip = new WeaponSelectionItemIcon();					_selectedItemIcon4Clip.contentClip = selectedItemIcon4_mc;					_selectedItemIcon4Clip.init();										_selectedItemIcon5Clip = new WeaponSelectionItemIcon();					_selectedItemIcon5Clip.contentClip = selectedItemIcon5_mc;					_selectedItemIcon5Clip.init();										_selectedItemIcon6Clip = new WeaponSelectionItemIcon();					_selectedItemIcon6Clip.contentClip = selectedItemIcon6_mc;					_selectedItemIcon6Clip.init();										_selectedItemIcon7Clip = new WeaponSelectionItemIcon();					_selectedItemIcon7Clip.contentClip = selectedItemIcon7_mc;					_selectedItemIcon7Clip.init();										_selectedItemIcon8Clip = new WeaponSelectionItemIcon();					_selectedItemIcon8Clip.contentClip = selectedItemIcon8_mc;					_selectedItemIcon8Clip.init();										_buyAttackSlot1Clip = new DynamicUIButton();					_buyAttackSlot1Clip.dynamicClip = buyAttackSlot1_mc;					_buyAttackSlot1Clip.dynamicInit();										_buyAttackSlot2Clip = new DynamicUIButton();					_buyAttackSlot2Clip.dynamicClip = buyAttackSlot2_mc;					_buyAttackSlot2Clip.dynamicInit();										_enemyIcon1Clip = new WeaponSelectionEnemyCountIcon();					_enemyIcon1Clip.contentClip = enemyIcon1_mc;					_enemyIcon1Clip.init();										_enemyIcon2Clip = new WeaponSelectionEnemyCountIcon();					_enemyIcon2Clip.contentClip = enemyIcon2_mc;					_enemyIcon2Clip.init();										_enemyIcon3Clip = new WeaponSelectionEnemyCountIcon();					_enemyIcon3Clip.contentClip = enemyIcon3_mc;					_enemyIcon3Clip.init();										_enemyIcon4Clip = new WeaponSelectionEnemyCountIcon();					_enemyIcon4Clip.contentClip = enemyIcon4_mc;					_enemyIcon4Clip.init();										_enemyIcon5Clip = new WeaponSelectionEnemyCountIcon();					_enemyIcon5Clip.contentClip = enemyIcon5_mc;					_enemyIcon5Clip.init();										_enemyIcon6Clip = new WeaponSelectionEnemyCountIcon();					_enemyIcon6Clip.contentClip = enemyIcon6_mc;					_enemyIcon6Clip.init();										_enemyIcon7Clip = new WeaponSelectionEnemyCountIcon();					_enemyIcon7Clip.contentClip = enemyIcon7_mc;					_enemyIcon7Clip.init();										_enemyIcon8Clip = new WeaponSelectionEnemyCountIcon();					_enemyIcon8Clip.contentClip = enemyIcon8_mc;					_enemyIcon8Clip.init();										//_enemyIcon9Clip = new WeaponSelectionEnemyCountIcon();					//_enemyIcon9Clip.contentClip = enemyIcon9_mc;					//_enemyIcon9Clip.init();										_durableItemIcon1Clip = new WeaponSelectionItemIcon();					_durableItemIcon1Clip.contentClip = durableItemIcon1_mc;					_durableItemIcon1Clip.init();										_durableItemIcon2Clip = new WeaponSelectionItemIcon();					_durableItemIcon2Clip.contentClip = durableItemIcon2_mc;					_durableItemIcon2Clip.init();										_durableItemIcon3Clip = new WeaponSelectionItemIcon();					_durableItemIcon3Clip.contentClip = durableItemIcon3_mc;					_durableItemIcon3Clip.init();										_durableItemIcon4Clip = new WeaponSelectionItemIcon();					_durableItemIcon4Clip.contentClip = durableItemIcon4_mc;					_durableItemIcon4Clip.init();										_durableItemIcon5Clip = new WeaponSelectionItemIcon();					_durableItemIcon5Clip.contentClip = durableItemIcon5_mc;					_durableItemIcon5Clip.init();										_durableItemIcon6Clip = new WeaponSelectionItemIcon();					_durableItemIcon6Clip.contentClip = durableItemIcon6_mc;					_durableItemIcon6Clip.init();										_durableItemIcon7Clip = new WeaponSelectionItemIcon();					_durableItemIcon7Clip.contentClip = durableItemIcon7_mc;					_durableItemIcon7Clip.init();										_durableItemIcon8Clip = new WeaponSelectionItemIcon();					_durableItemIcon8Clip.contentClip = durableItemIcon8_mc;					_durableItemIcon8Clip.init();										_durableItemIcon9Clip = new WeaponSelectionItemIcon();					_durableItemIcon9Clip.contentClip = durableItemIcon9_mc;					_durableItemIcon9Clip.init();										_durableItemIcon10Clip = new WeaponSelectionItemIcon();					_durableItemIcon10Clip.contentClip = durableItemIcon10_mc;					_durableItemIcon10Clip.init();										//_durableItemIcon11Clip = new WeaponSelectionItemIcon();					//_durableItemIcon11Clip.contentClip = durableItemIcon11_mc;					//_durableItemIcon11Clip.init();										//_durableItemIcon12Clip = new WeaponSelectionItemIcon();					//_durableItemIcon12Clip.contentClip = durableItemIcon12_mc;					//_durableItemIcon12Clip.init();										//_durableItemIcon13Clip = new WeaponSelectionItemIcon();					//_durableItemIcon13Clip.contentClip = durableItemIcon13_mc;					//_durableItemIcon13Clip.init();										//_durableItemIcon14Clip = new WeaponSelectionItemIcon();					//_durableItemIcon14Clip.contentClip = durableItemIcon14_mc;					//_durableItemIcon14Clip.init();										//_durableItemIcon15Clip = new WeaponSelectionItemIcon();					//_durableItemIcon15Clip.contentClip = durableItemIcon15_mc;					//_durableItemIcon15Clip.init();										//_durableItemIcon16Clip = new WeaponSelectionItemIcon();					//_durableItemIcon16Clip.contentClip = durableItemIcon16_mc;					//_durableItemIcon16Clip.init();										_durableItemsPrevClip = new DynamicUIButton();					_durableItemsPrevClip.dynamicClip = durableItemsPrev_mc;					_durableItemsPrevClip.dynamicInit();										_durableItemsNextClip = new DynamicUIButton();					_durableItemsNextClip.dynamicClip = durableItemsNext_mc;					_durableItemsNextClip.dynamicInit();										_consumableItemIcon1Clip = new WeaponSelectionConsumableItemIcon();					_consumableItemIcon1Clip.contentClip = consumableItemIcon1_mc;					_consumableItemIcon1Clip.init();										_consumableItemIcon2Clip = new WeaponSelectionConsumableItemIcon();					_consumableItemIcon2Clip.contentClip = consumableItemIcon2_mc;					_consumableItemIcon2Clip.init();										_consumableItemIcon3Clip = new WeaponSelectionConsumableItemIcon();					_consumableItemIcon3Clip.contentClip = consumableItemIcon3_mc;					_consumableItemIcon3Clip.init();										_consumableItemIcon4Clip = new WeaponSelectionConsumableItemIcon();					_consumableItemIcon4Clip.contentClip = consumableItemIcon4_mc;					_consumableItemIcon4Clip.init();										_consumableItemIcon5Clip = new WeaponSelectionConsumableItemIcon();					_consumableItemIcon5Clip.contentClip = consumableItemIcon5_mc;					_consumableItemIcon5Clip.init();										_consumableItemIcon6Clip = new WeaponSelectionConsumableItemIcon();					_consumableItemIcon6Clip.contentClip = consumableItemIcon6_mc;					_consumableItemIcon6Clip.init();										_consumableItemIcon7Clip = new WeaponSelectionConsumableItemIcon();					_consumableItemIcon7Clip.contentClip = consumableItemIcon7_mc;					_consumableItemIcon7Clip.init();										_consumableItemIcon8Clip = new WeaponSelectionConsumableItemIcon();					_consumableItemIcon8Clip.contentClip = consumableItemIcon8_mc;					_consumableItemIcon8Clip.init();										//_consumableItemIcon9Clip = new WeaponSelectionConsumableItemIcon();					//_consumableItemIcon9Clip.contentClip = consumableItemIcon9_mc;					//_consumableItemIcon9Clip.init();										//_consumableItemIcon10Clip = new WeaponSelectionConsumableItemIcon();					//_consumableItemIcon10Clip.contentClip = consumableItemIcon10_mc;					//_consumableItemIcon10Clip.init();										//_consumableItemIcon11Clip = new WeaponSelectionConsumableItemIcon();					//_consumableItemIcon11Clip.contentClip = consumableItemIcon11_mc;					//_consumableItemIcon11Clip.init();										//_consumableItemIcon12Clip = new WeaponSelectionConsumableItemIcon();					//_consumableItemIcon12Clip.contentClip = consumableItemIcon12_mc;					//_consumableItemIcon12Clip.init();										//_consumableItemIcon13Clip = new WeaponSelectionConsumableItemIcon();					//_consumableItemIcon13Clip.contentClip = consumableItemIcon13_mc;					//_consumableItemIcon13Clip.init();										//_consumableItemIcon14Clip = new WeaponSelectionConsumableItemIcon();					//_consumableItemIcon14Clip.contentClip = consumableItemIcon14_mc;					//_consumableItemIcon14Clip.init();										_consumableItemsPrevClip = new DynamicUIButton();					_consumableItemsPrevClip.dynamicClip = consumableItemsPrev_mc;					_consumableItemsPrevClip.dynamicInit();										_consumableItemsNextClip = new DynamicUIButton();					_consumableItemsNextClip.dynamicClip = consumableItemsNext_mc;					_consumableItemsNextClip.dynamicInit();										_monsterPathClip = new WeaponSelectionViewMonsterPath();					_monsterPathClip.contentClip = monstersPaths_mc;					_monsterPathClip.init();									}				public function get contentClip():MovieClip { return _contentClip; }								/*				public function set availableWeapons( v:Vector.<Weapon> ):void				{					_availableWeapons = v;				}				public function set selectedWeapons( v:Vector.<Weapon> ):void				{					_selectedWeapons = v;				}				public function get selectedWeapons():Vector.<Weapon> { return _selectedWeapons; }				*/							/** init			  *	---------------------------------------------------------------------------- */				public function init():void				{					_additionalSlotPricesLoaded = false;										_purchaseEffectPlayDelayTimer = new Timer( 200, 1 );					_purchaseEffectPlayDelayTimer.addEventListener( TimerEvent.TIMER_COMPLETE, handlePurchaseEffectPlayDelayTimerCompleted, false, 0, true );										TextFormatting.formatTextWithFontName( selectedItemsLabel_mc.label_txt, StringsIndex.getInstance().getStringByName("LEVEL_SETUP_SELECTED_ITEMS"), "Lithos Pro Black" );					TextFormatting.formatTextWithFontName( durableItemsLabel_mc.label_txt, StringsIndex.getInstance().getStringByName("LEVEL_SETUP_TRIBAL_ITEMS"), "Lithos Pro Black", false, TextFieldAutoSize.CENTER );					TextFormatting.formatTextWithFontName( consumableItemsLabel_mc.label_txt, StringsIndex.getInstance().getStringByName("LEVEL_SETUP_SPECIAL_ITEMS"), "Lithos Pro Black", false, TextFieldAutoSize.CENTER );					TextFormatting.formatTextWithFontName( enemiesLabel_mc.label_txt, StringsIndex.getInstance().getStringByName("LEVEL_SETUP_MONSTERS"), "Lithos Pro Black", false, TextFieldAutoSize.CENTER );										//trace( "defenseType_mc: "+defenseType_mc );					//trace( "superDefenseType_mc: "+superDefenseType_mc );					//trace( "monsterType_mc: "+monsterType_mc );										defenseType_mc.x = durableItemsLabel_mc.x + durableItemsLabel_mc.label_txt.x - 15;					superDefenseType_mc.x = consumableItemsLabel_mc.x + consumableItemsLabel_mc.label_txt.x - 15;					monsterType_mc.x = enemiesLabel_mc.x + enemiesLabel_mc.label_txt.x - 15;										buyPopup_mc.visible = false;					buyPopup_mc.alpha = 1;					_buyPopupViewClip.addEventListener( BoogaEvent.ON_BUY_WEAPON, handlePopupPurchaseClicked, false, 0, true );					_buyPopupViewClip.addEventListener( BoogaEvent.ON_BUY_GOD, handlePopupPurchaseClicked, false, 0, true );										buySingleItemPopup_mc.visible = false;					buySingleItemPopup_mc.alpha = 1;					_buySingleItemPopupViewClip.addEventListener( BoogaEvent.ON_BUY_ATTACK_SLOT, handlePopupPurchaseClicked, false, 0, true );										_continueDoneClip.addEventListener( "onClick", handleContinueClicked, false, 0, true );					_continueDoneClip.addEventListener( "onSetFocus", handleContinueRolledOver, false, 0, true );					_continueDoneClip.addEventListener( "onKillFocus", handleContinueRolledOut, false, 0, true );					_continueDoneClip.dynamicClip.mouseChildren = false;					_continueDoneClip.setDeactive( false );					_continueDoneClip.dynamicClip.alpha = .5;					_exitClip.addEventListener( "onClick", handleCloseClicked, false, 0, true );					_exitClip.addEventListener( "onSetFocus", handleCloseRolledOver, false, 0, true );					_exitClip.dynamicClip.mouseChildren = false;										_availableConsumableItems = new Vector.<AbstractGameObject>;					_availableDurableItems = new Vector.<AbstractGameObject>;					_selectedItems = new Vector.<AbstractGameObject>;										//_availableItems = new Vector.<AbstractGameObject>;					_selectedItemClips = new Vector.<WeaponSelectionItemIcon>;					_selectedItemClips.push( _selectedItemIcon1Clip, _selectedItemIcon2Clip, _selectedItemIcon3Clip, _selectedItemIcon4Clip, _selectedItemIcon5Clip, _selectedItemIcon6Clip, _selectedItemIcon7Clip, _selectedItemIcon8Clip );										_buyAttackSlot1Clip.addEventListener( "onClick", handleBuyAttackSlot1Clicked, false, 0, true );					//_buyAttackSlot1Clip.addEventListener( "onSetFocus", handleBuyAttackSlot1RolledOver, false, 0, true );					_buyAttackSlot1Clip.dynamicClip.mouseChildren = false;										_buyAttackSlot2Clip.addEventListener( "onClick", handleBuyAttackSlot2Clicked, false, 0, true );					_buyAttackSlot2Clip.dynamicClip.mouseChildren = false;										_durableItemClips = new Vector.<WeaponSelectionItemIcon>;					_durableItemClips.push( _durableItemIcon1Clip, _durableItemIcon2Clip, _durableItemIcon3Clip, _durableItemIcon4Clip, _durableItemIcon5Clip );					_durableItemClips.push( _durableItemIcon6Clip, _durableItemIcon7Clip, _durableItemIcon8Clip, _durableItemIcon9Clip, _durableItemIcon10Clip );										_consumableItemClips = new Vector.<WeaponSelectionConsumableItemIcon>;					_consumableItemClips.push( _consumableItemIcon1Clip, _consumableItemIcon2Clip, _consumableItemIcon3Clip, _consumableItemIcon4Clip );					_consumableItemClips.push( _consumableItemIcon5Clip, _consumableItemIcon6Clip, _consumableItemIcon7Clip, _consumableItemIcon8Clip );										_enemyIcon1Clip.contentClip.visible = false;					_enemyIcon2Clip.contentClip.visible = false;					_enemyIcon3Clip.contentClip.visible = false;					_enemyIcon4Clip.contentClip.visible = false;					_enemyIcon5Clip.contentClip.visible = false;					_enemyIcon6Clip.contentClip.visible = false;					_enemyIcon7Clip.contentClip.visible = false;					_enemyIcon8Clip.contentClip.visible = false;					//_enemyIcon9Clip.contentClip.visible = false;										_enemyIcons = new Vector.<WeaponSelectionEnemyCountIcon>;					_enemyIcons.push( _enemyIcon1Clip, _enemyIcon2Clip, _enemyIcon3Clip, _enemyIcon4Clip, _enemyIcon5Clip, _enemyIcon6Clip, _enemyIcon7Clip, _enemyIcon8Clip );										_durableItemsPrevClip.addEventListener( "onClick", handleDurableItemsPrevClicked, false, 0, true );					_durableItemsPrevClip.addEventListener( "onSetFocus", handleDurableItemsPrevRolledOver, false, 0, true );					_durableItemsPrevClip.addEventListener( "onKillFocus", handleDurableItemsPrevRolledOut, false, 0, true );					_durableItemsNextClip.addEventListener( "onClick", handleDurableItemsNextClicked, false, 0, true );					_durableItemsNextClip.addEventListener( "onSetFocus", handleDurableItemsNextRolledOver, false, 0, true );					_durableItemsNextClip.addEventListener( "onKillFocus", handleDurableItemsNextRolledOut, false, 0, true );					_consumableItemsPrevClip.addEventListener( "onClick", handleConsumableItemsPrevClicked, false, 0, true );					_consumableItemsPrevClip.addEventListener( "onSetFocus", handleConsumableItemsPrevRolledOver, false, 0, true );					_consumableItemsPrevClip.addEventListener( "onKillFocus", handleConsumableItemsPrevRolledOut, false, 0, true );					_consumableItemsNextClip.addEventListener( "onClick", handleConsumableItemsNextClicked, false, 0, true );					_consumableItemsNextClip.addEventListener( "onSetFocus", handleConsumableItemsNextRolledOver, false, 0, true );					_consumableItemsNextClip.addEventListener( "onKillFocus", handleConsumableItemsNextRolledOut, false, 0, true );										var i:int;										for( i=0; i<_enemyIcons.length; ++i )					{						//_enemyIcons[i].addEventListener( "onRollOver", handleEnemyIconRolledOver, false, 0, true );						//_enemyIcons[i].addEventListener( "onRollOut", handleEnemyIconRolledOut, false, 0, true );						_enemyIcons[i].onRolledOver.add( handleEnemyIconRolledOver );						_enemyIcons[i].onRolledOut.add( handleEnemyIconRolledOut );					}										for( i=0; i<_selectedItemClips.length; ++i )					{						_selectedItemClips[i].addEventListener( "onClick", handleSelectedItemClicked, false, 0, true );						_selectedItemClips[i].addEventListener( "onRollOver", handleAvailableItemRolledOver, false, 0, true );						_selectedItemClips[i].addEventListener( "onRollOut", handleAvailableItemRolledOut, false, 0, true );						_selectedItemClips[i].contentClip.visible = false;					}										for( i=0; i<_durableItemClips.length; ++i )					{						_durableItemClips[i].addEventListener( "onClick", handleAvailableItemClicked, false, 0, true );						_durableItemClips[i].addEventListener( "onRollOver", handleAvailableItemRolledOver, false, 0, true );						_durableItemClips[i].addEventListener( "onRollOut", handleAvailableItemRolledOut, false, 0, true );					}										for( i=0; i<_consumableItemClips.length; ++i )					{						_consumableItemClips[i].addEventListener( "onClick", handleAvailableItemClicked, false, 0, true );						_consumableItemClips[i].addEventListener( "onRollOver", handleAvailableItemRolledOver, false, 0, true );						_consumableItemClips[i].addEventListener( "onRollOut", handleAvailableItemRolledOut, false, 0, true );						_consumableItemClips[i].addEventListener( "onBuyClick", handleConsumableItemBuyClicked, false, 0, true );					}										//_selectedWeapons = new Vector.<Weapon>;					//_availableWeaponClips = new Vector.<UIButton>;					//_selectedWeaponClips = [ _selectedItemIcon1Clip, selectedItemIcon2_mc, selectedItemIcon3_mc, selectedItemIcon4_mc, selectedItemIcon5_mc, selectedItemIcon6_mc, selectedItemIcon7_mc, selectedItemIcon8_mc ];										/*					_monsterPathClips = new Vector.<Vector.<MovieClip>>;					var arrowClip:MovieClip;										var j:int;					var position:Point;										for( i=0; i<GameLevelDataIndex.getInstance().boardMaxRows; ++i )					{						_monsterPathClips[i] = new Vector.<MovieClip>;						for( j=0; j<GameLevelDataIndex.getInstance().boardMaxColumns; ++j )						{							arrowClip = new (getDefinitionByName("WeaponSelection.MonsterPath.Arrow") as Class)();							position = GameLevelUtil.getPositionInIsometric( new Point(12+(j*23), 12+(i*23)) );							arrowClip.x = position.x;							arrowClip.y = position.y;							arrowClip.stop();							arrowClip.visible = false;							monstersPaths_mc.addChild( arrowClip );														_monsterPathClips[i].push( arrowClip );						}					}					*/										EventNotificationCenter.getInstance().addSignalListener( BoogaEvent.ON_CHEAT_DETECTED, handleCheatDetected, this );									}								private function handlePurchaseEffectPlayDelayTimerCompleted( event:TimerEvent ):void				{					_purchaseEffectPlayDelayTimer.reset();										purchaseEffect_mc.gotoAndPlay(1);					purchaseEffect_mc.shine_mc.gotoAndPlay(1);										SoundEffectPlayer.getInstance().playLibrarySound( "sfx_weapon_purchase.mp3", false, "sfx_weapon_purchase.mp3", "sfx_weapon_purchase.mp3", SoundEffectPlayer.SOUND_PLAYER_SFX );				}							/** initEnemies			  *	---------------------------------------------------------------------------- *			  *	Initializes enemies in the games.			  *	---------------------------------------------------------------------------- */				public function initEnemies( enemies:Array ):void				{					var enemy:Enemy;					var iconBitmap:Bitmap;										for( var i:int=0; i<enemies.length; ++i )					{						if( i >= 8 )							break;												//trace( "enemy id: "+enemies[i].enemy );						//trace( "quantity: "+enemies[i].quantity );												//enemy = GameLevelDataIndex.getInstance().getEnemy( enemies[i].enemy );						/*						iconBitmap = new Bitmap(BitmapDataManager.getInstance().getBitmapData(enemy.cacheIconId).bitmapData);						iconBitmap.width = 35;						iconBitmap.height = 35;						_enemyIcons[i].image_mc.addChild( iconBitmap );						TextFormatting.formatTextWithFontName( _enemyIcons[i].count_txt, enemies[i].quantity, "SF Fedora", false, TextFieldAutoSize.CENTER );						_enemyIcons[i].visible = true;						*/						_enemyIcons[i].setCount( enemies[i].enemy, enemies[i].quantity );						_enemyIcons[i].contentClip.visible = true;					}										enemies_mc.visible = true;				}							/** initAvailableItems			  *	---------------------------------------------------------------------------- *			  *	Initializes weapons and gods and the ones user has.			  *	---------------------------------------------------------------------------- */				public function initAvailableItems( weapons:Vector.<Weapon>=null, gods:Vector.<God>=null )				{					ConsoleBroadcaster.broadcast( "WeaponSelectionView", "attackSlots"+MainGameController.getInstance().currentUser.attackSlots );										var i:int;										for( i=0; i<_selectedItemClips.length; ++i )					{						_selectedItemClips[i].contentClip.visible = true;												if( i<MainGameController.getInstance().currentUser.attackSlots )						{							//_selectedItemClips[i].lock_mc.visible = false;							_selectedItemClips[i].showUnlockView();						}						else							_selectedItemClips[i].showLockView();					}										if( MainGameController.getInstance().currentUser.attackSlots >= 8 )					{						buyAttackSlot1_mc.visible = false;						buyAttackSlot2_mc.visible = false;					}					else if( MainGameController.getInstance().currentUser.attackSlots >= 7 )					{						buyAttackSlot1_mc.visible = false;					}															if( weapons != null )					{						for( i=0; i<weapons.length; ++i )						{							//_availableItems.push( weapons[i] );							if( !weapons[i].listed )								continue;														if( weapons[i].consumable )								_availableConsumableItems.push( weapons[i] );							else								_availableDurableItems.push( weapons[i] );						}					}										if( gods != null )					{						for( i=0; i<gods.length; ++i )						{							if( gods[i].consumable )								_availableConsumableItems.push( gods[i] );							else								_availableDurableItems.push( gods[i] );						}					}										_availableConsumableItems.sort( GameLevelUtil.sortGameObjectsOnLevelAvailability );					_availableDurableItems.sort( GameLevelUtil.sortGameObjectsOnLevelAvailability );										_durableItemPage = 0;					_totalDurableItemPages = Math.ceil(_availableDurableItems.length / totalDurableItemsPerPage);										_consumableItemPage = 0;					_totalConsumableItemPages = Math.ceil(_availableConsumableItems.length / totalConsumableItemsPerPage);										var unlockedWeaponsLength:int = MainGameController.getInstance().currentUser.unlockedWeapons.length;					_userHasConsumable = false;					for( i=0; i<MainGameController.getInstance().currentUser.unlockedWeapons.length; ++i )					{						if( MainGameController.getInstance().currentUser.unlockedWeapons[i].consumable )						{							_userHasConsumable = true;							break;						}					}										if( _userHasConsumable )					{						consumableItemIcon1_mc.visible = true;						consumableItemIcon2_mc.visible = true;						consumableItemIcon3_mc.visible = true;						consumableItemIcon4_mc.visible = true;						consumableItemIcon5_mc.visible = true;						consumableItemIcon6_mc.visible = true;						consumableItemIcon7_mc.visible = true;						consumableItemIcon8_mc.visible = true;						//consumableItemIcon9_mc.visible = true;						//consumableItemIcon10_mc.visible = true;						//consumableItemIcon11_mc.visible = true;						//consumableItemIcon12_mc.visible = true;						//consumableItemIcon13_mc.visible = true;						//consumableItemIcon14_mc.visible = true;						consumableItemsLabel_mc.visible = true;						superDefenseType_mc.visible = true;						consumableItemsNext_mc.visible = true;						consumableItemsPrev_mc.visible = true;						consumableGaps1_mc.visible = true;						consumableGaps2_mc.visible = true;						consumableGaps3_mc.visible = true;						consumableGaps4_mc.visible = true;						consumableGaps5_mc.visible = true;						consumableGaps6_mc.visible = true;						consumableGaps7_mc.visible = true;						consumableGaps8_mc.visible = true;						//consumableGaps9_mc.visible = true;						//consumableGaps10_mc.visible = true;						//consumableGaps11_mc.visible = true;						//consumableGaps12_mc.visible = true;						//consumableGaps13_mc.visible = true;						//consumableGaps14_mc.visible = true;						backlight_mc.visible = true;					}					else					{						consumableItemIcon1_mc.visible = false;						consumableItemIcon2_mc.visible = false;						consumableItemIcon3_mc.visible = false;						consumableItemIcon4_mc.visible = false;						consumableItemIcon5_mc.visible = false;						consumableItemIcon6_mc.visible = false;						consumableItemIcon7_mc.visible = false;						consumableItemIcon8_mc.visible = false;						//consumableItemIcon9_mc.visible = false;						//consumableItemIcon10_mc.visible = false;						//consumableItemIcon11_mc.visible = false;						//consumableItemIcon12_mc.visible = false;						//consumableItemIcon13_mc.visible = false;						//consumableItemIcon14_mc.visible = false;						consumableItemsLabel_mc.visible = false;						superDefenseType_mc.visible = false;						consumableItemsNext_mc.visible = false;						consumableItemsPrev_mc.visible = false;						consumableGaps1_mc.visible = false;						consumableGaps2_mc.visible = false;						consumableGaps3_mc.visible = false;						consumableGaps4_mc.visible = false;						consumableGaps5_mc.visible = false;						consumableGaps6_mc.visible = false;						consumableGaps7_mc.visible = false;						consumableGaps8_mc.visible = false;						//consumableGaps9_mc.visible = false;						//consumableGaps10_mc.visible = false;						//consumableGaps11_mc.visible = false;						//consumableGaps12_mc.visible = false;						//consumableGaps13_mc.visible = false;						//consumableGaps14_mc.visible = false;						backlight_mc.visible = false;					}										//showDurableItems();					//showConsumableItems();										//toggleUI();				}							/** reset			  *	---------------------------------------------------------------------------- *			  *	Resets the weapon selection view.			  *	---------------------------------------------------------------------------- */				public function initMonstersPaths():void				{					_monsterPathClip.initMonstersPaths( _gameLevel );				}							/** reset			  *	---------------------------------------------------------------------------- *			  *	Resets the weapon selection view.			  *	---------------------------------------------------------------------------- */				public function reset():void				{					ConsoleBroadcaster.broadcast( "WeaponSelectioView", "reset();" );										var i:int;										for( i=0; i<_enemyIcons.length; ++i )					{						_enemyIcons[i].contentClip.visible = false;												while( _enemyIcons[i].image_mc.numChildren > 0 )							_enemyIcons[i].image_mc.removeChildAt(0);					}										for( i=0; i<_selectedItems.length; ++i )					{						//_selectedItemClips[i].reset();						_selectedItemClips[i].showUnlockView();					}										for( i=0; i<_durableItemClips.length; ++i )					{						_durableItemClips[i].reset();						//_durableItemClips[i].setActive();					}										for( i=0; i<_consumableItemClips.length; ++i )					{						_consumableItemClips[i].reset();						//_consumableItemClips[i].setActive();					}										_monsterPathClip.reset();										_continueDoneClip.setDeactive( false );					_continueDoneClip.dynamicClip.alpha = .5;										VectorUtil.removeAll( _selectedItems );					VectorUtil.removeAll( _availableConsumableItems );					VectorUtil.removeAll( _availableDurableItems );				}							/** removeSelectedItems			  *	---------------------------------------------------------------------------- *			  *	Removes the selected items from			  *	---------------------------------------------------------------------------- */				protected function removeSelectedItems():void				{					var i:int;					/*					for( i=0; i<_enemyIcons.length; ++i )					{						_enemyIcons[i].contentClip.visible = false;												while( _enemyIcons[i].image_mc.numChildren > 0 )							_enemyIcons[i].image_mc.removeChildAt(0);					}					*/					for( i=0; i<_selectedItems.length; ++i )					{						//_selectedItemClips[i].reset();						_selectedItemClips[i].showUnlockView();					}										VectorUtil.removeAll( _selectedItems );										//trace( "_selectedItems.length: "+_selectedItems.length );				}							/** kill			  *	---------------------------------------------------------------------------- */				public function kill():void				{									}							/** hide			  *	---------------------------------------------------------------------------- */				public function hide():void				{					ConsoleBroadcaster.broadcast( "WeaponSelectionView", "hide();" );										_contentClip.visible = false;					_isContentVisible = false;										_continueDoneClip.dynamicClip.glow_mc.stop();										/*					var i:int;					for( i=0; i<_durableItemClips.length; ++i )					{						_durableItemClips[i].setActive();					}										for( i=0; i<_consumableItemClips.length; ++i )					{						_consumableItemClips[i].setActive();					}					*/					//reset();					removeSelectedItems();										_monsterPathClip.reset();										_additionalSlot = -1;										_buySingleItemPopupViewClip.hide();					_buyPopupViewClip.hide();										SoundEffectPlayer.getInstance().stopSound( "music_loop_level_setup.wav", "music_loop_level_setup.wav", "music_loop_level_setup.wav", SoundEffectPlayer.SOUND_PLAYER_MUSIC );				}							/** show			  *	---------------------------------------------------------------------------- */				public function show():void				{					_contentClip.visible = true;					_isContentVisible = true;										_continueDoneClip.dynamicClip.glow_mc.play();										if( MainGameController.getInstance().currentUser.attackSlots == 7 )					{						_buyAttackSlot1Clip.dynamicClip.visible = false;						_buyAttackSlot2Clip.dynamicClip.visible = true;						_buyAttackSlot2Clip.setActive();						GameLevelUtil.removeDesaturatedFilterFromMovieClip( _buyAttackSlot2Clip.dynamicClip );					}					else if( MainGameController.getInstance().currentUser.attackSlots == 8 )					{						_buyAttackSlot1Clip.dynamicClip.visible = false;						_buyAttackSlot2Clip.dynamicClip.visible = false;					}					else					{						_buyAttackSlot1Clip.dynamicClip.visible = true;						_buyAttackSlot1Clip.setActive();						_buyAttackSlot2Clip.dynamicClip.visible = true;						_buyAttackSlot2Clip.setDeactive();						GameLevelUtil.addDesaturatedFilterToMovieClip( _buyAttackSlot2Clip.dynamicClip );					}										//trace( "tutorialConsumables: "+MainGameController.getInstance().currentUser.tutorialConsumables );					//trace( "user level: "+MainGameController.getInstance().currentUser.level );										if( MainGameController.getInstance().currentUser.tutorialLevelSetup )					{						var globalPosition:Point = durableItemIcon1_mc.parent.localToGlobal( new Point(durableItemIcon1_mc.x+25, durableItemIcon1_mc.y+25) );						EventNotificationCenter.getInstance().sendNotificationWithParameters( BoogaEvent.ON_TUTORIAL_SHOW, this, {targetX:globalPosition.x, targetY:globalPosition.y, text:StringsIndex.getInstance().getStringByName("TUTORIAL_LEVEL_SETUP_1")} );					}					else if( MainGameController.getInstance().currentUser.tutorialConsumables && MainGameController.getInstance().currentUser.level >= 7 )					{						var globalPosition1:Point = consumableItemIcon1_mc.buy_mc.parent.localToGlobal( new Point(consumableItemIcon1_mc.buy_mc.x, consumableItemIcon1_mc.buy_mc.y) );						EventNotificationCenter.getInstance().sendNotificationWithParameters( BoogaEvent.ON_TUTORIAL_SHOW, this, {targetX:globalPosition1.x, targetY:globalPosition1.y, text:StringsIndex.getInstance().getStringByName("TUTORIAL_CONSUMABLES_1")} );					}										var totalDurableWeaponsCount:int = MainGameController.getInstance().currentUser.durableWeaponsCount;					var totalConsumableWeaponsCount:int = MainGameController.getInstance().currentUser.consumableWeaponsCount + MainGameController.getInstance().currentUser.unlockedGods.length;										_durableItemPage = int(totalDurableWeaponsCount / totalDurableItemsPerPage);					if( _durableItemPage * totalDurableItemsPerPage == totalDurableWeaponsCount )						--_durableItemPage;										_consumableItemPage = int(totalConsumableWeaponsCount / totalConsumableItemsPerPage);					if( _consumableItemPage * totalConsumableItemsPerPage == totalConsumableWeaponsCount )						--_consumableItemPage;										trace( "totalConsumableWeaponsCount: "+totalConsumableWeaponsCount );					trace( "totalConsumableItemsPerPage: "+totalConsumableItemsPerPage );					trace( "_current consumableItemPage: "+_consumableItemPage );										showDurableItems();					showConsumableItems();										_continueDoneClip.setDeactive(false);					_continueDoneClip.dynamicClip.alpha = .5;										if( _userHasConsumable )						showConsumableItems();					toggleUI();										SoundEffectPlayer.getInstance().playLibrarySound( "music_loop_level_setup.wav", true, "music_loop_level_setup.wav", "music_loop_level_setup.wav", SoundEffectPlayer.SOUND_PLAYER_MUSIC );				}							/** handleCloseClicked			  *	---------------------------------------------------------------------------- */				protected function handleCloseClicked( event:Event ):void				{					ConsoleBroadcaster.broadcast( "WeaponSelectionView", "handleCloseClicked();" );										dispatchEvent( new BoogaEvent(BoogaEvent.WEAPON_SELECTION_CANCEL) );										SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav" );										hide();				}								protected function handleCloseRolledOver( event:Event ):void				{					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav" );				}							/** handleContinueClicked			  *	---------------------------------------------------------------------------- */				protected function handleContinueClicked( event:Event ):void				{					ConsoleBroadcaster.broadcast( "WeaponSelectionView", "handleContinueClicked();" );										//var countWarning:Boolean = false;					var warning:Boolean = false;					var hasRightProtection:Boolean = false;					var element:ElementCompatibility = GameLevelUtil.checkForElement( _gameLevel );					var i:int;										for( i=0; i<_selectedItems.length; ++i )					{						if( _selectedItems[i].consumable && _selectedItems[i].useCount <= 0 )						{							//There is consumable that has a useCount of 0							var text:String = StringsIndex.getInstance().getStringByName("WARNING_NO_WEAPON_USAGE");								text = text.replace( '%%WEAPON_NAME%%', StringsIndex.getInstance().getString( String(_selectedItems[i].name) ) );															EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_WARNING_SHOW, this, {text:text, iconURL:_selectedItems[i].iconURL, cacheIconId:_selectedItems[i].cacheIconId} );							return;						}					}										if( element != null)					{						//trace( "GameLevelUtil.ATTACK_PROPERTY_FIRE_INDEX: "+GameLevelUtil.ATTACK_PROPERTY_FIRE_INDEX );						//trace( "GameLevelUtil.ATTACK_PROPERTY_ICE_INDEX: "+GameLevelUtil.ATTACK_PROPERTY_ICE_INDEX );						//trace( "GameLevelUtil.ATTACK_PROPERTY_RAIN_INDEX: "+GameLevelUtil.ATTACK_PROPERTY_RAIN_INDEX );						//trace( "GameLevelUtil.ATTACK_PROPERTY_PROTECTION_FROM_FIRE_INDEX: "+GameLevelUtil.ATTACK_PROPERTY_PROTECTION_FROM_FIRE_INDEX );						//trace( "GameLevelUtil.ATTACK_PROPERTY_PROTECTION_FROM_ICE_INDEX: "+GameLevelUtil.ATTACK_PROPERTY_PROTECTION_FROM_ICE_INDEX );						//trace( "GameLevelUtil.ATTACK_PROPERTY_PROTECTION_FROM_RAIN_INDEX: "+GameLevelUtil.ATTACK_PROPERTY_PROTECTION_FROM_RAIN_INDEX );												//trace( "element.against: "+element.against );						//trace( "element.protection: "+element.protection );												for( i=0; i<_selectedItems.length; ++i )						{							if( _selectedItems[i].hasAttackProperty(element.protection) && _selectedItems[i].hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_ADDITION_INDEX) )							{								hasRightProtection = true;							}														if( _selectedItems[i].hasAttackProperty(element.against) && !(_selectedItems[i] is God) && !_selectedItems[i].hasAttackProperty(element.protection) )							{								warning = true;								/*								if( _selectedItems[i].hasAttackProperty(element.protection) || _selectedItems[i] is God )								{									warning = false;								}								*/							}						}					}										VectorUtil.removeAll( GameLevelCurrentData.getInstance().selectedAttacks );										for( i=0; i<_selectedItems.length; ++i )					{						GameLevelCurrentData.getInstance().selectedAttacks.push( _selectedItems[i] );					}										//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_click.wav").volume, 0, "sfx_mouse_click.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav", SoundEffectPlayer.SOUND_PLAYER_SFX );										//trace( "warning: "+warning );					//trace( "hasRightProtection: "+hasRightProtection );										if( (warning && !hasRightProtection) || (!warning && hasRightProtection) )					{						var warningText:String;						var protectionWeapon:Weapon;						if( element.against == GameLevelUtil.ATTACK_PROPERTY_ICE_INDEX )						{							//show snow cloud warning							protectionWeapon = GameLevelDataIndex.getInstance().getWeapon(42);							//warningText = StringsIndex.getInstance().getStringByName("WARNING_NO_SNOW_CLOUD");													}						else if( element.against == GameLevelUtil.ATTACK_PROPERTY_FIRE_INDEX )						{							//show umbrella warning							protectionWeapon = GameLevelDataIndex.getInstance().getWeapon(40);							//warningText = StringsIndex.getInstance().getStringByName("WARNING_NO_UMBRELLA");							/*							for( i=0; i<_selectedItems.length; ++i )							{								if( _selectedItems[i].hasAttackProperty(element.against) )								{									warningText += "\n- "+StringsIndex.getInstance().getString(String(_selectedItems[i].name));								}							}							EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_WARNING_SHOW, this, {text:warningText, iconURL:protectionWeapon.iconURL, cacheIconId:protectionWeapon.cacheIconId} );							protectionWeapon = null;							*/						}												for( i=0; i<_selectedItems.length; ++i )						{							if( _selectedItems[i].hasAttackProperty(element.against) && !(_selectedItems[i] is God) && !_selectedItems[i].hasAttackProperty(element.protection) )							{								warningText += "\n- "+StringsIndex.getInstance().getString(String(_selectedItems[i].name));							}						}												var eventObject:Object = {};							eventObject.text = warningText;							eventObject.iconURL = protectionWeapon.iconURL;							eventObject.cacheIconId = protectionWeapon.cacheIconId;							eventObject.showIceWarning = element.against == GameLevelUtil.ATTACK_PROPERTY_ICE_INDEX;							eventObject.showFireWarning = element.against == GameLevelUtil.ATTACK_PROPERTY_FIRE_INDEX;												EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_WARNING_SHOW, this, eventObject );						protectionWeapon = null;					}					else					{						dispatchEvent( new BoogaEvent(BoogaEvent.WEAPON_SELECTION_DONE) );					}				}								protected function handleContinueRolledOver( event:Event ):void				{					//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_rollover.wav").volume, 0, "sfx_mouse_rollover.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav", SoundEffectPlayer.SOUND_PLAYER_SFX );				}								protected function handleContinueRolledOut( event:Event ):void				{									}								/*				protected function handleAvailableWeaponClicked( event:Event ):void				{					ConsoleBroadcaster.broadcast( "WeaponSelectionView", "handleAvailableWeaponClicked();" );										//dispatchEvent( new CustomEvent("onAvailableWeaponClick", {id:event.currentTarget.id}) );										if( _selectedItems.length < MainGameController.getInstance().currentUser.attackSlots )					{						var weapon:Weapon = GameLevelDataIndex.getInstance().getWeapon( event.currentTarget.id );												_selectedItems.push( weapon );											}										if( _selectedWeapons.length < GameLevelDataIndex.getInstance().maxWeaponSlots )					{						var weapon:Weapon = GameLevelDataIndex.getInstance().getWeapon( event.currentTarget.id );												_selectedWeapons.push( weapon );												var bitmap:Bitmap = new Bitmap(BitmapDataManager.getInstance().getBitmapData(weapon.cacheIconId).bitmapData);							bitmap.width = 75;							bitmap.height = 75;							bitmap.smoothing = true;													_selectedWeaponClips[_selectedWeapons.length-1].id = weapon.id;						_selectedWeaponClips[_selectedWeapons.length-1].image_mc.addChild( bitmap );						_selectedWeaponClips[_selectedWeapons.length-1].name_txt.text = weapon.name;						//_selectedWeaponClips[_selectedWeapons.length-1].addEventListener( "onClick", handleSelectedWeaponClicked, false, 0, true );						_selectedWeaponClips[_selectedWeapons.length-1].setActive(true);						_selectedWeaponClips[_selectedWeapons.length-1].visible = true;												event.currentTarget.setDeactive( true );												weapon = null;						bitmap = null;					}									}				*/				/*				protected function handleSelectedWeaponClicked( event:Event ):void				{					ConsoleBroadcaster.broadcast( "WeaponSelectionView", "handleSelectedWeaponClicked("+event.currentTarget.id+");" );										var weapon:Weapon = GameLevelDataIndex.getInstance().getWeapon( event.currentTarget.id );					var startingIndexToUpdate:int = 0;					var bitmap:Bitmap;										for( var i:int=0; i<_selectedWeapons.length; ++i )					{						if( _selectedWeapons[i].id == weapon.id )						{							startingIndexToUpdate = i;							break;						}					}										VectorUtil.remove( _selectedWeapons, weapon, "id" );										for( i=startingIndexToUpdate; i<_selectedWeaponClips.length; ++i )					{						if( _selectedWeaponClips[i].image_mc.numChildren > 1 ) _selectedWeaponClips[i].image_mc.removeChildAt(1);						_selectedWeaponClips[i].name_txt.text = "";												if( i < _selectedWeapons.length )						{							bitmap = new Bitmap(BitmapDataManager.getInstance().getBitmapData(_selectedWeapons[i].cacheIconId).bitmapData);							bitmap.width = 75;							bitmap.height = 75;							bitmap.smoothing = true;														_selectedWeaponClips[i].id = _selectedWeapons[i].id;							_selectedWeaponClips[i].image_mc.addChild( bitmap );							_selectedWeaponClips[i].name_txt.text = _selectedWeapons[i].name;							_selectedWeaponClips[i].setActive(true);							_selectedWeaponClips[i].visible = true;						}						else						{							//_selectedWeaponClips[i].removeEventListener( "onClick", handleSelectedWeaponClicked );							_selectedWeaponClips[i].setDeactive(true);							_selectedWeaponClips[i].visible = false;						}					}										var clip = VectorUtil.find( _availableWeaponClips, weapon, "id" )						clip.setActive(true);										//trace( "clip: "+clip );				}				*/							/** handleBuyAttackSlot1Clicked			  *	---------------------------------------------------------------------------- */				protected function handleBuyAttackSlot1Clicked( event:Event ):void				{					//trace( "handleBuyAttackSlot1Clicked();" );										SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav" );										_additionalSlot = 1;										if( !_additionalSlotPricesLoaded )					{						var storeDataController:StoreDataController = new StoreDataController();							storeDataController.addEventListener( "onComplete", handleGetAttackSlotPricesComplete );							storeDataController.addEventListener( "onError", handleGetAttackSlotPricesError );							storeDataController.getAttackSlotPrices();					}					else					{						_buySingleItemPopupViewClip.item = MainGameDataIndex.getInstance().attackSlots[0];						_buySingleItemPopupViewClip.show();					}									}							/** handleBuyAttackSlot2Clicked			  *	---------------------------------------------------------------------------- */				protected function handleBuyAttackSlot2Clicked( event:Event ):void				{					//trace( "handleBuyAttackSlot2Clicked();" );										SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav" );										_additionalSlot = 2;										if( !_additionalSlotPricesLoaded )					{						var storeDataController:StoreDataController = new StoreDataController();							storeDataController.addEventListener( "onComplete", handleGetAttackSlotPricesComplete );							storeDataController.addEventListener( "onError", handleGetAttackSlotPricesError );							storeDataController.getAttackSlotPrices();					}					else					{						_buySingleItemPopupViewClip.item = MainGameDataIndex.getInstance().attackSlots[1];						_buySingleItemPopupViewClip.show();					}				}							/** handleGetAttackSlotPricesComplete			  *	---------------------------------------------------------------------------- */				protected function handleGetAttackSlotPricesComplete( event:Event ):void				{					event.currentTarget.removeEventListener( "onComplete", handleGetAttackSlotPricesComplete );					event.currentTarget.removeEventListener( "onError", handleGetAttackSlotPricesError );										_additionalSlotPricesLoaded = true;										if( _additionalSlot == 1 )					{						_buySingleItemPopupViewClip.item = MainGameDataIndex.getInstance().attackSlots[0];						_buySingleItemPopupViewClip.show();					}					else if( _additionalSlot == 2 )					{						_buySingleItemPopupViewClip.item = MainGameDataIndex.getInstance().attackSlots[1];						_buySingleItemPopupViewClip.show();					}				}								protected function handleGetAttackSlotPricesError( event:Event ):void				{					event.currentTarget.removeEventListener( "onComplete", handleGetAttackSlotPricesComplete );					event.currentTarget.removeEventListener( "onError", handleGetAttackSlotPricesError );				}							/** isItemSelected			  *	---------------------------------------------------------------------------- */				protected function isItemSelected( item:AbstractGameObject ):Boolean				{					for( var i:int=0; i<_selectedItems.length; ++i )					{						if( (getQualifiedClassName(_selectedItems[i]) == getQualifiedClassName(item)) && (_selectedItems[i].id == item.id) )						{							return true;						}					}										return false;				}							/** handleEnemyIconRolledOver			  *	---------------------------------------------------------------------------- */				protected function handleEnemyIconRolledOver( enemyIcon:WeaponSelectionEnemyCountIcon ):void				{					var enemy:Enemy = GameLevelDataIndex.getInstance().getEnemy( enemyIcon.enemyId );					var text:String = StringsIndex.getInstance().getString(String(enemy.name));					var text2:String = StringsIndex.getInstance().getString(String(enemy.description));					var text3:String = enemy.statistic;										EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_TEXT_HOVER_SHOW, this, {clip:enemyIcon.contentClip, text:text, text2:text2, text3:text3, align:TextFieldAutoSize.CENTER} );				}							/** handleEnemyIconsRolledOut			  *	---------------------------------------------------------------------------- */				protected function handleEnemyIconRolledOut():void				{					EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_TEXT_HOVER_HIDE, this );				}							/** handleSelectedItemClicked			  *	---------------------------------------------------------------------------- */				protected function handleSelectedItemClicked( event:Event ):void				{					ConsoleBroadcaster.broadcast( "WeaponSelectionView", "handleSelectedItemClicked();" );										var item:AbstractGameObject = event.currentTarget.item;					var i:int;										if( item != null )					{						for( i=0; i<_selectedItems.length; ++i )						{							if( (getQualifiedClassName(_selectedItems[i]) == getQualifiedClassName(item)) && (_selectedItems[i].id == item.id) )							{								_selectedItems.splice( i, 1 );							}						}												if( item.consumable )						{							for( i=0; i<_consumableItemClips.length; ++i )							{								if( isItemSelected(_consumableItemClips[i].item) )								//if( _consumableItemClips[i].item != null && _consumableItemClips[i].item.id == item.id )								{									_consumableItemClips[i].setDeactive();								}								else if( MainGameController.getInstance().currentUser.isItemUnlocked(_consumableItemClips[i].item) )								{									_consumableItemClips[i].setActive();								}							}						}						else						{							for( i=0; i<_durableItemClips.length; ++i )							{								if( isItemSelected(_durableItemClips[i].item) )								//if( _durableItemClips[i].item != null && _durableItemClips[i].item.id == item.id )								{									//trace( "durableItemClip.setDeactive: "+_durableItemClips[i].item );									_durableItemClips[i].setDeactive();								}								else if( MainGameController.getInstance().currentUser.isItemUnlocked(_durableItemClips[i].item) )								{									_durableItemClips[i].setActive();								}							}						}												//event.currentTarget.reset();						//event.currentTarget.visible = false;												for( i=0; i<_selectedItemClips.length; ++i )						{							if( i < _selectedItems.length )							{								_selectedItemClips[i].reset();								_selectedItemClips[i].showItemView( _selectedItems[i] );							}							else if( i < MainGameController.getInstance().currentUser.attackSlots )							{								_selectedItemClips[i].reset();								_selectedItemClips[i].contentClip.visible = false;								_selectedItemClips[i].showUnlockView();							}							else							{								_selectedItemClips[i].showLockView();							}						}												//trace( "_selectedItems.length: "+_selectedItems.length );												if( MainGameController.getInstance().currentUser.tutorialLevelSetup )						{							MainGameController.getInstance().currentUser.tutorialLevelSetup = false;														EventNotificationCenter.getInstance().sendNotification( BoogaEvent.ON_TUTORIAL_HIDE, this );														var userDataController:UserDataController = new UserDataController();								userDataController.updateUserTutorial( MainGameController.getInstance().currentUser.id, "level_setup", 0 );						}												if( _selectedItems.length <= 0 )						{							_continueDoneClip.setDeactive( false );							_continueDoneClip.dynamicClip.alpha = .5;						}												SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav" );					}									}							/** handleAvailableItemClicked			  *	---------------------------------------------------------------------------- */				protected function handleAvailableItemClicked( event:Event ):void				{					ConsoleBroadcaster.broadcast( "WeaponSelectionView", "handleAvailableItemClicked();" );										//trace( "_selectedItems.length: "+_selectedItems.length );										if( _selectedItems.length < MainGameController.getInstance().currentUser.attackSlots )					{						event.currentTarget.setDeactive();												_selectedItemClips[_selectedItems.length].showItemView( event.currentTarget.item );						_selectedItemClips[_selectedItems.length].contentClip.visible = true;						_selectedItems.push( event.currentTarget.item );					}										//trace( "_selectedItems.length: "+_selectedItems.length );										if( _selectedItems.length > 0 )					{						_continueDoneClip.setActive( true );						_continueDoneClip.dynamicClip.alpha = 1;					}										if( MainGameController.getInstance().currentUser.tutorialLevelSetup )					{						EventNotificationCenter.getInstance().sendNotification( BoogaEvent.ON_TUTORIAL_HIDE, this );												var globalPosition:Point = _selectedItemClips[_selectedItems.length-1].contentClip.parent.localToGlobal( new Point(_selectedItemClips[_selectedItems.length-1].contentClip.x+25, _selectedItemClips[_selectedItems.length-1].contentClip.y+25) );						//var globalPosition:Point = event.currentTarget.contentClip.parent.localToGlobal( new Point(event.currentTarget.contentClip.x, event.currentTarget.contentClip.y) );						EventNotificationCenter.getInstance().sendNotificationWithParameters( BoogaEvent.ON_TUTORIAL_SHOW, this, {targetX:globalPosition.x, targetY:globalPosition.y, text:StringsIndex.getInstance().getStringByName("TUTORIAL_LEVEL_SETUP_2")} );					}										SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav" );				}								protected function handleAvailableItemRolledOver( event:Event ):void				{					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav" );										var text:String = StringsIndex.getInstance().getString(String(event.currentTarget.item.name));					var text2:String = StringsIndex.getInstance().getString(String(event.currentTarget.item.description));					var text3:String = event.currentTarget.item.statistic;										EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_TEXT_HOVER_SHOW, this, {clip:event.currentTarget.contentClip, text:text, text2:text2, text3:text3, align:TextFieldAutoSize.CENTER} );				}								protected function handleAvailableItemRolledOut( event:Event ):void				{					EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_TEXT_HOVER_HIDE, this );				}							/** handleConsumableItemBuyClicked			  *	---------------------------------------------------------------------------- */				protected function handleConsumableItemBuyClicked( event:Event ):void				{					ConsoleBroadcaster.broadcast( "WeaponSelectionView", "handleConsumableItemBuyClicked();" );										if( MainGameController.getInstance().currentUser.tutorialConsumables )					{						MainGameController.getInstance().currentUser.tutorialConsumables = false;												EventNotificationCenter.getInstance().sendNotification( BoogaEvent.ON_TUTORIAL_HIDE, this );												var userDataController:UserDataController = new UserDataController();							userDataController.updateUserTutorial( MainGameController.getInstance().currentUser.id, "consumables", 0 );					}										_buyPopupViewClip.item = event.currentTarget.item;					_buyPopupViewClip.show();										//purchaseEffect_mc.x = event.currentTarget.dynamicClip.x + 30;					//purchaseEffect_mc.y = event.currentTarget.dynamicClip.y + 40;				}							/** handlePopupPurchaseClicked			  *	---------------------------------------------------------------------------- *			  *	This event is fired when user clicked on the popup purchase buttons to buy			  *	consumable items.			  *	---------------------------------------------------------------------------- */				protected function handlePopupPurchaseClicked( event:CustomEvent ):void				{					//trace( "priceId: "+event.customParameters.priceId );					//trace( "itemId: "+event.customParameters.itemId );					//trace( "type: "+event.customParameters.type );										MainGameController.getInstance().addEventListener( BoogaEvent.ON_PURCHASE_SUCCESS, handlePurchaseItemSuccess );					MainGameController.getInstance().addEventListener( BoogaEvent.ON_PURCHASE_FAIL, handlePurchaseItemFail );					MainGameController.getInstance().purchaseItem( event.customParameters.type, event.customParameters.itemId, event.customParameters.priceId, 'LevelSetup' );				}							/** handlePurchaseItemSuccess			  *	---------------------------------------------------------------------------- *			  *	This event is fired when the consumable item purchases complete.			  *	---------------------------------------------------------------------------- */				protected function handlePurchaseItemSuccess( event:BoogaEvent ):void				{					ConsoleBroadcaster.broadcast( "WeaponSelectionView", "handlePurchaseItemSuccess();" );										MainGameController.getInstance().removeEventListener( BoogaEvent.ON_PURCHASE_SUCCESS, handlePurchaseItemSuccess );					MainGameController.getInstance().removeEventListener( BoogaEvent.ON_PURCHASE_FAIL, handlePurchaseItemFail );										var purchaseEffectPlaying:Boolean = false;										if( _additionalSlot == 1 )					{						MainGameController.getInstance().currentUser.attackSlots = 7;						_selectedItemClips[6].showUnlockView();						buyAttackSlot1_mc.visible = false;												_buyAttackSlot2Clip.dynamicClip.visible = true;						_buyAttackSlot2Clip.setActive();						GameLevelUtil.removeDesaturatedFilterFromMovieClip( _buyAttackSlot2Clip.dynamicClip );												_additionalSlot = -1;												_purchaseEffectPlayDelayTimer.stop();						_purchaseEffectPlayDelayTimer.reset();												purchaseEffectPlaying = true;						purchaseEffect_mc.x = _selectedItemClips[6].contentClip.x + 30;						purchaseEffect_mc.y = _selectedItemClips[6].contentClip.y + 40;												_purchaseEffectPlayDelayTimer.start();					}					else if( _additionalSlot == 2 )					{						MainGameController.getInstance().currentUser.attackSlots = 8;						_selectedItemClips[7].showUnlockView();						buyAttackSlot2_mc.visible = false;												_additionalSlot = -1;												_purchaseEffectPlayDelayTimer.stop();						_purchaseEffectPlayDelayTimer.reset();												purchaseEffectPlaying = true;						purchaseEffect_mc.x = _selectedItemClips[7].contentClip.x + 30;						purchaseEffect_mc.y = _selectedItemClips[7].contentClip.y + 40;												_purchaseEffectPlayDelayTimer.start();					}					else					{						for( var i:int=0; i<_consumableItemClips.length; ++i )						{							if( !purchaseEffectPlaying && _consumableItemClips[i].item.useCount != _consumableItemClips[i].count_mc.label_txt.text )							{								_purchaseEffectPlayDelayTimer.stop();								_purchaseEffectPlayDelayTimer.reset();																purchaseEffectPlaying = true;								purchaseEffect_mc.x = _consumableItemClips[i].contentClip.x + 30;								purchaseEffect_mc.y = _consumableItemClips[i].contentClip.y + 40;																_purchaseEffectPlayDelayTimer.start();															}														_consumableItemClips[i].refreshCount();						}					}										_buyPopupViewClip.hide();					_buySingleItemPopupViewClip.hide();									}							/** handlePurchaseItemFail			  *	---------------------------------------------------------------------------- *			  *	This event is fired when the consumable item purchases fail.			  *	---------------------------------------------------------------------------- */				protected function handlePurchaseItemFail( event:BoogaEvent ):void				{					ConsoleBroadcaster.broadcast( "WeaponSelectionView", "handlePurchaseItemFail();" );										MainGameController.getInstance().removeEventListener( BoogaEvent.ON_PURCHASE_SUCCESS, handlePurchaseItemSuccess );					MainGameController.getInstance().removeEventListener( BoogaEvent.ON_PURCHASE_FAIL, handlePurchaseItemFail );										//TODO:					//	Do something if purchase fails				}							/** handleDurableItemsPrevClicked			  *	---------------------------------------------------------------------------- */				protected function handleDurableItemsPrevClicked( event:Event ):void				{					--_durableItemPage;										showDurableItems();					toggleUI();										//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_click.wav").volume, 0, "sfx_mouse_click.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav" );				}								protected function handleDurableItemsPrevRolledOver( event:Event ):void				{					//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_rollover.wav").volume, 0, "sfx_mouse_rollover.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav", SoundEffectPlayer.SOUND_PLAYER_SFX );				}								protected function handleDurableItemsPrevRolledOut( event:Event ):void				{									}							/** handleDurableItemsNextClicked			  *	---------------------------------------------------------------------------- */				protected function handleDurableItemsNextClicked( event:Event ):void				{					++_durableItemPage;										showDurableItems();					toggleUI();										//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_click.wav").volume, 0, "sfx_mouse_click.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav" );				}								protected function handleDurableItemsNextRolledOver( event:Event ):void				{					//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_rollover.wav").volume, 0, "sfx_mouse_rollover.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav", SoundEffectPlayer.SOUND_PLAYER_SFX );				}								protected function handleDurableItemsNextRolledOut( event:Event ):void				{									}							/** handleConsumableItemsPrevClicked			  *	---------------------------------------------------------------------------- */				protected function handleConsumableItemsPrevClicked( event:Event ):void				{					--_consumableItemPage;										showConsumableItems();					toggleUI();										//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_click.wav").volume, 0, "sfx_mouse_click.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav" );				}								protected function handleConsumableItemsPrevRolledOver( event:Event ):void				{					//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_rollover.wav").volume, 0, "sfx_mouse_rollover.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav", SoundEffectPlayer.SOUND_PLAYER_SFX );				}								protected function handleConsumableItemsPrevRolledOut( event:Event ):void				{									}							/** handleConsumableItemsNextClicked			  *	---------------------------------------------------------------------------- */				protected function handleConsumableItemsNextClicked( event:Event ):void				{					++_consumableItemPage;										showConsumableItems();					toggleUI();										//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_click.wav").volume, 0, "sfx_mouse_click.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav" );				}								protected function handleConsumableItemsNextRolledOver( event:Event ):void				{					//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_rollover.wav").volume, 0, "sfx_mouse_rollover.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav", SoundEffectPlayer.SOUND_PLAYER_SFX );				}								protected function handleConsumableItemsNextRolledOut( event:Event ):void				{									}							/** showDurableItems			  *	---------------------------------------------------------------------------- *			  *	Shows the durable items of the current page and it will be set active or			  *	inactive depends if those items are selected or not.			  *	---------------------------------------------------------------------------- */				protected function showDurableItems():void				{					for( var i:int=0; i<totalDurableItemsPerPage; ++i )					{						//if( (i+_durableItemPage*totalDurableItemsPerPage) < _availableDurableItems.length && _availableDurableItems[i+_durableItemPage*totalDurableItemsPerPage] )						if( (i+_durableItemPage*totalDurableItemsPerPage) < _availableDurableItems.length )						{							//trace( "showing durable item "+(i+_durableItemPage*totalDurableItemsPerPage) );							if( MainGameController.getInstance().currentUser.isItemUnlocked(_availableDurableItems[i+_durableItemPage*totalDurableItemsPerPage]) )							{								_durableItemClips[i].showItemView( _availableDurableItems[i+_durableItemPage*totalDurableItemsPerPage] );																if( isItemSelected(_durableItemClips[i].item) )									_durableItemClips[i].setDeactive();								else									_durableItemClips[i].setActive();							}							else							{								_durableItemClips[i].showLockView( _availableDurableItems[i+_durableItemPage*totalDurableItemsPerPage].availableOnLevel-MainGameController.getInstance().currentUser.level );							}							_durableItemClips[i].contentClip.visible = true;													}						else						{							_durableItemClips[i].contentClip.visible = false;						}					}				}							/** showConsumableItems			  *	---------------------------------------------------------------------------- *			  *	Shows the consumable items of the current page and it will be set active or			  *	inactive depends if those items are selected or not.			  *	---------------------------------------------------------------------------- */				protected function showConsumableItems():void				{					var item:AbstractGameObject;					var element:ElementCompatibility = GameLevelUtil.checkForElement( _gameLevel );										//trace( "element.protection: "+element.protection );										for( var i:int=0; i<totalConsumableItemsPerPage; ++i )					{						//if( (i+_consumableItemPage*totalConsumableItemsPerPage) < _availableConsumableItems.length && _availableConsumableItems[i+_consumableItemPage*totalConsumableItemsPerPage] )						if( (i+_consumableItemPage*totalConsumableItemsPerPage) < _availableConsumableItems.length )						{							item = _availableConsumableItems[i+_consumableItemPage*totalConsumableItemsPerPage];							//if( item is Weapon )							//{								//trace( "checks if user has unlocked "+item.name );							//}														if( MainGameController.getInstance().currentUser.isItemUnlocked(item) )							{								if( item is Weapon )									_consumableItemClips[i].showItemView( MainGameController.getInstance().currentUser.getUnlockedWeapon(item.id) );								else if( item is God )									_consumableItemClips[i].showItemView( MainGameController.getInstance().currentUser.getUnlockedGod(item.id) );																//trace( "item.id: "+_consumableItemClips[i].item.id );								//trace( "item.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_ADDITION_INDEX): "+_consumableItemClips[i].item.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_ADDITION_INDEX) );								//trace( "item.hasAttackProperty(element.protection): "+_consumableItemClips[i].item.hasAttackProperty(element.protection) );																if( isItemSelected(_consumableItemClips[i].item) || (element != null && _consumableItemClips[i].item.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_ADDITION_INDEX) && !_consumableItemClips[i].item.hasAttackProperty(element.protection)) )									_consumableItemClips[i].setDeactive();								else									_consumableItemClips[i].setActive();							}							else							{								_consumableItemClips[i].showLockView( item.availableOnLevel-MainGameController.getInstance().currentUser.level );							}							_consumableItemClips[i].contentClip.visible = true;													}						else						{							_consumableItemClips[i].contentClip.visible = false;						}					}				}							/** toggleUI			  *	---------------------------------------------------------------------------- *			  *	Toggles the prev and next buttons for durable items and the prev and next			  *	buttons for consumable items on/off.			  *	---------------------------------------------------------------------------- */				protected function toggleUI():void				{					if( _totalDurableItemPages == 1 )					{						//_durableItemsNextClip.dynamicClip.visible = false;						//_durableItemsPrevClip.dynamicClip.visible = false;						_durableItemsPrevClip.setDeactive();						_durableItemsNextClip.setDeactive();						GameLevelUtil.addDesaturatedFilterToMovieClip( _durableItemsPrevClip.dynamicClip );						GameLevelUtil.addDesaturatedFilterToMovieClip( _durableItemsNextClip.dynamicClip );						_durableItemsPrevClip.dynamicClip.alpha = .3;						_durableItemsNextClip.dynamicClip.alpha = .3;					}					else					{						if( _durableItemPage == 0 )						{							//_durableItemsPrevClip.dynamicClip.visible = false;							//_durableItemsNextClip.dynamicClip.visible = true;							_durableItemsPrevClip.setDeactive();							_durableItemsNextClip.setActive();							GameLevelUtil.addDesaturatedFilterToMovieClip( _durableItemsPrevClip.dynamicClip );							_durableItemsPrevClip.dynamicClip.alpha = .3;							GameLevelUtil.removeDesaturatedFilterFromMovieClip( _durableItemsNextClip.dynamicClip );							_durableItemsNextClip.dynamicClip.alpha = 1;						}						else if( _durableItemPage == _totalDurableItemPages-1 )						{							//_durableItemsPrevClip.dynamicClip.visible = true;							//_durableItemsNextClip.dynamicClip.visible = false;							_durableItemsPrevClip.setActive();							_durableItemsNextClip.setDeactive();							GameLevelUtil.removeDesaturatedFilterFromMovieClip( _durableItemsPrevClip.dynamicClip );							_durableItemsPrevClip.dynamicClip.alpha = 1;							GameLevelUtil.addDesaturatedFilterToMovieClip( _durableItemsNextClip.dynamicClip );							_durableItemsNextClip.dynamicClip.alpha = .3;						}						else						{							//_durableItemsPrevClip.dynamicClip.visible = true;							//_durableItemsNextClip.dynamicClip.visible = true;							_durableItemsPrevClip.setActive();							_durableItemsNextClip.setActive();							GameLevelUtil.removeDesaturatedFilterFromMovieClip( _durableItemsPrevClip.dynamicClip );							_durableItemsPrevClip.dynamicClip.alpha = 1;							GameLevelUtil.removeDesaturatedFilterFromMovieClip( _durableItemsNextClip.dynamicClip );							_durableItemsNextClip.dynamicClip.alpha = 1;						}					}										if( _userHasConsumable )					{						if( _totalConsumableItemPages == 1 )						{							//_consumableItemsNextClip.dynamicClip.visible = false;							//_consumableItemsPrevClip.dynamicClip.visible = false;							_consumableItemsPrevClip.setDeactive();							_consumableItemsNextClip.setDeactive();							GameLevelUtil.addDesaturatedFilterToMovieClip( _consumableItemsPrevClip.dynamicClip );							GameLevelUtil.addDesaturatedFilterToMovieClip( _consumableItemsNextClip.dynamicClip );							_consumableItemsPrevClip.dynamicClip.alpha = .3;							_consumableItemsNextClip.dynamicClip.alpha = .3;						}						else						{							if( _consumableItemPage == 0 )							{								//_consumableItemsPrevClip.dynamicClip.visible = false;								//_consumableItemsNextClip.dynamicClip.visible = true;								_consumableItemsPrevClip.setDeactive();								_consumableItemsNextClip.setActive();								GameLevelUtil.addDesaturatedFilterToMovieClip( _consumableItemsPrevClip.dynamicClip );								_consumableItemsPrevClip.dynamicClip.alpha = .3;								GameLevelUtil.removeDesaturatedFilterFromMovieClip( _consumableItemsNextClip.dynamicClip );								_consumableItemsNextClip.dynamicClip.alpha = 1;							}							else if( _consumableItemPage == _totalConsumableItemPages-1 )							{								//_consumableItemsPrevClip.dynamicClip.visible = true;								//_consumableItemsNextClip.dynamicClip.visible = false;								_consumableItemsPrevClip.setActive();								_consumableItemsNextClip.setDeactive();								GameLevelUtil.removeDesaturatedFilterFromMovieClip( _consumableItemsPrevClip.dynamicClip );								_consumableItemsPrevClip.dynamicClip.alpha = 1;								GameLevelUtil.addDesaturatedFilterToMovieClip( _consumableItemsNextClip.dynamicClip );								_consumableItemsNextClip.dynamicClip.alpha = .3;							}							else							{								//_consumableItemsPrevClip.dynamicClip.visible = true;								//_consumableItemsNextClip.dynamicClip.visible = true;								_consumableItemsPrevClip.setActive();								_consumableItemsNextClip.setActive();								GameLevelUtil.removeDesaturatedFilterFromMovieClip( _consumableItemsPrevClip.dynamicClip );								_consumableItemsPrevClip.dynamicClip.alpha = 1;								GameLevelUtil.removeDesaturatedFilterFromMovieClip( _consumableItemsNextClip.dynamicClip );								_consumableItemsNextClip.dynamicClip.alpha = 1;							}						}					}				}							/** handleCheatDetected			  *	---------------------------------------------------------------------------- *			  *	If cheats are enabled, this will check for any cheats that are entered.			  *	---------------------------------------------------------------------------- */			 	protected function handleCheatDetected( customParameters:Object ):void				{					if( customParameters.keywordIndex == 15 )					{						version_mc.visible = true;					}				}						}	}