/** BuyPopupView  *	---------------------------------------------------------------------------- *  *	@author:  *		Christian Widodo [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.maingame.weaponselection	{		import flash.display.Bitmap;		import flash.display.BitmapData;		import flash.display.Loader;		import flash.display.MovieClip;		import flash.events.Event;		import flash.events.EventDispatcher;		import flash.net.URLRequest;		import flash.system.ApplicationDomain;		import flash.system.LoaderContext;		import flash.text.TextField;		import flash.text.TextFieldAutoSize;		import flash.utils.getDefinitionByName;				import com.avatarlabs.utils.cache.BitmapDataManager;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.sound.SoundEffectPlayer;		import com.avatarlabs.utils.text.TextFormatting;		import com.avatarlabs.utils.userinterface.DynamicUIButton;		import com.avatarlabs.utils.userinterface.DynamicUIScroller;		import com.avatarlabs.utils.userinterface.DynamicUISlider;				import com.boogabooga.data.SettingsIndex;		import com.boogabooga.data.SoundsIndex;		import com.boogabooga.data.StringsIndex;		import com.boogabooga.data.gamelevel.Chicken;		import com.boogabooga.data.gamelevel.God;		import com.boogabooga.data.gamelevel.Weapon;		import com.boogabooga.data.gamelevel.AbstractGameObject;		import com.boogabooga.events.BoogaEvent;		import com.boogabooga.utils.GameLevelUtil;				public class BuyPopupView extends EventDispatcher		{			protected var _contentClip:MovieClip;						protected var _item:AbstractGameObject;			protected var _isVisible:Boolean;			protected var _selectedItemPrice:int;						protected var _descriptionScrollerClip:DynamicUIScroller;			protected var _descriptionSliderClip:DynamicUISlider;			protected var _exitClip:DynamicUIButton;			protected var _buy1Clip:DynamicUIButton;			protected var _buy2Clip:DynamicUIButton;			protected var _buy3Clip:DynamicUIButton;						protected var _buyMaxWidth:Number;						/**	Stage Instances **/			public var name_txt:TextField;			public var image_mc:MovieClip;			public var descriptionScroller_mc:MovieClip;			public var exit_mc:MovieClip;			public var itemBackground_mc:MovieClip;			public var background_mc:MovieClip;			public var buyLabel1_txt:TextField;			public var buyLabel2_txt:TextField;			public var buyLabel3_txt:TextField;			public var buy1_mc:MovieClip;			public var buy2_mc:MovieClip;			public var buy3_mc:MovieClip;			public var elements_mc:MovieClip;			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function BuyPopupView()				{					//init();				}								public function set contentClip( m:MovieClip ):void				{					_contentClip = m;										name_txt = _contentClip.name_txt;					image_mc = _contentClip.image_mc;					descriptionScroller_mc = _contentClip.descriptionScroller_mc;					exit_mc = _contentClip.exit_mc;					itemBackground_mc = _contentClip.itemBackground_mc;					background_mc = _contentClip.background_mc;					buyLabel1_txt = _contentClip.buyLabel1_txt;					buyLabel2_txt = _contentClip.buyLabel2_txt;					buyLabel3_txt = _contentClip.buyLabel3_txt;					buy1_mc = _contentClip.buy1_mc;					buy2_mc = _contentClip.buy2_mc;					buy3_mc = _contentClip.buy3_mc;					elements_mc = _contentClip.elements_mc;										_buyMaxWidth = background_mc.width;										descriptionScroller_mc.content_mc.label_txt.autoSize = TextFieldAutoSize.LEFT;					descriptionScroller_mc.content_mc.label_txt.styleSheet = SettingsIndex.getInstance().fontManager.getStyleSheet();										_descriptionSliderClip = new DynamicUISlider();					_descriptionSliderClip.dynamicClip = descriptionScroller_mc.slider_mc;					_descriptionSliderClip.dynamicInit();					_descriptionSliderClip.setProperty( "y" );					_descriptionSliderClip.setHandle( descriptionScroller_mc.slider_mc.handle_mc );					_descriptionSliderClip.setBounds( descriptionScroller_mc.slider_mc.bound_mc );										_descriptionScrollerClip = new DynamicUIScroller();					_descriptionScrollerClip.dynamicClip = descriptionScroller_mc;					_descriptionScrollerClip.dynamicInit();					_descriptionScrollerClip.setProperty( "y" );					_descriptionScrollerClip.setSlider( _descriptionSliderClip );					_descriptionScrollerClip.setContent( descriptionScroller_mc.content_mc );					_descriptionScrollerClip.setMask( descriptionScroller_mc.mask_mc );										_exitClip = new DynamicUIButton();					_exitClip.dynamicClip = exit_mc;					_exitClip.dynamicInit();										_buy1Clip = new DynamicUIButton();					_buy1Clip.dynamicClip = buy1_mc;					_buy1Clip.dynamicInit();										_buy2Clip = new DynamicUIButton();					_buy2Clip.dynamicClip = buy2_mc;					_buy2Clip.dynamicInit();										_buy3Clip = new DynamicUIButton();					_buy3Clip.dynamicClip = buy3_mc;					_buy3Clip.dynamicInit();				}				public function get contentClip():MovieClip { return _contentClip; }								public function get isVisible():Boolean { return _isVisible; }				public function get selectedItemPrice():int { return _selectedItemPrice; }								public function set item( a:AbstractGameObject ):void				{					reset();										_item = a;										_descriptionScrollerClip.resetScroller();										TextFormatting.formatTextWithFontName( name_txt, StringsIndex.getInstance().getString(String(_item.name)), "Lithos Pro Black", false, TextFieldAutoSize.LEFT );					//TextFormatting.formatTextWithFontName( MovieClip(descriptionScroller_mc).content_mc.label_txt, StringsIndex.getInstance().getString(String(_item.description)), "Lithos Pro Black", false, TextFieldAutoSize.LEFT );										if( _item is Weapon || _item is God )						descriptionScroller_mc.content_mc.label_txt.htmlText = '<span class="font2Default">'+StringsIndex.getInstance().getString(String(_item.description))+'\n'+_item.statistic+'</span>';					else						descriptionScroller_mc.content_mc.label_txt.htmlText = '<span class="font2Default">'+StringsIndex.getInstance().getString(String(_item.description))+'</span>';										_descriptionScrollerClip.toggleSlider();										if( _item is Weapon )					{						var element:MovieClip;						var elements:Array = GameLevelUtil.getItemElements( _item );												for( var i:int=0; i<elements.length; ++i )						{							element = new (getDefinitionByName(elements[i]) as Class)();							//element.width = 24;							//element.height = 25;							//element.x = -12;							element.y = -35 * i;							elements_mc.addChild( element );						}					}										var quantityText:String = " "+StringsIndex.getInstance().getStringByName('USE');					var quantityTextPlural:String = " "+StringsIndex.getInstance().getStringByName('USES');										if( _item is Chicken )					{						quantityText = " "+StringsIndex.getInstance().getStringByName('CHICKEN');						quantityTextPlural = " "+StringsIndex.getInstance().getStringByName('CHICKENS');					}										//TextFormatting.formatTextWithFontName( buyLabel1_txt, (_item.prices[0].quantity+(_item.prices[0].quantity == 1 ? quantityText : quantityTextPlural)), "SF Fedora", false, TextFieldAutoSize.RIGHT );					//TextFormatting.formatTextWithFontName( buyLabel2_txt, (_item.prices[1].quantity+(_item.prices[1].quantity == 1 ? quantityText : quantityTextPlural)), "SF Fedora", false, TextFieldAutoSize.RIGHT );					//TextFormatting.formatTextWithFontName( buyLabel3_txt, (_item.prices[2].quantity+(_item.prices[2].quantity == 1 ? quantityText : quantityTextPlural)), "SF Fedora", false, TextFieldAutoSize.RIGHT );					TextFormatting.formatTextWithFontName( buyLabel1_txt, (_item.prices[0].quantity+(_item.prices[0].quantity == 1 ? quantityText : quantityTextPlural)), "Lithos Pro Black", false, TextFieldAutoSize.RIGHT );					TextFormatting.formatTextWithFontName( buyLabel2_txt, (_item.prices[1].quantity+(_item.prices[1].quantity == 1 ? quantityText : quantityTextPlural)), "Lithos Pro Black", false, TextFieldAutoSize.RIGHT );					TextFormatting.formatTextWithFontName( buyLabel3_txt, (_item.prices[2].quantity+(_item.prices[2].quantity == 1 ? quantityText : quantityTextPlural)), "Lithos Pro Black", false, TextFieldAutoSize.RIGHT );										TextFormatting.formatTextWithFontName( MovieClip(buy1_mc).label_mc.label_txt, _item.prices[0].price, "Lithos Pro Black", false, TextFieldAutoSize.CENTER );					TextFormatting.formatTextWithFontName( MovieClip(buy2_mc).label_mc.label_txt, _item.prices[1].price, "Lithos Pro Black", false, TextFieldAutoSize.CENTER );					TextFormatting.formatTextWithFontName( MovieClip(buy3_mc).label_mc.label_txt, _item.prices[2].price, "Lithos Pro Black", false, TextFieldAutoSize.CENTER );										buyLabel3_txt.x = int((_buyMaxWidth - buyLabel3_txt.width - 16 - buy3_mc.width)*.5);					buy3_mc.x = buyLabel3_txt.x + buyLabel3_txt.width + 50;					buyLabel1_txt.x = buyLabel3_txt.x;					buy1_mc.x = buy3_mc.x;					buyLabel2_txt.x = buyLabel3_txt.x;					buy2_mc.x = buy3_mc.x;										if( BitmapDataManager.getInstance().getBitmapData(_item.cacheIconId) == null )					{						/*						var loader:Loader = new Loader();							loader.contentLoaderInfo.addEventListener( Event.COMPLETE, handleLoadImageComplete, false, 0, true );							loader.load( new URLRequest(_item.iconURL), new LoaderContext(true, ApplicationDomain.currentDomain) );						*/						BitmapDataManager.getInstance().addEventListener( Event.COMPLETE, handleLoadImageComplete, false, 0, true );						BitmapDataManager.getInstance().loadBitmapToCache( SettingsIndex.getInstance().contentURL+_item.iconURL, _item.cacheIconId );					}					else					{						addImage();					}				}				public function get item():AbstractGameObject { return _item; }							/** addImage			  *	---------------------------------------------------------------------------- */				protected function addImage():void				{					while( image_mc.numChildren > 0 )						image_mc.removeChildAt(0);										var iconBitmap:Bitmap = new Bitmap(BitmapDataManager.getInstance().getBitmapData(_item.cacheIconId).bitmapData);						iconBitmap.width = 100;						iconBitmap.height = 100;						iconBitmap.smoothing = true;											image_mc.addChild( iconBitmap );					iconBitmap = null;				}							/** hanldeLoadImageComplete			  *	---------------------------------------------------------------------------- */				protected function handleLoadImageComplete( event:CustomEvent ):void				{					if( event.customParameters.cacheId == _item.cacheIconId )					{						BitmapDataManager.getInstance().removeEventListener( Event.COMPLETE, handleLoadImageComplete );												addImage();					}				}							/** init			  *	---------------------------------------------------------------------------- */				public function init():void				{					_exitClip.addEventListener( "onClick", handleExitClicked, false, 0, true );					_exitClip.addEventListener( "onSetFocus", handleExitRolledOver, false, 0, true );					_exitClip.addEventListener( "onKillFocus", handleExitRolledOut, false, 0, true );										_buy1Clip.addEventListener( "onClick", handleBuy1Clicked, false, 0, true );					_buy1Clip.addEventListener( "onSetFocus", handleBuy1RolledOver, false, 0, true );					_buy1Clip.addEventListener( "onKillFocus", handleBuy1RolledOut, false, 0, true );					_buy2Clip.addEventListener( "onClick", handleBuy2Clicked, false, 0, true );					_buy2Clip.addEventListener( "onSetFocus", handleBuy2RolledOver, false, 0, true );					_buy2Clip.addEventListener( "onKillFocus", handleBuy2RolledOut, false, 0, true );					_buy3Clip.addEventListener( "onClick", handleBuy3Clicked, false, 0, true );					_buy3Clip.addEventListener( "onSetFocus", handleBuy3RolledOver, false, 0, true );					_buy3Clip.addEventListener( "onKillFocus", handleBuy3RolledOut, false, 0, true );										EventNotificationCenter.getInstance().addSignalListener( BoogaEvent.ON_LANGUAGE_CHANGED, handleLanguageChanged, this );				}							/** show			  *	---------------------------------------------------------------------------- */				public function show():void				{					_contentClip.visible = true;										_isVisible = true;				}							/** hide			  *	---------------------------------------------------------------------------- */				public function hide():void				{					_contentClip.visible = false;										_isVisible = false;										reset();				}							/** reset			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				public function reset():void				{					while( image_mc.numChildren > 0 )						image_mc.removeChildAt(0);										while( elements_mc.numChildren > 0 )						elements_mc.removeChildAt(0);										_descriptionScrollerClip.resetScroller();				}							/** handleExitClicked			  *	---------------------------------------------------------------------------- */				protected function handleExitClicked( event:Event ):void				{					hide();										//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_click.wav").volume, 0, "sfx_mouse_click.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav" );										dispatchEvent( new BoogaEvent(BoogaEvent.ON_POPUP_HIDE) );				}								protected function handleExitRolledOver( event:Event ):void				{					//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_rollover.wav").volume, 0, "sfx_mouse_rollover.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav", SoundEffectPlayer.SOUND_PLAYER_SFX );				}								protected function handleExitRolledOut( event:Event ):void				{									}							/** handleBuy1Clicked			  *	---------------------------------------------------------------------------- */				protected function handleBuy1Clicked( event:Event ):void				{					var eventName:String;					var type:String;										if( _item is Weapon )					{						eventName = BoogaEvent.ON_BUY_WEAPON;						type = "Weapon";					}					else if( _item is God )					{						eventName = BoogaEvent.ON_BUY_GOD;						type = "God";					}					else if( _item is Chicken )					{						eventName = BoogaEvent.ON_BUY_CHICKEN;						type = "Chicken";					}										_selectedItemPrice = 0;										//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_click.wav").volume, 0, "sfx_mouse_click.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav" );										dispatchEvent( new BoogaEvent(eventName, {type:type, itemId:_item.id, priceId:_item.prices[0].id}) );				}								protected function handleBuy1RolledOver( event:Event ):void				{					//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_rollover.wav").volume, 0, "sfx_mouse_rollover.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav", SoundEffectPlayer.SOUND_PLAYER_SFX );				}								protected function handleBuy1RolledOut( event:Event ):void				{									}							/** handleBuy2Clicked			  *	---------------------------------------------------------------------------- */				protected function handleBuy2Clicked( event:Event ):void				{					var eventName:String;					var type:String;										if( _item is Weapon )					{						eventName = BoogaEvent.ON_BUY_WEAPON;						type = "Weapon";					}					else if( _item is God )					{						eventName = BoogaEvent.ON_BUY_GOD;						type = "God";					}					else if( _item is Chicken )					{						eventName = BoogaEvent.ON_BUY_CHICKEN;						type = "Chicken";					}										_selectedItemPrice = 1;										//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_click.wav").volume, 0, "sfx_mouse_click.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav" );										dispatchEvent( new BoogaEvent(eventName, {type:type, itemId:_item.id, priceId:_item.prices[1].id}) );				}								protected function handleBuy2RolledOver( event:Event ):void				{					//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_rollover.wav").volume, 0, "sfx_mouse_rollover.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav", SoundEffectPlayer.SOUND_PLAYER_SFX );				}								protected function handleBuy2RolledOut( event:Event ):void				{									}							/** handleBuy3Clicked			  *	---------------------------------------------------------------------------- */				protected function handleBuy3Clicked( event:Event ):void				{					var eventName:String;					var type:String;										if( _item is Weapon )					{						eventName = BoogaEvent.ON_BUY_WEAPON;						type = "Weapon";					}					else if( _item is God )					{						eventName = BoogaEvent.ON_BUY_GOD;						type = "God";					}					else if( _item is Chicken )					{						eventName = BoogaEvent.ON_BUY_CHICKEN;						type = "Chicken";					}										_selectedItemPrice = 2;										//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_click.wav").volume, 0, "sfx_mouse_click.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav" );										dispatchEvent( new BoogaEvent(eventName, {type:type, itemId:_item.id, priceId:_item.prices[2].id}) );				}								protected function handleBuy3RolledOver( event:Event ):void				{					//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_rollover.wav").volume, 0, "sfx_mouse_rollover.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav", SoundEffectPlayer.SOUND_PLAYER_SFX );				}								protected function handleBuy3RolledOut( event:Event ):void				{									}											/** handleLanguageChanged			  *	---------------------------------------------------------------------------- *			  *	Updates the texts when the language is changed.			  *	---------------------------------------------------------------------------- */				private function handleLanguageChanged( customParameters:Object ):void				{					//trace( "AddFacebookCreditsView -- handleLanguageChanged();" );										if( _item != null )					{						_descriptionScrollerClip.resetScroller();												TextFormatting.formatTextWithFontName( name_txt, StringsIndex.getInstance().getString(String(_item.name)), "Lithos Pro Black", false, TextFieldAutoSize.LEFT );						//TextFormatting.formatTextWithFontName( MovieClip(descriptionScroller_mc).content_mc.label_txt, StringsIndex.getInstance().getString(String(_item.description)), "Lithos Pro Black", false, TextFieldAutoSize.LEFT );												if( _item is Weapon || _item is God )							descriptionScroller_mc.content_mc.label_txt.htmlText = '<span class="font2Default">'+StringsIndex.getInstance().getString(String(_item.description))+'\n'+_item.statistic+'</span>';						else							descriptionScroller_mc.content_mc.label_txt.htmlText = '<span class="font2Default">'+StringsIndex.getInstance().getString(String(_item.description))+'</span>';												_descriptionScrollerClip.toggleSlider();												var quantityText:String = " "+StringsIndex.getInstance().getStringByName('USE');						var quantityTextPlural:String = " "+StringsIndex.getInstance().getStringByName('USES');												if( _item is Chicken )						{							quantityText = " "+StringsIndex.getInstance().getStringByName('CHICKEN');							quantityTextPlural = " "+StringsIndex.getInstance().getStringByName('CHICKENS');						}												TextFormatting.formatTextWithFontName( buyLabel1_txt, (_item.prices[0].quantity+(_item.prices[0].quantity == 1 ? quantityText : quantityTextPlural)), "Lithos Pro Black", false, TextFieldAutoSize.RIGHT );						TextFormatting.formatTextWithFontName( buyLabel2_txt, (_item.prices[1].quantity+(_item.prices[1].quantity == 1 ? quantityText : quantityTextPlural)), "Lithos Pro Black", false, TextFieldAutoSize.RIGHT );						TextFormatting.formatTextWithFontName( buyLabel3_txt, (_item.prices[2].quantity+(_item.prices[2].quantity == 1 ? quantityText : quantityTextPlural)), "Lithos Pro Black", false, TextFieldAutoSize.RIGHT );												buyLabel3_txt.x = int((_buyMaxWidth - buyLabel3_txt.width - 16 - buy3_mc.width)*.5);						buy3_mc.x = buyLabel3_txt.x + buyLabel3_txt.width + 50;						buyLabel1_txt.x = buyLabel3_txt.x;						buy1_mc.x = buy3_mc.x;						buyLabel2_txt.x = buyLabel3_txt.x;						buy2_mc.x = buy3_mc.x;					}				}		}	}