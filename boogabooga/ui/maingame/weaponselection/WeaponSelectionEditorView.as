/** WeaponSelectionEditorView  *	---------------------------------------------------------------------------- *  *	@desc:  *		A list for the paths  *	@author:  *		Christian Widodo [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.maingame.weaponselection	{		import flash.display.Bitmap;		import flash.display.MovieClip;		import flash.display.StageDisplayState;		import flash.events.Event;		import flash.events.EventDispatcher;		import flash.events.MouseEvent;		import flash.text.TextField;		import flash.text.TextFieldAutoSize;		import flash.utils.getDefinitionByName;		import flash.utils.getQualifiedClassName;				import com.greensock.TweenLite;		import com.greensock.easing.Sine;		import com.avatarlabs.utils.ArrayUtil;		import com.avatarlabs.utils.UtilFunctions;		import com.avatarlabs.utils.VectorUtil;		import com.avatarlabs.utils.cache.BitmapDataManager;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.forms.InputText;		import com.avatarlabs.utils.text.TextFormatting;		import com.avatarlabs.utils.userinterface.UIButton;		import com.avatarlabs.utils.userinterface.UIScroller;				import com.boogabooga.controller.maingame.MainGameController;		import com.boogabooga.data.gamelevel.AbstractGameObject;		import com.boogabooga.data.gamelevel.Enemy;		import com.boogabooga.data.gamelevel.GameLevelCurrentData;		import com.boogabooga.data.gamelevel.GameLevelDataIndex		import com.boogabooga.data.gamelevel.God;		import com.boogabooga.data.gamelevel.Weapon;		import com.boogabooga.events.BoogaEvent;		import com.boogabooga.events.GameLevelEvent;		import com.boogabooga.ui.maingame.weaponselection.WeaponSelectionEnemyCountIcon;		import com.boogabooga.utils.ElementCompatibility;		import com.boogabooga.utils.GameLevelUtil;						public class WeaponSelectionEditorView extends WeaponSelectionView		{						/**	Stage Instances **/			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function WeaponSelectionEditorView()				{					super();				}								override public function set contentClip( m:MovieClip ):void				{					super.contentClip = m;										buyAttackSlot1_mc.visible = false;					buyAttackSlot2_mc.visible = false;				}							/** initAvailableItems			  *	---------------------------------------------------------------------------- *			  *	Initializes weapons and gods and the ones user has.			  *	---------------------------------------------------------------------------- */				override public function initAvailableItems( weapons:Vector.<Weapon>=null, gods:Vector.<God>=null )				{					super.initAvailableItems( weapons, gods );										var i:int;										for( i=0; i<_selectedItemClips.length; ++i )					{						_selectedItemClips[i].contentClip.visible = true;						_selectedItemClips[i].showUnlockView();					}										for( i=0; i<_availableConsumableItems.length; ++i )					{						_availableConsumableItems[i].useCount = 50;					}				}							/** handleContinueClicked			  *	---------------------------------------------------------------------------- */				override protected function handleContinueClicked( event:Event ):void				{					super.handleContinueClicked(event);					/*					ConsoleBroadcaster.broadcast( "WeaponSelectionView", "handleContinueClicked();" );										VectorUtil.removeAll( GameLevelCurrentData.getInstance().selectedAttacks );										for( var i:int=0; i<_selectedItems.length; ++i )					{						if( _selectedItems[i].consumable )							_selectedItems[i].useCount = 50;												GameLevelCurrentData.getInstance().selectedAttacks.push( _selectedItems[i] );					}										dispatchEvent( new BoogaEvent(BoogaEvent.WEAPON_SELECTION_DONE) );					*/															for( var i:int=0; i<GameLevelCurrentData.getInstance().selectedAttacks.length; ++i )					{						if( GameLevelCurrentData.getInstance().selectedAttacks[i].consumable )							GameLevelCurrentData.getInstance().selectedAttacks[i].useCount = 50;					}									}							/** handleSelectedItemClicked			  *	---------------------------------------------------------------------------- */				override protected function handleSelectedItemClicked( event:Event ):void				{					ConsoleBroadcaster.broadcast( "WeaponSelectionView", "handleSelectedItemClicked();" );										var item:AbstractGameObject = event.currentTarget.item;					var i:int;										if( item != null )					{						for( i=0; i<_selectedItems.length; ++i )						{							if( (getQualifiedClassName(_selectedItems[i]) == getQualifiedClassName(item)) && (_selectedItems[i].id == item.id) )							{								_selectedItems.splice( i, 1 );							}						}												if( item.consumable )						{							for( i=0; i<_consumableItemClips.length; ++i )							{								if( isItemSelected(_consumableItemClips[i].item) )								//if( _consumableItemClips[i].item != null && _consumableItemClips[i].item.id == item.id )								{									_consumableItemClips[i].setDeactive();								}								else								{									_consumableItemClips[i].setActive();								}							}						}						else						{							for( i=0; i<_durableItemClips.length; ++i )							{								if( isItemSelected(_durableItemClips[i].item) )								//if( _durableItemClips[i].item != null && _durableItemClips[i].item.id == item.id )								{									_durableItemClips[i].setDeactive();								}								else								{									_durableItemClips[i].setActive();								}							}						}												//event.currentTarget.reset();						//event.currentTarget.visible = false;												for( i=0; i<_selectedItemClips.length; ++i )						{							if( i < _selectedItems.length )							{								_selectedItemClips[i].reset();								_selectedItemClips[i].showItemView( _selectedItems[i] );							}							else							{								_selectedItemClips[i].reset();								_selectedItemClips[i].contentClip.visible = false;							}						}												//trace( "_selectedItems.length: "+_selectedItems.length );					}				}							/** handleAvailableItemClicked			  *	---------------------------------------------------------------------------- */				override protected function handleAvailableItemClicked( event:Event ):void				{					ConsoleBroadcaster.broadcast( "WeaponSelectionView", "handleAvailableItemClicked();" );										//trace( "_selectedItems.length: "+_selectedItems.length );										if( _selectedItems.length < GameLevelDataIndex.getInstance().maxWeaponSlots )					{						event.currentTarget.setDeactive();												_selectedItemClips[_selectedItems.length].showItemView( event.currentTarget.item );						_selectedItemClips[_selectedItems.length].contentClip.visible = true;						_selectedItems.push( event.currentTarget.item );					}										if( _selectedItems.length > 0 )					{						_continueDoneClip.setActive( true );						_continueDoneClip.dynamicClip.alpha = 1;					}									}							/** showDurableItems			  *	---------------------------------------------------------------------------- *			  *	Shows the durable items of the current page and it will be set active or			  *	inactive depends if those items are selected or not.			  *	---------------------------------------------------------------------------- */				override protected function showDurableItems():void				{					for( var i:int=0; i<totalDurableItemsPerPage; ++i )					{						//if( (i+_durableItemPage*totalDurableItemsPerPage) < _availableDurableItems.length && _availableDurableItems[i+_durableItemPage*totalDurableItemsPerPage] )						if( (i+_durableItemPage*totalDurableItemsPerPage) < _availableDurableItems.length )						{							//trace( "showing durable item "+(i+_durableItemPage*totalDurableItemsPerPage) );							_durableItemClips[i].showItemView( _availableDurableItems[i+_durableItemPage*totalDurableItemsPerPage] );							_durableItemClips[i].contentClip.visible = true;														if( isItemSelected(_durableItemClips[i].item) )								_durableItemClips[i].setDeactive();							else								_durableItemClips[i].setActive();						}						else						{							_durableItemClips[i].contentClip.visible = false;						}					}				}							/** showConsumableItems			  *	---------------------------------------------------------------------------- *			  *	Shows the consumable items of the current page and it will be set active or			  *	inactive depends if those items are selected or not.			  *	---------------------------------------------------------------------------- */				override protected function showConsumableItems():void				{					var element:ElementCompatibility = GameLevelUtil.checkForElement( _gameLevel );										for( var i:int=0; i<totalConsumableItemsPerPage; ++i )					{						//if( (i+_consumableItemPage*totalConsumableItemsPerPage) < _availableConsumableItems.length && _availableConsumableItems[i+_consumableItemPage*totalConsumableItemsPerPage] )						if( (i+_consumableItemPage*totalConsumableItemsPerPage) < _availableConsumableItems.length )						{							_consumableItemClips[i].showItemView( _availableConsumableItems[i+_consumableItemPage*totalConsumableItemsPerPage] );							_consumableItemClips[i].contentClip.visible = true;														if( isItemSelected(_consumableItemClips[i].item) || (element != null && _consumableItemClips[i].item.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_ADDITION_INDEX) && !_consumableItemClips[i].item.hasAttackProperty(element.protection)) )								_consumableItemClips[i].setDeactive();							else								_consumableItemClips[i].setActive();						}						else						{							_consumableItemClips[i].contentClip.visible = false;						}					}				}						}	}