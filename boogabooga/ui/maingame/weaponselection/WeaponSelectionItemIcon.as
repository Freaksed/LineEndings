/** WeaponSelectionItemIcon  *	---------------------------------------------------------------------------- *  *	@author:  *		Christian Widodo [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.maingame.weaponselection	{		import flash.display.Bitmap;		import flash.display.MovieClip;		import flash.events.Event;		import flash.events.EventDispatcher;		import flash.events.MouseEvent;		import flash.geom.ColorTransform;		import flash.text.TextField;		import flash.text.TextFieldAutoSize;		import flash.utils.getDefinitionByName;				import com.avatarlabs.utils.cache.BitmapDataManager;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.userinterface.UIButton;		import com.avatarlabs.utils.text.TextFormatting;				import com.boogabooga.controller.maingame.MainGameController;		import com.boogabooga.data.StringsIndex;		import com.boogabooga.data.gamelevel.AbstractGameObject;		import com.boogabooga.data.gamelevel.Weapon;		import com.boogabooga.data.maingame.Village;		import com.boogabooga.events.BoogaEvent;		import com.boogabooga.utils.GameLevelUtil;				public class WeaponSelectionItemIcon extends EventDispatcher		{			protected var _contentClip:MovieClip;			protected var _item:AbstractGameObject;						protected var _level:int;						protected var _greyColorTransform:ColorTransform;			protected var _originalColorTransform:ColorTransform;						/**	Stage Instances **/			public var lock_mc:MovieClip;			public var image_mc:MovieClip;			public var hitarea_mc:MovieClip;			public var elements_mc:MovieClip;			public var cost_mc:MovieClip;			public var count_mc:MovieClip;			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function WeaponSelectionItemIcon()				{					//init();				}								public function set contentClip( m:MovieClip ):void				{					_contentClip = m;										lock_mc = _contentClip.lock_mc;					image_mc = _contentClip.image_mc;					hitarea_mc = _contentClip.hitarea_mc;					elements_mc = _contentClip.elements_mc;					elements_mc.mouseChildren = false;					elements_mc.mouseEnabled = false;					cost_mc = _contentClip.cost_mc;					count_mc = _contentClip.count_mc;										if( cost_mc != null )					{						cost_mc.mouseChildren = false;						cost_mc.mouseEnabled = false;					}										if( count_mc != null )					{						count_mc.visible = false;						count_mc.mouseChildren = false;						count_mc.mouseEnabled = false;					}				}				public function get contentClip():MovieClip { return _contentClip; }								public function set item( a:AbstractGameObject ):void				{									}				public function get item():AbstractGameObject { return _item; }							/** init			  *	---------------------------------------------------------------------------- */				public function init():void				{					lock_mc.visible = true;										EventNotificationCenter.getInstance().addSignalListener( BoogaEvent.ON_LANGUAGE_CHANGED, handleLanguageChanged, this );										_greyColorTransform = new ColorTransform( .5, .5, .5, 1, 77, 77, 77, 0 );					_originalColorTransform = new ColorTransform();										setActive();				}							/** reset			  *	---------------------------------------------------------------------------- */				public function reset():void				{					while( image_mc.numChildren > 0 )						image_mc.removeChildAt(0);										while( elements_mc.numChildren > 0 )						elements_mc.removeChildAt(0);										hitarea_mc.removeEventListener( MouseEvent.ROLL_OVER, handleItemRolledOver );					hitarea_mc.removeEventListener( MouseEvent.ROLL_OUT, handleItemRolledOut );										if( cost_mc != null )						cost_mc.label_txt.text = ' ';				}							/** setDeactive			  *	---------------------------------------------------------------------------- */				public function setDeactive():void				{					//trace( "setDeactive();" );										hitarea_mc.removeEventListener( MouseEvent.CLICK, handleItemClicked );					hitarea_mc.removeEventListener( MouseEvent.ROLL_OVER, handleItemRolledOver );					hitarea_mc.removeEventListener( MouseEvent.ROLL_OUT, handleItemRolledOut );					hitarea_mc.buttonMode = false;										image_mc.transform.colorTransform = _greyColorTransform;					elements_mc.transform.colorTransform = _greyColorTransform;										if( cost_mc != null )						cost_mc.transform.colorTransform = _greyColorTransform;				}							/** setActive			  *	---------------------------------------------------------------------------- */				public function setActive():void				{					//trace( "setActive();" );										hitarea_mc.buttonMode = true;					hitarea_mc.addEventListener( MouseEvent.CLICK, handleItemClicked, false, 0, true );					hitarea_mc.addEventListener( MouseEvent.ROLL_OVER, handleItemRolledOver, false, 0, true );					hitarea_mc.addEventListener( MouseEvent.ROLL_OUT, handleItemRolledOut, false, 0, true );										image_mc.transform.colorTransform = _originalColorTransform;					elements_mc.transform.colorTransform = _originalColorTransform;										if( cost_mc != null )						cost_mc.transform.colorTransform = _originalColorTransform;				}							/** showLockView			  *	---------------------------------------------------------------------------- *			  *	Shows the lock view with the unlock in x level text.			  *	---------------------------------------------------------------------------- */				public function showLockView( level:int=0 ):void				{					reset();					image_mc.visible = false;										if( cost_mc != null )						cost_mc.visible = false;										if( count_mc != null )						count_mc.visible = false;										_level = level;										if( _level == 0 )					{						lock_mc.label_txt.visible = false;					}					else					{						TextFormatting.formatTextWithFontName( lock_mc.label_txt, (_level == 0 ? "X" : level)+" "+StringsIndex.getInstance().getStringByName("STORE_UNLOCKS_IN"), "Lithos Pro Black", false, TextFieldAutoSize.CENTER );						lock_mc.label_txt.visible = true;						lock_mc.visible = true;					}										setDeactive();					image_mc.transform.colorTransform = _originalColorTransform;				}							/** showUnlockView			  *	---------------------------------------------------------------------------- *			  *	Shows the unlock view.			  *	---------------------------------------------------------------------------- */				public function showUnlockView():void				{					reset();					image_mc.visible = false;					lock_mc.visible = false;					count_mc.visible = false;										if( cost_mc != null )						cost_mc.visible = false;										setDeactive();				}							/** showItemView			  *	---------------------------------------------------------------------------- *			  *	Shows the item view with the icon.			  *	---------------------------------------------------------------------------- */				public function showItemView( item:AbstractGameObject ):void				{					_item = item;										reset();										//trace( "element fire "+getDefinitionByName("Element.Fire") );					//trace( "element ice "+getDefinitionByName("Element.Ice") );					//trace( "element poison "+getDefinitionByName("Element.Poison") );					//trace( "element enchanted "+getDefinitionByName("Element.Enchanted") );										if( _item is Weapon )					{						var element:MovieClip;						var elements:Array = GameLevelUtil.getItemElements( _item );												for( var i:int=0; i<elements.length; ++i )						{							element = new (getDefinitionByName(elements[i]) as Class)();							element.width = 24;							element.height = 25;							//element.x = -12;							element.y = -24 * i;							elements_mc.addChild( element );						}												if( cost_mc != null )						{							if( _item.consumable )							{								cost_mc.visible = false;							}							else							{								TextFormatting.formatTextWithFontName( MovieClip(cost_mc).label_txt, _item.cost, "Lithos Pro Black", false, TextFieldAutoSize.CENTER );								cost_mc.visible = true;							}						}												if( count_mc != null )						{							if( _item.consumable )							{								count_mc.visible = true;								TextFormatting.formatTextWithFontName( count_mc.label_txt, ""+_item.useCount, "Lithos Pro Black", false, TextFieldAutoSize.CENTER );							}							else							{								count_mc.visible = false;							}						}					}					else					{						//God items						if( cost_mc != null )							cost_mc.visible = false;													if( count_mc != null )						{							TextFormatting.formatTextWithFontName( count_mc.label_txt, ""+_item.useCount, "Lithos Pro Black", false, TextFieldAutoSize.CENTER );							count_mc.visible = true;						}					}										lock_mc.visible = false;					var iconBitmap:Bitmap = new Bitmap(BitmapDataManager.getInstance().getBitmapData(_item.cacheIconId).bitmapData);						iconBitmap.width = 50;						iconBitmap.height = 50;						iconBitmap.smoothing = true;										image_mc.addChild( iconBitmap );					image_mc.visible = true;										//hitarea_mc.addEventListener( MouseEvent.ROLL_OVER, handleItemRolledOver, false, 0, true );					//hitarea_mc.addEventListener( MouseEvent.ROLL_OUT, handleItemRolledOut, false, 0, true );										setActive();				}								protected function handleItemClicked( event:MouseEvent ):void				{					dispatchEvent( new Event("onRollOut") );					dispatchEvent( new Event("onClick") );				}								protected function handleItemRolledOver( event:MouseEvent ):void				{					//trace( "handleItemRolledOver();" );					dispatchEvent( new Event("onRollOver") );				}								protected function handleItemRolledOut( event:MouseEvent ):void				{					//trace( "handleItemRolledOut();" );					dispatchEvent( new Event("onRollOut") );				}							/** handleLanguageChanged			  *	---------------------------------------------------------------------------- *			  *	When a language is changed, update the text accordingly.			  *	---------------------------------------------------------------------------- */				protected function handleLanguageChanged( customParameters:Object ):void				{					TextFormatting.formatTextWithFontName( lock_mc.label_txt, StringsIndex.getInstance().getStringByName("STORE_UNLOCKS_IN")+" "+(_level == 0 ? "X" : _level)+" levels", "Lithos Pro Black", false, TextFieldAutoSize.CENTER );				}						}	}