/** WeaponSelectionEnemyCountIcon  *	---------------------------------------------------------------------------- *  *	@author:  *		Christian Widodo [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.maingame.weaponselection	{		import flash.display.Bitmap;		import flash.display.MovieClip;		import flash.events.Event;		import flash.events.EventDispatcher;		import flash.events.MouseEvent;		import flash.text.TextField;		import flash.text.TextFieldAutoSize;		import flash.utils.getDefinitionByName;				import com.avatarlabs.utils.cache.BitmapDataManager;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.userinterface.UIButton;		import com.avatarlabs.utils.text.TextFormatting;		import org.osflash.signals.Signal;				import com.boogabooga.data.maingame.Village;		import com.boogabooga.data.gamelevel.AbstractGameObject;		import com.boogabooga.data.gamelevel.GameLevelDataIndex;		import com.boogabooga.data.gamelevel.Enemy;		import com.boogabooga.utils.GameLevelUtil;				public class WeaponSelectionEnemyCountIcon extends EventDispatcher		{			protected var _contentClip:MovieClip;			protected var _enemyId:int;			protected var _enemyCount:int;						public var onRolledOver:Signal;			public var onRolledOut:Signal;						/**	Stage Instances **/			public var background_mc:MovieClip;			public var image_mc:MovieClip;			public var count_txt:TextField;			public var elements_mc:MovieClip;			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function WeaponSelectionEnemyCountIcon()				{									}								public function set contentClip( m:MovieClip ):void				{					_contentClip = m;										image_mc = _contentClip.image_mc;					image_mc.mouseEnabled = false;					count_txt = _contentClip.count_txt;					count_txt.mouseEnabled = false;					background_mc = _contentClip.background_mc;					background_mc.cacheAsBitmap = true;					//background_mc.mouseEnabled = false;										elements_mc = _contentClip.elements_mc;					elements_mc.mouseChildren = false;					elements_mc.mouseEnabled = false;										//_contentClip.mouseChildren = false;					//_contentClip.mouseEnabled = false;				}				public function get contentClip():MovieClip { return _contentClip; }								public function get enemyId():int { return _enemyId; }				public function get enemyCount():int { return _enemyCount; }							/** init			  *	---------------------------------------------------------------------------- */				public function init():void				{					background_mc.addEventListener( MouseEvent.ROLL_OVER, handleEnemyRolledOver );					background_mc.addEventListener( MouseEvent.ROLL_OUT, handleEnemyRolledOut );										onRolledOver = new Signal( WeaponSelectionEnemyCountIcon );					onRolledOut = new Signal();				}							/** reset			  *	---------------------------------------------------------------------------- */				public function reset():void				{					image_mc.cacheAsBitmap = false;					while( image_mc.numChildren > 0 )						image_mc.removeChildAt(0);										while( elements_mc.numChildren > 0 )						elements_mc.removeChildAt(0);										_enemyId = -1;					_enemyCount = -1;				}							/** setCount			  *	---------------------------------------------------------------------------- */				public function setCount( id:int, count:int ):void				{					reset();										_enemyId = id;					_enemyCount = count;										var element:MovieClip;					var enemy:Enemy = GameLevelDataIndex.getInstance().getEnemy(id);					var elements:Array = GameLevelUtil.getItemStrongElements( enemy );										for( var i=0; i<elements.length; ++i )					{						element = new (getDefinitionByName(elements[i]) as Class)();						element.width = 24;						element.height = 25;						//element.x = -12;						element.y = -24 * i;						elements_mc.addChild( element );					}										var iconBitmap:Bitmap = new Bitmap(BitmapDataManager.getInstance().getBitmapData(enemy.cacheIconId).bitmapData);						iconBitmap.width = 45;						iconBitmap.height = 45;						iconBitmap.smoothing = true;					image_mc.addChild( iconBitmap );					image_mc.cacheAsBitmap = true;										//TextFormatting.formatTextWithFontName( count_txt, String(_enemyCount), "SF Fedora", false, TextFieldAutoSize.CENTER );					TextFormatting.formatTextWithFontName( count_txt, String(_enemyCount), "Lithos Pro Black", false, TextFieldAutoSize.CENTER );				}							/** updateCountBy			  *	---------------------------------------------------------------------------- */				public function updateCountBy( count:int=1 ):void				{					_enemyCount -= count;										//TextFormatting.formatTextWithFontName( count_txt, String(_enemyCount), "SF Fedora", false, TextFieldAutoSize.CENTER );					TextFormatting.formatTextWithFontName( count_txt, String(_enemyCount), "Lithos Pro Black", false, TextFieldAutoSize.CENTER );				}								protected function handleEnemyRolledOver( event:MouseEvent ):void				{					//dispatchEvent( new Event("onRollOver") );					onRolledOver.dispatch( this );				}								protected function handleEnemyRolledOut( event:MouseEvent ):void				{					//dispatchEvent( new Event("onRollOut") );					onRolledOut.dispatch();				}		}	}