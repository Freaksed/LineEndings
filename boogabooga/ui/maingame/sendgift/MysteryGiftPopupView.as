/** MysteryGiftPopupView  *	---------------------------------------------------------------------------- *  *	@author:  *		Christian Widodo [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.maingame.sendgift	{		import flash.display.Bitmap;		import flash.display.BitmapData;		import flash.display.Loader;		import flash.display.MovieClip;		import flash.display.StageDisplayState;		import flash.events.Event;		import flash.events.EventDispatcher;		import flash.events.IOErrorEvent;		import flash.events.MouseEvent;		import flash.net.URLRequest;		import flash.system.ApplicationDomain;		import flash.system.LoaderContext;		import flash.text.TextField;		import flash.text.TextFieldAutoSize;		import flash.utils.getDefinitionByName;				import com.avatarlabs.utils.cache.BitmapDataManager;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.sound.SoundEffectPlayer;		import com.avatarlabs.utils.text.TextFormatting;		import com.avatarlabs.utils.userinterface.DynamicUIArrowedSlider;		import com.avatarlabs.utils.userinterface.DynamicUIButton;		import com.avatarlabs.utils.userinterface.DynamicUIScroller;				import com.boogabooga.controller.maingame.MainGameController;		import com.boogabooga.data.SettingsIndex;		import com.boogabooga.data.SoundsIndex;		import com.boogabooga.data.StringsIndex;		import com.boogabooga.data.gamelevel.AbstractGameObject;		import com.boogabooga.data.gamelevel.GameLevelDataIndex;		import com.boogabooga.data.gamelevel.Weapon;		import com.boogabooga.data.maingame.Gift;		import com.boogabooga.data.maingame.Treasure;		import com.boogabooga.data.maingame.Village;		import com.boogabooga.events.BoogaEvent;		import com.boogabooga.ui.maingame.DescriptionScroller;		import com.boogabooga.utils.GameLevelUtil;		import com.boogabooga.controller.maingame.TrackingDataController;		import com.boogabooga.controller.maingame.GiftDataController;				public class MysteryGiftPopupView extends EventDispatcher		{			protected var _contentClip:MovieClip;			protected var _item:AbstractGameObject;						protected var _exitClip:DynamicUIButton;			protected var _itemScrollerClip:DescriptionScroller;						protected var _headerMinY:Number;			protected var _headerMaxHeight:Number;						protected var _itemNameMinY:Number;			protected var _itemNameMinHeight:Number;			//protected var _itemMinY:Number;			protected var _itemElementsMinY:Number;			protected var _itemImageMinY:Number;			protected var _itemMaskMinY:Number;			protected var _itemContentMinY:Number;			protected var _itemSliderMinY:Number;			protected var _itemBackgroundMinY:Number;						/**	Stage Instances **/			public var header_mc:MovieClip;			public var background_mc:MovieClip;			public var exit_mc:MovieClip;			public var treasureChest_mc:MovieClip;			public var arrow_mc:MovieClip;			public var item_mc:MovieClip;			public var backshine_mc:MovieClip;			public var hitarea_mc:MovieClip;			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function MysteryGiftPopupView()				{					//init();				}							/** set/get contentClip			  *	---------------------------------------------------------------------------- */				public function set contentClip( m:MovieClip ):void				{					_contentClip = m;					_contentClip.stop();										header_mc = _contentClip.header_mc;					background_mc = _contentClip.background_mc;					exit_mc = _contentClip.exit_mc;					treasureChest_mc = _contentClip.treasureChest_mc;					arrow_mc = _contentClip.arrow_mc;					arrow_mc.stop();					item_mc = _contentClip.item_mc;					backshine_mc = _contentClip.backshine_mc;					backshine_mc.stop();					hitarea_mc = _contentClip.hitarea_mc;										_headerMinY = header_mc.y;					_headerMaxHeight = header_mc.height;										_itemNameMinY = item_mc.name_mc.y;					_itemNameMinHeight = item_mc.name_mc.height;					//_itemMinY = item_mc.y;					_itemElementsMinY = item_mc.elements_mc.y;					_itemImageMinY = item_mc.image_mc.y;					_itemMaskMinY = item_mc.mask_mc.y;					_itemContentMinY = item_mc.content_mc.y;					_itemSliderMinY = item_mc.slider_mc.y;					_itemBackgroundMinY = item_mc.background_mc.y;										item_mc.content_mc.label_txt.autoSize = TextFieldAutoSize.LEFT;					item_mc.content_mc.label_txt.styleSheet = SettingsIndex.getInstance().fontManager.getStyleSheet();										_exitClip = new DynamicUIButton();					_exitClip.dynamicClip = exit_mc;					_exitClip.dynamicInit();										_itemScrollerClip = new DescriptionScroller();					_itemScrollerClip.dynamicClip = item_mc;					_itemScrollerClip.dynamicInit();				}				public function get contentClip():MovieClip { return _contentClip; }							/** init			  *	---------------------------------------------------------------------------- */				public function init():void				{					//TextFormatting.formatTextWithFontName( header_mc.label_txt, "Give a gift, get a gift !", "SF Fedora", false, TextFieldAutoSize.CENTER );					TextFormatting.formatTextWithFontName( header_mc.label_txt, StringsIndex.getInstance().getStringByName("MYSTERY_GIFT_HEADER"), "Lithos Pro Black", false, TextFieldAutoSize.CENTER );					header_mc.y = _headerMinY + int((_headerMaxHeight - header_mc.height)*.5);										hitarea_mc.buttonMode = true;					hitarea_mc.addEventListener( MouseEvent.CLICK, handleGiftClicked, false, 0, true );					hitarea_mc.addEventListener( MouseEvent.ROLL_OVER, handleGiftRolledOver, false, 0, true );										_exitClip.addEventListener( "onClick", handleExitClicked );					_exitClip.addEventListener( "onSetFocus", handleExitRolledOver );					_exitClip.addEventListener( "onKillFocus", handleExitRolledOut );										//trace( "exit clip has listener of onClick ? "+_exitClip.hasEventListener("onClick") );					//trace( "_prevArrowClip has listener of onClick ? "+_prevArrowClip.hasEventListener("onClick") );										EventNotificationCenter.getInstance().addSignalListener( BoogaEvent.ON_LANGUAGE_CHANGED, handleLanguageChanged, this );									}							/** initGifts			  *	---------------------------------------------------------------------------- *			  *	Initialize the gift pickers with the weapons.			  *	---------------------------------------------------------------------------- */				public function initMysteryGift( item:AbstractGameObject ):void				{					_item = item;										if( _item != null )					{						TextFormatting.formatTextWithFontName( item_mc.name_mc.label_txt, StringsIndex.getInstance().getString(String(_item.name))+' (1 '+StringsIndex.getInstance().getStringByName('USE')+')', 'Lithos Pro Black', false, TextFieldAutoSize.CENTER );												if( item_mc.name_mc.height > _itemNameMinHeight )						{							trace( 'name is 2 lines' );							item_mc.name_mc.y = _itemNameMinY;							//item_mc.y = _itemMinY;							item_mc.elements_mc.y = _itemElementsMinY;							item_mc.image_mc.y = _itemImageMinY;							item_mc.mask_mc.y = _itemMaskMinY;							item_mc.content_mc.y = _itemContentMinY;							item_mc.slider_mc.y = _itemSliderMinY;							item_mc.background_mc.y = _itemBackgroundMinY;						}						else						{							item_mc.name_mc.y = _itemNameMinY;							//item_mc.y = _itemNameMinY - 20;							item_mc.elements_mc.y = _itemElementsMinY - 20;							item_mc.image_mc.y = _itemImageMinY - 20;							item_mc.mask_mc.y = _itemMaskMinY - 20;							item_mc.content_mc.y = _itemContentMinY - 20;							item_mc.slider_mc.y = _itemSliderMinY - 20;							item_mc.background_mc.y = _itemBackgroundMinY - 20;						}												_itemScrollerClip.content_mc.label_txt.htmlText = '<span class="font2Default">'+StringsIndex.getInstance().getString(String(_item.description))+'\n'+_item.statistic+'</span>';						_itemScrollerClip.toggleSlider();												if( BitmapDataManager.getInstance().getBitmapData(_item.cacheIconId) == null )						{							BitmapDataManager.getInstance().addEventListener( Event.COMPLETE, handleLoadBitmapComplete );							BitmapDataManager.getInstance().addEventListener( IOErrorEvent.IO_ERROR, handleLoadBitmapError );							BitmapDataManager.getInstance().loadBitmapToCache( SettingsIndex.getInstance().contentURL+_item.iconURL, _item.cacheIconId );						}						else						{							addImage();						}												if( _item is Weapon )						{							var element:MovieClip;							var elements:Array = GameLevelUtil.getItemElements( _item );														for( var i:int=0; i<elements.length; ++i )							{								element = new (getDefinitionByName(elements[i]) as Class)();								element.y = -35 * i;								item_mc.elements_mc.addChild( element );							}						}						else						{							//God items													}					}									}							/** handleLoadBitmapComplete			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function handleLoadBitmapComplete( event:CustomEvent ):void				{					//trace( "handleLoadBitmapComplete("+event.customParameters.cacheId+");" );										if( event.customParameters.cacheId == _item.cacheIconId )					{						BitmapDataManager.getInstance().removeEventListener( Event.COMPLETE, handleLoadBitmapComplete );						BitmapDataManager.getInstance().removeEventListener( IOErrorEvent.IO_ERROR, handleLoadBitmapError );												addImage();					}				}							/** handleLoadBitmapError			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function handleLoadBitmapError( event:CustomEvent ):void				{					//trace( "handleLoadBitmapError("+event.customParameters.cacheId+");" );										if( event.customParameters.cacheId == _item.cacheIconId )					{						BitmapDataManager.getInstance().removeEventListener( Event.COMPLETE, handleLoadBitmapComplete );						BitmapDataManager.getInstance().removeEventListener( IOErrorEvent.IO_ERROR, handleLoadBitmapError );												//TODO:						//	Do something if there's an error loading the bitmap					}				}							/** addImage			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function addImage():void				{					var bitmap:Bitmap = new Bitmap(BitmapDataManager.getInstance().getBitmapData(_item.cacheIconId).bitmapData);						bitmap.smoothing = true;						bitmap.x = bitmap.y = -60;										item_mc.image_mc.addChild( bitmap );				}							/** reset			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				public function reset():void				{					//trace( "item_mc: "+item_mc );					//trace( "item_mc.image_mc: "+item_mc.image_mc );					//trace( "item_mc.elements_mc: "+item_mc.elements_mc );										while( item_mc.image_mc.numChildren > 0 )						item_mc.image_mc.removeChildAt(0);										while( item_mc.elements_mc.numChildren > 0 )						item_mc.elements_mc.removeChildAt(0);										_itemScrollerClip.resetScroller();					_item = null;				}							/** show			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				public function show():void				{					var consumableItems:Vector.<AbstractGameObject> = new Vector.<AbstractGameObject>;					var unlockFutureItemCount:int = 0;										for( var i:int=0; i<GameLevelDataIndex.getInstance().weaponsCount; ++i )					{						if( GameLevelDataIndex.getInstance().weapons[i].consumable && GameLevelDataIndex.getInstance().weapons[i].listed && !GameLevelDataIndex.getInstance().weapons[i].hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_ADDITION_INDEX) )							consumableItems.push( GameLevelDataIndex.getInstance().weapons[i] );					}										for( i=0; i<GameLevelDataIndex.getInstance().godsCount; ++i )					{						if( GameLevelDataIndex.getInstance().gods[i].consumable )							consumableItems.push( GameLevelDataIndex.getInstance().gods[i] );					}										consumableItems.sort( GameLevelUtil.sortGameObjectsOnLevelAvailability );					unlockFutureItemCount = consumableItems.length - MainGameController.getInstance().currentUser.consumableWeaponsCount;					unlockFutureItemCount = unlockFutureItemCount > 3 ? 3 : unlockFutureItemCount;										var randomIndex:int = int(Math.random()*(MainGameController.getInstance().currentUser.consumableWeaponsCount+unlockFutureItemCount));					initMysteryGift(consumableItems[randomIndex]);										if( unlockFutureItemCount > 0 && int(Math.random()*2) > 0 )					{						//pick from future items					}					else					{						//pick from old items					}										_contentClip.gotoAndStop(1);					_contentClip.visible = true;										hitarea_mc.visible = true;					arrow_mc.visible = true;					arrow_mc.play();					backshine_mc.play();				}							/** hide			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				public function hide():void				{					_contentClip.visible = false;										arrow_mc.stop();					backshine_mc.stop();										reset();										dispatchEvent( new BoogaEvent(BoogaEvent.ON_POPUP_HIDE) );				}								private function handleGiftClicked( event:MouseEvent ):void				{					hitarea_mc.visible = false;					arrow_mc.stop();					arrow_mc.visible = false;										MainGameController.getInstance().currentUser.mysteryGift = false;										SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mystery_gift_open.mp3", false, "sfx_mystery_gift_open.mp3", "sfx_mystery_gift_open.mp3", SoundEffectPlayer.SOUND_PLAYER_SFX );										var giftDataController:GiftDataController = new GiftDataController();						giftDataController.addMysteryGift( _item.id, (_item is Weapon ? "Weapon" : "God"), MainGameController.getInstance().currentUser.id );										_contentClip.play();				}								private function handleGiftRolledOver( event:MouseEvent ):void				{					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav" );				}							/** handleExitClicked			  *	---------------------------------------------------------------------------- *			  *	Closes the gift picker.			  *	---------------------------------------------------------------------------- */				protected function handleExitClicked( event:Event ):void				{					ConsoleBroadcaster.broadcast( "SendGiftPicker", "handleExitClicked();" );										//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_click.wav").volume, 0, "sfx_mouse_click.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav" );										//dispatchEvent( new BoogaEvent(BoogaEvent.GIFT_SELECTION_CANCEL) );					hide();				}								protected function handleExitRolledOver( event:Event ):void				{					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav" );				}								protected function handleExitRolledOut( event:Event ):void				{									}							/** handleLanguageChanged			  *	---------------------------------------------------------------------------- *			  *	When a language is changed, update the text accordingly.			  *	---------------------------------------------------------------------------- */				protected function handleLanguageChanged( customParameters:Object ):void				{					TextFormatting.formatTextWithFontName( header_mc.label_txt, StringsIndex.getInstance().getStringByName("MYSTERY_GIFT_HEADER"), "Lithos Pro Black", false, TextFieldAutoSize.CENTER );					header_mc.y = _headerMinY + int((_headerMaxHeight - header_mc.height)*.5);										if( _item != null )					{						TextFormatting.formatTextWithFontName( item_mc.name_mc.label_txt, StringsIndex.getInstance().getString(String(_item.name))+' (1 '+StringsIndex.getInstance().getStringByName('USE')+')', 'Lithos Pro Black', false, TextFieldAutoSize.CENTER );												if( item_mc.name_mc.height > _itemNameMinHeight )						{							item_mc.name_mc.y = _itemNameMinY;							//item_mc.y = _itemMinY;						}						else						{							item_mc.name_mc.y = _itemNameMinY + 20;							//item_mc.y = _itemNameMinY - 20;						}												_itemScrollerClip.content_mc.label_txt.htmlText = '<span class="font2Default">'+StringsIndex.getInstance().getString(String(_item.description))+'\n'+_item.statistic+'</span>';						_itemScrollerClip.toggleSlider();					}				}						}	}