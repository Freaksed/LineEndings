/** SendGiftPicker  *	---------------------------------------------------------------------------- *  *	@author:  *		Christian Widodo [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.maingame.sendgift	{		import flash.display.Bitmap;		import flash.display.BitmapData;		import flash.display.Loader;		import flash.display.MovieClip;		import flash.display.StageDisplayState;		import flash.events.Event;		import flash.events.EventDispatcher;		import flash.events.IOErrorEvent;		import flash.net.URLRequest;		import flash.system.ApplicationDomain;		import flash.system.LoaderContext;		import flash.text.TextField;		import flash.text.TextFieldAutoSize;		import flash.utils.getDefinitionByName;				import com.avatarlabs.utils.cache.BitmapDataManager;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.sound.SoundEffectPlayer;		import com.avatarlabs.utils.text.TextFormatting;		import com.avatarlabs.utils.userinterface.DynamicUIArrowedSlider;		import com.avatarlabs.utils.userinterface.DynamicUIButton;		import com.avatarlabs.utils.userinterface.DynamicUIScroller;		import org.osflash.signals.Signal;				import com.boogabooga.controller.maingame.MainGameController;		import com.boogabooga.data.SettingsIndex;		import com.boogabooga.data.SoundsIndex;		import com.boogabooga.data.StringsIndex;		import com.boogabooga.data.gamelevel.AbstractGameObject;		import com.boogabooga.data.gamelevel.GameLevelDataIndex;		import com.boogabooga.data.gamelevel.Weapon;		import com.boogabooga.data.maingame.Gift;		import com.boogabooga.data.maingame.Treasure;		import com.boogabooga.data.maingame.Village;		import com.boogabooga.events.BoogaEvent;		import com.boogabooga.ui.maingame.DescriptionScroller;		import com.boogabooga.utils.GameLevelUtil;				public class SendGiftPicker extends DynamicUIScroller		{			//protected var _dynamicClip:MovieClip;			protected var _currentGiftIndex:int;			protected var _totalGifts:int;			protected var _gifts:Vector.<AbstractGameObject>;						protected var _giftIcons:Vector.<SendGiftPickerIcon>;						protected var _headerMinY:Number;			protected var _headerMaxHeight:Number;						protected var _exitClip:DynamicUIButton;			//protected var _descriptionScrollerClip:DescriptionScroller;			//protected var _prevArrowClip:DynamicUIButton;			//protected var _nextArrowClip:DynamicUIButton;			//protected var _sendClip:DynamicUIButton;						protected var _sliderClip:DynamicUIArrowedSlider;						public var onGiftRequestSent:Signal;			public var onGiftRequestCancel:Signal;			public var onGiftSelectionCancel:Signal;			public var onRequestInProgress:Signal;						/**	Stage Instances **/			public var background_mc:MovieClip;			public var exit_mc:MovieClip;			public var header_mc:MovieClip;			public var subheader_mc:MovieClip;			//public var giftName_mc:MovieClip;			//public var descriptionScroller_mc:MovieClip;			//public var itemImage_mc:MovieClip;			//public var prevArrow_mc:MovieClip;			//public var nextArrow_mc:MovieClip;			//public var send_mc:MovieClip;			//public var giftNumber_mc:MovieClip;			//public var elements_mc:MovieClip;			public var content_mc:MovieClip;			public var mask_mc:MovieClip;			public var slider_mc:MovieClip;			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function SendGiftPicker()				{					//init();				}							/** set/get contentClip			  *	---------------------------------------------------------------------------- */				override public function set dynamicClip( m:MovieClip ):void				{					super.dynamicClip = m;										background_mc = _dynamicClip.background_mc;					exit_mc = _dynamicClip.exit_mc;					header_mc = _dynamicClip.header_mc;					subheader_mc = _dynamicClip.subheader_mc;					//giftName_mc = _dynamicClip.giftName_mc;					//descriptionScroller_mc = _dynamicClip.descriptionScroller_mc;					//itemImage_mc = _dynamicClip.itemImage_mc;					//prevArrow_mc = _dynamicClip.prevArrow_mc;					//nextArrow_mc = _dynamicClip.nextArrow_mc;					//send_mc = _dynamicClip.send_mc;					//giftNumber_mc = _dynamicClip.giftNumber_mc;					//elements_mc = _dynamicClip.elements_mc;										_headerMinY = header_mc.y;					_headerMaxHeight = header_mc.height + 5 + subheader_mc.height;										//descriptionScroller_mc.content_mc.label_txt.autoSize = TextFieldAutoSize.LEFT;					//descriptionScroller_mc.content_mc.label_txt.styleSheet = SettingsIndex.getInstance().fontManager.getStyleSheet();					content_mc = _dynamicClip.content_mc;					mask_mc = _dynamicClip.mask_mc;					slider_mc = _dynamicClip.slider_mc;										_sliderClip = new DynamicUIArrowedSlider();					_sliderClip.dynamicClip = slider_mc;					_sliderClip.dynamicInit();					_sliderClip.setProperty( "y" );					_sliderClip.setHandle( slider_mc.handle_mc );					_sliderClip.setBounds( slider_mc.bound_mc );										_exitClip = new DynamicUIButton();					_exitClip.dynamicClip = exit_mc;					_exitClip.dynamicInit();										//_prevArrowClip = new DynamicUIButton();					//_prevArrowClip.dynamicClip = prevArrow_mc;					//_prevArrowClip.dynamicInit();										//_nextArrowClip = new DynamicUIButton();					//_nextArrowClip.dynamicClip = nextArrow_mc;					//_nextArrowClip.dynamicInit();										//_sendClip = new DynamicUIButton();					//_sendClip.dynamicClip = send_mc;					//_sendClip.dynamicInit();										//_descriptionScrollerClip = new DescriptionScroller();					//_descriptionScrollerClip.dynamicClip = descriptionScroller_mc;					//_descriptionScrollerClip.dynamicInit();									}								public function get currentGiftIndex():int { return _currentGiftIndex; }							/** init			  *	---------------------------------------------------------------------------- */				override public function dynamicInit():void				{					super.dynamicInit();										setProperty( "y" );					setContent( content_mc );					setMask( mask_mc );					setSlider( _sliderClip );										//TextFormatting.formatTextWithFontName( header_mc.label_txt, "Give a gift, get a gift !", "SF Fedora", false, TextFieldAutoSize.CENTER );					TextFormatting.formatTextWithFontName( header_mc.label_txt, StringsIndex.getInstance().getStringByName("GIFT_SEND_GIFT_HEADER"), "Lithos Pro Black", false, TextFieldAutoSize.CENTER );					TextFormatting.formatTextWithFontName( subheader_mc.label_txt, StringsIndex.getInstance().getStringByName("GIFT_SEND_GIFT_SUBHEADER"), "Lithos Pro Black", true, TextFieldAutoSize.CENTER );										var headerY:Number = _headerMinY + int((_headerMaxHeight - header_mc.height - 5 - subheader_mc.height )*.5);						headerY = headerY < _headerMinY ? _headerMinY : headerY;											header_mc.y = headerY;					subheader_mc.y = headerY + header_mc.height + 5;										_exitClip.addEventListener( "onClick", handleExitClicked );					_exitClip.addEventListener( "onSetFocus", handleExitRolledOver );					_exitClip.addEventListener( "onKillFocus", handleExitRolledOut );					//_prevArrowClip.addEventListener( "onClick", handlePrevArrowClicked, false, 0, true );					//_prevArrowClip.addEventListener( "onSetFocus", handlePrevArrowRolledOver, false, 0, true );					//_prevArrowClip.addEventListener( "onKillFocus", handlePrevArrowRolledOut, false, 0, true );					//_nextArrowClip.addEventListener( "onClick", handleNextArrowClicked, false, 0, true );					//_nextArrowClip.addEventListener( "onSetFocus", handleNextArrowRolledOver, false, 0, true );					//_nextArrowClip.addEventListener( "onKillFocus", handleNextArrowRolledOut, false, 0, true );					//_sendClip.addEventListener( "onClick", handleSendClicked, false, 0, true );					//_sendClip.addEventListener( "onSetFocus", handleSendRolledOver, false, 0, true );					//_sendClip.addEventListener( "onKillFocus", handleSendRolledOut, false, 0, true );										//trace( "exit clip has listener of onClick ? "+_exitClip.hasEventListener("onClick") );					//trace( "_prevArrowClip has listener of onClick ? "+_prevArrowClip.hasEventListener("onClick") );										_gifts = new Vector.<AbstractGameObject>;					_giftIcons = new Vector.<SendGiftPickerIcon>;										onGiftRequestSent = new Signal( int );					onGiftRequestCancel = new Signal();					onGiftSelectionCancel = new Signal();					onRequestInProgress = new Signal();										EventNotificationCenter.getInstance().addSignalListener( BoogaEvent.ON_LANGUAGE_CHANGED, handleLanguageChanged, this );									}							/** initGifts			  *	---------------------------------------------------------------------------- *			  *	Initialize the gift pickers with the weapons.			  *	---------------------------------------------------------------------------- */				public function initGifts():void				{					//_gifts = weapons;					//_currentGiftIndex = 0;					//_totalGifts = _gifts.length;										//showGift();					//toggleUI();										var i:int;										if( _giftIcons.length == 0 )					{						var giftIcon:SendGiftPickerIcon;						var consumableItems:Vector.<AbstractGameObject> = new Vector.<AbstractGameObject>;												for( i=0; i<GameLevelDataIndex.getInstance().weaponsCount; ++i )						{							if( GameLevelDataIndex.getInstance().weapons[i].consumable && GameLevelDataIndex.getInstance().weapons[i].listed && !GameLevelDataIndex.getInstance().weapons[i].hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_ADDITION_INDEX) )								consumableItems.push( GameLevelDataIndex.getInstance().weapons[i] );						}												for( i=0; i<GameLevelDataIndex.getInstance().godsCount; ++i )						{							if( GameLevelDataIndex.getInstance().gods[i].consumable )								consumableItems.push( GameLevelDataIndex.getInstance().gods[i] );						}												consumableItems.sort( GameLevelUtil.sortGameObjectsOnLevelAvailability );												var unlockFutureItemCount:int = 0;												for( i=0; i<consumableItems.length; ++i )						{							giftIcon = new SendGiftPickerIcon();							giftIcon.contentClip = new (getDefinitionByName("SendGiftPicker.GiftIcon") as Class)();							giftIcon.init();							giftIcon.item = consumableItems[i];							/*							if( consumableItems[i].availableOnLevel <= MainGameController.getInstance().currentUser.level )							{								giftIcon.showItemView();							}							else if( unlockFutureItemCount < 3 )							{								giftIcon.showItemView();								++unlockFutureItemCount;							}							else							{								giftIcon.showLockView();							}							*/							giftIcon.contentClip.x = 130 * (i % 4);							giftIcon.contentClip.y = 160 * int(i/4);							giftIcon.onClicked.add( handleGiftIconClicked );							giftIcon.onRolledOver.add( handleGiftIconRolledOver );							giftIcon.onRolledOut.add( handleGiftIconRolledOut );							content_mc.addChild( giftIcon.contentClip );														_giftIcons.push( giftIcon );						}												toggleSlider();					}										var unlockFutureItemCount:int = 0;					for( i=0; i<_giftIcons.length; ++i )					{						if( _giftIcons[i].item.availableOnLevel <= MainGameController.getInstance().currentUser.level )						{							_giftIcons[i].showItemView();						}						else if( unlockFutureItemCount < 3 )						{							_giftIcons[i].showItemView();							++unlockFutureItemCount;						}						else						{							_giftIcons[i].showLockView();						}					}				}							/** reset			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				public function reset():void				{					//while( itemImage_mc.numChildren > 0 )						//itemImage_mc.removeChildAt(0);										//while( elements_mc.numChildren > 0 )						//elements_mc.removeChildAt(0);										//_descriptionScrollerClip.resetScroller();										resetScroller();				}							/** show			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				public function show():void				{					_dynamicClip.visible = true;									}							/** hide			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				public function hide():void				{					_dynamicClip.visible = false;										reset();				}								private function handleGiftIconClicked( icon:SendGiftPickerIcon ):void				{					ConsoleBroadcaster.broadcast( "SendGiftPicker", 'handleGiftIconClicked('+icon.item+');' );										if( _dynamicClip.stage.displayState == StageDisplayState.FULL_SCREEN )					{						_dynamicClip.stage.displayState = StageDisplayState.NORMAL;					}										onRequestInProgress.dispatch();										//MainGameController.getInstance().addEventListener( BoogaEvent.GIFT_SELECTION_DONE, handleSendGiftsDone );					MainGameController.getInstance().onGiftRequestSent.add( handleSendGiftsDone );					MainGameController.getInstance().onGiftRequestCancel.add( handleSendGiftsCancel );					MainGameController.getInstance().sendGiftsToFriends( icon.item );										//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_click.wav").volume, 0, "sfx_mouse_click.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav" );									}								private function handleGiftIconRolledOver( icon:SendGiftPickerIcon ):void				{					var text:String = StringsIndex.getInstance().getString(String(icon.item.name));					var text2:String = StringsIndex.getInstance().getString(String(icon.item.description));					var text3:String = icon.item.statistic;										EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_TEXT_HOVER_SHOW, this, {clip:icon.contentClip, text:text, text2:text2, text3:text3, align:TextFieldAutoSize.CENTER} );				}								private function handleGiftIconRolledOut():void				{					EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_TEXT_HOVER_HIDE, this );				}											/** showGift			  *	---------------------------------------------------------------------------- *			  *	Shows the current selected gift			  *	---------------------------------------------------------------------------- 				protected function showGift():void				{					//var gift:Gift = MainGameController.getInstance().currentUser.gifts[_currentGiftIndex];					var gift:AbstractGameObject = _gifts[currentGiftIndex];										if( gift != null )					{						reset();												//var item:AbstractGameObject = MainGameController.getInstance().currentUser.getItemForGift( gift.id );												//TextFormatting.formatTextWithFontName( giftName_mc.label_txt, StringsIndex.getInstance().getString(String(gift.name)), "Lithos Pro Black", false, TextFieldAutoSize.LEFT );						//TextFormatting.formatTextWithFontName( _descriptionScrollerClip.content_mc.label_txt, StringsIndex.getInstance().getString(String(gift.description)), "Lithos Pro Black", false, TextFieldAutoSize.LEFT );						_descriptionScrollerClip.content_mc.label_txt.htmlText = '<span class="font2Default">'+StringsIndex.getInstance().getString(String(gift.description))+'\n'+gift.statistic+'</span>';						_descriptionScrollerClip.toggleSlider();												var element:MovieClip;						var elements:Array = GameLevelUtil.getItemElements( gift );												for( var i:int=0; i<elements.length; ++i )						{							element = new (getDefinitionByName(elements[i]) as Class)();							//element.width = 24;							//element.height = 25;							//element.x = -12;							element.y = -35 * i;							elements_mc.addChild( element );						}												if( BitmapDataManager.getInstance().getBitmapData(gift.cacheIconId) == null )						{							BitmapDataManager.getInstance().addEventListener( Event.COMPLETE, handleLoadBitmapComplete );							BitmapDataManager.getInstance().addEventListener( IOErrorEvent.IO_ERROR, handleLoadBitmapError );							BitmapDataManager.getInstance().loadBitmapToCache( SettingsIndex.getInstance().contentURL+gift.iconURL, gift.cacheIconId );						}						else						{							addImage();						}											}				}*/							/** handleLoadBitmapComplete			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- 				protected function handleLoadBitmapComplete( event:CustomEvent ):void				{					//trace( "handleLoadBitmapComplete("+event.customParameters.cacheId+");" );										if( event.customParameters.cacheId == _gifts[currentGiftIndex].cacheIconId )					{						BitmapDataManager.getInstance().removeEventListener( Event.COMPLETE, handleLoadBitmapComplete );						BitmapDataManager.getInstance().removeEventListener( IOErrorEvent.IO_ERROR, handleLoadBitmapError );												addImage();					}				}*/							/** handleLoadBitmapError			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- 				protected function handleLoadBitmapError( event:CustomEvent ):void				{					//trace( "handleLoadBitmapError("+event.customParameters.cacheId+");" );										if( event.customParameters.cacheId == _gifts[currentGiftIndex].cacheIconId )					{						BitmapDataManager.getInstance().removeEventListener( Event.COMPLETE, handleLoadBitmapComplete );						BitmapDataManager.getInstance().removeEventListener( IOErrorEvent.IO_ERROR, handleLoadBitmapError );												//TODO:						//	Do something if there's an error loading the bitmap					}				}*/							/** addImage			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- 				protected function addImage():void				{					var bitmap:Bitmap = new Bitmap(BitmapDataManager.getInstance().getBitmapData(_gifts[currentGiftIndex].cacheIconId).bitmapData);						bitmap.smoothing = true;						bitmap.width = bitmap.height = 70;						bitmap.x = bitmap.y = -35;										itemImage_mc.addChild( bitmap );				}*/							/** toggleUI			  *	---------------------------------------------------------------------------- *			  *	Toggles the next and previous arrows on/off.			  *	---------------------------------------------------------------------------- 				protected function toggleUI():void				{					if( _totalGifts == 1 )					{						//_nextArrowClip.dynamicClip.visible = false;						//_prevArrowClip.dynamicClip.visible = false;						_prevArrowClip.setDeactive();						_nextArrowClip.setDeactive();						GameLevelUtil.addDesaturatedFilterToMovieClip( _prevArrowClip.dynamicClip );						GameLevelUtil.addDesaturatedFilterToMovieClip( _nextArrowClip.dynamicClip );						_prevArrowClip.dynamicClip.alpha = .3;						_nextArrowClip.dynamicClip.alpha = .3;					}					else					{						if( _currentGiftIndex == 0 )						{							//_prevArrowClip.dynamicClip.visible = false;							_prevArrowClip.setDeactive();							GameLevelUtil.addDesaturatedFilterToMovieClip( _prevArrowClip.dynamicClip );							_prevArrowClip.dynamicClip.alpha = .3;						}						else						{							//_prevArrowClip.dynamicClip.visible = true;							_prevArrowClip.setActive();							GameLevelUtil.removeDesaturatedFilterFromMovieClip( _prevArrowClip.dynamicClip );							_prevArrowClip.dynamicClip.alpha = 1;						}												if( _currentGiftIndex == _totalGifts-1 )						{							//_nextArrowClip.dynamicClip.visible = false;							_nextArrowClip.setDeactive();							GameLevelUtil.addDesaturatedFilterToMovieClip( _nextArrowClip.dynamicClip );							_nextArrowClip.dynamicClip.alpha = .3;						}						else						{							//_nextArrowClip.dynamicClip.visible = true;							_nextArrowClip.setActive();							GameLevelUtil.removeDesaturatedFilterFromMovieClip( _nextArrowClip.dynamicClip );							_nextArrowClip.dynamicClip.alpha = 1;						}					}				}*/							/** handlePrevArrowClicked			  *	---------------------------------------------------------------------------- *			  *	Shows the previous gift and toggles the UI.			  *	---------------------------------------------------------------------------- 				protected function handlePrevArrowClicked( event:Event ):void				{					//ConsoleBroadcaster.broadcast( "SendGiftPicker", "handlePrevArrowClicked();" );										--_currentGiftIndex;										//if( _currentGiftIndex < 0 )						//_currentGift = _totalGifts-1;										showGift();					toggleUI();										//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_click.wav").volume, 0, "sfx_mouse_click.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav" );									}								protected function handlePrevArrowRolledOver( event:Event ):void				{					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav" );				}								protected function handlePrevArrowRolledOut( event:Event ):void				{									}*/							/** handleNextArrowClicked			  *	---------------------------------------------------------------------------- *			  *	Shows the next gift and toggles the UI.			  *	---------------------------------------------------------------------------- 				protected function handleNextArrowClicked( event:Event ):void				{					//ConsoleBroadcaster.broadcast( "SendGiftPicker", "handleNextArrowClicked();" );										++_currentGiftIndex;										showGift();					toggleUI();										//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_click.wav").volume, 0, "sfx_mouse_click.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav" );									}								protected function handleNextArrowRolledOver( event:Event ):void				{					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav" );				}								protected function handleNextArrowRolledOut( event:Event ):void				{									}*/							/** handleExitClicked			  *	---------------------------------------------------------------------------- *			  *	Closes the gift picker.			  *	---------------------------------------------------------------------------- */				protected function handleExitClicked( event:Event ):void				{					ConsoleBroadcaster.broadcast( "SendGiftPicker", "handleExitClicked();" );										//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_click.wav").volume, 0, "sfx_mouse_click.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav" );										//dispatchEvent( new BoogaEvent(BoogaEvent.GIFT_SELECTION_CANCEL) );					onGiftSelectionCancel.dispatch();				}								protected function handleExitRolledOver( event:Event ):void				{					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav" );				}								protected function handleExitRolledOut( event:Event ):void				{									}							/** handleSendClicked			  *	---------------------------------------------------------------------------- *			  *	Sends the gift to user's friends, and brings up the facebook request UI.			  *	---------------------------------------------------------------------------- 				protected function handleSendClicked( event:Event ):void				{					ConsoleBroadcaster.broadcast( "SendGiftPicker", "handleSendClicked();" );										if( _dynamicClip.stage.displayState == StageDisplayState.FULL_SCREEN )					{						_dynamicClip.stage.displayState = StageDisplayState.NORMAL;					}										MainGameController.getInstance().addEventListener( BoogaEvent.GIFT_SELECTION_DONE, handleSendGiftsDone );					MainGameController.getInstance().sendGiftsToFriends( _gifts[currentGiftIndex] );										//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_click.wav").volume, 0, "sfx_mouse_click.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav" );										//dispatchEvent( new BoogaEvent(BoogaEvent.GIFT_SELECTION_DONE) );				}								protected function handleSendRolledOver( event:Event ):void				{					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav" );										EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_TEXT_HOVER_SHOW, this, {clip:_sendClip.dynamicClip, text:StringsIndex.getInstance().getStringByName("GIFT_SEND_GIFT")} );				}								protected function handleSendRolledOut( event:Event ):void				{					EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_TEXT_HOVER_HIDE, this );				}*/							/** handleSendGiftsDone			  *	---------------------------------------------------------------------------- *			  *	When the gift sending is finished, it will close the picker.			  *	---------------------------------------------------------------------------- */				protected function handleSendGiftsDone( requestsLength:int ):void				{					//MainGameController.getInstance().removeEventListener( BoogaEvent.GIFT_SELECTION_DONE, handleSendGiftsDone );					MainGameController.getInstance().onGiftRequestSent.remove( handleSendGiftsDone );					MainGameController.getInstance().onGiftRequestCancel.remove( handleSendGiftsCancel );					//dispatchEvent( new BoogaEvent(BoogaEvent.GIFT_SELECTION_DONE) );					onGiftRequestSent.dispatch( requestsLength );				}								protected function handleSendGiftsCancel():void				{					MainGameController.getInstance().onGiftRequestSent.remove( handleSendGiftsDone );					MainGameController.getInstance().onGiftRequestCancel.remove( handleSendGiftsCancel );										onGiftRequestCancel.dispatch();				}							/** handleLanguageChanged			  *	---------------------------------------------------------------------------- *			  *	When a language is changed, update the text accordingly.			  *	---------------------------------------------------------------------------- */				protected function handleLanguageChanged( customParameters:Object ):void				{					TextFormatting.formatTextWithFontName( header_mc.label_txt, StringsIndex.getInstance().getStringByName("GIFT_SEND_GIFT_HEADER"), "Lithos Pro Black", false, TextFieldAutoSize.CENTER );					TextFormatting.formatTextWithFontName( subheader_mc.label_txt, StringsIndex.getInstance().getStringByName("GIFT_SEND_GIFT_SUBHEADER"), "Lithos Pro Black", true, TextFieldAutoSize.CENTER );										var headerY:Number = _headerMinY + int((_headerMaxHeight - header_mc.height - 5 - subheader_mc.height )*.5);						headerY = headerY < _headerMinY ? _headerMinY : headerY;											header_mc.y = headerY;					subheader_mc.y = headerY + header_mc.height + 5;									}						}	}