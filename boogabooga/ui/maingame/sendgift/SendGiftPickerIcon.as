/** SendGiftPickerIcon  *	---------------------------------------------------------------------------- *  *	@author:  *		Christian Widodo [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.maingame.sendgift	{		import flash.display.Bitmap;		import flash.display.MovieClip;		import flash.events.Event;		import flash.events.EventDispatcher;		import flash.events.IOErrorEvent;		import flash.events.MouseEvent;		import flash.geom.ColorTransform;		import flash.text.TextField;		import flash.text.TextFieldAutoSize;		import flash.utils.getDefinitionByName;				import com.avatarlabs.utils.cache.BitmapDataManager;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.userinterface.DynamicUIButton;		import com.avatarlabs.utils.text.TextFormatting;		import org.osflash.signals.Signal;				import com.boogabooga.controller.maingame.MainGameController;		import com.boogabooga.data.SettingsIndex;		import com.boogabooga.data.StringsIndex;		import com.boogabooga.data.gamelevel.AbstractGameObject;		import com.boogabooga.data.gamelevel.Weapon;		import com.boogabooga.data.maingame.User;		import com.boogabooga.data.maingame.Village;		import com.boogabooga.events.BoogaEvent;		import com.boogabooga.utils.GameLevelUtil;				public class SendGiftPickerIcon extends EventDispatcher		{			protected var _contentClip:MovieClip;			protected var _item:AbstractGameObject;						protected var _level:int;			protected var _sendClip:DynamicUIButton;						public var onClicked:Signal;			public var onRolledOver:Signal;			public var onRolledOut:Signal;						/**	Stage Instances **/			public var level_mc:MovieClip;			public var lock_mc:MovieClip;			public var image_mc:MovieClip;			public var background_mc:MovieClip;			public var elements_mc:MovieClip;			public var send_mc:MovieClip;			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function SendGiftPickerIcon()				{					//init();				}								public function set contentClip( m:MovieClip ):void				{					_contentClip = m;										image_mc = _contentClip.image_mc;					image_mc.mouseChildren = false;					image_mc.mouseEnabled = false;					background_mc = _contentClip.background_mc;					elements_mc = _contentClip.elements_mc;					elements_mc.mouseChildren = false;					elements_mc.mouseEnabled = false;					send_mc = _contentClip.send_mc;					level_mc = _contentClip.level_mc;					lock_mc = _contentClip.lock_mc;									}				public function get contentClip():MovieClip { return _contentClip; }								public function set item( a:AbstractGameObject ):void				{					_item = a;				}				public function get item():AbstractGameObject { return _item; }							/** init			  *	---------------------------------------------------------------------------- */				public function init():void				{					_sendClip = new DynamicUIButton();					_sendClip.dynamicClip = send_mc;					_sendClip.dynamicInit();					_sendClip.addEventListener( "onClick", handleItemClicked, false, 0, true );										background_mc.mouseEnabled = true;					//background_mc.addEventListener( MouseEvent.CLICK, handleItemClicked, false, 0, true );					background_mc.addEventListener( MouseEvent.ROLL_OVER, handleItemRolledOver, false, 0, true );					background_mc.addEventListener( MouseEvent.ROLL_OUT, handleItemRolledOut, false, 0, true );										onClicked = new Signal( SendGiftPickerIcon );					onRolledOver = new Signal( SendGiftPickerIcon );					onRolledOut = new Signal();				}							/** reset			  *	---------------------------------------------------------------------------- */				public function reset():void				{					while( image_mc.numChildren > 0 )						image_mc.removeChildAt(0);										while( elements_mc.numChildren > 0 )						elements_mc.removeChildAt(0);										//background_mc.removeEventListener( MouseEvent.ROLL_OVER, handleItemRolledOver );					//background_mc.removeEventListener( MouseEvent.ROLL_OUT, handleItemRolledOut );									}							/** setDeactive			  *	---------------------------------------------------------------------------- */				public function setDeactive():void				{					//trace( "setDeactive();" );										//background_mc.removeEventListener( MouseEvent.CLICK, handleItemClicked );					background_mc.removeEventListener( MouseEvent.ROLL_OVER, handleItemRolledOver );					background_mc.removeEventListener( MouseEvent.ROLL_OUT, handleItemRolledOut );					//background_mc.buttonMode = false;									}							/** setActive			  *	---------------------------------------------------------------------------- */				public function setActive():void				{					//trace( "setActive();" );										background_mc.mouseEnabled = true;					//background_mc.addEventListener( MouseEvent.CLICK, handleItemClicked, false, 0, true );					background_mc.addEventListener( MouseEvent.ROLL_OVER, handleItemRolledOver, false, 0, true );					background_mc.addEventListener( MouseEvent.ROLL_OUT, handleItemRolledOut, false, 0, true );									}							/** showLockView			  *	---------------------------------------------------------------------------- *			  *	Shows the lock view with the unlock in x level text.			  *	---------------------------------------------------------------------------- */				public function showLockView():void				{					//_item = item;										reset();					//image_mc.visible = false;										if( BitmapDataManager.getInstance().getBitmapData(_item.cacheIconId) == null )					{						BitmapDataManager.getInstance().addEventListener( Event.COMPLETE, handleLoadBitmapComplete );						BitmapDataManager.getInstance().addEventListener( IOErrorEvent.IO_ERROR, handleLoadBitmapError );						BitmapDataManager.getInstance().loadBitmapToCache( SettingsIndex.getInstance().contentURL+_item.iconURL, _item.cacheIconId );					}					else					{						addImage();					}										image_mc.transform.colorTransform = new ColorTransform( 0, 0, 0, 1, 0, 0, 0, 0 );										TextFormatting.formatTextWithFontName( level_mc.label_txt, StringsIndex.getInstance().getStringByName('VILLAGE')+' '+(_item.availableOnLevel), 'Lithos Pro Black', false, TextFieldAutoSize.CENTER );										lock_mc.visible = true;					level_mc.visible = true;					send_mc.visible = false;										setDeactive();				}							/** showUnlockView			  *	---------------------------------------------------------------------------- *			  *	Shows the unlock view.			  *	---------------------------------------------------------------------------- */				public function showUnlockView():void				{					reset();					image_mc.visible = false;										setDeactive();				}							/** showItemView			  *	---------------------------------------------------------------------------- *			  *	Shows the item view with the icon.			  *	---------------------------------------------------------------------------- */				public function showItemView():void				{					_item = item;										reset();										//trace( "element fire "+getDefinitionByName("Element.Fire") );					//trace( "element ice "+getDefinitionByName("Element.Ice") );					//trace( "element poison "+getDefinitionByName("Element.Poison") );					//trace( "element enchanted "+getDefinitionByName("Element.Enchanted") );										if( _item is Weapon )					{						var element:MovieClip;						var elements:Array = GameLevelUtil.getItemElements( _item );												for( var i:int=0; i<elements.length; ++i )						{							element = new (getDefinitionByName(elements[i]) as Class)();							element.y = -35 * i;							elements_mc.addChild( element );						}											}					else					{						//God items											}										if( BitmapDataManager.getInstance().getBitmapData(_item.cacheIconId) == null )					{						BitmapDataManager.getInstance().addEventListener( Event.COMPLETE, handleLoadBitmapComplete );						BitmapDataManager.getInstance().addEventListener( IOErrorEvent.IO_ERROR, handleLoadBitmapError );						BitmapDataManager.getInstance().loadBitmapToCache( SettingsIndex.getInstance().contentURL+_item.iconURL, _item.cacheIconId );					}					else					{						addImage();					}										image_mc.transform.colorTransform = new ColorTransform();										lock_mc.visible = false;					level_mc.visible = false;					send_mc.visible = true;										setActive();									}							/** handleLoadBitmapComplete			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function handleLoadBitmapComplete( event:CustomEvent ):void				{					//trace( "handleLoadBitmapComplete("+event.customParameters.cacheId+");" );										if( event.customParameters.cacheId == _item.cacheIconId )					{						BitmapDataManager.getInstance().removeEventListener( Event.COMPLETE, handleLoadBitmapComplete );						BitmapDataManager.getInstance().removeEventListener( IOErrorEvent.IO_ERROR, handleLoadBitmapError );												addImage();					}				}							/** handleLoadBitmapError			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function handleLoadBitmapError( event:CustomEvent ):void				{					//trace( "handleLoadBitmapError("+event.customParameters.cacheId+");" );										if( event.customParameters.cacheId == _item.cacheIconId )					{						BitmapDataManager.getInstance().removeEventListener( Event.COMPLETE, handleLoadBitmapComplete );						BitmapDataManager.getInstance().removeEventListener( IOErrorEvent.IO_ERROR, handleLoadBitmapError );												//TODO:						//	Do something if there's an error loading the bitmap					}				}							/** addImage			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function addImage():void				{					var bitmap:Bitmap = new Bitmap(BitmapDataManager.getInstance().getBitmapData(_item.cacheIconId).bitmapData);						bitmap.smoothing = true;						bitmap.width = bitmap.height = 70;						bitmap.x = bitmap.y = -35;										image_mc.addChild( bitmap );				}								protected function handleItemClicked( event:Event ):void				{					//dispatchEvent( new Event("onRollOut") );					//dispatchEvent( new Event("onClick") );										onRolledOut.dispatch();					onClicked.dispatch( this );				}								protected function handleItemRolledOver( event:MouseEvent ):void				{					//trace( "handleItemRolledOver();" );					//dispatchEvent( new Event("onRollOver") );					onRolledOver.dispatch( this );				}								protected function handleItemRolledOut( event:MouseEvent ):void				{					//trace( "handleItemRolledOut();" );					//dispatchEvent( new Event("onRollOut") );					onRolledOut.dispatch();				}										}	}