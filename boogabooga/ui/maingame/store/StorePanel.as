/** StorePanel  *	---------------------------------------------------------------------------- *  *	@desc:  *		A list for the paths  *	@author:  *		Christian Widodo [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.maingame.store	{		import flash.display.Bitmap;		import flash.display.MovieClip;		import flash.display.StageDisplayState;		import flash.events.Event;		import flash.events.EventDispatcher;		import flash.events.MouseEvent;		import flash.events.TimerEvent;		import flash.geom.Point;		import flash.text.TextField;		import flash.text.TextFieldAutoSize;		import flash.utils.getDefinitionByName;		import flash.utils.getQualifiedClassName;		import flash.utils.Timer;				import com.greensock.TweenLite;		import com.greensock.easing.Sine;		import com.avatarlabs.utils.ArrayUtil;		import com.avatarlabs.utils.UtilFunctions;		import com.avatarlabs.utils.VectorUtil;		import com.avatarlabs.utils.cache.BitmapDataManager;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.forms.InputText;		import com.avatarlabs.utils.sound.SoundEffectPlayer;		import com.avatarlabs.utils.text.TextFormatting;		import com.avatarlabs.utils.userinterface.DynamicUIButton;				import com.boogabooga.controller.maingame.MainGameController;		import com.boogabooga.controller.maingame.UserDataController;		import com.boogabooga.data.SoundsIndex;		import com.boogabooga.data.StringsIndex;		import com.boogabooga.data.gamelevel.AbstractGameObject;		import com.boogabooga.data.gamelevel.GameLevelCurrentData;		import com.boogabooga.data.gamelevel.GameLevelDataIndex		import com.boogabooga.data.gamelevel.God;		import com.boogabooga.data.gamelevel.Weapon;		import com.boogabooga.data.maingame.MainGameDataIndex;		import com.boogabooga.events.BoogaEvent;		import com.boogabooga.events.GameLevelEvent;		import com.boogabooga.utils.GameLevelUtil;		import com.boogabooga.ui.maingame.store.StoreConsumableItemIcon;		import com.boogabooga.ui.maingame.weaponselection.BuyPopupView;		import com.boogabooga.ui.maingame.weaponselection.BuySingleItemPopupView;						public class StorePanel extends EventDispatcher		{			protected var _contentClip:MovieClip;						protected var _availableConsumableItems:Vector.<AbstractGameObject>;			protected var _consumableItemClips:Vector.<StoreConsumableItemIcon>;			protected var _consumableItemPage:int;			protected var _totalConsumableItemPages:int;						protected var _storePackClips:Vector.<StorePackItemIcon>;			protected var _storePacksPage:int;			protected var _totalStorePacksPages:int;			protected var _displayedStorePacksLength:int;						private var _purchaseEffectPlayDelayTimer:Timer;						//protected var _availableWeapons:Vector.<Weapon>;			//protected var _selectedWeapons:Vector.<Weapon>;			//protected var _availableWeaponClips:Vector.<UIButton>;			//protected var _selectedWeaponClips:Array;						protected const TOTAL_STORE_PACKS_PER_PAGE:int = 4;			protected const TOTAL_CONSUMABLE_ITEMS_PER_PAGE:int = 14;						//public var weaponPrices:Object;						protected var _storePack1OriginalPosition:Point;			protected var _storePack2OriginalPosition:Point;			protected var _storePack3OriginalPosition:Point;			protected var _storePack4OriginalPosition:Point;						protected var _buySingleItemPopupViewClip:BuySingleItemPopupView;			protected var _buyPopupViewClip:BuyPopupView;			protected var _exitClip:DynamicUIButton;			protected var _storePack1Clip:StorePackItemIcon;			protected var _storePack2Clip:StorePackItemIcon;			protected var _storePack3Clip:StorePackItemIcon;			protected var _storePack4Clip:StorePackItemIcon;						protected var _packsPrevClip:DynamicUIButton;			protected var _packsNextClip:DynamicUIButton;						protected var _consumableItemIcon1Clip:StoreConsumableItemIcon;			protected var _consumableItemIcon2Clip:StoreConsumableItemIcon;			protected var _consumableItemIcon3Clip:StoreConsumableItemIcon;			protected var _consumableItemIcon4Clip:StoreConsumableItemIcon;			protected var _consumableItemIcon5Clip:StoreConsumableItemIcon;			protected var _consumableItemIcon6Clip:StoreConsumableItemIcon;			protected var _consumableItemIcon7Clip:StoreConsumableItemIcon;			protected var _consumableItemIcon8Clip:StoreConsumableItemIcon;			protected var _consumableItemIcon9Clip:StoreConsumableItemIcon;			protected var _consumableItemIcon10Clip:StoreConsumableItemIcon;			protected var _consumableItemIcon11Clip:StoreConsumableItemIcon;			protected var _consumableItemIcon12Clip:StoreConsumableItemIcon;			protected var _consumableItemIcon13Clip:StoreConsumableItemIcon;			protected var _consumableItemIcon14Clip:StoreConsumableItemIcon;						protected var _consumableItemsPrevClip:DynamicUIButton;			protected var _consumableItemsNextClip:DynamicUIButton;						/**	Stage Instances **/			public var storeLabel_mc:MovieClip;			public var buyPopup_mc:MovieClip;			public var buySingleItemPopup_mc:MovieClip;						public var exit_mc:MovieClip;						public var storePack1_mc:MovieClip;			public var storePack2_mc:MovieClip;			public var storePack3_mc:MovieClip;			public var storePack4_mc:MovieClip;						public var packsPrev_mc:MovieClip;			public var packsNext_mc:MovieClip;						public var consumableItemIcon1_mc:MovieClip;			public var consumableItemIcon2_mc:MovieClip;			public var consumableItemIcon3_mc:MovieClip;			public var consumableItemIcon4_mc:MovieClip;			public var consumableItemIcon5_mc:MovieClip;			public var consumableItemIcon6_mc:MovieClip;			public var consumableItemIcon7_mc:MovieClip;			public var consumableItemIcon8_mc:MovieClip;			public var consumableItemIcon9_mc:MovieClip;			public var consumableItemIcon10_mc:MovieClip;			public var consumableItemIcon11_mc:MovieClip;			public var consumableItemIcon12_mc:MovieClip;			public var consumableItemIcon13_mc:MovieClip;			public var consumableItemIcon14_mc:MovieClip;						public var consumableItemsPrev_mc:MovieClip;			public var consumableItemsNext_mc:MovieClip;						public var purchaseEffect_mc:MovieClip;						/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function StorePanel()				{					//init();				}				public function set contentClip( m:MovieClip ):void				{					_contentClip = m;										storeLabel_mc = _contentClip.storeLabel_mc;					buyPopup_mc = _contentClip.buyPopup_mc;					buySingleItemPopup_mc = _contentClip.buySingleItemPopup_mc;					buySingleItemPopup_mc.visible = false;					buySingleItemPopup_mc.alpha = 1;										exit_mc = _contentClip.exit_mc;					purchaseEffect_mc = _contentClip.purchaseEffect_mc;					purchaseEffect_mc.mouseChildren = false;					purchaseEffect_mc.mouseEnabled = false;					purchaseEffect_mc.stop();										storePack1_mc = _contentClip.storePack1_mc;					storePack2_mc = _contentClip.storePack2_mc;					storePack3_mc = _contentClip.storePack3_mc;					storePack4_mc = _contentClip.storePack4_mc;					packsPrev_mc = _contentClip.packsPrev_mc;					packsNext_mc = _contentClip.packsNext_mc;										_storePack1OriginalPosition = new Point( storePack1_mc.x, storePack1_mc.y );					_storePack2OriginalPosition = new Point( storePack2_mc.x, storePack2_mc.y );					_storePack3OriginalPosition = new Point( storePack3_mc.x, storePack3_mc.y );					_storePack4OriginalPosition = new Point( storePack4_mc.x, storePack4_mc.y );										consumableItemIcon1_mc = _contentClip.consumableItemIcon1_mc;					consumableItemIcon2_mc = _contentClip.consumableItemIcon2_mc;					consumableItemIcon3_mc = _contentClip.consumableItemIcon3_mc;					consumableItemIcon4_mc = _contentClip.consumableItemIcon4_mc;					consumableItemIcon5_mc = _contentClip.consumableItemIcon5_mc;					consumableItemIcon6_mc = _contentClip.consumableItemIcon6_mc;					consumableItemIcon7_mc = _contentClip.consumableItemIcon7_mc;					consumableItemIcon8_mc = _contentClip.consumableItemIcon8_mc;					consumableItemIcon9_mc = _contentClip.consumableItemIcon9_mc;					consumableItemIcon10_mc = _contentClip.consumableItemIcon10_mc;					consumableItemIcon11_mc = _contentClip.consumableItemIcon11_mc;					consumableItemIcon12_mc = _contentClip.consumableItemIcon12_mc;					consumableItemIcon13_mc = _contentClip.consumableItemIcon13_mc;					consumableItemIcon14_mc = _contentClip.consumableItemIcon14_mc;										consumableItemsPrev_mc = _contentClip.consumableItemsPrev_mc;					consumableItemsNext_mc = _contentClip.consumableItemsNext_mc;										_buyPopupViewClip = new BuyPopupView();					_buyPopupViewClip.contentClip = buyPopup_mc;					_buyPopupViewClip.init();										_buySingleItemPopupViewClip = new BuySingleItemPopupView();					_buySingleItemPopupViewClip.contentClip = buySingleItemPopup_mc;					_buySingleItemPopupViewClip.init();										_exitClip = new DynamicUIButton();					_exitClip.dynamicClip = exit_mc;					_exitClip.dynamicInit();										_storePack1Clip = new StorePackItemIcon();					_storePack1Clip.contentClip = storePack1_mc;					_storePack1Clip.init();										_storePack2Clip = new StorePackItemIcon();					_storePack2Clip.contentClip = storePack2_mc;					_storePack2Clip.init();										_storePack3Clip = new StorePackItemIcon();					_storePack3Clip.contentClip = storePack3_mc;					_storePack3Clip.init();										_storePack4Clip = new StorePackItemIcon();					_storePack4Clip.contentClip = storePack4_mc;					_storePack4Clip.init();										_packsPrevClip = new DynamicUIButton();					_packsPrevClip.dynamicClip = packsPrev_mc;					_packsPrevClip.dynamicInit();										_packsNextClip = new DynamicUIButton();					_packsNextClip.dynamicClip = packsNext_mc;					_packsNextClip.dynamicInit();										_consumableItemIcon1Clip = new StoreConsumableItemIcon();					_consumableItemIcon1Clip.contentClip = consumableItemIcon1_mc;					_consumableItemIcon1Clip.init();										_consumableItemIcon2Clip = new StoreConsumableItemIcon();					_consumableItemIcon2Clip.contentClip = consumableItemIcon2_mc;					_consumableItemIcon2Clip.init();										_consumableItemIcon3Clip = new StoreConsumableItemIcon();					_consumableItemIcon3Clip.contentClip = consumableItemIcon3_mc;					_consumableItemIcon3Clip.init();										_consumableItemIcon4Clip = new StoreConsumableItemIcon();					_consumableItemIcon4Clip.contentClip = consumableItemIcon4_mc;					_consumableItemIcon4Clip.init();										_consumableItemIcon5Clip = new StoreConsumableItemIcon();					_consumableItemIcon5Clip.contentClip = consumableItemIcon5_mc;					_consumableItemIcon5Clip.init();										_consumableItemIcon6Clip = new StoreConsumableItemIcon();					_consumableItemIcon6Clip.contentClip = consumableItemIcon6_mc;					_consumableItemIcon6Clip.init();										_consumableItemIcon7Clip = new StoreConsumableItemIcon();					_consumableItemIcon7Clip.contentClip = consumableItemIcon7_mc;					_consumableItemIcon7Clip.init();										_consumableItemIcon8Clip = new StoreConsumableItemIcon();					_consumableItemIcon8Clip.contentClip = consumableItemIcon8_mc;					_consumableItemIcon8Clip.init();										_consumableItemIcon9Clip = new StoreConsumableItemIcon();					_consumableItemIcon9Clip.contentClip = consumableItemIcon9_mc;					_consumableItemIcon9Clip.init();										_consumableItemIcon10Clip = new StoreConsumableItemIcon();					_consumableItemIcon10Clip.contentClip = consumableItemIcon10_mc;					_consumableItemIcon10Clip.init();										_consumableItemIcon11Clip = new StoreConsumableItemIcon();					_consumableItemIcon11Clip.contentClip = consumableItemIcon11_mc;					_consumableItemIcon11Clip.init();										_consumableItemIcon12Clip = new StoreConsumableItemIcon();					_consumableItemIcon12Clip.contentClip = consumableItemIcon12_mc;					_consumableItemIcon12Clip.init();										_consumableItemIcon13Clip = new StoreConsumableItemIcon();					_consumableItemIcon13Clip.contentClip = consumableItemIcon13_mc;					_consumableItemIcon13Clip.init();										_consumableItemIcon14Clip = new StoreConsumableItemIcon();					_consumableItemIcon14Clip.contentClip = consumableItemIcon14_mc;					_consumableItemIcon14Clip.init();										_consumableItemsPrevClip = new DynamicUIButton();					_consumableItemsPrevClip.dynamicClip = consumableItemsPrev_mc;					_consumableItemsPrevClip.dynamicInit();										_consumableItemsNextClip = new DynamicUIButton();					_consumableItemsNextClip.dynamicClip = consumableItemsNext_mc;					_consumableItemsNextClip.dynamicInit();									}				public function get contentClip():MovieClip { return _contentClip; }							/** init			  *	---------------------------------------------------------------------------- */				public function init():void				{					_purchaseEffectPlayDelayTimer = new Timer( 200, 1 );					_purchaseEffectPlayDelayTimer.addEventListener( TimerEvent.TIMER_COMPLETE, handlePurchaseEffectPlayDelayTimerCompleted, false, 0, true );										//TextFormatting.formatTextWithFontName( storeLabel_mc.label_txt, "Store", "SF Fedora" );					TextFormatting.formatTextWithFontName( storeLabel_mc.label_txt, StringsIndex.getInstance().getStringByName("STORE_STORE"), "Lithos Pro Black", false, TextFieldAutoSize.CENTER );										buyPopup_mc.visible = false;					buyPopup_mc.alpha = 1;					_buyPopupViewClip.addEventListener( BoogaEvent.ON_BUY_WEAPON, handleStorePopupPurchaseClicked, false, 0, true );					_buyPopupViewClip.addEventListener( BoogaEvent.ON_BUY_GOD, handleStorePopupPurchaseClicked, false, 0, true );										_buySingleItemPopupViewClip.addEventListener( BoogaEvent.ON_BUY_STORE_PACK, handleStorePopupPurchaseClicked, false, 0, true );										_exitClip.addEventListener( "onClick", handleCloseClicked, false, 0, true );					_exitClip.addEventListener( "onSetFocus", handleCloseRolledOver, false, 0, true );					_exitClip.addEventListener( "onKillFocus", handleCloseRolledOut, false, 0, true );					exit_mc.mouseChildren = false;										_availableConsumableItems = new Vector.<AbstractGameObject>;										_consumableItemClips = new Vector.<StoreConsumableItemIcon>;					_consumableItemClips.push( _consumableItemIcon1Clip, _consumableItemIcon2Clip, _consumableItemIcon3Clip, _consumableItemIcon4Clip, _consumableItemIcon5Clip, _consumableItemIcon6Clip, _consumableItemIcon7Clip );					_consumableItemClips.push( _consumableItemIcon8Clip, _consumableItemIcon9Clip, _consumableItemIcon10Clip, _consumableItemIcon11Clip, _consumableItemIcon12Clip, _consumableItemIcon13Clip, _consumableItemIcon14Clip );										var i:int;										for( i=0; i<_consumableItemClips.length; ++i )					{						//_consumableItemClips[i].addEventListener( "onClick", handleAvailableItemClicked, false, 0, true );						_consumableItemClips[i].addEventListener( "onRollOver", handleAvailableItemRolledOver, false, 0, true );						_consumableItemClips[i].addEventListener( "onRollOut", handleAvailableItemRolledOut, false, 0, true );						_consumableItemClips[i].addEventListener( "onBuyClick", handleConsumableItemBuyClicked, false, 0, true );						_consumableItemClips[i].setDeactive();					}										_storePackClips = new Vector.<StorePackItemIcon>;					_storePackClips.push( _storePack1Clip, _storePack2Clip, _storePack3Clip, _storePack4Clip );										for( i=0; i<_storePackClips.length; ++i )					{						_storePackClips[i].addEventListener( "onBuyClick", handleStorePackItemBuyClicked, false, 0, true );						_storePackClips[i].addEventListener( "onRollOver", handleStorePackItemRolledOver, false, 0, true );						_storePackClips[i].addEventListener( "onRollOut", handleStorePackItemRolledOut, false, 0, true );					}										_packsPrevClip.addEventListener( "onClick", handleWeaponPacksPrevClicked, false, 0, true );					_packsPrevClip.addEventListener( "onSetFocus", handleWeaponPacksPrevRolledOver, false, 0, true );					_packsPrevClip.addEventListener( "onKillFocus", handleWeaponPacksPrevRolledOut, false, 0, true );					_packsNextClip.addEventListener( "onClick", handleWeaponPacksNextClicked, false, 0, true );					_packsNextClip.addEventListener( "onSetFocus", handleWeaponPacksNextRolledOver, false, 0, true );					_packsNextClip.addEventListener( "onKillFocus", handleWeaponPacksNextRolledOut, false, 0, true );					_consumableItemsPrevClip.addEventListener( "onClick", handleConsumableItemsPrevClicked, false, 0, true );					_consumableItemsPrevClip.addEventListener( "onSetFocus", handleConsumableItemsPrevRolledOver, false, 0, true );					_consumableItemsPrevClip.addEventListener( "onKillFocus", handleConsumableItemsPrevRolledOut, false, 0, true );					_consumableItemsNextClip.addEventListener( "onClick", handleConsumableItemsNextClicked, false, 0, true );					_consumableItemsNextClip.addEventListener( "onSetFocus", handleConsumableItemsNextRolledOver, false, 0, true );					_consumableItemsNextClip.addEventListener( "onKillFocus", handleConsumableItemsNextRolledOut, false, 0, true );										//_selectedWeapons = new Vector.<Weapon>;					//_availableWeaponClips = new Vector.<UIButton>;					//_selectedWeaponClips = [ selectedItemIcon1_mc, selectedItemIcon2_mc, selectedItemIcon3_mc, selectedItemIcon4_mc, selectedItemIcon5_mc, selectedItemIcon6_mc, selectedItemIcon7_mc, selectedItemIcon8_mc ];										EventNotificationCenter.getInstance().addSignalListener( BoogaEvent.ON_LANGUAGE_CHANGED, handleLanguageChanged, this );				}								private function handlePurchaseEffectPlayDelayTimerCompleted( event:TimerEvent ):void				{					_purchaseEffectPlayDelayTimer.reset();										purchaseEffect_mc.gotoAndPlay(1);					purchaseEffect_mc.shine_mc.gotoAndPlay(1);										SoundEffectPlayer.getInstance().playLibrarySound( "sfx_weapon_purchase.mp3", false, "sfx_weapon_purchase.mp3", "sfx_weapon_purchase.mp3", SoundEffectPlayer.SOUND_PLAYER_SFX );				}							/** initAvailableItems			  *	---------------------------------------------------------------------------- *			  *	Initializes weapons and gods and the ones user has.			  *	---------------------------------------------------------------------------- */				public function initAvailableItems( weapons:Vector.<Weapon>=null, gods:Vector.<God>=null )				{					ConsoleBroadcaster.broadcast( "StorePanel", "initAvailableItems("+weapons.length+", "+gods.length+");" );					ConsoleBroadcaster.broadcast( "StorePanel", "attackSlots"+MainGameController.getInstance().currentUser.attackSlots );										var i:int;										if( weapons != null )					{						for( i=0; i<weapons.length; ++i )						{							if( !weapons[i].listed )								continue;														//_availableItems.push( weapons[i] );							if( weapons[i].consumable )								_availableConsumableItems.push( weapons[i] );						}					}										if( gods != null )					{						for( i=0; i<gods.length; ++i )						{							if( gods[i].consumable )								_availableConsumableItems.push( gods[i] );						}					}										_availableConsumableItems.sort( GameLevelUtil.sortGameObjectsOnLevelAvailability );										_consumableItemPage = 0;					_totalConsumableItemPages = Math.ceil(_availableConsumableItems.length / TOTAL_CONSUMABLE_ITEMS_PER_PAGE);										//trace( "_totalConsumableItemPages: "+_totalConsumableItemPages );										_displayedStorePacksLength = 0;										for( i=0; i<MainGameDataIndex.getInstance().storePacksCount; ++i )					{						if( MainGameDataIndex.getInstance().storePacks[i].availableOnLevel <= MainGameController.getInstance().currentUser.level )						{							++_displayedStorePacksLength;						}					}										//trace( "_displayedStorePacksLength: "+_displayedStorePacksLength );										_storePacksPage = 0;					_totalStorePacksPages = Math.ceil(_displayedStorePacksLength / TOTAL_STORE_PACKS_PER_PAGE);										if( _displayedStorePacksLength == 1 )					{						storePack1_mc.x = _storePack2OriginalPosition.x + (_storePack3OriginalPosition.x - _storePack2OriginalPosition.x)*.5;					}					else if( _displayedStorePacksLength == 2 )					{						storePack1_mc.x = _storePack2OriginalPosition.x;						storePack2_mc.x = _storePack3OriginalPosition.x;					}					else if( _displayedStorePacksLength == 3 )					{						storePack2_mc.x = _storePack2OriginalPosition.x + (_storePack3OriginalPosition.x - _storePack2OriginalPosition.x)*.5;						storePack1_mc.x = storePack2_mc.x - (_storePack3OriginalPosition.x - _storePack2OriginalPosition.x);						storePack3_mc.x = storePack2_mc.x + (_storePack3OriginalPosition.x - _storePack2OriginalPosition.x);					}					else					{						storePack1_mc.x = _storePack1OriginalPosition.x;						storePack2_mc.x = _storePack2OriginalPosition.x;						storePack3_mc.x = _storePack3OriginalPosition.x;						storePack4_mc.x = _storePack4OriginalPosition.x;					}										showStorePacks();					showConsumableItems();										toggleUI();				}							/** reset			  *	---------------------------------------------------------------------------- *			  *	Resets the consumable item clips			  *	---------------------------------------------------------------------------- */				public function reset():void				{					var i:int;										for( i=0; i<_consumableItemClips.length; ++i )					{						_consumableItemClips[i].reset();					}										VectorUtil.removeAll( _availableConsumableItems );				}							/** kill			  *	---------------------------------------------------------------------------- */				public function kill():void				{									}							/** hide			  *	---------------------------------------------------------------------------- */				public function hide():void				{					_contentClip.visible = false;										reset();										_buyPopupViewClip.hide();					_buySingleItemPopupViewClip.hide();				}							/** show			  *	---------------------------------------------------------------------------- */				public function show():void				{					_contentClip.visible = true;					/*					if( MainGameController.getInstance().currentUser.tutorialStore && MainGameController.getInstance().currentUser.level >= 7 )					{						var globalPosition:Point = _storePack1Clip.buy_mc.parent.localToGlobal( new Point(_storePack1Clip.buy_mc.x, _storePack1Clip.buy_mc.y) );						EventNotificationCenter.getInstance().sendNotificationWithParameters( BoogaEvent.ON_TUTORIAL_SHOW, this, {targetX:globalPosition.x, targetY:globalPosition.y, text:StringsIndex.getInstance().getStringByName("TUTORIAL_STORE_2")} );					}					*/				}							/** handleCloseClicked			  *	---------------------------------------------------------------------------- */				protected function handleCloseClicked( event:Event ):void				{					//trace("handleCloseClicked");					ConsoleBroadcaster.broadcast( "StorePanel", "handleCloseClicked();" );					dispatchEvent( new BoogaEvent(BoogaEvent.STORE_PANEL_EXIT) );					hide();										//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_click.wav").volume, 0, "sfx_mouse_click.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav" );									}								protected function handleCloseRolledOver( event:Event ):void				{					//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_rollover.wav").volume, 0, "sfx_mouse_rollover.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav" );									}								protected function handleCloseRolledOut( event:Event ):void				{									}							/** handleAvailableItemClicked			  *	---------------------------------------------------------------------------- */				protected function handleAvailableItemClicked( event:Event ):void				{					ConsoleBroadcaster.broadcast( "StorePanel", "handleAvailableItemClicked();" );									}							/** handleAvailableItemRolledOver			  *	---------------------------------------------------------------------------- */				protected function handleAvailableItemRolledOver( event:Event ):void				{					var text:String = StringsIndex.getInstance().getString(String(event.currentTarget.item.name));					var text2:String = StringsIndex.getInstance().getString(String(event.currentTarget.item.description));					var text3:String = event.currentTarget.item.statistic;										EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_TEXT_HOVER_SHOW, this, {clip:event.currentTarget.contentClip, text:text, text2:text2, text3:text3, align:TextFieldAutoSize.CENTER} );				}							/** handleAvailableItemRolledOut			  *	---------------------------------------------------------------------------- */				protected function handleAvailableItemRolledOut( event:Event ):void				{					EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_TEXT_HOVER_HIDE, this );				}							/** handleConsumableItemBuyClicked			  *	---------------------------------------------------------------------------- */				protected function handleConsumableItemBuyClicked( event:Event ):void				{					ConsoleBroadcaster.broadcast( "StorePanel", "handleConsumableItemBuyClicked();" );					/*					if( MainGameController.getInstance().currentUser.tutorialStore )					{						MainGameController.getInstance().currentUser.tutorialStore = false;												EventNotificationCenter.getInstance().sendNotification( BoogaEvent.ON_TUTORIAL_HIDE, this );												var userDataController:UserDataController = new UserDataController();							userDataController.updateUserTutorial( MainGameController.getInstance().currentUser.id, "store", 0 );					}					*/					_buyPopupViewClip.item = event.currentTarget.item;					_buyPopupViewClip.show();										//purchaseEffect_mc.x = event.currentTarget.dynamicClip.x;					//purchaseEffect_mc.y = event.currentTarget.dynamicClip.y;										//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_click.wav").volume, 0, "sfx_mouse_click.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav" );									}							/** handleStorePackItemBuyClicked			  *	---------------------------------------------------------------------------- *			  *	When user clicks to buy the store pack.			  *	---------------------------------------------------------------------------- */				protected function handleStorePackItemBuyClicked( event:CustomEvent ):void				{					ConsoleBroadcaster.broadcast( "StorePanel", "handleStorePackItemBuyClicked();" );					/*					if( MainGameController.getInstance().currentUser.tutorialStore )					{						MainGameController.getInstance().currentUser.tutorialStore = false;												EventNotificationCenter.getInstance().sendNotification( BoogaEvent.ON_TUTORIAL_HIDE, this );												var userDataController:UserDataController = new UserDataController();							userDataController.updateUserTutorial( MainGameController.getInstance().currentUser.id, "store", 0 );					}					*/					//trace( "type "+event.customParameters.type );					//trace( "itemId "+event.customParameters.itemId );					//trace( "priceId "+event.customParameters.priceId );										//MainGameController.getInstance().addEventListener( BoogaEvent.ON_PURCHASE_SUCCESS, handlePurchaseItemSuccess );					//MainGameController.getInstance().addEventListener( BoogaEvent.ON_PURCHASE_FAIL, handlePurchaseItemFail );					//MainGameController.getInstance().purchaseItem( event.customParameters.type, event.customParameters.itemId, event.customParameters.priceId );										_buySingleItemPopupViewClip.item = event.currentTarget.item;					_buySingleItemPopupViewClip.show();				}								protected function handleStorePackItemRolledOver( event:Event ):void				{					var text:String = StringsIndex.getInstance().getString(String(event.currentTarget.item.name));					var text2:String = StringsIndex.getInstance().getString(String(event.currentTarget.item.description));					var text3:String = event.currentTarget.item.statistic;										EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_TEXT_HOVER_SHOW, this, {clip:event.currentTarget.contentClip.background_mc, text:text, text2:text2, text3:text3, align:TextFieldAutoSize.CENTER} );				}								protected function handleStorePackItemRolledOut( event:Event ):void				{					EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_TEXT_HOVER_HIDE, this );				}							/** handleWeaponPacksPrevClicked			  *	---------------------------------------------------------------------------- *			  *	Scrolls the weapon packs to the previous page if there are more than 4.			  *	---------------------------------------------------------------------------- */				protected function handleWeaponPacksPrevClicked( event:Event ):void				{					--_storePacksPage;										showStorePacks();					toggleUI();										//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_click.wav").volume, 0, "sfx_mouse_click.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav" );									}								protected function handleWeaponPacksPrevRolledOver( event:Event ):void				{					//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_rollover.wav").volume, 0, "sfx_mouse_rollover.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav", SoundEffectPlayer.SOUND_PLAYER_SFX );				}								protected function handleWeaponPacksPrevRolledOut( event:Event ):void				{									}							/** handleWeaponPacksNextClicked			  *	---------------------------------------------------------------------------- *			  *	Scrolls the weapon packs to the next page if there are more than 4.			  *	---------------------------------------------------------------------------- */				protected function handleWeaponPacksNextClicked( event:Event ):void				{					++_storePacksPage;										showStorePacks();					toggleUI();										//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_click.wav").volume, 0, "sfx_mouse_click.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav" );									}								protected function handleWeaponPacksNextRolledOver( event:Event ):void				{					//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_rollover.wav").volume, 0, "sfx_mouse_rollover.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav", SoundEffectPlayer.SOUND_PLAYER_SFX );									}								protected function handleWeaponPacksNextRolledOut( event:Event ):void				{									}							/** handleConsumableItemsPrevClicked			  *	---------------------------------------------------------------------------- *			  *	Scrolls the consumable items to the previous page if there are more than			  *	number of available slots.			  *	---------------------------------------------------------------------------- */				protected function handleConsumableItemsPrevClicked( event:Event ):void				{					--_consumableItemPage;										showConsumableItems();					toggleUI();										//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_click.wav").volume, 0, "sfx_mouse_click.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav" );									}								protected function handleConsumableItemsPrevRolledOver( event:Event ):void				{					//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_rollover.wav").volume, 0, "sfx_mouse_rollover.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav", SoundEffectPlayer.SOUND_PLAYER_SFX );									}								protected function handleConsumableItemsPrevRolledOut( event:Event ):void				{									}							/** handleConsumableItemsNextClicked			  *	---------------------------------------------------------------------------- *			  *	Scrolls the consumable item to the next page if there are more than			  *	number of available slots.			  *	---------------------------------------------------------------------------- */				protected function handleConsumableItemsNextClicked( event:Event ):void				{					++_consumableItemPage;										showConsumableItems();					toggleUI();										//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_click.wav").volume, 0, "sfx_mouse_click.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav" );				}								protected function handleConsumableItemsNextRolledOver( event:Event ):void				{					//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_rollover.wav").volume, 0, "sfx_mouse_rollover.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav", SoundEffectPlayer.SOUND_PLAYER_SFX );				}								protected function handleConsumableItemsNextRolledOut( event:Event ):void				{									}							/** handleStorePopupPurchaseClicked			  *	---------------------------------------------------------------------------- *			  *	User buys the item from the store popup.			  *	---------------------------------------------------------------------------- */				protected function handleStorePopupPurchaseClicked( event:CustomEvent ):void				{					//trace( "priceId: "+event.customParameters.priceId );					//trace( "itemId: "+event.customParameters.itemId );					//trace( "type: "+event.customParameters.type );										//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_click.wav").volume, 0, "sfx_mouse_click.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav" );										MainGameController.getInstance().addEventListener( BoogaEvent.ON_PURCHASE_SUCCESS, handlePurchaseItemSuccess );					MainGameController.getInstance().addEventListener( BoogaEvent.ON_PURCHASE_FAIL, handlePurchaseItemFail );					MainGameController.getInstance().purchaseItem( event.customParameters.type, event.customParameters.itemId, event.customParameters.priceId, 'Store' );				}							/** handlePurchaseItemSuccess			  *	---------------------------------------------------------------------------- *			  *	This event is fired when the purchase of a consumable item is successful.			  *	---------------------------------------------------------------------------- */				protected function handlePurchaseItemSuccess( event:BoogaEvent ):void				{					ConsoleBroadcaster.broadcast( "StorePanel", "handlePurchaseItemSuccess();" );										MainGameController.getInstance().removeEventListener( BoogaEvent.ON_PURCHASE_SUCCESS, handlePurchaseItemSuccess );					MainGameController.getInstance().removeEventListener( BoogaEvent.ON_PURCHASE_FAIL, handlePurchaseItemFail );										var purchaseEffectPlaying:Boolean = false;										for( var i:int=0; i<_consumableItemClips.length; ++i )					{						if( !purchaseEffectPlaying && _consumableItemClips[i].item.useCount != _consumableItemClips[i].count_mc.label_txt.text )						{							_purchaseEffectPlayDelayTimer.stop();							_purchaseEffectPlayDelayTimer.reset();														purchaseEffectPlaying = true;							purchaseEffect_mc.x = _consumableItemClips[i].contentClip.x + 30;							purchaseEffect_mc.y = _consumableItemClips[i].contentClip.y + 40;														_purchaseEffectPlayDelayTimer.start();														//purchaseEffect_mc.play();							//purchaseEffect_mc.shine_mc.play();						}												_consumableItemClips[i].refreshCount();					}										_buyPopupViewClip.hide();					_buySingleItemPopupViewClip.hide();				}							/** handlePurchaseItemFail			  *	---------------------------------------------------------------------------- *			  *	This event is fired when the purchase of a consumable item has failed.			  *	---------------------------------------------------------------------------- */				protected function handlePurchaseItemFail( event:BoogaEvent ):void				{					ConsoleBroadcaster.broadcast( "StorePanel", "handlePurchaseItemFail();" );										MainGameController.getInstance().removeEventListener( BoogaEvent.ON_PURCHASE_SUCCESS, handlePurchaseItemSuccess );					MainGameController.getInstance().removeEventListener( BoogaEvent.ON_PURCHASE_FAIL, handlePurchaseItemFail );										//TODO:					//	Do something if purchase fails				}							/** showStorePacks			  *	---------------------------------------------------------------------------- *			  *	Shows the store packs.			  *	---------------------------------------------------------------------------- */				protected function showStorePacks():void				{					var offset:int = _storePacksPage*TOTAL_STORE_PACKS_PER_PAGE;					for( var i:int=0; i<TOTAL_STORE_PACKS_PER_PAGE; ++i )					{						if( (i+offset) < _displayedStorePacksLength )						{							if( MainGameDataIndex.getInstance().storePacks[i+offset].availableOnLevel <= MainGameController.getInstance().currentUser.level )							{								_storePackClips[i].showItemView( MainGameDataIndex.getInstance().storePacks[i+offset] );							}							else							{															}							_storePackClips[i].contentClip.visible = true;						}						else						{							_storePackClips[i].contentClip.visible = false;						}					}				}							/** showConsumableItems			  *	---------------------------------------------------------------------------- *			  *	Shows the consumable items			  *	---------------------------------------------------------------------------- */				protected function showConsumableItems():void				{					var item:AbstractGameObject;					var offset:int = _consumableItemPage*TOTAL_CONSUMABLE_ITEMS_PER_PAGE;										for( var i:int=0; i<TOTAL_CONSUMABLE_ITEMS_PER_PAGE; ++i )					{						//if( (i+_consumableItemPage*TOTAL_CONSUMABLE_ITEMS_PER_PAGE) < _availableConsumableItems.length && _availableConsumableItems[i+_consumableItemPage*TOTAL_CONSUMABLE_ITEMS_PER_PAGE] )						if( (i+offset) < _availableConsumableItems.length )						{							item = _availableConsumableItems[i+offset];														if( MainGameController.getInstance().currentUser.isItemUnlocked(item) )							{								//trace( "item "+item.id+" is unlocked" );								if( item is Weapon )								{									_consumableItemClips[i].showItemView( MainGameController.getInstance().currentUser.getUnlockedWeapon(item.id) );									//trace( "weapon: "+MainGameController.getInstance().currentUser.getUnlockedWeapon(item.id) );								}								else if( item is God )								{									_consumableItemClips[i].showItemView( MainGameController.getInstance().currentUser.getUnlockedGod(item.id) );									//trace( "god: "+MainGameController.getInstance().currentUser.getUnlockedGod(item.id) );								}							}							else							{								//trace( "item "+item.id+" is locked" );								_consumableItemClips[i].showLockView( item.availableOnLevel-MainGameController.getInstance().currentUser.level );							}							_consumableItemClips[i].contentClip.visible = true;						}						else						{							_consumableItemClips[i].contentClip.visible = false;						}					}				}							/** toggleUI			  *	---------------------------------------------------------------------------- *			  *	Toggles the previous and next store pack buttons and the previous and			  *	next consumable item buttons on or off.			  *	---------------------------------------------------------------------------- */				protected function toggleUI():void				{					if( _totalStorePacksPages == 1 )					{						//_packsPrevClip.dynamicClip.visible = false;						//_packsNextClip.dynamicClip.visible = false;						_packsPrevClip.setDeactive();						_packsNextClip.setDeactive();						GameLevelUtil.addDesaturatedFilterToMovieClip( _packsPrevClip.dynamicClip );						GameLevelUtil.addDesaturatedFilterToMovieClip( _packsNextClip.dynamicClip );						_packsPrevClip.dynamicClip.alpha = .3;						_packsNextClip.dynamicClip.alpha = .3;					}					else					{						if( _storePacksPage == 0 )						{							//_packsPrevClip.dynamicClip.visible = false;							//_packsNextClip.dynamicClip.visible = true;							_packsPrevClip.setDeactive();							_packsNextClip.setActive();							GameLevelUtil.addDesaturatedFilterToMovieClip( _packsPrevClip.dynamicClip );							_packsPrevClip.dynamicClip.alpha = .3;							GameLevelUtil.removeDesaturatedFilterFromMovieClip( _packsNextClip.dynamicClip );							_packsNextClip.dynamicClip.alpha = 1;						}						else if( _storePacksPage == _totalStorePacksPages-1 )						{							//_packsPrevClip.dynamicClip.visible = true;							//_packsNextClip.dynamicClip.visible = false;							_packsPrevClip.setActive();							_packsNextClip.setDeactive();							GameLevelUtil.removeDesaturatedFilterFromMovieClip( _packsPrevClip.dynamicClip );							_packsPrevClip.dynamicClip.alpha = 1;							GameLevelUtil.addDesaturatedFilterToMovieClip( _packsNextClip.dynamicClip );							_packsNextClip.dynamicClip.alpha = .3;						}						else						{							//_packsPrevClip.dynamicClip.visible = true;							//_packsNextClip.dynamicClip.visible = true;							_packsPrevClip.setActive();							_packsNextClip.setActive();							GameLevelUtil.removeDesaturatedFilterFromMovieClip( _packsPrevClip.dynamicClip );							_packsPrevClip.dynamicClip.alpha = 1;							GameLevelUtil.removeDesaturatedFilterFromMovieClip( _packsNextClip.dynamicClip );							_packsNextClip.dynamicClip.alpha = 1;						}					}										if( _totalConsumableItemPages == 1 )					{						//_consumableItemsNextClip.dynamicClip.visible = false;						//_consumableItemsPrevClip.dynamicClip.visible = false;						_consumableItemsPrevClip.setDeactive();						_consumableItemsNextClip.setDeactive();						GameLevelUtil.addDesaturatedFilterToMovieClip( _consumableItemsPrevClip.dynamicClip );						GameLevelUtil.addDesaturatedFilterToMovieClip( _consumableItemsNextClip.dynamicClip );						_consumableItemsPrevClip.dynamicClip.alpha = .3;						_consumableItemsNextClip.dynamicClip.alpha = .3;					}					else					{						if( _consumableItemPage == 0 )						{							//_consumableItemsPrevClip.dynamicClip.visible = false;							//_consumableItemsNextClip.dynamicClip.visible = true;							_consumableItemsPrevClip.setDeactive();							_consumableItemsNextClip.setActive();							GameLevelUtil.addDesaturatedFilterToMovieClip( _consumableItemsPrevClip.dynamicClip );							_consumableItemsPrevClip.dynamicClip.alpha = .3;							GameLevelUtil.removeDesaturatedFilterFromMovieClip( _consumableItemsNextClip.dynamicClip );							_consumableItemsNextClip.dynamicClip.alpha = 1;						}						else if( _consumableItemPage >= _totalConsumableItemPages-1 )						{							//_consumableItemsPrevClip.dynamicClip.visible = true;							//_consumableItemsNextClip.dynamicClip.visible = false;							_consumableItemsPrevClip.setActive();							_consumableItemsNextClip.setDeactive();							GameLevelUtil.removeDesaturatedFilterFromMovieClip( _consumableItemsPrevClip.dynamicClip );							_consumableItemsPrevClip.dynamicClip.alpha = 1;							GameLevelUtil.addDesaturatedFilterToMovieClip( _consumableItemsNextClip.dynamicClip );							_consumableItemsNextClip.dynamicClip.alpha = .3;						}						else						{							//_consumableItemsPrevClip.dynamicClip.visible = true;							//_consumableItemsNextClip.dynamicClip.visible = true;							_consumableItemsPrevClip.setActive();							_consumableItemsNextClip.setActive();							GameLevelUtil.removeDesaturatedFilterFromMovieClip( _consumableItemsPrevClip.dynamicClip );							_consumableItemsPrevClip.dynamicClip.alpha = 1;							GameLevelUtil.removeDesaturatedFilterFromMovieClip( _consumableItemsNextClip.dynamicClip );							_consumableItemsNextClip.dynamicClip.alpha = 1;						}					}				}							/** handleLanguageChanged			  *	---------------------------------------------------------------------------- *			  *	When a language is changed, update the text accordingly.			  *	---------------------------------------------------------------------------- */				protected function handleLanguageChanged( customParameters:Object ):void				{					TextFormatting.formatTextWithFontName( storeLabel_mc.label_txt, StringsIndex.getInstance().getStringByName("STORE_STORE"), "Lithos Pro Black" );				}						}	}