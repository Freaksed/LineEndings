/** StoreConsumableItemIcon  *	---------------------------------------------------------------------------- *  *	@author:  *		Christian Widodo [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.maingame.store	{		import flash.display.Bitmap;		import flash.display.MovieClip;		import flash.events.Event;		import flash.events.EventDispatcher;		import flash.events.MouseEvent;		import flash.text.TextField;		import flash.text.TextFieldAutoSize;		import flash.utils.getDefinitionByName;				import com.avatarlabs.utils.cache.BitmapDataManager;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.sound.SoundEffectPlayer;		import com.avatarlabs.utils.text.TextFormatting;		import com.avatarlabs.utils.userinterface.DynamicUIButton;				import com.boogabooga.data.SoundsIndex;		import com.boogabooga.data.gamelevel.AbstractGameObject;		import com.boogabooga.data.gamelevel.Weapon;		import com.boogabooga.data.maingame.Village;		import com.boogabooga.ui.maingame.weaponselection.WeaponSelectionItemIcon;		import com.boogabooga.utils.GameLevelUtil;				public class StoreConsumableItemIcon extends WeaponSelectionItemIcon		{			protected var _buyClip:DynamicUIButton;						/**	Stage Instances **/			public var buy_mc:MovieClip;			//public var count_mc:MovieClip;			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function StoreConsumableItemIcon()				{					super();				}								override public function set contentClip( m:MovieClip ):void				{					super.contentClip = m;										buy_mc = _contentClip.buy_mc;					count_mc = _contentClip.count_mc;										_buyClip = new DynamicUIButton();					_buyClip.dynamicClip = buy_mc;					_buyClip.dynamicInit();				}								override public function init():void				{					super.init();										_contentClip.mouseChildren = true;					setDeactive();										count_mc.visible = false;					buy_mc.visible = false;					buy_mc.mouseChildren = false;					_buyClip.addEventListener( "onClick", handleBuyClicked, false, 0, true );					_buyClip.addEventListener( "onSetFocus", handleBuyRolledOver, false, 0, true );					_buyClip.addEventListener( "onKillFocus", handleBuyRolledOut, false, 0, true );				}							/** setDeactive			  *	---------------------------------------------------------------------------- */				override public function setDeactive():void				{					//trace( "setDeactive();" );										hitarea_mc.removeEventListener( MouseEvent.CLICK, handleItemClicked );					hitarea_mc.removeEventListener( MouseEvent.ROLL_OVER, handleItemRolledOver );					hitarea_mc.removeEventListener( MouseEvent.ROLL_OUT, handleItemRolledOut );					hitarea_mc.buttonMode = false;				}							/** showLockView			  *	---------------------------------------------------------------------------- *			  *	Shows the lock view with the unlock in x level text.			  *	---------------------------------------------------------------------------- */				override public function showLockView( level:int=0 ):void				{					super.showLockView( level );										count_mc.visible = false;					buy_mc.visible = false;				}							/** showItemView			  *	---------------------------------------------------------------------------- *			  *	Shows the item view with the icon.			  *	---------------------------------------------------------------------------- */				override public function showItemView( item:AbstractGameObject ):void				{					_item = item;										reset();										if( _item is Weapon )					{						var element:MovieClip;						var elements:Array = GameLevelUtil.getItemElements( _item );												for( var i:int=0; i<elements.length; ++i )						{							element = new (getDefinitionByName(elements[i]) as Class)();							element.width = 24;							element.height = 25;							//element.x = -12;							element.y = -24 * i;							elements_mc.addChild( element );						}					}										lock_mc.visible = false;					var iconBitmap:Bitmap = new Bitmap(BitmapDataManager.getInstance().getBitmapData(_item.cacheIconId).bitmapData);						iconBitmap.width = 55;						iconBitmap.height = 55;						iconBitmap.smoothing = true;										image_mc.addChild( iconBitmap );					image_mc.visible = true;										//TextFormatting.formatTextWithFontName( count_mc.label_txt, ""+_item.useCount, "SF Fedora", false, TextFieldAutoSize.CENTER );					TextFormatting.formatTextWithFontName( count_mc.label_txt, ""+_item.useCount, "Lithos Pro Black", false, TextFieldAutoSize.CENTER );					count_mc.visible = true;					buy_mc.visible = true;										//var iconBitmap = image_mc.getChildAt(0) as Bitmap;						//iconBitmap.width = 55;						//iconBitmap.height = 55;										//hitarea_mc.buttonMode = true;					hitarea_mc.addEventListener( MouseEvent.ROLL_OVER, handleItemRolledOver, false, 0, true );					hitarea_mc.addEventListener( MouseEvent.ROLL_OUT, handleItemRolledOut, false, 0, true );				}							/** refreshCount			  *	---------------------------------------------------------------------------- *			  *	Refreshes the consumable item count.			  *	---------------------------------------------------------------------------- */				public function refreshCount():void				{					if( _item != null )					{						//TextFormatting.formatTextWithFontName( count_mc.label_txt, ""+_item.useCount, "SF Fedora", false, TextFieldAutoSize.CENTER );						TextFormatting.formatTextWithFontName( count_mc.label_txt, ""+_item.useCount, "Lithos Pro Black", false, TextFieldAutoSize.CENTER );					}				}								protected function handleBuyClicked( event:Event ):void				{					ConsoleBroadcaster.broadcast( "StoreConsumableItemIcon", "handleBuyClicked();" );										dispatchEvent( new CustomEvent("onBuyClick") );				}								protected function handleBuyRolledOver( event:Event ):void				{					//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_rollover.wav").volume, 0, "sfx_mouse_rollover.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav", SoundEffectPlayer.SOUND_PLAYER_SFX );										dispatchEvent( new CustomEvent("onBuyRollOver") );				}								protected function handleBuyRolledOut( event:Event ):void				{					dispatchEvent( new CustomEvent("onBuyRollOut") );				}		}	}