/** StoreView  *	---------------------------------------------------------------------------- *  *	@author:  *		Christian Widodo [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.maingame.store	{		import flash.display.MovieClip;		import flash.events.Event;		import flash.utils.getDefinitionByName;				import com.avatarlabs.utils.events.AssetLoaderEvent;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;				import com.boogabooga.controller.maingame.MainGameController;		import com.boogabooga.data.gamelevel.GameLevelDataIndex;		import com.boogabooga.events.BoogaEvent;		import com.boogabooga.ui.maingame.AbstractContentView;		import com.boogabooga.ui.maingame.IContentView;		import com.boogabooga.ui.maingame.LoadingAssetView;		import com.boogabooga.ui.maingame.store.StorePanel;				public class StoreView extends AbstractContentView implements IContentView		{			protected var _loadingAssetViewClip:LoadingAssetView;			protected var _isStorePanelAssetLoaded:Boolean = false;			protected var _storePanelClip:StorePanel;						/**	Stage Instances **/			public var blackBackground_mc:MovieClip;			public var storePanelContainer_mc:MovieClip;			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function StoreView()				{					init();				}								override public function set contentClip( m:MovieClip ):void				{					super.contentClip = m;										blackBackground_mc = _contentClip.blackBackground_mc;					blackBackground_mc.cacheAsBitmap = true;					storePanelContainer_mc = _contentClip.storePanelContainer_mc;				}								public function set loadingAssetViewClip( clip:LoadingAssetView ):void { _loadingAssetViewClip = clip; }				public function get storePanelClip():StorePanel { return _storePanelClip; }							/** init			  *	---------------------------------------------------------------------------- */				override public function init():void				{									}							/** show			  *	---------------------------------------------------------------------------- */				override public function show():void				{					super.show();										if( _isStorePanelAssetLoaded )					{						_storePanelClip.initAvailableItems( GameLevelDataIndex.getInstance().weapons, GameLevelDataIndex.getInstance().gods );						_storePanelClip.show();					}					else					{						_loadingAssetViewClip.showLoadingProgress();												var assets:Array = new Array();												for( var i:int=0; i<GameLevelDataIndex.getInstance().weapons.length; ++i )						{							assets.push( {id:GameLevelDataIndex.getInstance().weapons[i].cacheIconId, url:GameLevelDataIndex.getInstance().weapons[i].iconURL} );						}												for( i=0; i<GameLevelDataIndex.getInstance().gods.length; ++i )						{							assets.push( {id:GameLevelDataIndex.getInstance().gods[i].cacheIconId, url:GameLevelDataIndex.getInstance().gods[i].iconURL} );						}												assets.push( {id:"BoogaBoogaAsset1Swf", url:"boogabooga_asset1.swf"} );												MainGameController.getInstance().urgentAssetLoaderController.addEventListener( AssetLoaderEvent.COMPLETE, handleLoadStorePanelAssetComplete );						MainGameController.getInstance().urgentAssetLoaderController.addEventListener( AssetLoaderEvent.ERROR, handleLoadStorePanelAssetError );						MainGameController.getInstance().urgentAssetLoaderController.loadAssets( assets );					}				}							/** hide			  *	---------------------------------------------------------------------------- */				override public function hide():void				{					super.hide();										_storePanelClip.hide();				}							/** handleLoadStorePanelAssetComplete			  *	---------------------------------------------------------------------------- */				protected function handleLoadStorePanelAssetComplete( event:AssetLoaderEvent ):void				{					_isStorePanelAssetLoaded = true;										MainGameController.getInstance().urgentAssetLoaderController.removeEventListener( AssetLoaderEvent.COMPLETE, handleLoadStorePanelAssetComplete );					MainGameController.getInstance().urgentAssetLoaderController.removeEventListener( AssetLoaderEvent.ERROR, handleLoadStorePanelAssetError );										_loadingAssetViewClip.hideLoadingProgress();										if( _storePanelClip == null )					{						_storePanelClip = new StorePanel();						_storePanelClip.contentClip = new (getDefinitionByName("StorePanelLibrary") as Class)();						storePanelContainer_mc.addChild( _storePanelClip.contentClip );						_storePanelClip.addEventListener( BoogaEvent.STORE_PANEL_EXIT, handleStorePanelExit, false, 0, true );					}										_storePanelClip.init();										_storePanelClip.initAvailableItems( GameLevelDataIndex.getInstance().weapons, GameLevelDataIndex.getInstance().gods );					_storePanelClip.show();									}							/** handleLoadStorePanelAssetError			  *	---------------------------------------------------------------------------- *			  *	If there is an error in loading the asset swf for the store panel.			  *	---------------------------------------------------------------------------- */				protected function handleLoadStorePanelAssetError( event:AssetLoaderEvent ):void				{					MainGameController.getInstance().urgentAssetLoaderController.removeEventListener( AssetLoaderEvent.COMPLETE, handleLoadStorePanelAssetComplete );					MainGameController.getInstance().urgentAssetLoaderController.removeEventListener( AssetLoaderEvent.ERROR, handleLoadStorePanelAssetError );										EventNotificationCenter.getInstance().sendNotification( BoogaEvent.LOADING_ERROR, this );				}							/** handleStorePanelExit			  *	---------------------------------------------------------------------------- *			  *	Closes the store view overlay.			  *	---------------------------------------------------------------------------- */				protected function handleStorePanelExit( event:BoogaEvent ):void				{					hide();										dispatchEvent( new BoogaEvent(BoogaEvent.ON_POPUP_HIDE) );				}		}	}