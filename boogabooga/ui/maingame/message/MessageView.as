/** MessageView  *	---------------------------------------------------------------------------- *  *	@author:  *		Christian Widodo [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.maingame.message	{		import flash.display.MovieClip;		import flash.events.Event;		import flash.utils.getDefinitionByName;				import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.AssetLoaderEvent;		import com.avatarlabs.utils.events.CustomEvent;				import com.boogabooga.controller.maingame.MainGameController;		import com.boogabooga.controller.maingame.MessageDataController;		import com.boogabooga.events.BoogaEvent;		import com.boogabooga.ui.maingame.AbstractContentView;		import com.boogabooga.ui.maingame.IContentView;		import com.boogabooga.ui.maingame.LoadingAssetView;		import com.boogabooga.ui.messagespanel.MessagesPanel;				public class MessageView extends AbstractContentView implements IContentView		{			protected var _loadingAssetViewClip:LoadingAssetView;			protected var _isMessagePanelAssetLoaded:Boolean = false;			protected var _messagesPanelClip:MessagesPanel;						/**	Stage Instances **/			public var blackBackground_mc:MovieClip;			public var messagePanelContainer_mc:MovieClip;			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function MessageView()				{									}								override public function set contentClip( m:MovieClip ):void				{					super.contentClip = m;										blackBackground_mc = _contentClip.blackBackground_mc;										if( blackBackground_mc != null )						blackBackground_mc.cacheAsBitmap = true;										messagePanelContainer_mc = _contentClip.messagePanelContainer_mc;				}								public function set loadingAssetViewClip( clip:LoadingAssetView ):void { _loadingAssetViewClip = clip; }				public function get messagesPanelClip():MessagesPanel { return _messagesPanelClip; }								override public function init():void				{					super.init();				}							/** show			  *	---------------------------------------------------------------------------- */				override public function show():void				{					//getAllMessages();										if( _isMessagePanelAssetLoaded )					{						getAllMessages();					}					else					{						_loadingAssetViewClip.showLoadingProgress();												MainGameController.getInstance().urgentAssetLoaderController.addEventListener( AssetLoaderEvent.COMPLETE, handleLoadMessagePanelAssetComplete );						MainGameController.getInstance().urgentAssetLoaderController.addEventListener( AssetLoaderEvent.ERROR, handleLoadMessagePanelAssetError );						MainGameController.getInstance().urgentAssetLoaderController.loadAssets( [{id:"MessagesPanelAssetSwf", url:"MessagesPanel.swf"}] );					}										super.show();									}							/** hide			  *	---------------------------------------------------------------------------- */				override public function hide():void				{					super.hide();										_messagesPanelClip.reset();										dispatchEvent( new BoogaEvent(BoogaEvent.ON_POPUP_HIDE) );				}							/** handleLoadMessagePanelAssetComplete			  *	---------------------------------------------------------------------------- */				protected function handleLoadMessagePanelAssetComplete( event:AssetLoaderEvent ):void				{					MainGameController.getInstance().urgentAssetLoaderController.removeEventListener( AssetLoaderEvent.COMPLETE, handleLoadMessagePanelAssetComplete );					MainGameController.getInstance().urgentAssetLoaderController.removeEventListener( AssetLoaderEvent.ERROR, handleLoadMessagePanelAssetError );										_isMessagePanelAssetLoaded = true;										_messagesPanelClip = new MessagesPanel();					_messagesPanelClip.contentClip = new (getDefinitionByName("MessagesPanelLibrary") as Class)();					_messagesPanelClip.init();					_messagesPanelClip.addEventListener( "onExitClicked", handleMessagesPanelExit );					messagePanelContainer_mc.addChild( _messagesPanelClip.contentClip );										getAllMessages();				}							/** handleLoadMessagePanelAssetError			  *	---------------------------------------------------------------------------- */				protected function handleLoadMessagePanelAssetError( event:AssetLoaderEvent ):void				{					MainGameController.getInstance().urgentAssetLoaderController.removeEventListener( AssetLoaderEvent.COMPLETE, handleLoadMessagePanelAssetComplete );					MainGameController.getInstance().urgentAssetLoaderController.removeEventListener( AssetLoaderEvent.ERROR, handleLoadMessagePanelAssetError );				}							/** getAllMessages			  *	---------------------------------------------------------------------------- *			  *	Get all messages from the database for user.			  *	---------------------------------------------------------------------------- */				public function getAllMessages():void				{					_loadingAssetViewClip.showLoadingProgress();										_messagesPanelClip.reset();										var getAllMessages_mdc:MessageDataController = new MessageDataController();						getAllMessages_mdc.addEventListener( "onComplete", handleGetAllMessagesComplete );						getAllMessages_mdc.addEventListener( "onError", handleGetAllMessagesError );						getAllMessages_mdc.getAllMessages( MainGameController.getInstance().currentUser.id );									}							/** handleGetAllMessagesComplete			  *	---------------------------------------------------------------------------- */				protected function handleGetAllMessagesComplete( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleGetAllMessagesComplete );					event.currentTarget.removeEventListener( "onError", handleGetAllMessagesError );										var i:int, j:int;					var result:Object = event.customParameters.result;										ConsoleBroadcaster.broadcast( "MessageView", "messages.length: "+result.messages.length );					//ConsoleBroadcaster.broadcast( "MessageView", "cryptologies.length: "+result.cryptologies.length );					ConsoleBroadcaster.broadcast( "MessageView", "gifts.length: "+result.gifts.length );										_messagesPanelClip.initMessages( result.messages, null, result.gifts );										_loadingAssetViewClip.hideLoadingProgress();				}							/** handleGetAlLMessagesError			  *	---------------------------------------------------------------------------- */				protected function handleGetAllMessagesError( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleGetAllMessagesComplete );					event.currentTarget.removeEventListener( "onError", handleGetAllMessagesError );				}							/** handleMessagesPanelExit			  *	---------------------------------------------------------------------------- *			  *	Closes the message view and go back to the previous view.			  *	---------------------------------------------------------------------------- */				protected function handleMessagesPanelExit( event:CustomEvent ):void				{					hide();									}		}	}