/** AdventureLevelPopupView  *	---------------------------------------------------------------------------- *  *	@author:  *		Christian Widodo [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.maingame	{		import flash.display.MovieClip;		import flash.display.StageDisplayState;		import flash.events.Event;		import flash.events.EventDispatcher;		import flash.events.TimerEvent;		import flash.geom.Point;		import flash.text.TextField;		import flash.text.TextFieldAutoSize;		import flash.utils.Timer;				import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.navigation.NavigationController;		import com.avatarlabs.utils.sound.SoundEffectPlayer;		import com.avatarlabs.utils.text.TextFormatting;		import com.avatarlabs.utils.userinterface.DynamicUIButton;		import com.avatarlabs.utils.userinterface.DynamicUIScroller;		import com.avatarlabs.utils.userinterface.DynamicUISlider;				import com.boogabooga.controller.maingame.MainGameController;		import com.boogabooga.controller.maingame.TrackingDataController;		import com.boogabooga.data.StringsIndex;		import com.boogabooga.events.BoogaEvent;		import com.boogabooga.ui.maingame.AbstractContentView;				public class AdventureLevelPopupView extends AbstractContentView		{			protected var _exitClip:DynamicUIButton;			protected var _shareClip:DynamicUIButton;			protected var _willShowPopupView:Boolean;						/**	Stage Instances **/			public var animation_mc:MovieClip;			public var background_mc:MovieClip;			public var share_mc:MovieClip;			public var exit_mc:MovieClip;			public var score_mc:MovieClip;			public var rareArtifacts_mc:MovieClip;			public var commonArtifacts_mc:MovieClip;			public var normalDefense_mc:MovieClip;			public var specialDefense_mc:MovieClip;			public var villages_mc:MovieClip;			public var islands_mc:MovieClip;			public var enemies_mc:MovieClip;			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function AdventureLevelPopupView()				{					//init();				}								override public function set contentClip( m:MovieClip ):void				{					super.contentClip = m;					//_contentClip.mouseChildren = false;					//_contentClip.mouseEnabled = false;					_contentClip.stop();										background_mc = _contentClip.background_mc;					share_mc = _contentClip.share_mc;					exit_mc = _contentClip.exit_mc;										rareArtifacts_mc = _contentClip.rareArtifacts_mc;					commonArtifacts_mc = _contentClip.commonArtifacts_mc;					normalDefense_mc = _contentClip.normalDefense_mc;					specialDefense_mc = _contentClip.specialDefense_mc;					villages_mc = _contentClip.villages_mc;					islands_mc = _contentClip.islands_mc;					enemies_mc = _contentClip.enemies_mc;										animation_mc = _contentClip.animation_mc;					animation_mc.mouseChildren = false;					animation_mc.mouseEnabled = false;					animation_mc.stop();					score_mc = animation_mc.score_mc;									}								public function get willShowPopupView():Boolean { return _willShowPopupView; }							/** init			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				override public function init():void				{					super.init();										_willShowPopupView = false;										//EventNotificationCenter.getInstance().addEventListener( BoogaEvent.ON_ADVENTURE_LEVEL_UPDATE, handleAdventureLevelUpdate, false, 0, true );					//EventNotificationCenter.getInstance().addEventListener( BoogaEvent.ON_ADVENTURE_LEVEL_POPUP_SHOW, handleAdventureLevelShow, false, 0, true );					EventNotificationCenter.getInstance().addSignalListener( BoogaEvent.ON_ADVENTURE_LEVEL_POPUP_SHOW, handleAdventureLevelShow, this );										TextFormatting.formatTextWithFontName( rareArtifacts_mc.label_txt, StringsIndex.getInstance().getStringByName("JOURNAL_RARE_ARTIFACTS"), "Lithos Pro Black", false, TextFieldAutoSize.LEFT );					TextFormatting.formatTextWithFontName( commonArtifacts_mc.label_txt, StringsIndex.getInstance().getStringByName("JOURNAL_COMMON_ARTIFACTS"), "Lithos Pro Black", false, TextFieldAutoSize.LEFT );					TextFormatting.formatTextWithFontName( normalDefense_mc.label_txt, StringsIndex.getInstance().getStringByName("LEVEL_SETUP_TRIBAL_ITEMS"), "Lithos Pro Black", false, TextFieldAutoSize.LEFT );					TextFormatting.formatTextWithFontName( specialDefense_mc.label_txt, StringsIndex.getInstance().getStringByName("LEVEL_SETUP_SPECIAL_ITEMS"), "Lithos Pro Black", false, TextFieldAutoSize.LEFT );					TextFormatting.formatTextWithFontName( villages_mc.label_txt, StringsIndex.getInstance().getStringByName("JOURNAL_VILLAGES_SAVED"), "Lithos Pro Black", false, TextFieldAutoSize.LEFT );					TextFormatting.formatTextWithFontName( islands_mc.label_txt, StringsIndex.getInstance().getStringByName("JOURNAL_ISLANDS_SAVED"), "Lithos Pro Black", false, TextFieldAutoSize.LEFT );					TextFormatting.formatTextWithFontName( enemies_mc.label_txt, StringsIndex.getInstance().getStringByName("JOURNAL_ENEMIES"), "Lithos Pro Black", false, TextFieldAutoSize.LEFT );										_exitClip = new DynamicUIButton();					_exitClip.dynamicClip = exit_mc;					_exitClip.dynamicInit();					_exitClip.addEventListener( "onClick", handleExitClicked, false, 0, true );					_exitClip.addEventListener( "onSetFocus", handleExitRolledOver, false, 0, true );					_exitClip.addEventListener( "onKillFocus", handleExitRolledOut, false, 0, true );										_shareClip = new DynamicUIButton();					_shareClip.dynamicClip = share_mc;					_shareClip.dynamicInit();					_shareClip.addEventListener( "onClick", handleShareClicked, false, 0, true );					_shareClip.addEventListener( "onSetFocus", handleShareRolledOver, false, 0, true );					_shareClip.addEventListener( "onKillFocus", handleShareRolledOut, false, 0, true );				}							/** show			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				override public function show():void				{					_willShowPopupView = false;										TextFormatting.formatTextWithFontName( rareArtifacts_mc.value_txt, String(MainGameController.getInstance().currentUser.rareTreasuresCount), "Lithos Pro Black", false, TextFieldAutoSize.RIGHT );					TextFormatting.formatTextWithFontName( commonArtifacts_mc.value_txt, String(MainGameController.getInstance().currentUser.commonTreasuresCount), "Lithos Pro Black", false, TextFieldAutoSize.RIGHT );					TextFormatting.formatTextWithFontName( normalDefense_mc.value_txt, String(MainGameController.getInstance().currentUser.durableWeaponsCount), "Lithos Pro Black", false, TextFieldAutoSize.RIGHT );					TextFormatting.formatTextWithFontName( specialDefense_mc.value_txt, String(MainGameController.getInstance().currentUser.consumableWeaponsCount), "Lithos Pro Black", false, TextFieldAutoSize.RIGHT );					TextFormatting.formatTextWithFontName( villages_mc.value_txt, String(MainGameController.getInstance().currentUser.unlockedVillagesCount-1), "Lithos Pro Black", false, TextFieldAutoSize.RIGHT );					TextFormatting.formatTextWithFontName( islands_mc.value_txt, String(MainGameController.getInstance().currentUser.unlockedIslands.length-1), "Lithos Pro Black", false, TextFieldAutoSize.RIGHT );					TextFormatting.formatTextWithFontName( enemies_mc.value_txt, String(MainGameController.getInstance().currentUser.unlockedEnemies.length), "Lithos Pro Black", false, TextFieldAutoSize.RIGHT );										_contentClip.gotoAndPlay(1);					animation_mc.gotoAndPlay(1);										SoundEffectPlayer.getInstance().playLibrarySound( "sfx_adventure_level_up.wav", false, "sfx_adventure_level_up.wav", "sfx_adventure_level_up.wav", SoundEffectPlayer.SOUND_PLAYER_SFX );										super.show();				}							/** hide			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				override public function hide():void				{					super.hide();										//dispatchEvent( new BoogaEvent(BoogaEvent.ON_POPUP_HIDE) );					EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_ADVENTURE_LEVEL_POPUP_HIDE, this );				}							/** handleAdventureLevelUpdate			  *	---------------------------------------------------------------------------- *			  *	Updates the adventure level in the popup			  *	---------------------------------------------------------------------------- 				protected function handleAdventureLevelUpdate( event:CustomEvent ):void				{					ConsoleBroadcaster.broadcast( "AdventureLevelPopupView", "handleAdventureLevelUpdate();" );										//_contentClip.gotoAndPlay(1);					//animation_mc.gotoAndPlay(1);										_willShowPopupView = true;					TextFormatting.formatTextWithFontName( score_mc.label_txt, event.customParameters.adventureLevel, "Lithos Pro Black", false, TextFieldAutoSize.CENTER );										//show();				}*/								protected function handleAdventureLevelShow( customParameters:Object ):void				{					ConsoleBroadcaster.broadcast( "AdventureLevelPopupView", "handleTextHoverShow();" );										TextFormatting.formatTextWithFontName( score_mc.label_txt, customParameters.adventureLevel, "Lithos Pro Black", false, TextFieldAutoSize.CENTER );										show();				}							/** handleExitClicked			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function handleExitClicked( event:Event ):void				{					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav" );										var trackingDataController:TrackingDataController = new TrackingDataController();						trackingDataController.saveTrackingShare( MainGameController.getInstance().currentUser.id, "AdventureLevelUp", false, score_mc.label_txt.text );											hide();				}								protected function handleExitRolledOver( event:Event ):void				{					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav" );				}								protected function handleExitRolledOut( event:Event ):void				{									}							/** handleShareClicked			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function handleShareClicked( event:Event ):void				{					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav" );										if( _contentClip.stage.displayState == StageDisplayState.FULL_SCREEN )						_contentClip.stage.displayState = StageDisplayState.NORMAL;										var text:String = StringsIndex.getInstance().getStringByName("ADVENTURE_LEVEL_SHARE");						text = text.replace( '%%LEVEL%%', score_mc.label_txt.text );										MainGameController.getInstance().facebookFunctions.addEventListener( BoogaEvent.ON_SHARE_CANCEL, handleShareCancelled, false, 0, true );					MainGameController.getInstance().facebookFunctions.addEventListener( BoogaEvent.ON_SHARE_COMPLETE, handleShareCompleted, false, 0, true );					MainGameController.getInstance().facebookFunctions.postToWall( text );									}								protected function handleShareRolledOver( event:Event ):void				{					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav" );				}								protected function handleShareRolledOut( event:Event ):void				{									}								protected function handleShareCancelled( event:BoogaEvent ):void				{					var trackingDataController:TrackingDataController = new TrackingDataController();						trackingDataController.saveTrackingShare( MainGameController.getInstance().currentUser.id, "AdventureLevelUp", false, score_mc.label_txt.text );											hide();				}								protected function handleShareCompleted( event:BoogaEvent ):void				{					var trackingDataController:TrackingDataController = new TrackingDataController();						trackingDataController.saveTrackingShare( MainGameController.getInstance().currentUser.id, "AdventureLevelUp", true, score_mc.label_txt.text );										hide();				}		}	}