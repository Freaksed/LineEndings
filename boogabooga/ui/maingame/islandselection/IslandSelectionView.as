/** IslandSelectionView  *	---------------------------------------------------------------------------- *  *	@author:  *		Christian Widodo [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.maingame.islandselection	{		import flash.display.MovieClip;		import flash.events.Event;		import flash.events.MouseEvent;		import flash.geom.Point;		import flash.geom.Rectangle;		import flash.text.TextField;		import flash.text.TextFieldAutoSize;		import flash.ui.Mouse;		import flash.utils.getDefinitionByName;				import com.avatarlabs.utils.UtilFunctions;		import com.avatarlabs.utils.VectorUtil;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.AssetLoaderEvent;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.sound.SoundEffectPlayer;		import com.avatarlabs.utils.userinterface.DynamicUIButton;		import com.avatarlabs.utils.text.TextFormatting;		import com.avatarlabs.utils.timers.CountDown;		import org.osflash.signals.Signal;				import com.boogabooga.controller.maingame.IslandDataController;		import com.boogabooga.controller.maingame.MainGameController;		import com.boogabooga.controller.maingame.TreasureDataController;		import com.boogabooga.controller.maingame.UserDataController;		import com.boogabooga.data.SoundsIndex;		import com.boogabooga.data.StringsIndex;		import com.boogabooga.data.gamelevel.DiggingMap;		import com.boogabooga.data.gamelevel.DiggingSpots;		import com.boogabooga.data.gamelevel.GameLevelDataIndex;		import com.boogabooga.data.maingame.Island;		import com.boogabooga.data.maingame.MainGameDataIndex;		import com.boogabooga.data.maingame.Village;		import com.boogabooga.events.BoogaEvent;		import com.boogabooga.ui.maingame.AbstractContentView;		import com.boogabooga.ui.maingame.IContentView;		import com.boogabooga.ui.maingame.TableBackgroundView;		//import com.boogabooga.ui.maingame.islandselection.ArcheologyPopup;		import com.boogabooga.utils.GameLevelUtil;						public class IslandSelectionView extends AbstractContentView implements IContentView		{			protected var _displayType:int;			protected var _gameLevelIcons:Vector.<IslandSelectionGameLevelIcon>;			//protected var _cryptologyIcons:Vector.<IslandSelectionCryptologyIcon>;			//protected var _archeologyIcons:Vector.<IslandSelectionArcheologyIcon>;			protected var _island:Island;			protected var _currentIslandIndex:int;			protected var _islandBackgroundClip:MovieClip;			//protected var _userIsland:Island;			protected var _currentVillage:Village;			protected var _mouseCursorBounds:Rectangle;			protected var _isMagnifyingGlassCursorVisible:Boolean;			protected var _willShowMagnifyingGlassCursor:Boolean;			protected var _loadingBackground:Boolean;			protected var _tableBackgroundViewClip:TableBackgroundView;						//protected var _playingBackgroundMusic:Boolean;						protected var _nextIslandClip:DynamicUIButton;			protected var _prevIslandClip:DynamicUIButton;			protected var _gameLevelPopupClip:GameLevelPopup;			//protected var _archeologyPopupClip:ArcheologyPopup;			//protected var _nextExpeditionClip:IslandSelectionNextExpedition;						protected var _nextDigCountDown:CountDown;						public var onIslandChanged:Signal;						public static const DISPLAY_TYPE_GAME_LEVEL:int = 0;			public static const DISPLAY_TYPE_CRYPTOLOGY:int = 1;			public static const DISPLAY_TYPE_ARCHEOLOGY:int = 2;						/**	Stage Instances **/			public var overallDarkness_mc:MovieClip;			//public var bookLight_mc:MovieClip;			//public var magnifyingGlass_mc:MovieClip;			//public var pencil_mc:MovieClip;			//public var notepad_mc:MovieClip;			//public var flicker2_mc:MovieClip;			//public var candleFlame_mc:MovieClip;			//public var candleOnTable_mc:MovieClip;			public var sideLight2_mc:MovieClip;			public var sideLight_mc:MovieClip;			//public var candle_mc:MovieClip;			//public var compass_mc:MovieClip;			//public var angleMeasure_mc:MovieClip;			//public var backdrop_mc:MovieClip;						public var nextIsland_mc:MovieClip;			public var prevIsland_mc:MovieClip;			public var islandName_txt:TextField;			public var islandNameBackground_mc:MovieClip;			public var mapIslandContainer_mc:MovieClip;			public var mapBackground_mc:MovieClip;			//public var digBackground_mc:MovieClip;			public var giantLock_mc:MovieClip;						public var gameLevelPopup_mc:MovieClip;			//public var archeologyPopup_mc:MovieClip;			//public var archeologyOverlay_mc:MovieClip;			//public var nextExpedition_mc:MovieClip;						//public var cryptologyPopup_mc:CryptologyPopup;						public var mouseMagnifyingGlass_mc:MovieClip;			public var mouseCursorBounds_mc:MovieClip;			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function IslandSelectionView()				{									}								public function set displayType( i:int ):void { _displayType = i; }								public function get island():Island { return _island; }				public function set willShowMagnifyingGlassCursor( b:Boolean ):void { _willShowMagnifyingGlassCursor = b; }								override public function set contentClip( m:MovieClip ):void				{					super.contentClip = m;										overallDarkness_mc = _contentClip.overallDarkness_mc;					overallDarkness_mc.cacheAsBitmap = true;					//bookLight_mc = _contentClip.bookLight_mc;					//magnifyingGlass_mc = _contentClip.magnifyingGlass_mc;					//pencil_mc = _contentClip.pencil_mc;					//notepad_mc = _contentClip.notepad_mc;					//flicker2_mc = _contentClip.flicker2_mc;					//candleFlame_mc = _contentClip.candleFlame_mc;					//candleOnTable_mc = _contentClip.candleOnTable_mc;					sideLight2_mc = _contentClip.sideLight2_mc;					sideLight_mc = _contentClip.sideLight_mc;					//candle_mc = _contentClip.candle_mc;					//compass_mc = _contentClip.compass_mc;					//angleMeasure_mc = _contentClip.angleMeasure_mc;					//backdrop_mc = _contentClip.backdrop_mc;										nextIsland_mc = _contentClip.nextIsland_mc;					nextIsland_mc.cacheAsBitmap = true;					prevIsland_mc = _contentClip.prevIsland_mc;					prevIsland_mc.cacheAsBitmap = true;					islandName_txt = _contentClip.islandName_txt;					islandNameBackground_mc = _contentClip.islandNameBackground_mc;					islandNameBackground_mc.cacheAsBitmap = true;					mapIslandContainer_mc = _contentClip.mapIslandContainer_mc;					mapBackground_mc = _contentClip.mapBackground_mc;					mapBackground_mc.cacheAsBitmap = true;					gameLevelPopup_mc = _contentClip.gameLevelPopup_mc;					//archeologyPopup_mc = _contentClip.archeologyPopup_mc;					//archeologyOverlay_mc = _contentClip.archeologyOverlay_mc;					//nextExpedition_mc = _contentClip.nextExpedition_mc;					mouseMagnifyingGlass_mc = _contentClip.mouseMagnifyingGlass_mc;					mouseMagnifyingGlass_mc.cacheAsBitmap = true;					mouseCursorBounds_mc = _contentClip.mouseCursorBounds_mc;					mouseCursorBounds_mc.cacheAsBitmap = true;					mouseCursorBounds_mc.mouseChildren = false;					mouseCursorBounds_mc.mouseEnabled = false;					//digBackground_mc = _contentClip.digBackground_mc;					//digBackground_mc.cacheAsBitmap = true;					giantLock_mc = _contentClip.giantLock_mc;					giantLock_mc.visible = false;					giantLock_mc.alpha = 1;										_nextIslandClip = new DynamicUIButton();					_nextIslandClip.dynamicClip = nextIsland_mc;					_nextIslandClip.dynamicInit();										_prevIslandClip = new DynamicUIButton();					_prevIslandClip.dynamicClip = prevIsland_mc;					_prevIslandClip.dynamicInit();										_gameLevelPopupClip = new GameLevelPopup();					_gameLevelPopupClip.contentClip = gameLevelPopup_mc;					_gameLevelPopupClip.init();										//_archeologyPopupClip = new ArcheologyPopup();					//_archeologyPopupClip.contentClip = archeologyPopup_mc;					//_archeologyPopupClip.init();										//_nextExpeditionClip = new IslandSelectionNextExpedition();					//_nextExpeditionClip.contentClip = nextExpedition_mc;					//_nextExpeditionClip.init();				}								public function set tableBackgroundViewClip( t:TableBackgroundView ):void { _tableBackgroundViewClip = t; }				//public function get archeologyPopupClip():ArcheologyPopup { return _archeologyPopupClip; }				//public function get nextExpeditionClip():IslandSelectionNextExpedition { return _nextExpeditionClip; }								override public function init():void				{					super.init();										_displayType = -1;										onIslandChanged = new Signal();										//overallDarkness_mc.mouseChildren = false;					//overallDarkness_mc.mouseEnabled = false;					//bookLight_mc.mouseChildren = false;					//bookLight_mc.mouseEnabled = false;					//flicker2_mc.mouseChildren = false;					//flicker2_mc.mouseEnabled = false;					sideLight_mc.mouseChildren = false;					sideLight_mc.mouseEnabled = false;					sideLight2_mc.mouseChildren = false;					sideLight2_mc.mouseEnabled = false;										_gameLevelIcons = new Vector.<IslandSelectionGameLevelIcon>;					//_cryptologyIcons = new Vector.<IslandSelectionCryptologyIcon>;					//_archeologyIcons = new Vector.<IslandSelectionArcheologyIcon>;										_nextIslandClip.addEventListener( "onClick", showNextIsland, false, 0, true );					_nextIslandClip.addEventListener( "onSetFocus", handleNextIslandRolledOver, false, 0, true );					_nextIslandClip.addEventListener( "onKillFocus", handleNextIslandRolledOut, false, 0, true );					_prevIslandClip.addEventListener( "onClick", showPrevIsland, false, 0, true );					_prevIslandClip.addEventListener( "onSetFocus", handlePrevIslandRolledOver, false, 0, true );					_prevIslandClip.addEventListener( "onKillFocus", handlePrevIslandRolledOut, false, 0, true );										//_nextExpeditionClip.addEventListener( BoogaEvent.ON_ARCHEOLOGY_DIG_EARLY, handleArcheologyDigEarly, false, 0, true );					//_nextExpeditionClip.addEventListener( BoogaEvent.ON_ARCHEOLOGY_DIG_TIME_EXPIRED, handleArcheologyDigTimeExpired, false, 0, true );										_gameLevelPopupClip.contentClip.mouseChildren = true;					_gameLevelPopupClip.contentClip.mouseEnabled = false;					_gameLevelPopupClip.contentClip.visible = false;					//_gameLevelPopupClip.addEventListener( BoogaEvent.ON_PLAY_LEVEL, handleGameLevelPlay );					//_gameLevelPopupClip.addEventListener( BoogaEvent.ISLAND_SELECTION_POPUP_ROLLED_OUT, handlePopupRolledOut, false, 0, true );					//_gameLevelPopupClip.addEventListener( BoogaEvent.ON_POPUP_HIDE, handlePopupHid );					_gameLevelPopupClip.onPlayClicked.add( handleGameLevelPlay );					_gameLevelPopupClip.onDigClicked.add( handleDigClicked );					_gameLevelPopupClip.onDigEarlyClicked.add( handleDigEarlyClicked );					_gameLevelPopupClip.onPopupHid.add( handlePopupHid );					//_gameLevelPopupClip.onNextDigCountDownExpired.add( hideDigNextCountDown );										//cryptologyPopup_mc.mouseChildren = false;					//cryptologyPopup_mc.visible = false;					//cryptologyPopup_mc.addEventListener( BoogaEvent.ISLAND_SELECTION_POPUP_ROLLED_OUT, handlePopupRolledOut, false, 0, true );										//archeologyOverlay_mc.mouseChildren = false;					//archeologyOverlay_mc.mouseEnabled = false;					//archeologyOverlay_mc.visible = false;										//_archeologyPopupClip.contentClip.visible = false;					//_archeologyPopupClip.addEventListener( BoogaEvent.ISLAND_SELECTION_POPUP_ROLLED_OUT, handlePopupRolledOut, false, 0, true );					//_archeologyPopupClip.addEventListener( BoogaEvent.ON_ARCHEOLOGY_DIG, handleArcheologyDig, false, 0, true );					//_archeologyPopupClip.addEventListener( BoogaEvent.ON_ARCHEOLOGY_DIG_EARLY, handleArcheologyDigEarly, false, 0, true );					//_archeologyPopupClip.addEventListener( BoogaEvent.ON_POPUP_HIDE, handlePopupHid );										mouseMagnifyingGlass_mc.visible = false;					mouseMagnifyingGlass_mc.mouseChildren = false;					mouseMagnifyingGlass_mc.mouseEnabled = false;										_mouseCursorBounds = mouseCursorBounds_mc.getBounds(_contentClip);					mouseCursorBounds_mc.alpha = 0;										_isMagnifyingGlassCursorVisible = false;					_willShowMagnifyingGlassCursor = true;				}							/** show			  *	---------------------------------------------------------------------------- *			  *	Shows the view.			  *	---------------------------------------------------------------------------- */				override public function show():void				{					ConsoleBroadcaster.broadcast( "IslandSelectionView", "show();" );										super.show();										_tableBackgroundViewClip.show();										showMagnifyingGlassMouseCursor();					/*					trace( "_playingBackgroundMusic: "+_playingBackgroundMusic );										if( !_playingBackgroundMusic )					{						_playingBackgroundMusic = true;												//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("music_loop_store_map_dig_journal.wav").volume, 0, "music_loop_store_map_dig_journal.wav" );						SoundEffectPlayer.getInstance().playLibrarySound( "music_loop_store_map_dig_journal.wav", true, "music_loop_store_map_dig_journal.wav", "music_loop_store_map_dig_journal.wav", SoundEffectPlayer.SOUND_PLAYER_MUSIC );												//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_map_screen_fire_crackling_loop.wav").volume, 0, "sfx_map_screen_fire_crackling_loop.wav" );						//SoundEffectPlayer.getInstance().playLibrarySound( "sfx_map_screen_fire_crackling_loop.wav", true, "sfx_map_screen_fire_crackling_loop.wav", "sfx_map_screen_fire_crackling_loop.wav", SoundEffectPlayer.SOUND_PLAYER_MUSIC );					}					*/				}							/** viewDidAppear			  *	---------------------------------------------------------------------------- *			  *	This function is called when the view appears.			  *	---------------------------------------------------------------------------- */				override protected function viewDidAppear():void				{					//bookLight_mc.play();					//flicker2_mc.play();					//candleFlame_mc.play();					sideLight2_mc.play();					sideLight_mc.play();					//candle_mc.play();										super.viewDidAppear();				}							/** hide			  *	---------------------------------------------------------------------------- *			  *	Hides the view.			  *	---------------------------------------------------------------------------- */				override public function hide():void				{					ConsoleBroadcaster.broadcast( "IslandSelectionView", "hide();" );										super.hide();										_tableBackgroundViewClip.hide();										//_contentClip.visible = false;										_gameLevelPopupClip.hide();										//_archeologyPopupClip.hide();					_gameLevelPopupClip.hide();					//_nextExpeditionClip.hide();										hideMagnifyingGlassMouseCursor();										for( var i:int=0; i < _gameLevelIcons.length; ++i )					{						//if( _gameLevelIcons[i].type == IslandSelectionIcon.ICON_TYPE_ACTION )						//{							_gameLevelIcons[i].hide();						//}					}										//_playingBackgroundMusic = false;					/*					SoundEffectPlayer.getInstance().stopSound( "music_loop_store_map_dig_journal.wav", "music_loop_store_map_dig_journal.wav", "music_loop_store_map_dig_journal.wav", SoundEffectPlayer.SOUND_PLAYER_MUSIC );					SoundEffectPlayer.getInstance().stopSound( "sfx_map_screen_fire_crackling_loop.wav", "sfx_map_screen_fire_crackling_loop.wav", "sfx_map_screen_fire_crackling_loop.wav", SoundEffectPlayer.SOUND_PLAYER_MUSIC );					*/				}							/** viewDidDisappear			  *	---------------------------------------------------------------------------- *			  *	This function is called when the view disappears.			  *	---------------------------------------------------------------------------- */				override protected function viewDidDisappear():void				{					super.viewDidDisappear();										//bookLight_mc.stop();					//flicker2_mc.stop();					//candleFlame_mc.stop();					sideLight2_mc.stop();					sideLight_mc.stop();					//candle_mc.stop();				}							/** initIsland			  *	---------------------------------------------------------------------------- *			  *	Initializes IslandSelectionView, loads the background asset.			  *	---------------------------------------------------------------------------- */				public function initIsland( island:Island ):void				{					ConsoleBroadcaster.broadcast( "IslandSelectionView", "initIsland("+island+");" );										if( _island != null )						resetIsland();										_loadingBackground = true;										if( _nextDigCountDown )						_nextDigCountDown.stopCountDown();										_island = island;					MainGameController.getInstance().islandSelectionViewCurrentIslandId = _island.id;										toggleUI();										TextFormatting.formatTextWithFontName( islandName_txt, _island.name, "Lithos Pro Black", false, TextFieldAutoSize.CENTER );										MainGameController.getInstance().assetLoaderController.addEventListener( AssetLoaderEvent.COMPLETE, handleLoadIslandBackgroundComplete );					MainGameController.getInstance().assetLoaderController.addEventListener( AssetLoaderEvent.ERROR, handleLoadIslandBackgroundError );					MainGameController.getInstance().assetLoaderController.loadAssets( [{id:"IslandBg_"+island.id, url:island.backgroundURL}] );										//TextFormatting.formatTextWithFontName( archeologyOverlay_mc.commonTreasureCount_txt, "0/0", "SF Fedora" );					//TextFormatting.formatTextWithFontName( archeologyOverlay_mc.rareTreasureCount_txt, "0/0", "SF Fedora" );					//TextFormatting.formatTextWithFontName( archeologyOverlay_mc.commonTreasureCount_txt, "0/0", "Lithos Pro Black" );					//TextFormatting.formatTextWithFontName( archeologyOverlay_mc.rareTreasureCount_txt, "0/0", "Lithos Pro Black" );				}							/** handleLoadIslandBackgroundComplete			  *	---------------------------------------------------------------------------- *			  *	Finished loading background. Creates or reuses game level icons,			  *	archeology icons, and cryptology icons.			  *	---------------------------------------------------------------------------- */				protected function handleLoadIslandBackgroundComplete( event:AssetLoaderEvent ):void				{					ConsoleBroadcaster.broadcast( "IslandSelectionView", "handleLoadIslandBackgroundComplete();" );										MainGameController.getInstance().assetLoaderController.removeEventListener( AssetLoaderEvent.COMPLETE, handleLoadIslandBackgroundComplete );					MainGameController.getInstance().assetLoaderController.removeEventListener( AssetLoaderEvent.ERROR, handleLoadIslandBackgroundError );										_islandBackgroundClip = new (getDefinitionByName(_island.backgroundLinkageId) as Class)();					_loadingBackground = false;										var i:int;					// turns off those markers					for( i=0; i<_island.villages.length; ++i )					{						_islandBackgroundClip["village"+(i+1)+"_mc"].visible = false;					}										mapIslandContainer_mc.addChild( _islandBackgroundClip );					_islandBackgroundClip.cacheAsBitmap = true;										var gameLevelIcon:IslandSelectionGameLevelIcon;					var gameLevelIconContentClass:Class = getDefinitionByName("IslandSelection.gameLevelIcon") as Class;					//var cryptologyIcon:IslandSelectionCryptologyIcon;					//var cryptologyIconContentClass:Class = getDefinitionByName("IslandSelection.cryptologyIcon") as Class;					//var archeologyIcon:IslandSelectionArcheologyIcon;					//var archeologyIconContentClass:Class = getDefinitionByName("IslandSelection.archeologyIcon") as Class;					//var iconClip:DynamicUIButton;										for( i=0; i<_island.villages.length; ++i )					{						//iconClip = new DynamicUIButton();						//iconClip.dynamicClip = new gameLevelIconContentClass();						//iconClip.dynamicInit();						//iconClip.dynamicClip.mouseChildren = false;												if( i >= _gameLevelIcons.length )						{							gameLevelIcon = new IslandSelectionGameLevelIcon();							gameLevelIcon.dynamicClip = new gameLevelIconContentClass();							gameLevelIcon.dynamicInit();							gameLevelIcon.addEventListener( BoogaEvent.ISLAND_SELECTION_ICON_CLICK, handleIconClicked, false, 0, true );							//gameLevelIcon.addEventListener( BoogaEvent.ISLAND_SELECTION_ICON_ROLLED_OVER, handleIconRolledOver, false, 0, true );							gameLevelIcon.dynamicClip.cacheAsBitmap = true;														_gameLevelIcons.push( gameLevelIcon );						}						else							gameLevelIcon = _gameLevelIcons[i];												gameLevelIcon.dynamicClip.x = _islandBackgroundClip["village"+(i+1)+"_mc"].x;						gameLevelIcon.dynamicClip.y = _islandBackgroundClip["village"+(i+1)+"_mc"].y;						gameLevelIcon.dynamicClip.visible = false;						gameLevelIcon.village = _island.villages[i];						gameLevelIcon.type = IslandSelectionIcon.ICON_TYPE_LOCK;						mapIslandContainer_mc.addChild( gameLevelIcon.dynamicClip );						gameLevelIcon.show();												//trace( "game level icon "+i+" x: "+gameLevelIcon.dynamicClip.x );						//trace( "game level icon "+i+" y: "+gameLevelIcon.dynamicClip.y );																		/*						cryptologyIcon = new IslandSelectionCryptologyIcon();						cryptologyIcon.contentClip = new cryptologyIconContentClass();						cryptologyIcon.contentClip.x = _islandBackgroundClip["village"+(i+1)+"_mc"].x;						cryptologyIcon.contentClip.y = _islandBackgroundClip["village"+(i+1)+"_mc"].y;						cryptologyIcon.contentClip.visible = false;						cryptologyIcon.village = _island.villages[i];						cryptologyIcon.type = IslandSelectionIcon.ICON_TYPE_LOCK;						cryptologyIcon.addEventListener( BoogaEvent.ISLAND_SELECTION_ICON_CLICK, handleIconClicked, false, 0, true );						//cryptologyIcon.addEventListener( BoogaEvent.ISLAND_SELECTION_ICON_ROLLED_OVER, handleIconRolledOver, false, 0, true );						mapIslandContainer_mc.addChild( cryptologyIcon.contentClip );												_cryptologyIcons.push( cryptologyIcon );						*/												//iconClip = new DynamicUIButton();						//iconClip.dynamicClip = new archeologyIconContentClass();						//iconClip.dynamicInit();						//iconClip.dynamicClip.mouseChildren = false;						/*						if( i >= _archeologyIcons.length )						{							archeologyIcon = new IslandSelectionArcheologyIcon();							archeologyIcon.dynamicClip = new archeologyIconContentClass();							archeologyIcon.dynamicInit();							archeologyIcon.addEventListener( BoogaEvent.ISLAND_SELECTION_ICON_CLICK, handleIconClicked, false, 0, true );							//archeologyIcon.addEventListener( BoogaEvent.ISLAND_SELECTION_ICON_ROLLED_OVER, handleIconRolledOver, false, 0, true );							archeologyIcon.dynamicClip.cacheAsBitmap = true;														_archeologyIcons.push( archeologyIcon );						}						else							archeologyIcon = _archeologyIcons[i];												archeologyIcon.dynamicClip.x = _islandBackgroundClip["village"+(i+1)+"_mc"].x;						archeologyIcon.dynamicClip.y = _islandBackgroundClip["village"+(i+1)+"_mc"].y;						archeologyIcon.dynamicClip.visible = false;						archeologyIcon.village = _island.villages[i];						archeologyIcon.type = IslandSelectionIcon.ICON_TYPE_LOCK;						mapIslandContainer_mc.addChild( archeologyIcon.dynamicClip );						archeologyIcon.show();						*/						//trace( "archeology icon "+i+" x: "+archeologyIcon.dynamicClip.x );						//trace( "archeology icon "+i+" y: "+archeologyIcon.dynamicClip.y );											}										//trace( "_gameLevelIcons.length: "+_gameLevelIcons.length );					//trace( _gameLevelIcons[16].dynamicClip.alpha );					//trace( _gameLevelIcons[16].dynamicClip.visible );					//trace( "_archeologyIcons.length: "+_archeologyIcons.length );					//trace( _archeologyIcons[16].dynamicClip.alpha );					//trace( _archeologyIcons[16].dynamicClip.visible );										switch( _displayType )					{						case DISPLAY_TYPE_GAME_LEVEL:							showGameLevelView();							break;						/*						case DISPLAY_TYPE_CRYPTOLOGY:							showCryptologyView();							break;						*/						/*case DISPLAY_TYPE_ARCHEOLOGY:							showArcheologyView();							break;*/					}				}							/** handleLoadIslandBackgroundError			  *	---------------------------------------------------------------------------- */				protected function handleLoadIslandBackgroundError( event:AssetLoaderEvent ):void				{					ConsoleBroadcaster.broadcast( "IslandSelectionView", "handleLoadIslandBackgroundError();" );										MainGameController.getInstance().assetLoaderController.removeEventListener( AssetLoaderEvent.COMPLETE, handleLoadIslandBackgroundComplete );					MainGameController.getInstance().assetLoaderController.removeEventListener( AssetLoaderEvent.ERROR, handleLoadIslandBackgroundError );				}							/** resetIsland			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				public function resetIsland():void				{					ConsoleBroadcaster.broadcast( "IslandSelectionView", "resetIsland();" );										hideCurrentIcons();										_islandBackgroundClip.cacheAsBitmap = false;					mapIslandContainer_mc.removeChild( _islandBackgroundClip );					_islandBackgroundClip = null;				}							/** showGameLevelView			  *	---------------------------------------------------------------------------- *			  *	Shows the view with the game level icons.			  *	---------------------------------------------------------------------------- */				public function showGameLevelView():void				{					ConsoleBroadcaster.broadcast( "IslandSelectionView", "showGameLevelView();" );										hideCurrentIcons();										_displayType = DISPLAY_TYPE_GAME_LEVEL;										if( _loadingBackground )						return;										//digBackground_mc.visible = false;					sideLight2_mc.visible = true;					sideLight_mc.visible = true;					mapBackground_mc.visible = true;					overallDarkness_mc.visible = true;										//if( _userIsland == null || _userIsland.id != _island.id )						//_userIsland = VectorUtil.find( MainGameController.getInstance().currentUser.unlockedIslands, _island, "id" );										//trace( "_island.villages.length: "+_island.villages.length );										var userIsland:Island = MainGameController.getInstance().currentUser.getUnlockedIsland(_island.id);					var diggingMap:DiggingMap;										if( userIsland == null )					{						giantLock_mc.visible = true;					}					else					{						giantLock_mc.visible = false;					}										var gameLevelIconWithDigAvailable:IslandSelectionGameLevelIcon;										for( var i:int=0; i<_gameLevelIcons.length; ++i )					{						//trace( "_gameLevelIcons[i]: "+_gameLevelIcons[i] );						//trace( "_gameLevelIcons[i].dynamicClip: "+_gameLevelIcons[i].dynamicClip );						//_gameLevelIcons[i].dynamicClip.visible = true;												//trace( "gameLevelIcon "+i+".x: "+_gameLevelIcons[i].dynamicClip.x );						//trace( "gameLevelIcon "+i+".y: "+_gameLevelIcons[i].dynamicClip.y );												//trace( "village.name: "+userIsland.villages[i].name );						//trace( "village locked: "+userIsland.villages[i].locked );												if( i >= _island.villages.length )						{							break;						}												if( userIsland == null )						{							_gameLevelIcons[i].type = IslandSelectionIcon.ICON_TYPE_VILLAGE;						}						else if( userIsland != null && !userIsland.villages[i].locked )						{							diggingMap = MainGameController.getInstance().currentUser.getDiggingMap(userIsland.villages[i].id);														if( MainGameController.getInstance().currentUser.getUnlockedIsland(_island.id).villages[i].id == MainGameController.getInstance().currentUser.currentVillageId )							{								mapIslandContainer_mc.removeChild( _gameLevelIcons[i].dynamicClip );								mapIslandContainer_mc.addChild( _gameLevelIcons[i].dynamicClip );								_gameLevelIcons[i].type = IslandSelectionIcon.ICON_TYPE_ACTION;							}							else if( diggingMap != null && diggingMap.areAllSpotsDug() )							{								_gameLevelIcons[i].type = IslandSelectionIcon.ICON_TYPE_COMPLETE;							}							else							{								_gameLevelIcons[i].type = IslandSelectionIcon.ICON_TYPE_SHOVEL;																if( gameLevelIconWithDigAvailable == null )									gameLevelIconWithDigAvailable = _gameLevelIcons[i];							}						}						else						{							_gameLevelIcons[i].type = IslandSelectionIcon.ICON_TYPE_LOCK;						}												_gameLevelIcons[i].show();					}										//if( MainGameController.getInstance().currentUser.tutorialMap && MainGameController.getInstance().currentUser.currentVillageId == MainGameController.getInstance().currentUser.unlockedIslands[0].villages[0].id )					if( MainGameController.getInstance().currentUser.tutorialMap )					{						//trace( "tutorial map text: "+StringsIndex.getInstance().getStringByName("TUTORIAL_MAP_1") );						var globalPosition:Point = _gameLevelIcons[0].dynamicClip.parent.localToGlobal( new Point(_gameLevelIcons[0].dynamicClip.x, _gameLevelIcons[0].dynamicClip.y) );						var tutorialText:String = StringsIndex.getInstance().getStringByName("TUTORIAL_MAP_1");							tutorialText = tutorialText.replace( '%%PLAYER_NAME%%', MainGameController.getInstance().currentUser.firstName );												//trace( "globalPosition: "+globalPosition );						EventNotificationCenter.getInstance().sendNotificationWithParameters( BoogaEvent.ON_TUTORIAL_SHOW, this, {targetX:globalPosition.x, targetY:globalPosition.y, text:tutorialText, hideVillager:true} );					}					/*					else if( MainGameController.getInstance().currentUser.tutorialDig && gameLevelIconWithDigAvailable != null )					{						MainGameController.getInstance().currentUser.currentTutorialStep = "TUTORIAL_DIG_1";						var globalPosition:Point = gameLevelIconWithDigAvailable.dynamicClip.parent.localToGlobal( new Point(gameLevelIconWithDigAvailable.dynamicClip.x, gameLevelIconWithDigAvailable.dynamicClip.y) );						EventNotificationCenter.getInstance().sendNotificationWithParameters( BoogaEvent.ON_TUTORIAL_SHOW, this, {targetX:globalPosition.x, targetY:globalPosition.y, text:StringsIndex.getInstance().getStringByName("TUTORIAL_DIG_1")} );					}					*/					show();									}							/** showGameLevelPopup			  *	---------------------------------------------------------------------------- *			  *	Shows game level popup.			  *	---------------------------------------------------------------------------- */				public function showGameLevelPopup():void				{					//trace( "showGameLevelPopup with village id "+_currentVillage.id );										var gameLevelLocked:Boolean = true;					//var treasureLocked:Boolean = true;					//var cryptologyLocked:Boolean = true;					var diggingMap:DiggingMap = MainGameController.getInstance().currentUser.getDiggingMap( _currentVillage.id )										if( _currentVillage.id != MainGameController.getInstance().currentUser.currentVillageId )					{						gameLevelLocked = false;					}					/*					if( diggingMap != null && diggingMap.areAllSpotsDug() )					{						treasureLocked = false;					}					*/					/*					var cryptology:Cryptology = MainGameController.getInstance().currentUser.getUnlockedCryptology( _currentVillage.cryptologyId );					if( cryptology != null && cryptology.fullToken )					{						cryptologyLocked = false;					}					*/										ConsoleBroadcaster.broadcast( "IslandSelectionView", "currentServerUnixTime: "+MainGameController.getInstance().currentServerUnixTime );					ConsoleBroadcaster.broadcast( "IslandSelectionView", "next dig time: "+MainGameController.getInstance().currentUser.getUnlockedIsland(_island.id).nextDigTime );										var dugCommonTreasuresCount:int = 0;					var commonTreasuresCount:int = 0;					var dugRareTreasuresCount:int = 0;					var rareTreasuresCount:int = 0;					var dugConsumablesCount:int = 0;					var consumablesCount:int = 0;										if( !gameLevelLocked )					{						if( diggingMap != null )						{							diggingMap.countTreasures();							//trace( "diggingMap: "+diggingMap );							dugCommonTreasuresCount = diggingMap.dugCommonTreasuresCount;							commonTreasuresCount = diggingMap.commonTreasuresCount;							dugRareTreasuresCount = diggingMap.dugRareTreasuresCount;							rareTreasuresCount = diggingMap.rareTreasuresCount;							dugConsumablesCount = diggingMap.dugConsumablesCount;							consumablesCount = diggingMap.consumablesCount;						}						else if( GameLevelDataIndex.getInstance().getGameLevel(_currentVillage.gameLevelId) != null )						{							var diggingSpots:DiggingSpots = GameLevelDataIndex.getInstance().getGameLevel(_currentVillage.gameLevelId).diggingSpots;							//trace( "diggingSpots: "+diggingSpots );							dugCommonTreasuresCount = diggingSpots.dugCommonTreasuresCount;							commonTreasuresCount = diggingSpots.commonTreasuresCount;							dugRareTreasuresCount = diggingSpots.dugRareTreasuresCount;							rareTreasuresCount = diggingSpots.rareTreasuresCount;							dugConsumablesCount = diggingSpots.dugConsumablesCount;							consumablesCount = diggingSpots.consumablesCount;						}					}										if( MainGameController.getInstance().currentUser.getUnlockedIsland(_island.id) != null && MainGameController.getInstance().currentUser.getUnlockedIsland(_island.id).nextDigTime > MainGameController.getInstance().currentServerUnixTime )					{						//_gameLevelPopupClip.showCountDown( MainGameController.getInstance().currentServerUnixTime, MainGameController.getInstance().currentUser.getUnlockedIsland(_island.id).nextDigTime );						_gameLevelPopupClip.show( gameLevelLocked, dugCommonTreasuresCount, commonTreasuresCount, dugRareTreasuresCount, rareTreasuresCount, dugConsumablesCount, consumablesCount, true );					}					else					{						_gameLevelPopupClip.show( gameLevelLocked, dugCommonTreasuresCount, commonTreasuresCount, dugRareTreasuresCount, rareTreasuresCount, dugConsumablesCount, consumablesCount );												if( _nextDigCountDown != null )						{							_nextDigCountDown.stopCountDown();						}					}									}							/** showCryptologyView			  *	---------------------------------------------------------------------------- *			  *	Shows the view with the cryptology icons.			  *	---------------------------------------------------------------------------- */				public function startNextDigCountDown( startTime:Number, nextTime:Number ):void				{					//trace( "startNextDigCountDown("+startTime+", "+nextTime+");" );					if( _nextDigCountDown == null )					{						_nextDigCountDown = new CountDown();						_nextDigCountDown.addEventListener( "onChange", handleCountDownChanged, false, 0, true );						_nextDigCountDown.addEventListener( "onStop", handleCountDownStopped, false, 0, true );						_nextDigCountDown.delay = 1000;					}										if( !_gameLevelPopupClip.digCompleted )						_gameLevelPopupClip.setNextDigTime( nextTime-startTime );										_nextDigCountDown.startTime = startTime;					_nextDigCountDown.addTargetTime( nextTime );					_nextDigCountDown.startCountDown();									}							/** handleCountDownChanged			  *	---------------------------------------------------------------------------- *			  *	This event is fired when the countdown timer ticks.			  *	---------------------------------------------------------------------------- */				protected function handleCountDownChanged( event:CustomEvent ):void				{					ConsoleBroadcaster.broadcast( "IslandSelectionView", "handleCountDownChanged();" );										//trace( "handleCountDownChanged("+event.customParameters.remainingTime+");" );										MainGameController.getInstance().currentServerUnixTime += _nextDigCountDown.delay;										//trace( "currentServerUnixTime: "+MainGameController.getInstance().currentServerUnixTime );										//TextFormatting.formatTextWithFontName( label_txt, "NEXT DIG EXPEDITION IN "+DataTypeOperations.convertSecondsToTimeString(event.customParameters.remainingTime/1000), "SF Fedora", false, TextFieldAutoSize.CENTER );										//TextFormatting.formatTextWithFontName( nextDig_mc.label_txt, StringsIndex.getInstance().getStringByName("ARCHEOLOGIES_NEXT_DIG_EXPEDITION_IN")+" "+time, "Lithos Pro Black", false, TextFieldAutoSize.CENTER );										if( !_gameLevelPopupClip.digCompleted )						_gameLevelPopupClip.setNextDigTime( event.customParameters.remainingTime );				}							/** handleCountDownStopped			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function handleCountDownStopped( event:CustomEvent ):void				{					MainGameController.getInstance().currentServerUnixTime += _nextDigCountDown.delay*2;										//dispatchEvent( new BoogaEvent(BoogaEvent.ON_ARCHEOLOGY_DIG_TIME_EXPIRED) );					//onNextDigCountDownExpired.dispatch();					hideDigNextCountDown();				}											/** showArcheologyView			  *	---------------------------------------------------------------------------- *			  *	Shows the view with the archeology icons.			  *	---------------------------------------------------------------------------- 				public function showArcheologyView():void				{					hideCurrentIcons();										//digBackground_mc.visible = true;					sideLight2_mc.visible = false;					sideLight_mc.visible = false;					mapBackground_mc.visible = false;					overallDarkness_mc.visible = false;										_displayType = DISPLAY_TYPE_ARCHEOLOGY;										//if( _userIsland == null || _userIsland.id != _island.id )						//_userIsland = VectorUtil.find( MainGameController.getInstance().currentUser.unlockedIslands, _island, "id" );										var diggingMap:DiggingMap;					var userIsland:Island = MainGameController.getInstance().currentUser.getUnlockedIsland(_island.id);										if( userIsland == null )					{						giantLock_mc.visible = true;					}					else					{						giantLock_mc.visible = false;					}										for( var i:int=0; i<_archeologyIcons.length; ++i )					{						//_archeologyIcons[i].dynamicClip.visible = true;												//trace( "village id: "+_archeologyIcons[i].village.id );						//trace( "MainGameController.getInstance().currentUser.getUnlockedIsland(_island.id).villages[i].locked: "+MainGameController.getInstance().currentUser.getUnlockedIsland(_island.id).villages[i].locked );												if( i >= _island.villages.length )						{							break;						}												if( userIsland != null )						{							diggingMap = MainGameController.getInstance().currentUser.getDiggingMap(userIsland.villages[i].id);							if( userIsland.villages[i].locked || MainGameController.getInstance().currentUser.currentVillageId == _archeologyIcons[i].village.id )// || diggingMap == null )							{								_archeologyIcons[i].type = IslandSelectionIcon.ICON_TYPE_LOCK;							}							else if( diggingMap != null && diggingMap.areAllSpotsDug() )							{								_archeologyIcons[i].type = IslandSelectionIcon.ICON_TYPE_COMPLETE;							}							else							{								_archeologyIcons[i].type = IslandSelectionIcon.ICON_TYPE_ACTION;							}						}						else						{							_archeologyIcons[i].type = IslandSelectionIcon.ICON_TYPE_VILLAGE;						}												_archeologyIcons[i].show();					}					/*					if( MainGameController.getInstance().currentUser.tutorialDig )					{						for( i=0; i<_archeologyIcons.length; ++i )						{							if( _archeologyIcons[i].type == IslandSelectionIcon.ICON_TYPE_ACTION )							{								var globalPosition:Point = _archeologyIcons[i].dynamicClip.parent.localToGlobal( new Point(_archeologyIcons[i].dynamicClip.x, _archeologyIcons[i].dynamicClip.y) );								EventNotificationCenter.getInstance().sendNotificationWithParameters( BoogaEvent.ON_TUTORIAL_SHOW, this, {targetX:globalPosition.x, targetY:globalPosition.y, text:StringsIndex.getInstance().getStringByName("TUTORIAL_DIG_1")} );								break;							}						}					}					*					show();				}*/							/** showArcheologyNextDig			  *	---------------------------------------------------------------------------- 				public function showArcheologyNextDig():void				{					ConsoleBroadcaster.broadcast( "IslandSelectionView", "showArcheologyNextDig();" );										//trace( "nextDigTime: "+MainGameController.getInstance().currentUser.getUnlockedIsland(_island.id).nextDigTime );					//trace( "currentServerUnixTime: "+MainGameController.getInstance().currentServerUnixTime );										if( MainGameController.getInstance().currentUser.getUnlockedIsland(_island.id) != null && MainGameController.getInstance().currentUser.getUnlockedIsland(_island.id).nextDigTime > MainGameController.getInstance().currentServerUnixTime )					{						//show countdown timer						//_nextExpeditionClip.countDown.startTime = MainGameController.getInstance().currentServerUnixTime;						//_nextExpeditionClip.countDown.addTargetTime( MainGameController.getInstance().currentUser.getUnlockedIsland(_island.id).nextDigTime );						_nextExpeditionClip.show( MainGameController.getInstance().currentServerUnixTime, MainGameController.getInstance().currentUser.getUnlockedIsland(_island.id).nextDigTime );					}					else					{						_nextExpeditionClip.hide();					}									}*/				/*				protected function handleArcheologyDigTimeExpired( event:BoogaEvent ):void				{					_nextExpeditionClip.hide();										if( _archeologyPopupClip.isContentVisible && !_archeologyPopupClip.completeView )					{						_archeologyPopupClip.digEarly_mc.visible = false;						_archeologyPopupClip.dig_mc.visible = true;					}										//TODO:					//	We need to double check with the server that timer has indeed expired to avoid user trying to cheat.				}				*/							/** showArcheologyOverlay			  *	---------------------------------------------------------------------------- *			  *	Shows the archeology overlay with the number of treasures dug and the total			  *	number of treasures ( common and rare ).			  *	---------------------------------------------------------------------------- 				public function showArcheologyOverlay( dugCommonTreasuresCount:int, commonTreasuresCount:int, dugRareTreasuresCount:int, rareTreasuresCount:int ):void				{					//TextFormatting.formatTextWithFontName( archeologyOverlay_mc.commonTreasureCount_txt, dugCommonTreasuresCount+"/"+commonTreasuresCount, "SF Fedora" );					//TextFormatting.formatTextWithFontName( archeologyOverlay_mc.rareTreasureCount_txt, dugRareTreasuresCount+"/"+rareTreasuresCount, "SF Fedora" );					TextFormatting.formatTextWithFontName( archeologyOverlay_mc.commonTreasureCount_txt, dugCommonTreasuresCount+"/"+commonTreasuresCount, "Lithos Pro Black" );					TextFormatting.formatTextWithFontName( archeologyOverlay_mc.rareTreasureCount_txt, dugRareTreasuresCount+"/"+rareTreasuresCount, "Lithos Pro Black" );										archeologyOverlay_mc.visible = true;				}*/							/** showArcheologyPopup			  *	---------------------------------------------------------------------------- 				public function showArcheologyPopup():void				{					var diggingMap:DiggingMap = MainGameController.getInstance().currentUser.getDiggingMap(_currentVillage.id);										trace( "currentServerUnixTime: "+MainGameController.getInstance().currentServerUnixTime );					trace( "next dig time: "+MainGameController.getInstance().currentUser.getUnlockedIsland(_island.id).nextDigTime );										if( diggingMap != null && diggingMap.areAllSpotsDug() )					{						_archeologyPopupClip.showCompleteView();						_archeologyPopupClip.setTreasures( diggingMap.dugCommonTreasuresCount, diggingMap.commonTreasuresCount, diggingMap.dugRareTreasuresCount, diggingMap.rareTreasuresCount );					}					else if( diggingMap != null )					{						_archeologyPopupClip.showIncompleteView( MainGameController.getInstance().currentUser.getUnlockedIsland(_island.id).nextDigTime < MainGameController.getInstance().currentServerUnixTime );						_archeologyPopupClip.setTreasures( diggingMap.dugCommonTreasuresCount, diggingMap.commonTreasuresCount, diggingMap.dugRareTreasuresCount, diggingMap.rareTreasuresCount );					}					else if( GameLevelDataIndex.getInstance().getGameLevel(_currentVillage.gameLevelId) != null )					{						_archeologyPopupClip.showIncompleteView( MainGameController.getInstance().currentUser.getUnlockedIsland(_island.id).nextDigTime < MainGameController.getInstance().currentServerUnixTime );						var diggingSpots:DiggingSpots = GameLevelDataIndex.getInstance().getGameLevel(_currentVillage.gameLevelId).diggingSpots;						_archeologyPopupClip.setTreasures( diggingSpots.dugCommonTreasuresCount, diggingSpots.commonTreasuresCount, diggingSpots.dugRareTreasuresCount, diggingSpots.rareTreasuresCount );					}															_archeologyPopupClip.show();				}*/							/** hideCurrentIcons			  *	---------------------------------------------------------------------------- *			  *	Shows the view with the game level icons.			  *	---------------------------------------------------------------------------- */				public function hideCurrentIcons():void				{					var i:int;										//if( _displayType == DISPLAY_TYPE_GAME_LEVEL )					//{						for( i=0; i<_gameLevelIcons.length; ++i )						{							//_gameLevelIcons[i].dynamicClip.visible = false;							_gameLevelIcons[i].hide();						}					//}					//else if( _displayType == DISPLAY_TYPE_ARCHEOLOGY )					//{						//for( i=0; i<_archeologyIcons.length; ++i )						//{							//_archeologyIcons[i].dynamicClip.visible = false;							//_archeologyIcons[i].hide();						//}					//}					/*					else if( _displayType == DISPLAY_TYPE_CRYPTOLOGY )					{						for( i=0; i<_cryptologyIcons.length; ++i )							_cryptologyIcons[i].contentClip.visible = false;					}					*/										_gameLevelPopupClip.hide();										//archeologyOverlay_mc.visible = false;					//_archeologyPopupClip.hide();									}							/** showMagnifyingGlassMouseCursor			  *	---------------------------------------------------------------------------- *			  *	Hides the mouse icon and shows the magnifying glass, also adds the mouse move			  *	listener to the stage.			  *	---------------------------------------------------------------------------- */				public function showMagnifyingGlassMouseCursor():void				{					//trace( "showMagnifyingGlassMouseCursor();" );										if( _willShowMagnifyingGlassCursor && !_isMagnifyingGlassCursorVisible && !_gameLevelPopupClip.isContentVisible )					{						_isMagnifyingGlassCursorVisible = true;												Mouse.hide();						var localPosition:Point = _contentClip.globalToLocal( new Point(_contentClip.stage.mouseX, _contentClip.stage.mouseY) );						mouseMagnifyingGlass_mc.x = localPosition.x;						mouseMagnifyingGlass_mc.y = localPosition.y;						mouseMagnifyingGlass_mc.visible = true;						_contentClip.stage.addEventListener( MouseEvent.MOUSE_MOVE, handleMagnifyingGlassMouseCursorMoved, false, 0, true );					}				}							/** hideMagnifyingGlassMouseCursor			  *	---------------------------------------------------------------------------- *			  *	Hides the magnifying glass mouse and shows the mouse.			  *	---------------------------------------------------------------------------- */				public function hideMagnifyingGlassMouseCursor():void				{					//trace( "hideMagnifyingGlassMouseCursor();" );										if( _isMagnifyingGlassCursorVisible )					{						_isMagnifyingGlassCursorVisible = false;												_contentClip.stage.removeEventListener( MouseEvent.MOUSE_MOVE, handleMagnifyingGlassMouseCursorMoved );						Mouse.show();						mouseMagnifyingGlass_mc.visible = false;					}				}							/** handleMagnifyingGlassMouseCursorMoved			  *	---------------------------------------------------------------------------- *			  *	Shows the magnifying glass if mouse is on top of the map area, if not			  *	show the regular mouse cursor.			  *	---------------------------------------------------------------------------- */				protected function handleMagnifyingGlassMouseCursorMoved( event:MouseEvent ):void				{					//trace( "handleMagnifyingGlassMouseCursorMoved();" );										var localPosition:Point = _contentClip.globalToLocal( new Point(event.stageX, event.stageY) );					mouseMagnifyingGlass_mc.x = localPosition.x;					mouseMagnifyingGlass_mc.y = localPosition.y;										if( _mouseCursorBounds.containsPoint(localPosition) )					{						mouseMagnifyingGlass_mc.visible = true;						Mouse.hide();					}					else					{						mouseMagnifyingGlass_mc.visible = false;						Mouse.show();					}									}							/** handlePopupHid			  *	---------------------------------------------------------------------------- */				//protected function handlePopupHid( event:BoogaEvent ):void				protected function handlePopupHid():void				{					showMagnifyingGlassMouseCursor();				}							/** handleIconClicked			  *	---------------------------------------------------------------------------- */				protected function handleIconClicked( event:BoogaEvent ):void				{					ConsoleBroadcaster.broadcast( "IslandSelectionView", "handleIconClicked("+event.customParameters.village.id+");" );										_currentVillage = event.customParameters.village;										var eventType:String = "";										if( event.currentTarget is IslandSelectionGameLevelIcon )					{						//eventType = BoogaEvent.ISLAND_SELECTION_GAME_LEVEL_ICON_CLICK;												_gameLevelPopupClip.setHeader( _currentVillage.name );						calculatePopupPosition( _gameLevelPopupClip.contentClip, event.currentTarget.dynamicClip );												showGameLevelPopup();												if( MainGameController.getInstance().currentUser.tutorialMap )						{							EventNotificationCenter.getInstance().sendNotification( BoogaEvent.ON_TUTORIAL_HIDE, this );														MainGameController.getInstance().currentUser.tutorialMap = false;														var userDataController:UserDataController = new UserDataController();								userDataController.updateUserTutorial( MainGameController.getInstance().currentUser.id, "map", 0 );						}						/*						if( MainGameController.getInstance().currentUser.tutorialDig && MainGameController.getInstance().currentUser.currentTutorialStep == "TUTORIAL_DIG_1" )						{							MainGameController.getInstance().currentUser.tutorialDig = false;														EventNotificationCenter.getInstance().sendNotification( BoogaEvent.ON_TUTORIAL_HIDE, this );														var userDataController2:UserDataController = new UserDataController();								userDataController2.updateUserTutorial( MainGameController.getInstance().currentUser.id, "dig", 0 );						}						*/						dispatchEvent( new BoogaEvent(BoogaEvent.ISLAND_SELECTION_GAME_LEVEL_ICON_CLICK, event.customParameters) );					}/*					else if( event.currentTarget is IslandSelectionCryptologyIcon )					{						//eventType = BoogaEvent.ISLAND_SELECTION_CRYPTOLOGY_ICON_CLICK;												cryptologyPopup_mc.setHeader( _currentVillage.name );						calculatePopupPosition( cryptologyPopup_mc, event.currentTarget.contentClip );												//showCryptologyPopup();												var customParameters:Object = event.customParameters;							customParameters.cryptologyIconType = event.currentTarget.type;												dispatchEvent( new BoogaEvent(BoogaEvent.ISLAND_SELECTION_CRYPTOLOGY_ICON_CLICK, customParameters) );					}										else if( event.currentTarget is IslandSelectionArcheologyIcon )					{						//eventType = BoogaEvent.ISLAND_SELECTION_ARCHEOLOGY_ICON_CLICK;												_archeologyPopupClip.setHeader( _currentVillage.name );						calculatePopupPosition( _archeologyPopupClip.contentClip, event.currentTarget.dynamicClip );												showArcheologyPopup();												if( MainGameController.getInstance().currentUser.tutorialDig )						{							MainGameController.getInstance().currentUser.tutorialDig = false;														EventNotificationCenter.getInstance().sendNotification( BoogaEvent.ON_TUTORIAL_HIDE, this );														var userDataController2:UserDataController = new UserDataController();								userDataController2.updateUserTutorial( MainGameController.getInstance().currentUser.id, "dig", 0 );						}												dispatchEvent( new BoogaEvent(BoogaEvent.ISLAND_SELECTION_ARCHEOLOGY_ICON_CLICK, event.customParameters) );					}					*/					hideMagnifyingGlassMouseCursor();										//dispatchEvent( new BoogaEvent(eventType, {village:event.customParameters.village}) );										//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_click.wav").volume, 0, "sfx_mouse_click.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav" );									}							/** handleIconRolledOver			  *	---------------------------------------------------------------------------- */				protected function handleIconRolledOver( event:BoogaEvent ):void				{					ConsoleBroadcaster.broadcast( "IslandSelectionView", "handleIconRolledOver("+event.customParameters.village.id+");" );										var eventType:String = "";										_currentVillage = event.customParameters.village;										if( event.currentTarget is IslandSelectionGameLevelIcon )					{						/*						_gameLevelPopupClip.setHeader( _currentVillage.name );						calculatePopupPosition( _gameLevelPopupClip, event.currentTarget.contentClip );												showGameLevelPopup();												dispatchEvent( new BoogaEvent(BoogaEvent.ISLAND_SELECTION_GAME_LEVEL_ICON_ROLLED_OVER, event.customParameters) );						*/					}/*					else if( event.currentTarget is IslandSelectionCryptologyIcon )					{												cryptologyPopup_mc.setHeader( _currentVillage.name );						calculatePopupPosition( cryptologyPopup_mc, event.currentTarget.contentClip );												//showCryptologyPopup();												var customParameters:Object = event.customParameters;							customParameters.cryptologyIconType = event.currentTarget.type;												dispatchEvent( new BoogaEvent(BoogaEvent.ISLAND_SELECTION_CRYPTOLOGY_ICON_ROLLED_OVER, customParameters) );											}*/					/*else if( event.currentTarget is IslandSelectionArcheologyIcon )					{						//TextFormatting.formatTextWithFontName( _archeologyPopupClip.header_mc.label_txt, event.customParameters.village.name, "SF Fedora", false, TextFieldAutoSize.CENTER );												//_archeologyPopupClip.setHeader( _currentVillage.name );						//calculatePopupPosition( _archeologyPopupClip, event.currentTarget.contentClip );												//showArcheologyPopup();												//dispatchEvent( new BoogaEvent(BoogaEvent.ISLAND_SELECTION_ARCHEOLOGY_ICON_ROLLED_OVER, event.customParameters) );											}*/				}							/** handlePopupRolledOut			  *	---------------------------------------------------------------------------- */				protected function handlePopupRolledOut( event:BoogaEvent ):void				{					if( _displayType == DISPLAY_TYPE_GAME_LEVEL )					{						_gameLevelPopupClip.hide();						_gameLevelPopupClip.contentClip.x = -500;						_gameLevelPopupClip.contentClip.y = -500;					}					/*else if( _displayType == DISPLAY_TYPE_ARCHEOLOGY )					{						_archeologyPopupClip.hide();						_archeologyPopupClip.contentClip.x = -500;						_archeologyPopupClip.contentClip.y = -500;					}*/					/*					else if( _displayType == DISPLAY_TYPE_CRYPTOLOGY )					{						cryptologyPopup_mc.hide();						cryptologyPopup_mc.x = -500;						cryptologyPopup_mc.y = -500;					}					*/				}							/** handleGameLevelPlay			  *	---------------------------------------------------------------------------- *			  *	This event is fired when user clicks on the play button in the game level popup.			  *	---------------------------------------------------------------------------- */				//protected function handleGameLevelPlay( event:BoogaEvent ):void				protected function handleGameLevelPlay():void				{					_gameLevelIcons[_currentVillage.villageOrder-1].exclamationMark_mc.stop();										dispatchEvent( new BoogaEvent(BoogaEvent.ON_PLAY_LEVEL, {village:_currentVillage}) );				}								protected function handleDigClicked():void				{					ConsoleBroadcaster.broadcast( "IslandSelectionView", "handleDigClicked();" );										dispatchEvent( new BoogaEvent(BoogaEvent.ON_ARCHEOLOGY_DIG, {village:_currentVillage}) );				}								protected function handleDigEarlyClicked():void				{					_gameLevelPopupClip.hide();										hideMagnifyingGlassMouseCursor();										dispatchEvent( new BoogaEvent(BoogaEvent.ON_ARCHEOLOGY_DIG_EARLY) );				}								public function hideDigNextCountDown():void				{					if( _gameLevelPopupClip.isContentVisible && !_gameLevelPopupClip.gameLevelLocked )					{						//_archeologyPopupClip.digEarly_mc.visible = false;						//_archeologyPopupClip.dig_mc.visible = true;						_gameLevelPopupClip.digEarly_mc.visible = false;						_gameLevelPopupClip.dig_mc.visible = true;						_gameLevelPopupClip.nextDig_mc.visible = false;					}				}							/** handleArcheologyDig			  *	---------------------------------------------------------------------------- *			  *	This event is fired when user clicks on the dig button in the archeology popup.			  *	---------------------------------------------------------------------------- */				protected function handleArcheologyDig( event:BoogaEvent ):void				{					ConsoleBroadcaster.broadcast( "IslandSelectionView", "handleArcheologyDig();" );										dispatchEvent( new BoogaEvent(BoogaEvent.ON_ARCHEOLOGY_DIG, {village:_currentVillage}) );				}							/** handleArcheologyDigEarly			  *	---------------------------------------------------------------------------- *			  *	This event is fired when user clicks on the dig early button. It will prompt			  *	the facebook payment so user can bypass the cooldown timer for the digging.			  *	---------------------------------------------------------------------------- */				protected function handleArcheologyDigEarly( event:BoogaEvent ):void				{					ConsoleBroadcaster.broadcast( "IslandSelectionView", "handleArcheologyDigEarly();" );										//TODO:					//	Ask user if they're going to pay					//	If purchase is successful, update the island timer					//MainGameController.getInstance().currentUser.getUnlockedIsland(_island.id).lastDigTime = 0;					/*					MainGameController.getInstance().addEventListener( BoogaEvent.ON_PURCHASE_SUCCESS, handlePurchaseToDigEarlySuccess );					MainGameController.getInstance().addEventListener( BoogaEvent.ON_PURCHASE_FAIL, handlePurchaseToDigEarlyFail );					MainGameController.getInstance().purchaseToDigEarly();					*/										hideMagnifyingGlassMouseCursor();										dispatchEvent( new BoogaEvent(BoogaEvent.ON_ARCHEOLOGY_DIG_EARLY) );				}							/** handlePurchaseToDigEarlySuccess			  *	---------------------------------------------------------------------------- *			  *	This event is fired when the purchase to dig early is successful.			  *	---------------------------------------------------------------------------- 				protected function handlePurchaseToDigEarlySuccess( event:BoogaEvent ):void				{					ConsoleBroadcaster.broadcast( "IslandSelectionView", "handlePurchaseToDigEarlySuccess();" );										MainGameController.getInstance().removeEventListener( BoogaEvent.ON_PURCHASE_SUCCESS, handlePurchaseToDigEarlySuccess );					MainGameController.getInstance().removeEventListener( BoogaEvent.ON_PURCHASE_FAIL, handlePurchaseToDigEarlyFail );										//MainGameController.getInstance().currentUser.getUnlockedIsland(_island.id).lastDigTime = 0;										//var updateLastDigTime_idc:IslandDataController = new IslandDataController();						//updateLastDigTime_idc.addEventListener( "onComplete", handleUpdateLastDigTimeComplete );						//updateLastDigTime_idc.addEventListener( "onError", handleUpdateLastDigTimeError );						//updateLastDigTime_idc.updateLastDigTime( MainGameController.getInstance().currentUser.id, MainGameController.getInstance().currentUser.getUnlockedIsland(_island.id).id );										_archeologyPopupClip.showIncompleteView( MainGameController.getInstance().currentUser.getUnlockedIsland(_island.id).nextDigTime < MainGameController.getInstance().currentServerUnixTime );										_nextExpeditionClip.hide();				}*/							/** handlePurchaseToDigEarlyFail			  *	---------------------------------------------------------------------------- 				protected function handlePurchaseToDigEarlyFail( event:BoogaEvent ):void				{					ConsoleBroadcaster.broadcast( "IslandSelectionView", "handlePurchaseToDigEarlyFail();" );										MainGameController.getInstance().removeEventListener( BoogaEvent.ON_PURCHASE_SUCCESS, handlePurchaseToDigEarlySuccess );					MainGameController.getInstance().removeEventListener( BoogaEvent.ON_PURCHASE_FAIL, handlePurchaseToDigEarlyFail );										EventNotificationCenter.getInstance().sendNotification( BoogaEvent.LOADING_ERROR, this );										//TODO:					//	Do something when there is an error in the purchase.				}*/				/*				protected function handleUpdateLastDigTimeComplete( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleUpdateLastDigTimeComplete );					event.currentTarget.removeEventListener( "onError", handleUpdateLastDigTimeError );										if( event.customParameters.islandId == MainGameController.getInstance().currentUser.getUnlockedIsland(_island.id).id )					{						ConsoleBroadcaster.broadcast( "IslandSelectionView", "setting last dig time of user island to "+event.customParameters.lastDigTime );						MainGameController.getInstance().currentUser.getUnlockedIsland(_island.id).lastDigTime = event.customParameters.lastDigTime;					}										ConsoleBroadcaster.broadcast( "IslandSelectionView", "island.nextDigTime: "+MainGameController.getInstance().currentUser.getUnlockedIsland(_island.id).nextDigTime );					ConsoleBroadcaster.broadcast( "IslandSelectionView", "currentServerUnixTime: "+MainGameController.getInstance().currentServerUnixTime );										_archeologyPopupClip.showIncompleteView( MainGameController.getInstance().currentUser.getUnlockedIsland(_island.id).nextDigTime < MainGameController.getInstance().currentServerUnixTime );										_nextExpeditionClip.hide();									}								protected function handleUpdateLastDigTimeError( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleUpdateLastDigTimeComplete );					event.currentTarget.removeEventListener( "onError", handleUpdateLastDigTimeError );										EventNotificationCenter.getInstance().sendNotification( BoogaEvent.LOADING_ERROR, this );				}				*/							/** showNextIsland			  *	---------------------------------------------------------------------------- */				public function showNextIsland( event:Event=null ):void				{					//TODO:					//	Shows the next island and positions the game level icons					//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_click.wav").volume, 0, "sfx_mouse_click.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav" );										hideCurrentIcons();										var nextIsland:Island = MainGameDataIndex.getInstance().islands[ _island.islandOrder ];					var userIsland:Island = MainGameController.getInstance().currentUser.getUnlockedIsland( nextIsland.id );					if( userIsland != null )					{						initIsland( userIsland );					}					else					{						initIsland( nextIsland );					}					//initIsland( MainGameController.getInstance().currentUser.unlockedIslands[_island.islandOrder] );										toggleUI();					/*					if( _displayType == DISPLAY_TYPE_ARCHEOLOGY )					{						//update the archeology overlay						EventNotificationCenter.getInstance().sendNotification( BoogaEvent.ON_ISLAND_CHANGED, this );					}					*/										onIslandChanged.dispatch();				}								protected function handleNextIslandRolledOver( event:Event ):void				{					//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_rollover.wav").volume, 0, "sfx_mouse_rollover.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav" );					//EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_TEXT_HOVER_SHOW, this, {clip:_fullScreenClip.dynamicClip, text:StringsIndex.getInstance().getStringByName("PLAY_FULL_SCREEN")} );				}								protected function handleNextIslandRolledOut( event:Event ):void				{					//EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_TEXT_HOVER_HIDE, this );				}							/** showPrevIsland			  *	---------------------------------------------------------------------------- */				public function showPrevIsland( event:Event=null ):void				{					//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_click.wav").volume, 0, "sfx_mouse_click.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav" );										hideCurrentIcons();										var prevIsland:Island = MainGameDataIndex.getInstance().islands[ _island.islandOrder-2 ];					var userIsland:Island = MainGameController.getInstance().currentUser.getUnlockedIsland( prevIsland.id );					if( userIsland != null )					{						initIsland( userIsland );					}					else					{						initIsland( prevIsland );					}										toggleUI();					/*					if( _displayType == DISPLAY_TYPE_ARCHEOLOGY )					{						//update the archeology overlay						EventNotificationCenter.getInstance().sendNotification( BoogaEvent.ON_ISLAND_CHANGED, this );					}					*/										onIslandChanged.dispatch();				}								protected function handlePrevIslandRolledOver( event:Event ):void				{					//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_rollover.wav").volume, 0, "sfx_mouse_rollover.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav" );					//EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_TEXT_HOVER_SHOW, this, {clip:_fullScreenClip.dynamicClip, text:StringsIndex.getInstance().getStringByName("PLAY_FULL_SCREEN")} );				}								protected function handlePrevIslandRolledOut( event:Event ):void				{					//EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_TEXT_HOVER_HIDE, this );				}								protected function toggleUI():void				{					if( _island.islandOrder == 1 )					{						_prevIslandClip.setDeactive();						GameLevelUtil.addDesaturatedFilterToMovieClip( _prevIslandClip.dynamicClip );						_prevIslandClip.dynamicClip.alpha = .3;					}					else					{						_prevIslandClip.setActive();						GameLevelUtil.removeDesaturatedFilterFromMovieClip( _prevIslandClip.dynamicClip );						_prevIslandClip.dynamicClip.alpha = 1;					}										if( _island.islandOrder == MainGameDataIndex.getInstance().islandsCount )					{						_nextIslandClip.setDeactive();						GameLevelUtil.addDesaturatedFilterToMovieClip( _nextIslandClip.dynamicClip );						_nextIslandClip.dynamicClip.alpha = .3;					}					else					{						_nextIslandClip.setActive();						GameLevelUtil.removeDesaturatedFilterFromMovieClip( _nextIslandClip.dynamicClip );						_nextIslandClip.dynamicClip.alpha = 1;					}				}							/** calculatePopupPosition			  *	---------------------------------------------------------------------------- */				public function calculatePopupPosition( popupClip:MovieClip, icon:MovieClip ):void				{					//trace( "calculatePopupPosition();" );										var iconPosition:Point = UtilFunctions.localToLocal( icon, _contentClip );										//TODO:					//	Calculate if there are enough space for the popup.					//	Position it using the different backgrounds based on the space.										popupClip.x = iconPosition.x;					popupClip.y = iconPosition.y;										//return position;				}		}	}