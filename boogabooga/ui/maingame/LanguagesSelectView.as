/** LanguagesSelectView  *	---------------------------------------------------------------------------- *  *	@author:  *		Christian Widodo [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.maingame	{		import flash.display.MovieClip;		import flash.events.Event;		import flash.events.EventDispatcher;		import flash.events.TimerEvent;		import flash.geom.Point;		import flash.geom.Rectangle;		import flash.text.TextField;		import flash.text.TextFieldAutoSize;		import flash.utils.Timer;				import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.cache.AssetsIndex;		import com.avatarlabs.utils.events.AssetLoaderEvent;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.navigation.NavigationController;		import com.avatarlabs.utils.userinterface.DynamicUIButton;		import com.avatarlabs.utils.userinterface.DynamicUICheckBox;		import com.avatarlabs.utils.sound.SoundEffectPlayer;		import com.avatarlabs.utils.text.TextFormatting;				import com.boogabooga.controller.maingame.MainGameController;		import com.boogabooga.controller.maingame.UserDataController;		import com.boogabooga.data.SettingsIndex;		import com.boogabooga.data.SoundsIndex;		import com.boogabooga.data.StringsIndex;		import com.boogabooga.data.gamelevel.GameLevelDataIndex;		import com.boogabooga.data.maingame.MainGameDataIndex;		import com.boogabooga.events.BoogaEvent;		import com.boogabooga.ui.maingame.AbstractContentView;				public class LanguagesSelectView extends AbstractContentView		{			protected var _loadingAssetViewClip:LoadingAssetView;						protected var _exitClip:DynamicUIButton;			protected var _continueClip:DynamicUIButton;			protected var _language1CheckBoxClip:DynamicUICheckBox;			protected var _language2CheckBoxClip:DynamicUICheckBox;						/**	Stage Instances **/			public var header_mc:MovieClip;			public var language1_mc:MovieClip;			public var language2_mc:MovieClip;			public var background_mc:MovieClip;			public var exit_mc:MovieClip;			public var continue_mc:MovieClip;			public var language1CheckBox_mc:MovieClip;			public var language2CheckBox_mc:MovieClip;			public var blackBackground_mc:MovieClip;			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function LanguagesSelectView()				{					//init();				}								override public function set contentClip( m:MovieClip ):void				{					super.contentClip = m;										blackBackground_mc = _contentClip.blackBackground_mc;					blackBackground_mc.cacheAsBitmap = true;					header_mc = _contentClip.header_mc;					language1_mc = _contentClip.language1_mc;					language2_mc = _contentClip.language2_mc;					background_mc = _contentClip.background_mc;					background_mc.cacheAsBitmap = true;					exit_mc = _contentClip.exit_mc;					exit_mc.cacheAsBitmap = true;					continue_mc = _contentClip.continue_mc;					continue_mc.cacheAsBitmap = true;					language1CheckBox_mc = _contentClip.language1CheckBox_mc;					language1CheckBox_mc.cacheAsBitmap = true;					language2CheckBox_mc = _contentClip.language2CheckBox_mc;					language2CheckBox_mc.cacheAsBitmap = true;										_exitClip = new DynamicUIButton();					_exitClip.dynamicClip = exit_mc;					_exitClip.dynamicInit();										_continueClip = new DynamicUIButton();					_continueClip.dynamicClip = continue_mc;					_continueClip.dynamicInit();										_language1CheckBoxClip = new DynamicUICheckBox();					_language1CheckBoxClip.dynamicClip = language1CheckBox_mc;					_language1CheckBoxClip.markerClip = language1CheckBox_mc.marker_mc;					_language1CheckBoxClip.dynamicInit();										_language2CheckBoxClip = new DynamicUICheckBox();					_language2CheckBoxClip.dynamicClip = language2CheckBox_mc;					_language2CheckBoxClip.markerClip = language2CheckBox_mc.marker_mc;					_language2CheckBoxClip.dynamicInit();				}								public function set loadingAssetViewClip( clip:LoadingAssetView ):void { _loadingAssetViewClip = clip; }							/** init			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				override public function init():void				{					super.init();										_exitClip.addEventListener( "onClick", handleExitClicked, false, 0, true );					_exitClip.addEventListener( "onSetFocus", handleExitRolledOver, false, 0, true );					_exitClip.addEventListener( "onKillFocus", handleExitRolledOut, false, 0, true );										_continueClip.addEventListener( "onClick", handleContinueClicked, false, 0, true );					_continueClip.addEventListener( "onSetFocus", handleContinueRolledOver, false, 0, true );					_continueClip.addEventListener( "onKillFocus", handleContinueRolledOut, false, 0, true );										_language1CheckBoxClip.addEventListener( "onClick", handleLanguage1Checked, false, 0, true );					_language1CheckBoxClip.addEventListener( "onSetFocus", handleLanguageRolledOver, false, 0, true );					//_language1CheckBoxClip.addEventListener( "onKillFocus", handleLanguage1RolledOut, false, 0, true );					_language2CheckBoxClip.addEventListener( "onClick", handleLanguage2Checked, false, 0, true );					_language2CheckBoxClip.addEventListener( "onSetFocus", handleLanguageRolledOver, false, 0, true );										TextFormatting.formatTextWithFontName( header_mc.label_txt, StringsIndex.getInstance().getStringByName("LANGUAGES_LANGUAGES"), "Lithos Pro Black", false, TextFieldAutoSize.CENTER );					TextFormatting.formatTextWithFontName( language1_mc.label_txt, "English", "Lithos Pro Black" );					TextFormatting.formatTextWithFontName( language2_mc.label_txt, "Espanol", "Lithos Pro Black" );				}							/** show			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				override public function show():void				{					if( MainGameController.getInstance().currentUser.locale.search( SettingsIndex.LOCALE_ENGLISH ) >= 0 )					{						_language1CheckBoxClip.checked = true;						_language1CheckBoxClip.setDeactive();						language1_mc.alpha = 1;						_language2CheckBoxClip.checked = false;						_language2CheckBoxClip.setActive();						language2_mc.alpha = .5;					}					else if( MainGameController.getInstance().currentUser.locale.search( SettingsIndex.LOCALE_SPANISH ) >= 0 )					{						_language1CheckBoxClip.checked = false;						_language1CheckBoxClip.setActive();						language1_mc.alpha = .5;						_language2CheckBoxClip.checked = true;						_language2CheckBoxClip.setDeactive();						language2_mc.alpha = 1;					}					else if( MainGameController.getInstance().currentUser.locale.search( SettingsIndex.LOCALE_INDONESIAN ) >= 0 )					{											}										super.show();									}							/** hide			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				override public function hide():void				{					super.hide();										dispatchEvent( new BoogaEvent(BoogaEvent.ON_POPUP_HIDE) );				}							/** handleLanguageChanged			  *	---------------------------------------------------------------------------- */				protected function handleLanguageChanged( customParameters:Object ):void				{					TextFormatting.formatTextWithFontName( header_mc.label_txt, StringsIndex.getInstance().getStringByName("LANGUAGES_LANGUAGES"), "Lithos Pro Black", false, TextFieldAutoSize.CENTER );				}							/** handleExitClicked			  *	---------------------------------------------------------------------------- */				protected function handleExitClicked( event:Event ):void				{					//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_click.wav").volume, 0, "sfx_mouse_click.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav", SoundEffectPlayer.SOUND_PLAYER_SFX );										hide();				}							/** handleExitRolledOver			  *	---------------------------------------------------------------------------- */				protected function handleExitRolledOver( event:Event ):void				{					//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_rollover.wav").volume, 0, "sfx_mouse_rollover.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav", SoundEffectPlayer.SOUND_PLAYER_SFX );				}							/** handleExitRolledOut			  *	---------------------------------------------------------------------------- */				protected function handleExitRolledOut( event:Event ):void				{					//EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_TEXT_HOVER_HIDE );				}							/** handleContinueClicked			  *	---------------------------------------------------------------------------- */				protected function handleContinueClicked( event:Event ):void				{					var updated:Boolean = false;					//var str:String = "sdfL";										if( _language1CheckBoxClip.checked && MainGameController.getInstance().currentUser.locale.search( SettingsIndex.LOCALE_ENGLISH ) < 0 )					{						MainGameController.getInstance().currentUser.locale = SettingsIndex.LOCALE_ENGLISH;						updated = true;					}					else if( _language2CheckBoxClip.checked && MainGameController.getInstance().currentUser.locale.search( SettingsIndex.LOCALE_SPANISH ) < 0 )					{						MainGameController.getInstance().currentUser.locale = SettingsIndex.LOCALE_SPANISH;						updated = true;					}										if( updated )					{						var userDataController:UserDataController = new UserDataController();							userDataController.updateUserLocale( MainGameController.getInstance().currentUser.id, MainGameController.getInstance().currentUser.locale );												_loadingAssetViewClip.showLoadingProgress();												MainGameController.getInstance().urgentAssetLoaderController.addEventListener( AssetLoaderEvent.ERROR, handleLoadLocaleError );						MainGameController.getInstance().urgentAssetLoaderController.addEventListener( AssetLoaderEvent.COMPLETE, handleLoadLocaleComplete );						MainGameController.getInstance().urgentAssetLoaderController.addEventListener( AssetLoaderEvent.ITEM_COMPLETE, handleLoadLocaleItemComplete );						MainGameController.getInstance().urgentAssetLoaderController.loadAssets( [{id:"Locale_"+MainGameController.getInstance().currentUser.locale, url:"files/xml/copy_"+MainGameController.getInstance().currentUser.locale+".xml"} ]);					}										//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_click.wav").volume, 0, "sfx_mouse_click.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav", SoundEffectPlayer.SOUND_PLAYER_SFX );										//hide();				}							/** handleContinueRolledOver			  *	---------------------------------------------------------------------------- */				protected function handleContinueRolledOver( event:Event ):void				{					//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_rollover.wav").volume, 0, "sfx_mouse_rollover.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav", SoundEffectPlayer.SOUND_PLAYER_SFX );										EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_TEXT_HOVER_SHOW, this, {clip:_continueClip.dynamicClip, text:StringsIndex.getInstance().getStringByName("LANGUAGES_SAVE")} );				}							/** handleContinueRolledOut			  *	---------------------------------------------------------------------------- */				protected function handleContinueRolledOut( event:Event ):void				{					EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_TEXT_HOVER_HIDE, this );				}							/** handleLanguage1Checked			  *	---------------------------------------------------------------------------- */				protected function handleLanguage1Checked( event:Event ):void				{					//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_click.wav").volume, 0, "sfx_mouse_click.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav", SoundEffectPlayer.SOUND_PLAYER_SFX );										_language1CheckBoxClip.setDeactive();					language1_mc.alpha = 1;										_language2CheckBoxClip.checked = false;					_language2CheckBoxClip.setActive();					language2_mc.alpha = .5;				}								protected function handleLanguageRolledOver( event:Event ):void				{					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav", SoundEffectPlayer.SOUND_PLAYER_SFX );				}							/** handleContinueRolledOut			  *	---------------------------------------------------------------------------- */				protected function handleLanguage2Checked( event:Event ):void				{					//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_click.wav").volume, 0, "sfx_mouse_click.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav", SoundEffectPlayer.SOUND_PLAYER_SFX );										_language1CheckBoxClip.checked = false;					_language1CheckBoxClip.setActive();					language1_mc.alpha = .5;										_language2CheckBoxClip.setDeactive();					language2_mc.alpha = 1;				}								protected function handleLoadLocaleError( event:AssetLoaderEvent ):void				{					MainGameController.getInstance().urgentAssetLoaderController.removeEventListener( AssetLoaderEvent.ERROR, handleLoadLocaleError );					MainGameController.getInstance().urgentAssetLoaderController.removeEventListener( AssetLoaderEvent.COMPLETE, handleLoadLocaleComplete );					MainGameController.getInstance().urgentAssetLoaderController.removeEventListener( AssetLoaderEvent.ITEM_COMPLETE, handleLoadLocaleItemComplete );										EventNotificationCenter.getInstance().sendNotification( BoogaEvent.LOADING_ERROR, this );				}								protected function handleLoadLocaleComplete( event:AssetLoaderEvent ):void				{					MainGameController.getInstance().urgentAssetLoaderController.removeEventListener( AssetLoaderEvent.ERROR, handleLoadLocaleError );					MainGameController.getInstance().urgentAssetLoaderController.removeEventListener( AssetLoaderEvent.COMPLETE, handleLoadLocaleComplete );					MainGameController.getInstance().urgentAssetLoaderController.removeEventListener( AssetLoaderEvent.ITEM_COMPLETE, handleLoadLocaleItemComplete );										_loadingAssetViewClip.hideLoadingProgress();										hide();				}							/** handleLoadAdditionalFilesItemComplete			  *	---------------------------------------------------------------------------- */				protected function handleLoadLocaleItemComplete( event:AssetLoaderEvent ):void				{					//trace( 'handleLoadLocaleItemComplete();' );										if( event.customParameters.id == "Locale_"+MainGameController.getInstance().currentUser.locale )					{						//trace( 'done loading xml' );						//trace( "xml content "+event.customParameters.content );												var xml:XML = new XML(event.customParameters.content);						var localizations:XMLList = xml.localization;												for( var i:int=0; i<localizations.length(); ++i )						{							StringsIndex.getInstance().addString( localizations[i].id.text(), localizations[i].name.text(), localizations[i].string.text() );						}												AssetsIndex.getInstance().removeLoadedAsset( "Locale_"+MainGameController.getInstance().currentUser.locale );												GameLevelDataIndex.getInstance().buildWeaponStatistics();						GameLevelDataIndex.getInstance().buildEnemyStatistics();						GameLevelDataIndex.getInstance().buildGodStatistics();						MainGameController.getInstance().currentUser.updateItemStatistics();												handleLanguageChanged(null);												EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_LANGUAGE_CHANGED, this );					}				}						}	}