/** JournalViewDetailInfo  *	---------------------------------------------------------------------------- *  *	@author:  *		Christian Widodo [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.maingame.journal	{		import flash.display.Bitmap;		import flash.display.BitmapData;		import flash.display.Loader;		import flash.display.MovieClip;		import flash.events.Event;		import flash.events.EventDispatcher;		import flash.events.IOErrorEvent;		import flash.geom.ColorTransform;		import flash.net.URLRequest;		import flash.system.ApplicationDomain;		import flash.system.LoaderContext;		import flash.text.TextField;		import flash.text.TextFieldAutoSize;		import flash.text.TextFormat;		import flash.utils.getDefinitionByName;				import com.avatarlabs.utils.UtilFunctions;		import com.avatarlabs.utils.cache.BitmapDataManager;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.navigation.UINavigation;		import com.avatarlabs.utils.navigation.UINavigationButton;		import com.avatarlabs.utils.sound.SoundEffectPlayer;		import com.avatarlabs.utils.text.TextFormatting;		import com.avatarlabs.utils.userinterface.DynamicUIArrowedSlider;		import com.avatarlabs.utils.userinterface.DynamicUIButton;		import com.avatarlabs.utils.userinterface.DynamicUIScroller;		import com.greensock.TweenLite;		import org.osflash.signals.Signal;				import com.boogabooga.controller.maingame.MainGameController;		import com.boogabooga.data.SettingsIndex;		import com.boogabooga.data.SoundsIndex;		import com.boogabooga.data.StringsIndex;		import com.boogabooga.data.gamelevel.Enemy;		import com.boogabooga.data.gamelevel.GameLevelDataIndex;		import com.boogabooga.data.gamelevel.Weapon;		import com.boogabooga.data.maingame.MainGameDataIndex;		import com.boogabooga.data.maingame.User;		import com.boogabooga.data.gamelevel.AbstractGameObject;		import com.boogabooga.events.BoogaEvent;		import com.boogabooga.ui.maingame.AbstractContentView;		import com.boogabooga.ui.maingame.DescriptionScroller;		import com.boogabooga.ui.maingame.IContentView;		import com.boogabooga.utils.GameLevelUtil;				public class JournalViewDetailInfo extends EventDispatcher		{			protected var _contentClip:MovieClip;			protected var _currentItemListPage:int;			protected var _totalItemListPages:int;			protected var _user:User;			protected var _pageType:int;			protected var _pageFlipNumbers:int;			protected var _currentItemSelected:AbstractGameObject;						protected var _items:Vector.<JournalViewDetailInfoIcon>;						protected var _nextPageClip:DynamicUIButton;			protected var _prevPageClip:DynamicUIButton;			protected var _requestGiftClip:DynamicUIButton;			protected var _itemListNextClip:DynamicUIButton;			protected var _itemListPrevClip:DynamicUIButton;			protected var _item1Clip:JournalViewDetailInfoIcon;			protected var _item2Clip:JournalViewDetailInfoIcon;			protected var _item3Clip:JournalViewDetailInfoIcon;			protected var _item4Clip:JournalViewDetailInfoIcon;			protected var _item5Clip:JournalViewDetailInfoIcon;			protected var _item6Clip:JournalViewDetailInfoIcon;			protected var _item7Clip:JournalViewDetailInfoIcon;			protected var _item8Clip:JournalViewDetailInfoIcon;			protected var _item9Clip:JournalViewDetailInfoIcon;						protected var _itemDetailDescriptionScroller:DescriptionScroller;						private var _itemListHeaderMaxHeight:int;			private var _itemListHeaderOriginalTextFormat:TextFormat;						public var onGiftRequestSent:Signal;			public var onGiftRequestCancel:Signal;			public var onRequestInProgress:Signal;						/**	Stage Instances **/			public var pageFlipLToR_mc:MovieClip;			public var pageFlipRToL_mc:MovieClip;			public var nextPage_mc:MovieClip;			public var prevPage_mc:MovieClip;			public var itemList_mc:MovieClip;			public var itemDetail_mc:MovieClip;			public var background_mc:MovieClip;			public var requestGift_mc:MovieClip;			public var requestGiftDisabled_mc:MovieClip;						public var itemListHeader_txt:TextField;			public var itemListPage_txt:TextField;			public var itemListNext_mc:MovieClip;			public var itemListPrev_mc:MovieClip;			public var item1_mc:MovieClip;			public var item2_mc:MovieClip;			public var item3_mc:MovieClip;			public var item4_mc:MovieClip;			public var item5_mc:MovieClip;			public var item6_mc:MovieClip;			public var item7_mc:MovieClip;			public var item8_mc:MovieClip;			public var item9_mc:MovieClip;						public var itemDetailImage_mc:MovieClip;			public var itemDetailName_txt:TextField;			public var itemDetailDiscovered_txt:TextField;			//public var itemDetailDescription_txt:TextField;			public var itemDetailQuestionMark_mc:MovieClip;			public var itemDetailDescription_mc:MovieClip;			public var itemDetailElements_mc:MovieClip;			/**	End of Stage Instances **/						//public static const TYPE_CRYPTOLOGIES:int = 1;			public static const TYPE_ENEMIES:int = 0;			public static const TYPE_TREASURES:int = 1;			public static const TYPE_WEAPONS:int = 2;			public static const TYPE_GODS:int = 3;						public static const ITEMS_PER_PAGE:int = 9;						/** Constructor			  *	---------------------------------------------------------------------------- */				public function JournalViewDetailInfo()				{									}								public function set contentClip( m:MovieClip ):void				{					_contentClip = m;										pageFlipLToR_mc = _contentClip.pageFlipLToR_mc;					pageFlipRToL_mc = _contentClip.pageFlipRToL_mc;					nextPage_mc = _contentClip.nextPage_mc;					prevPage_mc = _contentClip.prevPage_mc;					itemList_mc = _contentClip.itemList_mc;					itemDetail_mc = _contentClip.itemDetail_mc;					background_mc = _contentClip.background_mc;					requestGift_mc = _contentClip.requestGift_mc;					requestGiftDisabled_mc = _contentClip.requestGiftDisabled_mc;										itemListHeader_txt = itemList_mc.itemListHeader_txt;					itemListPage_txt = itemList_mc.itemListPage_txt;					itemListNext_mc = itemList_mc.itemListNext_mc;					itemListPrev_mc = itemList_mc.itemListPrev_mc;					item1_mc = itemList_mc.item1_mc;					item2_mc = itemList_mc.item2_mc;					item3_mc = itemList_mc.item3_mc;					item4_mc = itemList_mc.item4_mc;					item5_mc = itemList_mc.item5_mc;					item6_mc = itemList_mc.item6_mc;					item7_mc = itemList_mc.item7_mc;					item8_mc = itemList_mc.item8_mc;					item9_mc = itemList_mc.item9_mc;										_itemListHeaderMaxHeight = 56;					_itemListHeaderOriginalTextFormat = UtilFunctions.clone( itemListHeader_txt.getTextFormat() ) as TextFormat;										itemDetailImage_mc = itemDetail_mc.image_mc;					itemDetailName_txt = itemDetail_mc.name_txt;					itemDetailDiscovered_txt = itemDetail_mc.discovered_txt;					//itemDetailDescription_txt = itemDetail_mc.description_txt;					itemDetailDescription_mc = itemDetail_mc.description_mc;					itemDetailDescription_mc.content_mc.label_txt.styleSheet = SettingsIndex.getInstance().fontManager.getStyleSheet();					itemDetailDescription_mc.content_mc.label_txt.autoSize = TextFieldAutoSize.CENTER;					itemDetailQuestionMark_mc = itemDetail_mc.questionMark_mc;					itemDetailQuestionMark_mc.visible = false;					itemDetailElements_mc = itemDetail_mc.elements_mc;										_itemDetailDescriptionScroller = new DescriptionScroller();					_itemDetailDescriptionScroller.dynamicClip = itemDetailDescription_mc;					_itemDetailDescriptionScroller.dynamicInit();										_nextPageClip = new DynamicUIButton();					_nextPageClip.dynamicClip = nextPage_mc;					_nextPageClip.dynamicInit();										_prevPageClip = new DynamicUIButton();					_prevPageClip.dynamicClip = prevPage_mc;					_prevPageClip.dynamicInit();										_requestGiftClip = new DynamicUIButton();					_requestGiftClip.dynamicClip = requestGift_mc;					_requestGiftClip.dynamicInit();										_itemListNextClip = new DynamicUIButton();					_itemListNextClip.dynamicClip = itemListNext_mc;					_itemListNextClip.dynamicInit();										_itemListPrevClip = new DynamicUIButton();					_itemListPrevClip.dynamicClip = itemListPrev_mc;					_itemListPrevClip.dynamicInit();										_item1Clip = new JournalViewDetailInfoIcon();					_item1Clip.dynamicClip = item1_mc;					_item1Clip.dynamicInit();										_item2Clip = new JournalViewDetailInfoIcon();					_item2Clip.dynamicClip = item2_mc;					_item2Clip.dynamicInit();										_item3Clip = new JournalViewDetailInfoIcon();					_item3Clip.dynamicClip = item3_mc;					_item3Clip.dynamicInit();										_item4Clip = new JournalViewDetailInfoIcon();					_item4Clip.dynamicClip = item4_mc;					_item4Clip.dynamicInit();										_item5Clip = new JournalViewDetailInfoIcon();					_item5Clip.dynamicClip = item5_mc;					_item5Clip.dynamicInit();										_item6Clip = new JournalViewDetailInfoIcon();					_item6Clip.dynamicClip = item6_mc;					_item6Clip.dynamicInit();										_item7Clip = new JournalViewDetailInfoIcon();					_item7Clip.dynamicClip = item7_mc;					_item7Clip.dynamicInit();										_item8Clip = new JournalViewDetailInfoIcon();					_item8Clip.dynamicClip = item8_mc;					_item8Clip.dynamicInit();										_item9Clip = new JournalViewDetailInfoIcon();					_item9Clip.dynamicClip = item9_mc;					_item9Clip.dynamicInit();									}				public function get contentClip():MovieClip { return _contentClip; }								public function init():void				{					pageFlipLToR_mc.visible = false;					pageFlipLToR_mc.gotoAndStop(1);										pageFlipRToL_mc.visible = false;					pageFlipRToL_mc.gotoAndStop(1);										_nextPageClip.addEventListener( "onClick", nextPage, false, 0, true );					_nextPageClip.addEventListener( "onSetFocus", handleNextPageRolledOver, false, 0, true );					_nextPageClip.addEventListener( "onKillFocus", handleNextPageRolledOut, false, 0, true );					_prevPageClip.addEventListener( "onClick", prevPage, false, 0, true );					_prevPageClip.addEventListener( "onSetFocus", handlePrevPageRolledOver, false, 0, true );					_prevPageClip.addEventListener( "onKillFocus", handlePrevPageRolledOut, false, 0, true );										_requestGiftClip.addEventListener( "onClick", handleRequestGiftClicked, false, 0, true );					_requestGiftClip.addEventListener( "onSetFocus", handleRequestGiftRolledOver, false, 0, true );					_requestGiftClip.addEventListener( "onKillFocus", handleRequestGiftRolledOut, false, 0, true );					_requestGiftClip.dynamicClip.visible = false;					requestGiftDisabled_mc.visible = false;										_itemListNextClip.addEventListener( "onClick", nextItemListPage, false, 0, true );					_itemListNextClip.addEventListener( "onSetFocus", handleNextItemListPageRolledOver, false, 0, true );					_itemListNextClip.addEventListener( "onKillFocus", handleNextItemListPageRolledOut, false, 0, true );					_itemListPrevClip.addEventListener( "onClick", prevItemListPage, false, 0, true );					_itemListPrevClip.addEventListener( "onSetFocus", handlePrevItemListPageRolledOver, false, 0, true );					_itemListPrevClip.addEventListener( "onKillFocus", handlePrevItemListPageRolledOut, false, 0, true );										_items = new Vector.<JournalViewDetailInfoIcon>;					_items.push( _item1Clip, _item2Clip, _item3Clip, _item4Clip, _item5Clip, _item6Clip, _item7Clip, _item8Clip, _item9Clip );										for( var i:int=0; i<_items.length; ++i )					{						_items[i].addEventListener( "onClick", handleItemClicked, false, 0, true );						_items[i].addEventListener( "onSetFocus", handleItemRolledOver, false, 0, true );						_items[i].addEventListener( "onKillFocus", handleItemRolledOut, false, 0, true );					}										itemDetail_mc.visible = false;										onGiftRequestSent = new Signal();					onGiftRequestCancel = new Signal();					onRequestInProgress = new Signal();										EventNotificationCenter.getInstance().addSignalListener( BoogaEvent.ON_LANGUAGE_CHANGED, handleLanguageChanged, this );				}							/** show			  *	---------------------------------------------------------------------------- */				public function show( user:User ):void				{					_pageType = TYPE_ENEMIES;					_currentItemListPage = 0;										initItemListValues();										_user = user;										showPage();										_contentClip.visible = true;										_pageFlipNumbers = 0;				}							/** reset			  *	---------------------------------------------------------------------------- */				public function reset():void				{					for( var i:int=0; i<_items.length; ++i )					{						_items[i].reset();					}				}							/** hide			  *	---------------------------------------------------------------------------- */				public function hide():void				{					_contentClip.visible = false;										_currentItemSelected = null;				}							/** handleRequestGiftClicked			  *	---------------------------------------------------------------------------- */				protected function handleRequestGiftClicked( event:Event ):void				{					onRequestInProgress.dispatch();										MainGameController.getInstance().onGiftRequestSent.add( handleRequestGiftSent );					MainGameController.getInstance().onGiftRequestCancel.add( handleRequestGiftCancel );					MainGameController.getInstance().requestGiftsFromFriends( _currentItemSelected, _user.fbId );				}							/** handleRequestGiftRolledOver			  *	---------------------------------------------------------------------------- */				protected function handleRequestGiftRolledOver( event:Event ):void				{					//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_rollover.wav").volume, 0, "sfx_mouse_rollover.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav" );				}							/** handleRequestGiftRolledOut			  *	---------------------------------------------------------------------------- */				protected function handleRequestGiftRolledOut( event:Event ):void				{									}								private function handleRequestGiftSent( requestsLength:int ):void				{					_user.canRequestGiftFrom = false;					MainGameController.getInstance().onGiftRequestSent.remove( handleRequestGiftSent );					MainGameController.getInstance().onGiftRequestCancel.remove( handleRequestGiftCancel );										_requestGiftClip.dynamicClip.visible = false;					requestGiftDisabled_mc.visible = true;										onGiftRequestSent.dispatch();				}								private function handleRequestGiftCancel():void				{					MainGameController.getInstance().onGiftRequestSent.remove( handleRequestGiftSent );					MainGameController.getInstance().onGiftRequestCancel.remove( handleRequestGiftCancel );										onGiftRequestCancel.dispatch();				}								protected function checkForTutorial():void				{					if( MainGameController.getInstance().currentUser.id == _user.id && MainGameController.getInstance().currentUser.tutorialJournal )					{						++_pageFlipNumbers;												if( _pageFlipNumbers >= 2 )						{							dispatchEvent( new BoogaEvent(BoogaEvent.ON_JOURNAL_SHOW_SECOND_TUTORIAL) );						}					}				}							/**	******************************************* *			  * Page types			  *	******************************************* */			 					protected function initItemListValues():void				{					switch( _pageType )					{						case TYPE_TREASURES:							_totalItemListPages = Math.ceil(MainGameDataIndex.getInstance().treasuresCount / ITEMS_PER_PAGE);							break;						/*						case TYPE_CRYPTOLOGIES:							_totalItemListPages = Math.ceil(MainGameDataIndex.getInstance().cryptologiesCount / ITEMS_PER_PAGE);							break;						*/						case TYPE_WEAPONS:							_totalItemListPages = Math.ceil(GameLevelDataIndex.getInstance().listedWeaponsCount / ITEMS_PER_PAGE);							break;												case TYPE_GODS:							_totalItemListPages = Math.ceil(GameLevelDataIndex.getInstance().godsCount / ITEMS_PER_PAGE);							break;												case TYPE_ENEMIES:							_totalItemListPages = Math.ceil(GameLevelDataIndex.getInstance().listedEnemiesCount / ITEMS_PER_PAGE);							break;					}										//trace( "_totalItemListPages: "+_totalItemListPages );				}							/** nextPage			  *	---------------------------------------------------------------------------- *			  *	Goes to the next page of the journal type.			  *	---------------------------------------------------------------------------- */				protected function nextPage( event:Event=null ):void				{					reset();										++_pageType;										_currentItemListPage = 0;					_currentItemSelected = null;					initItemListValues();										//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_click.wav").volume, 0, "sfx_mouse_click.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav" );										//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_page_turn.wav").volume, 0, "sfx_page_turn.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_page_turn.wav", false, "sfx_page_turn.wav", "sfx_page_turn.wav" );										//hide the item details					hideItemDetail();					pageFlipRToL_mc.gotoAndStop(1);					pageFlipRToL_mc.visible = true;					TweenLite.to( pageFlipRToL_mc, pageFlipRToL_mc.totalFrames, {useFrames:true, frame:pageFlipRToL_mc.totalFrames, onComplete:handleNextPageFlipComplete} );										//showPage();					//itemList_mc.visible = false;					//itemDetail_mc.visible = false;										checkForTutorial();									}								protected function handleNextPageRolledOver( event:Event ):void				{					//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_rollover.wav").volume, 0, "sfx_mouse_rollover.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav" );				}								protected function handleNextPageRolledOut( event:Event ):void				{									}								protected function handleNextPageFlipComplete():void				{					itemList_mc.visible = true;					showPage();					pageFlipRToL_mc.visible = false;				}							/** prevPage			  *	---------------------------------------------------------------------------- *			  *	Goes to the previous page of the journal type.			  *	---------------------------------------------------------------------------- */				protected function prevPage( event:Event=null ):void				{					reset();										SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav" );										if( _pageType == 0 )					{						dispatchEvent( new BoogaEvent(BoogaEvent.ON_JOURNAL_SHOW_COVER) );					}					else					{						--_pageType;												_currentItemListPage = 0;						_currentItemSelected = null;						initItemListValues();												//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_page_turn.wav").volume, 0, "sfx_page_turn.wav" );						SoundEffectPlayer.getInstance().playLibrarySound( "sfx_page_turn.wav", false, "sfx_page_turn.wav", "sfx_page_turn.wav" );												//showPage();												//hide the item details						hideItemDetail();						pageFlipLToR_mc.gotoAndStop(1);						pageFlipLToR_mc.visible = true;						TweenLite.to( pageFlipLToR_mc, pageFlipLToR_mc.totalFrames, {useFrames:true, frame:pageFlipLToR_mc.totalFrames, onComplete:handlePrevPageFlipComplete} );												checkForTutorial();					}				}								protected function handlePrevPageRolledOver( event:Event ):void				{					//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_rollover.wav").volume, 0, "sfx_mouse_rollover.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav" );									}								protected function handlePrevPageRolledOut( event:Event ):void				{									}								protected function handlePrevPageFlipComplete():void				{					itemList_mc.visible = true;					showPage();					pageFlipLToR_mc.visible = false;				}								private function updateHeaderText( s:String ):void				{					itemListHeader_txt.setTextFormat( _itemListHeaderOriginalTextFormat );										TextFormatting.formatTextWithFontName( itemListHeader_txt, s, "Lithos Pro Black", false, TextFieldAutoSize.CENTER );										var tf:TextFormat = itemListHeader_txt.getTextFormat();					while( itemListHeader_txt.height > _itemListHeaderMaxHeight )					{						tf.size = Number(tf.size) - 1;						itemListHeader_txt.setTextFormat( tf );					}				}							/** showPage			  *	---------------------------------------------------------------------------- *			  *	Shows the current journal type.			  *	---------------------------------------------------------------------------- */				protected function showPage():void				{					_requestGiftClip.dynamicClip.visible = false;					requestGiftDisabled_mc.visible = false;										toggleUI();										showItemList();										var i:int;										if( _pageType == TYPE_TREASURES )					{						//TextFormatting.formatTextWithFontName( itemListHeader_txt, "Treasures", "SF Fedora", false, TextFieldAutoSize.CENTER );						//TextFormatting.formatTextWithFontName( itemListHeader_txt, StringsIndex.getInstance().getStringByName("JOURNAL_TREASURES"), "Lithos Pro Black", false, TextFieldAutoSize.CENTER );						updateHeaderText( StringsIndex.getInstance().getStringByName("JOURNAL_TREASURES") );												//trace( "treasurescount: "+MainGameDataIndex.getInstance().treasuresCount );					}					/*					else if( _pageType == TYPE_CRYPTOLOGIES )					{						//TextFormatting.formatTextWithFontName( itemListHeader_txt, "Symbols", "SF Fedora", false, TextFieldAutoSize.CENTER );						TextFormatting.formatTextWithFontName( itemListHeader_txt, "Symbols", "Lithos Pro Black", false, TextFieldAutoSize.CENTER );												if( _currentItemSelected == null )						{							_currentItemSelected = _user.getUnlockedCryptology( MainGameDataIndex.getInstance().cryptologies[0].id );														if( _currentItemSelected == null )								_currentItemSelected = MainGameDataIndex.getInstance().cryptologies[0];							showItemDetail();						}					}					*/					else if( _pageType == TYPE_WEAPONS )					{						//TextFormatting.formatTextWithFontName( itemListHeader_txt, "Weapons", "SF Fedora", false, TextFieldAutoSize.CENTER );						//TextFormatting.formatTextWithFontName( itemListHeader_txt, StringsIndex.getInstance().getStringByName("JOURNAL_WEAPONS"), "Lithos Pro Black", false, TextFieldAutoSize.CENTER );						updateHeaderText( StringsIndex.getInstance().getStringByName('JOURNAL_WEAPONS') );												/*if( _currentItemSelected == null )						{							_currentItemSelected = _user.getUnlockedWeapon( GameLevelDataIndex.getInstance().listedWeapons[0].id );														if( _currentItemSelected == null )								_currentItemSelected = GameLevelDataIndex.getInstance().listedWeapons[0];							showItemDetail();						}*/					}					else if( _pageType == TYPE_GODS )					{						//TextFormatting.formatTextWithFontName( itemListHeader_txt, "Gods", "SF Fedora", false, TextFieldAutoSize.CENTER );						//TextFormatting.formatTextWithFontName( itemListHeader_txt, StringsIndex.getInstance().getStringByName("JOURNAL_GODS"), "Lithos Pro Black", false, TextFieldAutoSize.CENTER );						updateHeaderText( StringsIndex.getInstance().getStringByName('JOURNAL_GODS') );												/*if( _currentItemSelected == null )						{							_currentItemSelected = _user.getUnlockedGod( GameLevelDataIndex.getInstance().gods[0].id );														if( _currentItemSelected == null )								_currentItemSelected = GameLevelDataIndex.getInstance().gods[0];														if( _user.isItemUnlocked(_currentItemSelected) )								showItemDetail();													}*/					}					else if( _pageType == TYPE_ENEMIES )					{						//TextFormatting.formatTextWithFontName( itemListHeader_txt, "Enemies", "SF Fedora", false, TextFieldAutoSize.CENTER );						//TextFormatting.formatTextWithFontName( itemListHeader_txt, StringsIndex.getInstance().getStringByName("JOURNAL_ENEMIES"), "Lithos Pro Black", false, TextFieldAutoSize.CENTER );						updateHeaderText( StringsIndex.getInstance().getStringByName('JOURNAL_ENEMIES') );												/*if( _currentItemSelected == null )						{							_currentItemSelected = _user.getUnlockedEnemy( GameLevelDataIndex.getInstance().listedEnemies[0].id );														if( _currentItemSelected == null )								_currentItemSelected = GameLevelDataIndex.getInstance().listedEnemies[0];							showItemDetail();						}*/					}										if( _currentItemSelected == null )					{						for( i=0; i<ITEMS_PER_PAGE; ++i )						{							if( !_items[i].locked )							{								_currentItemSelected = _items[i].item;								_items[i].setDeactive(true);								showItemDetail();								break;							}						}					}				}							/** toggleUI			  *	---------------------------------------------------------------------------- *			  *	Toggles the previous and next page buttons on/off depending on current page.			  *	---------------------------------------------------------------------------- */				protected function toggleUI():void				{					/*					if( _pageType == 0 )					{						_prevPageClip.dynamicClip.visible = false;					}					else					{						_prevPageClip.dynamicClip.visible = true;					}					*/										if( _pageType == 3 )					{						//_nextPageClip.dynamicClip.visible = false;						_nextPageClip.setDeactive();						GameLevelUtil.addDesaturatedFilterToMovieClip( _nextPageClip.dynamicClip );						_nextPageClip.dynamicClip.alpha = .3;					}					else					{						//_nextPageClip.dynamicClip.visible = true;						_nextPageClip.setActive();						GameLevelUtil.removeDesaturatedFilterFromMovieClip( _nextPageClip.dynamicClip );						_nextPageClip.dynamicClip.alpha = 1;					}									}							/**	******************************************* *			  * Item list			  *	******************************************* */						/** nextItemListPage			  *	---------------------------------------------------------------------------- *			  *	Goes to the next page of the current item list.			  *	---------------------------------------------------------------------------- */				protected function nextItemListPage( event:Event=null ):void				{					++_currentItemListPage;					//toggleItemListUI();										showItemList();										checkForTutorial();										//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_click.wav").volume, 0, "sfx_mouse_click.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav" );				}								protected function handleNextItemListPageRolledOver( event:Event ):void				{					//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_rollover.wav").volume, 0, "sfx_mouse_rollover.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav" );				}								protected function handleNextItemListPageRolledOut( event:Event ):void				{									}							/** prevItemListPage			  *	---------------------------------------------------------------------------- *			  *	Goes to the previous page of the current item list.			  *	---------------------------------------------------------------------------- */				protected function prevItemListPage( event:Event=null ):void				{					--_currentItemListPage;					//toggleItemListUI();										showItemList();										checkForTutorial();										//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_click.wav").volume, 0, "sfx_mouse_click.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav" );									}								protected function handlePrevItemListPageRolledOver( event:Event ):void				{					//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_rollover.wav").volume, 0, "sfx_mouse_rollover.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav" );				}								protected function handlePrevItemListPageRolledOut( event:Event ):void				{									}							/** showItemList			  *	---------------------------------------------------------------------------- *			  *	Shows the current items for the current page.			  *	---------------------------------------------------------------------------- */				protected function showItemList():void				{					reset();										//_requestGiftClip.dynamicClip.visible = false;					//requestGiftDisabled_mc.visible = false;										var i:int;					//var itemIndex:int;					var offset:int = _currentItemListPage*ITEMS_PER_PAGE;										if( _pageType == TYPE_TREASURES )					{						for( i=0; i<ITEMS_PER_PAGE; ++i )						{							//trace( "displaying treasure "+(i+offset) );							if( i+offset < MainGameDataIndex.getInstance().treasuresCount )							{								if( _user.isItemUnlocked(MainGameDataIndex.getInstance().treasures[i+offset]) )								{									//_items[i].showItemView( MainGameDataIndex.getInstance().treasures[i+offset] );									_items[i].showItemView( _user.getUnlockedTreasure(MainGameDataIndex.getInstance().treasures[i+offset].id) );								}								else								{									_items[i].showLockView( MainGameDataIndex.getInstance().treasures[i+offset] );								}								_items[i].dynamicClip.visible = true;																if( _currentItemSelected != null && _currentItemSelected.id == _items[i].item.id )									_items[i].setDeactive(true);								else if( _items[i].locked )									_items[i].setDeactive(false);								else									_items[i].setActive(true);							}							else							{								_items[i].showLockView( null );								_items[i].dynamicClip.visible = false;							}						}					}					/*					else if( _pageType == TYPE_CRYPTOLOGIES )					{						for( i=0; i<ITEMS_PER_PAGE; ++i )						{							if( i+offset < MainGameDataIndex.getInstance().cryptologiesCount )							{								if( _user.isItemUnlocked(MainGameDataIndex.getInstance().cryptologies[i+offset]) )								{									//_items[i].showItemView( MainGameDataIndex.getInstance().cryptologies[i+offset] );									_items[i].showItemView( _user.getUnlockedCryptology(MainGameDataIndex.getInstance().cryptologies[i+offset].id) );								}								else								{									_items[i].showLockView( MainGameDataIndex.getInstance().cryptologies[i+offset] );								}								_items[i].visible = true;																if( _currentItemSelected.id == _items[i].item.id )									_items[i].setDeactive(true);								else									_items[i].setActive(true);							}							else							{								_items[i].visible = false;							}						}					}					*/					else if( _pageType == TYPE_WEAPONS )					{						for( i=0; i<ITEMS_PER_PAGE; ++i )						{							if( i+offset < GameLevelDataIndex.getInstance().listedWeaponsCount )							{								if( _user.isItemUnlocked(GameLevelDataIndex.getInstance().listedWeapons[i+offset]) )								{									//_items[i].showItemView( GameLevelDataIndex.getInstance().listedWeapons[i+offset] );									_items[i].showItemView( _user.getUnlockedWeapon(GameLevelDataIndex.getInstance().listedWeapons[i+offset].id) );								}								else								{									_items[i].showLockView( GameLevelDataIndex.getInstance().listedWeapons[i+offset] );								}								_items[i].dynamicClip.visible = true;																if( _currentItemSelected != null && _currentItemSelected.id == _items[i].item.id )									_items[i].setDeactive(true);								else if( _items[i].locked )									_items[i].setDeactive(false);								else									_items[i].setActive(true);							}							else							{								_items[i].showLockView( null );								_items[i].dynamicClip.visible = false;							}						}					}					else if( _pageType == TYPE_GODS )					{						for( i=0; i<ITEMS_PER_PAGE; ++i )						{							if( i+offset < GameLevelDataIndex.getInstance().godsCount )							{								if( _user.isItemUnlocked(GameLevelDataIndex.getInstance().gods[i+offset]) )								{									//_items[i].showItemView( GameLevelDataIndex.getInstance().gods[i+offset] );									_items[i].showItemView( _user.getUnlockedGod(GameLevelDataIndex.getInstance().gods[i+offset].id) );								}								else								{									_items[i].showLockView( GameLevelDataIndex.getInstance().gods[i+offset] );								}								_items[i].dynamicClip.visible = true;																if( _currentItemSelected != null && _currentItemSelected.id == _items[i].item.id )									_items[i].setDeactive(true);								else if( _items[i].locked )									_items[i].setDeactive(false);								else									_items[i].setActive(true);							}							else							{								_items[i].showLockView( null );								_items[i].dynamicClip.visible = false;							}						}					}					else if( _pageType == TYPE_ENEMIES )					{						//trace( "listedEnemiesCount: "+GameLevelDataIndex.getInstance().listedEnemiesCount );												for( i=0; i<ITEMS_PER_PAGE; ++i )						{							if( i+offset < GameLevelDataIndex.getInstance().listedEnemiesCount )							{								if( _user.isItemUnlocked(GameLevelDataIndex.getInstance().listedEnemies[i+offset]) )								{									//_items[i].showItemView( GameLevelDataIndex.getInstance().listedEnemies[i+offset] );									_items[i].showItemView( _user.getUnlockedEnemy(GameLevelDataIndex.getInstance().listedEnemies[i+offset].id) );								}								else								{									_items[i].showLockView( GameLevelDataIndex.getInstance().listedEnemies[i+offset] );								}								_items[i].dynamicClip.visible = true;																if( _currentItemSelected != null && _currentItemSelected.id == _items[i].item.id )									_items[i].setDeactive(true);								else if( _items[i].locked )									_items[i].setDeactive(false);								else									_items[i].setActive(true);							}							else							{								_items[i].showLockView( null );								_items[i].dynamicClip.visible = false;							}						}					}										toggleItemListUI();				}							/** toggleItemListUI			  *	---------------------------------------------------------------------------- *			  *	Toggles the item list previous and next buttons on/off.			  *	---------------------------------------------------------------------------- */				protected function toggleItemListUI():void				{					if( _totalItemListPages == 1 )					{						//_itemListNextClip.dynamicClip.visible = false;						//_itemListPrevClip.dynamicClip.visible = false;						//itemListPage_txt.visible = false;						_itemListPrevClip.setDeactive();						_itemListNextClip.setDeactive();						GameLevelUtil.addDesaturatedFilterToMovieClip( _itemListPrevClip.dynamicClip );						GameLevelUtil.addDesaturatedFilterToMovieClip( _itemListNextClip.dynamicClip );						_itemListPrevClip.dynamicClip.alpha = .3;						_itemListNextClip.dynamicClip.alpha = .3;					}					else					{						//TextFormatting.formatTextWithFontName( itemListPage_txt, (_currentItemListPage+1)+"/"+_totalItemListPages, "SF Fedora", false, TextFieldAutoSize.CENTER );						//itemListPage_txt.visible = true;												if( _currentItemListPage == 0 )						{							//_itemListPrevClip.dynamicClip.visible = false;							_itemListPrevClip.setDeactive();							GameLevelUtil.addDesaturatedFilterToMovieClip( _itemListPrevClip.dynamicClip );							_itemListPrevClip.dynamicClip.alpha = .3;						}						else						{							//_itemListPrevClip.dynamicClip.visible = true;							_itemListPrevClip.setActive();							GameLevelUtil.removeDesaturatedFilterFromMovieClip( _itemListPrevClip.dynamicClip );							_itemListPrevClip.dynamicClip.alpha = 1;						}												if( _currentItemListPage < _totalItemListPages-1 )						{							//_itemListNextClip.dynamicClip.visible = true;							_itemListNextClip.setActive();							GameLevelUtil.removeDesaturatedFilterFromMovieClip( _itemListNextClip.dynamicClip );							_itemListNextClip.dynamicClip.alpha = 1;						}						else						{							//_itemListNextClip.dynamicClip.visible = false;							_itemListNextClip.setDeactive();							GameLevelUtil.addDesaturatedFilterToMovieClip( _itemListNextClip.dynamicClip );							_itemListNextClip.dynamicClip.alpha = .3;						}					}										TextFormatting.formatTextWithFontName( itemListPage_txt, (_currentItemListPage+1)+"/"+_totalItemListPages, "Lithos Pro Black", false, TextFieldAutoSize.CENTER );				}							/** handleItemClicked			  *	---------------------------------------------------------------------------- *			  *	User clicks on the item in the list, so show the item detail.			  *	---------------------------------------------------------------------------- */				protected function handleItemClicked( event:Event ):void				{					for( var i:int=0; i<_items.length; ++i )					{						if( !_items[i].locked )							_items[i].setActive(true);					}										event.currentTarget.setDeactive(true);										_currentItemSelected = event.currentTarget.item;										showItemDetail();										//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_click.wav").volume, 0, "sfx_mouse_click.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav" );				}								protected function handleItemRolledOver( event:Event ):void				{					//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_rollover.wav").volume, 0, "sfx_mouse_rollover.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav" );				}								protected function handleItemRolledOut( event:Event ):void				{									}							/** hideItemDetail			  *	---------------------------------------------------------------------------- *			  *	Hides the detail of an item.			  *	---------------------------------------------------------------------------- */				protected function hideItemDetail():void				{					itemList_mc.visible = false;					itemDetail_mc.visible = false;					requestGift_mc.visible = false;					requestGiftDisabled_mc.visible = false;				}							/** showItemDetail			  *	---------------------------------------------------------------------------- *			  *	Shows the detail of an item.			  *	---------------------------------------------------------------------------- */				protected function showItemDetail():void				{					_itemDetailDescriptionScroller.resetScroller();										//TextFormatting.formatTextWithFontName( itemDetailName_txt, _currentItemSelected.name, "SF Fedora", false, TextFieldAutoSize.CENTER );					//TextFormatting.formatTextWithFontName( itemDetailDescription_txt, _currentItemSelected.description, "SF Fedora", false, TextFieldAutoSize.CENTER );					TextFormatting.formatTextWithFontName( itemDetailName_txt, StringsIndex.getInstance().getString(String(_currentItemSelected.name)), "Lithos Pro Black", false, TextFieldAutoSize.CENTER );					//TextFormatting.formatTextWithFontName( itemDetailDescription_txt, StringsIndex.getInstance().getString(String(_currentItemSelected.description)), "Lithos Pro Black", false, TextFieldAutoSize.CENTER );					//TextFormatting.formatTextWithFontName( itemDetailDescription_mc.content_mc.label_txt, StringsIndex.getInstance().getString(String(_currentItemSelected.description))+'\n'+_currentItemSelected.statistic, "Lithos Pro Black", true, TextFieldAutoSize.CENTER );					itemDetailDescription_mc.content_mc.label_txt.htmlText = '<span class="font2Default">'+StringsIndex.getInstance().getString(String(_currentItemSelected.description))+'\n'+_currentItemSelected.statistic+'</span>'					_itemDetailDescriptionScroller.toggleSlider();										//trace( "_currentItemSelected statistic: "+_currentItemSelected.statistic );										while( itemDetailElements_mc.numChildren > 0 )						itemDetailElements_mc.removeChildAt(0);										var element:MovieClip;					var elementsLength:int = 0;					var startX:int = 112;					var elements:Array;										if( _currentItemSelected is Weapon )					{						elements = GameLevelUtil.getItemElements( _currentItemSelected );						elementsLength = elements.length;												//trace( "adding elements "+elementsLength );											}					else if( _currentItemSelected is Enemy )					{						elements = GameLevelUtil.getItemStrongElements( _currentItemSelected );						elementsLength = elements.length;					}										if( elementsLength > 0 )					{						if( (elementsLength & 1) == 0 )						{							//even							//startX = 93 - ((int(elementsLength/2) - 1) * -35);						}						else						{							//odd							//startX = 112 - (int(elementsLength/2) * -35);						}												//trace( "startX: "+startX );						//itemDetailElements_mc.x = startX;												for( var i:int=0; i<elementsLength; ++i )						{							element = new (getDefinitionByName(elements[i]) as Class)();							//element.width = 24;							//element.height = 25;							element.x = 0;							element.y = -35 * i;							itemDetailElements_mc.addChild( element );						}					}										if( _currentItemSelected.dateAdded != null )					{						//TextFormatting.formatTextWithFontName( itemDetailDiscovered_txt, "Discovered on "+_currentItemSelected.dateAdded.month+"/"+_currentItemSelected.dateAdded.date+"/"+_currentItemSelected.dateAdded.fullYear, "SF Fedora", false, TextFieldAutoSize.CENTER );						TextFormatting.formatTextWithFontName( itemDetailDiscovered_txt, StringsIndex.getInstance().getStringByName("JOURNAL_DISCOVERED_ON")+" "+(_currentItemSelected.dateAdded.month+1)+"/"+_currentItemSelected.dateAdded.date+"/"+_currentItemSelected.dateAdded.fullYear, "Lithos Pro Black", false, TextFieldAutoSize.CENTER );												itemDetailDiscovered_txt.y = int( itemDetailName_txt.y + itemDetailName_txt.height - 2 );						itemDetailDescription_mc.y = int( itemDetailDiscovered_txt.y + itemDetailDiscovered_txt.height + 3 );												itemDetailImage_mc.transform.colorTransform = new ColorTransform();						itemDetailQuestionMark_mc.visible = false;					}					else					{						itemDetailDiscovered_txt.text = "";						itemDetailDescription_mc.y = int( itemDetailName_txt.y + itemDetailName_txt.height + 3 );												itemDetailImage_mc.transform.colorTransform = new ColorTransform( 0, 0, 0, 1, 0, 0, 0, 0 );						itemDetailQuestionMark_mc.visible = true;					}															while( itemDetailImage_mc.numChildren > 0 )						itemDetailImage_mc.removeChildAt(0);										if( BitmapDataManager.getInstance().getBitmapData(_currentItemSelected.cacheIconId) == null )					{						/*						var iconLoader:Loader = new Loader();							iconLoader.contentLoaderInfo.addEventListener( Event.COMPLETE, handleLoadIconComplete, false, 0, true );							iconLoader.load( new URLRequest(_currentItemSelected.iconURL), new LoaderContext(false, ApplicationDomain.currentDomain) );						*/												BitmapDataManager.getInstance().addEventListener( Event.COMPLETE, handleLoadBitmapComplete );						BitmapDataManager.getInstance().addEventListener( IOErrorEvent.IO_ERROR, handleLoadBitmapError );						BitmapDataManager.getInstance().loadBitmapToCache( SettingsIndex.getInstance().contentURL+_currentItemSelected.iconURL, _currentItemSelected.cacheIconId );					}					else					{						addIconImage();					}										itemDetail_mc.visible = true;										if( _user.id != MainGameController.getInstance().currentUser.id && (_pageType == TYPE_WEAPONS || _pageType == TYPE_GODS) )					{						ConsoleBroadcaster.broadcast( "JournalViewDetailInfo", "_currentItemSelected.consumable: "+_currentItemSelected.consumable );						ConsoleBroadcaster.broadcast( "JournalViewDetailInfo", "_currentItemSelected.dateAdded: "+_currentItemSelected.dateAdded );						ConsoleBroadcaster.broadcast( "JournalViewDetailInfo", "_user.canRequestGiftFrom: "+_user.canRequestGiftFrom );												if( _currentItemSelected.consumable && _currentItemSelected.dateAdded != null )						{							if( _user.canRequestGiftFrom )							{								_requestGiftClip.dynamicClip.visible = true;								requestGiftDisabled_mc.visible = false;							}							else							{								_requestGiftClip.dynamicClip.visible = false;								requestGiftDisabled_mc.visible = true;							}						}						else						{							_requestGiftClip.dynamicClip.visible = false;							requestGiftDisabled_mc.visible = false;						}					}					else					{						_requestGiftClip.dynamicClip.visible = false;						requestGiftDisabled_mc.visible = false;					}				}								protected function handleLoadBitmapComplete( event:CustomEvent ):void				{					if( event.customParameters.cacheId == _currentItemSelected.cacheIconId )					{						BitmapDataManager.getInstance().removeEventListener( Event.COMPLETE, handleLoadBitmapComplete );						BitmapDataManager.getInstance().removeEventListener( IOErrorEvent.IO_ERROR, handleLoadBitmapError );												addIconImage();					}				}								protected function handleLoadBitmapError( event:CustomEvent ):void				{					BitmapDataManager.getInstance().removeEventListener( Event.COMPLETE, handleLoadBitmapComplete );					BitmapDataManager.getInstance().removeEventListener( IOErrorEvent.IO_ERROR, handleLoadBitmapError );				}								protected function addIconImage():void				{					if( BitmapDataManager.getInstance().getBitmapData(_currentItemSelected.cacheIconId) != null )					{						var bitmap:Bitmap = new Bitmap( BitmapDataManager.getInstance().getBitmapData(_currentItemSelected.cacheIconId).bitmapData );							bitmap.width = 120;							bitmap.height = 120;							bitmap.x = -60;							bitmap.y = -60;							bitmap.smoothing = true;												itemDetailImage_mc.addChild( bitmap );					}				}							/** handleLanguageChanged			  *	---------------------------------------------------------------------------- *			  *	When a language is changed, update the text accordingly.			  *	---------------------------------------------------------------------------- */				protected function handleLanguageChanged( customParameters:Object ):void				{					if( _pageType == TYPE_TREASURES )					{						//TextFormatting.formatTextWithFontName( itemListHeader_txt, "Treasures", "SF Fedora", false, TextFieldAutoSize.CENTER );						//TextFormatting.formatTextWithFontName( itemListHeader_txt, StringsIndex.getInstance().getStringByName("JOURNAL_TREASURES"), "Lithos Pro Black", false, TextFieldAutoSize.CENTER );						updateHeaderText( StringsIndex.getInstance().getStringByName("JOURNAL_TREASURES") );					}					else if( _pageType == TYPE_WEAPONS )					{						//TextFormatting.formatTextWithFontName( itemListHeader_txt, "Weapons", "SF Fedora", false, TextFieldAutoSize.CENTER );						//TextFormatting.formatTextWithFontName( itemListHeader_txt, StringsIndex.getInstance().getStringByName("JOURNAL_WEAPONS"), "Lithos Pro Black", false, TextFieldAutoSize.CENTER );						updateHeaderText( StringsIndex.getInstance().getStringByName("JOURNAL_WEAPONS") );					}					else if( _pageType == TYPE_GODS )					{						//TextFormatting.formatTextWithFontName( itemListHeader_txt, "Gods", "SF Fedora", false, TextFieldAutoSize.CENTER );						//TextFormatting.formatTextWithFontName( itemListHeader_txt, StringsIndex.getInstance().getStringByName("JOURNAL_GODS"), "Lithos Pro Black", false, TextFieldAutoSize.CENTER );						updateHeaderText( StringsIndex.getInstance().getStringByName("JOURNAL_GODS") );					}					else if( _pageType == TYPE_ENEMIES )					{						//TextFormatting.formatTextWithFontName( itemListHeader_txt, "Enemies", "SF Fedora", false, TextFieldAutoSize.CENTER );						//TextFormatting.formatTextWithFontName( itemListHeader_txt, StringsIndex.getInstance().getStringByName("JOURNAL_ENEMIES"), "Lithos Pro Black", false, TextFieldAutoSize.CENTER );						updateHeaderText( StringsIndex.getInstance().getStringByName("JOURNAL_ENEMIES") );					}										if( _currentItemSelected != null && _currentItemSelected.dateAdded != null )					{						TextFormatting.formatTextWithFontName( itemDetailName_txt, StringsIndex.getInstance().getString(String(_currentItemSelected.name)), "Lithos Pro Black", false, TextFieldAutoSize.CENTER );						itemDetailDescription_mc.content_mc.label_txt.htmlText = '<span class="font2Default">'+StringsIndex.getInstance().getString(String(_currentItemSelected.description))+'\n'+_currentItemSelected.statistic+'</span>'						_itemDetailDescriptionScroller.toggleSlider();												if( _currentItemSelected.dateAdded != null )						{							//TextFormatting.formatTextWithFontName( itemDetailDiscovered_txt, "Discovered on "+_currentItemSelected.dateAdded.month+"/"+_currentItemSelected.dateAdded.date+"/"+_currentItemSelected.dateAdded.fullYear, "SF Fedora", false, TextFieldAutoSize.CENTER );							TextFormatting.formatTextWithFontName( itemDetailDiscovered_txt, StringsIndex.getInstance().getStringByName("JOURNAL_DISCOVERED_ON")+" "+_currentItemSelected.dateAdded.month+"/"+_currentItemSelected.dateAdded.date+"/"+_currentItemSelected.dateAdded.fullYear, "Lithos Pro Black", false, TextFieldAutoSize.CENTER );						}					}									}						}	}