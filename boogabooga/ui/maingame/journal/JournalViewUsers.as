/** JournalViewUsers  *	---------------------------------------------------------------------------- *  *	@author:  *		Christian Widodo [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.maingame.journal	{		import flash.display.MovieClip;		import flash.display.StageDisplayState;		import flash.events.Event;		import flash.events.EventDispatcher;		import flash.external.ExternalInterface;				import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.sound.SoundEffectPlayer;		import com.avatarlabs.utils.userinterface.DynamicUIButton;				import com.boogabooga.controller.maingame.MainGameController;		import com.boogabooga.controller.maingame.UserDataController;		import com.boogabooga.ui.maingame.AbstractContentView;		import com.boogabooga.ui.maingame.IContentView;		import com.boogabooga.data.SoundsIndex;		import com.boogabooga.data.StringsIndex;		import com.boogabooga.data.maingame.User;		import com.boogabooga.events.BoogaEvent;		import com.boogabooga.utils.GameLevelUtil;				public class JournalViewUsers extends EventDispatcher		{			protected var _contentClip:MovieClip;			protected var _currentUser:User;			protected var _currentPage:int;			protected var _totalPages:int;			protected var _friendIcons:Vector.<JournalViewUserIcon>;			protected var _friends:Vector.<User>;			protected var _personIndicatorIndex:int;			protected var _nonAppUserIndex:int;						protected var _nextClip:DynamicUIButton;			protected var _prevClip:DynamicUIButton;			protected var _userClip:JournalViewUserIcon;			protected var _friend1Clip:JournalViewUserIcon;			protected var _friend2Clip:JournalViewUserIcon;			protected var _friend3Clip:JournalViewUserIcon;			protected var _friend4Clip:JournalViewUserIcon;			protected var _friend5Clip:JournalViewUserIcon;						/**	Stage Instances **/			public var next_mc:MovieClip;			public var prev_mc:MovieClip;			public var user_mc:MovieClip;			public var friend1_mc:MovieClip;			public var friend2_mc:MovieClip;			public var friend3_mc:MovieClip;			public var friend4_mc:MovieClip;			public var friend5_mc:MovieClip;			public var personIndicator_mc:MovieClip;			/**	End of Stage Instances **/						public static const ICONS_PER_PAGE:int = 5;						/** Constructor			  *	---------------------------------------------------------------------------- */				public function JournalViewUsers()				{					//init();				}								public function set friends( v:Vector.<User> ):void				{					_friends = v;					_totalPages = Math.ceil(_friends.length/ICONS_PER_PAGE);										if( _friends.length == ICONS_PER_PAGE )					{						++_totalPages;						_friends.splice( _friends.length-1, 0, null );					}										//trace( "_friends: "+_friends );				}								public function set contentClip( m:MovieClip ):void				{					_contentClip = m;										next_mc = _contentClip.next_mc;					prev_mc = _contentClip.prev_mc;					user_mc = _contentClip.user_mc;					friend1_mc = _contentClip.friend1_mc;					friend2_mc = _contentClip.friend2_mc;					friend3_mc = _contentClip.friend3_mc;					friend4_mc = _contentClip.friend4_mc;					friend5_mc = _contentClip.friend5_mc;					personIndicator_mc = _contentClip.personIndicator_mc;										_nextClip = new DynamicUIButton();					_nextClip.dynamicClip = next_mc;					_nextClip.dynamicInit();										_prevClip = new DynamicUIButton();					_prevClip.dynamicClip = prev_mc;					_prevClip.dynamicInit();										_userClip = new JournalViewUserIcon();					_userClip.dynamicClip = user_mc;					_userClip.dynamicInit();										_friend1Clip = new JournalViewUserIcon();					_friend1Clip.dynamicClip = friend1_mc;					_friend1Clip.dynamicInit();										_friend2Clip = new JournalViewUserIcon();					_friend2Clip.dynamicClip = friend2_mc;					_friend2Clip.dynamicInit();										_friend3Clip = new JournalViewUserIcon();					_friend3Clip.dynamicClip = friend3_mc;					_friend3Clip.dynamicInit();										_friend4Clip = new JournalViewUserIcon();					_friend4Clip.dynamicClip = friend4_mc;					_friend4Clip.dynamicInit();										_friend5Clip = new JournalViewUserIcon();					_friend5Clip.dynamicClip = friend5_mc;					_friend5Clip.dynamicInit();				}				public function get contentClip():MovieClip { return _contentClip; }								public function init():void				{					_nextClip.addEventListener( "onClick", nextPage, false, 0, true );					_nextClip.addEventListener( "onSetFocus", handleNextRolledOver, false, 0, true );					_nextClip.addEventListener( "onKillFocus", handleNextRolledOut, false, 0, true );					_prevClip.addEventListener( "onClick", prevPage, false, 0, true );					_prevClip.addEventListener( "onSetFocus", handlePrevRolledOver, false, 0, true );					_prevClip.addEventListener( "onKillFocus", handlePrevRolledOut, false, 0, true );										_friendIcons = new Vector.<JournalViewUserIcon>;					_friendIcons.push( _friend1Clip, _friend2Clip, _friend3Clip, _friend4Clip, _friend5Clip );										_personIndicatorIndex = -1;					_nonAppUserIndex = 0;										for( var i:int=0; i<_friendIcons.length; ++i )					{						_friendIcons[i].addEventListener( "onClick", handleFriendIconClicked, false, 0, true );						_friendIcons[i].addEventListener( "onSetFocus", handleFriendIconRolledOver, false, 0, true );						_friendIcons[i].addEventListener( "onKillFocus", handleFriendIconRolledOut, false, 0, true );					}										_userClip.addEventListener( "onClick", handleUserIconClicked, false, 0, true );					_userClip.addEventListener( "onSetFocus", handleUserIconRolledOver, false, 0, true );				}							/** show			  *	---------------------------------------------------------------------------- */				public function show():void				{					_currentPage = 0;					//_totalPages = Math.ceil(_friends.length/ICONS_PER_PAGE);					showPage();										personIndicator_mc.x = _userClip.dynamicClip.x;					_userClip.setActive(true);										_contentClip.visible = true;				}							/** hide			  *	---------------------------------------------------------------------------- */				public function hide():void				{					_currentUser = null;										_contentClip.visible = false;				}							/** reset			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				public function reset():void				{					for( var i:int=0; i<_friendIcons.length; ++i )					{						_friendIcons[i].reset();					}				}							/** setCurrentUser			  *	---------------------------------------------------------------------------- *			  *	Sets current user of the journal view.			  *	---------------------------------------------------------------------------- */				public function setCurrentUser( user:User ):void				{					_currentUser = user;										_userClip.showUser( _currentUser );				}							/** handleUserIconClicked			  *	---------------------------------------------------------------------------- *			  *	Shows the journal of the current user.			  *	---------------------------------------------------------------------------- */				protected function handleUserIconClicked( event:Event ):void				{					ConsoleBroadcaster.broadcast( "JournalViewUsers", "handleUserIconClicked();" );										_personIndicatorIndex = -1;					personIndicator_mc.x = event.currentTarget.dynamicClip.x;					personIndicator_mc.visible = true;										//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_click.wav").volume, 0, "sfx_mouse_click.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav" );										_userClip.setDeactive(true);										for( var i:int=0; i<_friendIcons.length; ++i )					{						_friendIcons[i].setActive(true);					}										dispatchEvent( new BoogaEvent(BoogaEvent.ON_JOURNAL_SELECT_SELF) );				}								protected function handleUserIconRolledOver( event:Event ):void				{					//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_rollover.wav").volume, 0, "sfx_mouse_rollover.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav" );				}							/** handleFriendIconClicked			  *	---------------------------------------------------------------------------- *			  *	Shows the journal of the selected friend.			  *	---------------------------------------------------------------------------- */				protected function handleFriendIconClicked( event:Event ):void				{					ConsoleBroadcaster.broadcast( "JournalViewUsers", "handleFriendIconClicked("+event.currentTarget.user+");" );										if( event.currentTarget.invite == true )					{						//invite friends						if( _contentClip.stage.displayState == StageDisplayState.FULL_SCREEN )						{							_contentClip.stage.displayState = StageDisplayState.NORMAL;						}												ExternalInterface.call( "openFriendSelector", event.currentTarget.user.fbId );					}					else					{						_userClip.setActive(true);												personIndicator_mc.x = event.currentTarget.dynamicClip.x;						personIndicator_mc.visible = true;												var offset:int = _currentPage * ICONS_PER_PAGE;												for( var i:int=0; i<_friendIcons.length; ++i )						{							_friendIcons[i].setActive(true);														if( _friendIcons[i] == event.currentTarget )								_personIndicatorIndex = i+offset;						}												//trace( "_personIndicatorIndex: "+_personIndicatorIndex );												event.currentTarget.setDeactive(true);												//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_click.wav").volume, 0, "sfx_mouse_click.wav" );						SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav" );												dispatchEvent( new BoogaEvent(BoogaEvent.ON_JOURNAL_SELECT_FRIEND, {user:event.currentTarget.user}) );					}										if( MainGameController.getInstance().currentUser.tutorialJournal )					{						EventNotificationCenter.getInstance().sendNotification( BoogaEvent.ON_TUTORIAL_HIDE, this );												MainGameController.getInstance().currentUser.tutorialJournal = false;												var userDataController:UserDataController = new UserDataController();							userDataController.updateUserTutorial( MainGameController.getInstance().currentUser.id, "journal", 0 );					}				}								protected function handleFriendIconRolledOver( event:Event ):void				{					//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_rollover.wav").volume, 0, "sfx_mouse_rollover.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav" );										if( event.currentTarget.invite == true )						EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_TEXT_HOVER_SHOW, this, {clip:event.currentTarget.dynamicClip, text:StringsIndex.getInstance().getStringByName("JOURNAL_INVITE")} );				}								protected function handleFriendIconRolledOut( event:Event ):void				{					if( event.currentTarget.invite == true )						EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_TEXT_HOVER_HIDE, this );				}							/** nextPage			  *	---------------------------------------------------------------------------- *			  *	Goes to the next page of the users.			  *	---------------------------------------------------------------------------- */				protected function nextPage( event:Event=null ):void				{					++_currentPage;										showPage();					toggleUI();										//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_click.wav").volume, 0, "sfx_mouse_click.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav" );				}								protected function handleNextRolledOver( event:Event ):void				{					//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_rollover.wav").volume, 0, "sfx_mouse_rollover.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav" );				}								protected function handleNextRolledOut( event:Event ):void				{									}							/** prevPage			  *	---------------------------------------------------------------------------- *			  *	Goes to the prev page of the users.			  *	---------------------------------------------------------------------------- */				protected function prevPage( event:Event=null ):void				{					--_currentPage;										showPage();					toggleUI();										//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_click.wav").volume, 0, "sfx_mouse_click.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav" );				}								protected function handlePrevRolledOver( event:Event ):void				{					//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_rollover.wav").volume, 0, "sfx_mouse_rollover.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav" );				}								protected function handlePrevRolledOut( event:Event ):void				{									}							/** showPage			  *	---------------------------------------------------------------------------- *			  *	Shows the users that are currently on the current page.			  *	---------------------------------------------------------------------------- */				protected function showPage():void				{					var offset:int = _currentPage * ICONS_PER_PAGE;										//trace( "_currentPage: "+_currentPage );					//trace( "_personIndicatorIndex: "+_personIndicatorIndex );					//trace( "offset; "+offset );										ConsoleBroadcaster.broadcast( 'JournalViewUser', 'MainGameController.getInstance().nonAppUserFriends.length: '+MainGameController.getInstance().nonAppUserFriends.length );										if( _personIndicatorIndex == -1 )					{						personIndicator_mc.visible = true;					}					else if( _personIndicatorIndex < offset || _personIndicatorIndex >= offset + ICONS_PER_PAGE )					{						personIndicator_mc.visible = false;					}					else					{						personIndicator_mc.visible = true;					}										for( var i:int=0; i<ICONS_PER_PAGE; ++i )					{						_friendIcons[i].reset();												if( i+offset < _friends.length )						{							if( _friends[i+offset] == null )							{								if( MainGameController.getInstance().nonAppUserFriends.length > 0 && MainGameController.getInstance().nonAppUserFriends.length > i )								{									_friendIcons[i].showInvite( MainGameController.getInstance().nonAppUserFriends[_nonAppUserIndex] );									++_nonAppUserIndex;									if( _nonAppUserIndex > 4 )										_nonAppUserIndex = 0;								}								else									_friendIcons[i].showInvite();							}							else								_friendIcons[i].showUser( _friends[i+offset] );							//_friendIcons[i].dynamicClip.visible = true;													}						else						{							//_friendIcons[i].dynamicClip.visible = false;							if( MainGameController.getInstance().nonAppUserFriends.length > 0 && MainGameController.getInstance().nonAppUserFriends.length > i )							{								_friendIcons[i].showInvite( MainGameController.getInstance().nonAppUserFriends[_nonAppUserIndex] );								++_nonAppUserIndex;								if( _nonAppUserIndex > 4 )									_nonAppUserIndex = 0;							}							else								_friendIcons[i].showInvite();						}												if( i+offset == _personIndicatorIndex )						{							_friendIcons[i].setDeactive();						}						else						{							_friendIcons[i].setActive();						}					}										toggleUI();				}							/** toggleUI			  *	---------------------------------------------------------------------------- *			  *	Toggles the previous and next buttons on/off.			  *	---------------------------------------------------------------------------- */				protected function toggleUI():void				{					if( _totalPages <= 1 )					{						//_nextClip.dynamicClip.visible = false;						//_prevClip.dynamicClip.visible = false;						_prevClip.setDeactive();						_nextClip.setDeactive();						GameLevelUtil.addDesaturatedFilterToMovieClip( _prevClip.dynamicClip );						GameLevelUtil.addDesaturatedFilterToMovieClip( _nextClip.dynamicClip );						_prevClip.dynamicClip.alpha = .3;						_nextClip.dynamicClip.alpha = .3;					}					else					{						if( _currentPage == 0 )						{							//_prevClip.dynamicClip.visible = false;							_prevClip.setDeactive();							GameLevelUtil.addDesaturatedFilterToMovieClip( _prevClip.dynamicClip );							_prevClip.dynamicClip.alpha = .3;						}						else						{							//_prevClip.dynamicClip.visible = true;							_prevClip.setActive();							GameLevelUtil.removeDesaturatedFilterFromMovieClip( _prevClip.dynamicClip );							_prevClip.dynamicClip.alpha = 1;						}												if( _currentPage == _totalPages-1 )						{							//_nextClip.dynamicClip.visible = false;							_nextClip.setDeactive();							GameLevelUtil.addDesaturatedFilterToMovieClip( _nextClip.dynamicClip );							_nextClip.dynamicClip.alpha = .3;						}						else						{							//_nextClip.dynamicClip.visible = true;							_nextClip.setActive();							GameLevelUtil.removeDesaturatedFilterFromMovieClip( _nextClip.dynamicClip );							_nextClip.dynamicClip.alpha = 1;						}					}				}		}	}