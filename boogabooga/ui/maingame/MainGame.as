/** MainGame  *	---------------------------------------------------------------------------- *  *	@author:  *		Christian Widodo [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.maingame	{		import flash.display.MovieClip;		import flash.display.Stage;		import flash.display.StageAlign;		import flash.display.StageDisplayState;		import flash.display.StageScaleMode;		import flash.events.ErrorEvent;		import flash.events.Event;		import flash.events.EventDispatcher;		import flash.events.IOErrorEvent;		import flash.events.FullScreenEvent;		import flash.events.ProgressEvent;		import flash.events.TimerEvent;		import flash.external.ExternalInterface;		import flash.geom.Point;		import flash.net.URLLoader;		import flash.net.URLRequest;		import flash.net.URLRequestMethod;		import flash.net.URLVariables;		import flash.system.ApplicationDomain;		import flash.system.LoaderContext;		import flash.text.Font;		import flash.text.TextField;		import flash.text.TextFieldAutoSize;		import flash.utils.getDefinitionByName;				import com.greensock.TweenLite;		import com.avatarlabs.utils.DebuggerUtil;		import com.avatarlabs.utils.cache.BitmapDataManager;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.AssetLoaderEvent;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.loader.CustomLoader;		import com.avatarlabs.utils.navigation.*;		import com.avatarlabs.utils.sound.SoundEffectPlayer;		import com.avatarlabs.utils.text.TextFormatting;		import com.avatarlabs.utils.timers.CustomTimer;		import com.avatarlabs.utils.userinterface.DynamicUIButton;				import com.boogabooga.controller.gamelevel.GameboardController;		import com.boogabooga.controller.gamelevel.GameLevelDataController;		import com.boogabooga.controller.maingame.MainGameController;		import com.boogabooga.controller.maingame.MessageDataController;		import com.boogabooga.controller.maingame.RequiredDataController;		import com.boogabooga.controller.maingame.UserDataController;		import com.boogabooga.data.SettingsIndex;		import com.boogabooga.data.SoundsIndex;		import com.boogabooga.data.StringsIndex;		import com.boogabooga.data.gamelevel.Enemy;		import com.boogabooga.data.gamelevel.GameLevelDataIndex;		import com.boogabooga.data.maingame.MainGameDataIndex;		import com.boogabooga.events.BoogaEvent;		import com.boogabooga.events.GameLevelEvent;		import com.boogabooga.ui.gamelevel.AnimationDisplayObject;		import com.boogabooga.ui.gamelevel.Gameboard;		import com.boogabooga.ui.gameleveleditor.GameboardEditor;		import com.boogabooga.ui.gameleveleditor.GameEditor;		import com.boogabooga.ui.maingame.AbstractContentView;		import com.boogabooga.ui.maingame.AddFacebookCreditsView;		import com.boogabooga.ui.maingame.ExitConfirmationView;		import com.boogabooga.ui.maingame.FacebookCreditsBalanceView;		import com.boogabooga.ui.maingame.LoadingAssetView;		import com.boogabooga.ui.maingame.MainNavigation;		//import com.boogabooga.ui.maingame.archeology.ArcheologyView;		import com.boogabooga.ui.maingame.bugreporting.BugReportingView;		import com.boogabooga.ui.maingame.gameboard.GameboardView;		import com.boogabooga.ui.maingame.gameboard.PlayViewControls;		import com.boogabooga.ui.maingame.islandselection.IslandSelectionView;		import com.boogabooga.ui.maingame.journal.JournalView;		import com.boogabooga.ui.maingame.message.MessageView;		import com.boogabooga.ui.maingame.play.PlayView;		import com.boogabooga.ui.maingame.sendgift.MysteryGiftPopupView;		import com.boogabooga.ui.maingame.sendgift.SendGiftView;		import com.boogabooga.ui.maingame.store.StoreView;		import com.boogabooga.ui.maingame.tutorial.TutorialPopupView;		import com.boogabooga.ui.maingame.warning.WarningPopupView;				public class MainGame extends EventDispatcher		{			protected var _contentClip:MovieClip;						protected var _contentViews:Vector.<AbstractContentView>;			protected var _currentContentView:AbstractContentView;						protected var _mainNavigationClip:MainNavigation;			protected var _playViewClip:PlayView;			//protected var _archeologyViewClip:ArcheologyView;			protected var _sendGiftViewClip:SendGiftView;			protected var _journalViewClip:JournalView;			protected var _storeViewClip:StoreView;			protected var _messageViewClip:MessageView;			protected var _islandSelectionViewClip:IslandSelectionView;			protected var _loadingAssetViewClip:LoadingAssetView;			protected var _playViewControlsClip:PlayViewControls;			protected var _exitConfirmationViewClip:ExitConfirmationView;			protected var _gameboardViewClip:GameboardView;			protected var _tutorialPopupViewClip:TutorialPopupView;			protected var _textHoverPopupViewClip:TextHoverPopupView;			protected var _languagesSelectViewClip:LanguagesSelectView;			protected var _tableBackgroundViewClip:TableBackgroundView;			protected var _adventureLevelPopupViewClip:AdventureLevelPopupView;			protected var _facebookCreditsBalanceViewClip:FacebookCreditsBalanceView;			protected var _addFacebookCreditsViewClip:AddFacebookCreditsView;			protected var _warningPopupViewClip:WarningPopupView;			protected var _unlockNewIslandViewClip:UnlockNewIslandView;			protected var _mysteryGiftPopupViewClip:MysteryGiftPopupView;						protected var _bugReportingClip:DynamicUIButton;			protected var _bugReportingFormViewClip:BugReportingView;						protected var _checkForNewMessagesTimer:CustomTimer;			protected var _messageDataController:MessageDataController;						//protected var _sampleEnemies:Vector.<Enemy>;			//protected var _sampleAnimationDisplayObjects:Vector.<AnimationDisplayObject>;			//protected var _checkForFPSTimer:CustomTimer;						/**	Stage Instances **/			//public var startScreenView_mc;			//public var assetContainer_mc:MovieClip;			//public var gameboardContainer_mc:MovieClip;			public var playView_mc:MovieClip;			//public var archeologyView_mc:MovieClip;			public var sendGiftView_mc:MovieClip;			public var journalView_mc:MovieClip;			public var storeView_mc:MovieClip;			public var messageView_mc:MovieClip;			public var mainNavigation_mc:MovieClip;			public var islandSelectionView_mc:MovieClip;			public var loadingAssetView_mc:MovieClip;			public var playViewControls_mc:MovieClip;			public var exitConfirmationView_mc:MovieClip;			public var gameboardView_mc:MovieClip;			public var tutorialPopup_mc:MovieClip;			public var whiteFlash_mc:MovieClip;			public var textHoverPopup_mc:MovieClip;			public var languagesSelectView_mc:MovieClip;			public var tableBackgroundView_mc:MovieClip;			public var adventureLevelPopup_mc:MovieClip;			//public var adventureLevel_mc:MovieClip;			public var facebookCreditsBalance_mc:MovieClip;			public var addFacebookCreditsView_mc:MovieClip;			public var warningPopup_mc:MovieClip;			public var unlockNewIsland_mc:MovieClip;			public var tutorialIntroAnimationMask_mc:MovieClip;			public var mysteryGiftPopup_mc:MovieClip;						public var bugReporting_mc:MovieClip;			public var bugReportingForm_mc:MovieClip;						public var checkFPSContainer_mc:MovieClip;			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function MainGame()				{									}								public function set contentClip( m:MovieClip ):void				{					_contentClip = m;										playView_mc = _contentClip.playView_mc;					//archeologyView_mc = _contentClip.archeologyView_mc;					sendGiftView_mc = _contentClip.sendGiftView_mc;					journalView_mc = _contentClip.journalView_mc;					storeView_mc = _contentClip.storeView_mc;					messageView_mc = _contentClip.messageView_mc;					mainNavigation_mc = _contentClip.mainNavigation_mc;					islandSelectionView_mc = _contentClip.islandSelectionView_mc;					loadingAssetView_mc = _contentClip.loadingAssetView_mc;					playViewControls_mc = _contentClip.playViewControls_mc;					exitConfirmationView_mc = _contentClip.exitConfirmationView_mc;					gameboardView_mc = _contentClip.gameboardView_mc;					tutorialPopup_mc = _contentClip.tutorialPopup_mc;					whiteFlash_mc = _contentClip.whiteFlash_mc;					whiteFlash_mc.visible = false;					whiteFlash_mc.mouseChildren = false;					whiteFlash_mc.mouseEnabled = false;					textHoverPopup_mc = _contentClip.textHoverPopup_mc;					languagesSelectView_mc = _contentClip.languagesSelectView_mc;					tableBackgroundView_mc = _contentClip.tableBackgroundView_mc;					adventureLevelPopup_mc = _contentClip.adventureLevelPopup_mc;					//adventureLevel_mc = _contentClip.adventureLevel_mc;					facebookCreditsBalance_mc = _contentClip.facebookCreditsBalance_mc;					addFacebookCreditsView_mc = _contentClip.addFacebookCreditsView_mc;					warningPopup_mc = _contentClip.warningPopup_mc;					unlockNewIsland_mc = _contentClip.unlockNewIsland_mc;					tutorialIntroAnimationMask_mc = _contentClip.tutorialIntroAnimationMask_mc;					tutorialIntroAnimationMask_mc.visible = false;					tutorialIntroAnimationMask_mc.alpha = 1;					mysteryGiftPopup_mc = _contentClip.mysteryGiftPopup_mc;										checkFPSContainer_mc = _contentClip.checkFPSContainer_mc;										_unlockNewIslandViewClip = new UnlockNewIslandView();					_unlockNewIslandViewClip.dynamicClip = unlockNewIsland_mc;					_unlockNewIslandViewClip.dynamicInit();					_unlockNewIslandViewClip.hide();					unlockNewIsland_mc.alpha = 1;										_warningPopupViewClip = new WarningPopupView();					_warningPopupViewClip.contentClip = warningPopup_mc;					_warningPopupViewClip.init();					_warningPopupViewClip.hide();					warningPopup_mc.alpha = 1;										_tableBackgroundViewClip = new TableBackgroundView();					_tableBackgroundViewClip.contentClip = tableBackgroundView_mc;					_tableBackgroundViewClip.init();										_loadingAssetViewClip = new LoadingAssetView();					_loadingAssetViewClip.contentClip = loadingAssetView_mc;					_loadingAssetViewClip.init();					_loadingAssetViewClip.contentClip.visible = false;					_loadingAssetViewClip.contentClip.alpha = 1;										_playViewControlsClip = new PlayViewControls();					_playViewControlsClip.contentClip = playViewControls_mc;					_playViewControlsClip.init();					//_playViewControlsClip.onFullScreenToggled.add( handleFullScreenToggled );										_gameboardViewClip = new GameboardView();					_gameboardViewClip.contentClip = gameboardView_mc;					_gameboardViewClip.init();					_gameboardViewClip.playViewControlsClip = _playViewControlsClip;										_exitConfirmationViewClip = new ExitConfirmationView();					_exitConfirmationViewClip.contentClip = exitConfirmationView_mc;					_exitConfirmationViewClip.init();										_sendGiftViewClip = new SendGiftView();					_sendGiftViewClip.contentClip = sendGiftView_mc;					_sendGiftViewClip.init();					_sendGiftViewClip.loadingAssetViewClip = _loadingAssetViewClip;										_mainNavigationClip = new MainNavigation();					_mainNavigationClip.dynamicClip = mainNavigation_mc;					_mainNavigationClip.dynamicInit();										_messageViewClip = new MessageView();					_messageViewClip.contentClip = messageView_mc;					_messageViewClip.init();					_messageViewClip.id = AbstractContentView.VIEW_MESSAGE;					_messageViewClip.loadingAssetViewClip = _loadingAssetViewClip;										_storeViewClip = new StoreView();					_storeViewClip.contentClip = storeView_mc;					_storeViewClip.init();					_storeViewClip.id = AbstractContentView.VIEW_STORE;					_storeViewClip.loadingAssetViewClip = _loadingAssetViewClip;										_islandSelectionViewClip = new IslandSelectionView();					_islandSelectionViewClip.contentClip = islandSelectionView_mc;					_islandSelectionViewClip.init();					_islandSelectionViewClip.tableBackgroundViewClip = _tableBackgroundViewClip;										_playViewClip = new PlayView();					_playViewClip.contentClip = playView_mc;					_playViewClip.init();					_playViewClip.loadingAssetViewClip = _loadingAssetViewClip;					_playViewClip.islandSelectionViewClip = _islandSelectionViewClip;					_playViewClip.gameboardView = _gameboardViewClip;										//_archeologyViewClip = new ArcheologyView();					//_archeologyViewClip.contentClip = archeologyView_mc;					//_archeologyViewClip.init();					//_archeologyViewClip.islandSelectionViewClip = _islandSelectionViewClip;					//_archeologyViewClip.loadingAssetViewClip = _loadingAssetViewClip;					//_archeologyViewClip.gameboardView = _gameboardViewClip;										_journalViewClip = new JournalView();					_journalViewClip.contentClip = journalView_mc;					_journalViewClip.init();					_journalViewClip.loadingAssetViewClip = _loadingAssetViewClip;					_journalViewClip.tableBackgroundViewClip = _tableBackgroundViewClip;										_tutorialPopupViewClip = new TutorialPopupView();					_tutorialPopupViewClip.contentClip = tutorialPopup_mc;					_tutorialPopupViewClip.init();					_tutorialPopupViewClip.hide();					//_tutorialPopupViewClip.tutorialIntroAnimationMask_mc = tutorialIntroAnimationMask_mc;										_mysteryGiftPopupViewClip = new MysteryGiftPopupView();					_mysteryGiftPopupViewClip.contentClip = mysteryGiftPopup_mc;					_mysteryGiftPopupViewClip.init();					_mysteryGiftPopupViewClip.hide();					_mysteryGiftPopupViewClip.contentClip.alpha = 1;										_textHoverPopupViewClip = new TextHoverPopupView();					_textHoverPopupViewClip.contentClip = textHoverPopup_mc;					_textHoverPopupViewClip.init();					_textHoverPopupViewClip.hide();										_languagesSelectViewClip = new LanguagesSelectView();					_languagesSelectViewClip.contentClip = languagesSelectView_mc;					_languagesSelectViewClip.init();					_languagesSelectViewClip.hide();					_languagesSelectViewClip.loadingAssetViewClip = _loadingAssetViewClip;					languagesSelectView_mc.alpha = 1;										_adventureLevelPopupViewClip = new AdventureLevelPopupView();					_adventureLevelPopupViewClip.contentClip = adventureLevelPopup_mc;					_adventureLevelPopupViewClip.init();					_adventureLevelPopupViewClip.hide();										_facebookCreditsBalanceViewClip = new FacebookCreditsBalanceView();					_facebookCreditsBalanceViewClip.contentClip = facebookCreditsBalance_mc;					_facebookCreditsBalanceViewClip.init();										_addFacebookCreditsViewClip = new AddFacebookCreditsView();					_addFacebookCreditsViewClip.contentClip = addFacebookCreditsView_mc;					_addFacebookCreditsViewClip.init();					addFacebookCreditsView_mc.visible = false;					addFacebookCreditsView_mc.alpha = 1;										bugReporting_mc = _contentClip.bugReporting_mc;					bugReportingForm_mc = _contentClip.bugReportingForm_mc;					bugReportingForm_mc.visible = false;					bugReportingForm_mc.alpha = 1;										_bugReportingClip = new DynamicUIButton();					_bugReportingClip.dynamicClip = bugReporting_mc;					_bugReportingClip.dynamicInit();					_bugReportingClip.dynamicClip.visible = false;										_bugReportingFormViewClip = new BugReportingView();					_bugReportingFormViewClip.dynamicClip = bugReportingForm_mc;					_bugReportingFormViewClip.dynamicInit();				}				public function get contentClip():MovieClip { return _contentClip; }							/** init			  *	---------------------------------------------------------------------------- */				public function init():void				{					ConsoleBroadcaster.broadcast( "MainGame", "init();" );										//trace( "gameboard_mc: "+gameboard_mc );										//addChild( new FPS() );										MainGameController.getInstance().runGarbageCollector();										//ConsoleBroadcaster.broadcast( "MainGame", "send notification" );										//ConsoleBroadcaster.broadcast( "MainGame", "fps init" );										_contentClip.stage.addEventListener( Event.FULLSCREEN, handleFullScreenToggled );										_exitConfirmationViewClip.contentClip.visible = false;					_exitConfirmationViewClip.contentClip.alpha = 1;										_gameboardViewClip.contentClip.visible = false;					_gameboardViewClip.contentClip.alpha = 1;										_playViewClip.contentClip.visible = false;					_playViewClip.contentClip.alpha = 1;					_playViewClip.addEventListener( BoogaEvent.ON_NEW_ISLAND_UNLOCKED, handleNewIslandUnlocked, false, 0, true );					_playViewClip.addEventListener( GameLevelEvent.EXIT_GAME_CLICKED, handleExitGameClicked );					_playViewClip.addEventListener( GameLevelEvent.REPLAY_GAME_CLICKED, handleReplayGameClicked );					_playViewClip.addEventListener( BoogaEvent.ON_LOAD_ISLANDS_DATA_COMPLETED, handleLoadIslandsDataCompleted, false, 0, true );										//_playViewControlsClip.contentClip.visible = false;					_playViewControlsClip.hideGameLevelControls();					_playViewControlsClip.contentClip.alpha = 1;										//_archeologyViewClip.contentClip.visible = false;					//_archeologyViewClip.contentClip.alpha = 1;										_sendGiftViewClip.contentClip.visible = false;					_sendGiftViewClip.contentClip.alpha = 1;					_sendGiftViewClip.addEventListener( BoogaEvent.ON_POPUP_HIDE, handlePopupHid );										_journalViewClip.contentClip.visible = false;					_journalViewClip.contentClip.alpha = 1;										_storeViewClip.contentClip.visible = false;					_storeViewClip.contentClip.alpha = 1;					_storeViewClip.addEventListener( BoogaEvent.ON_POPUP_HIDE, handlePopupHid );										_messageViewClip.contentClip.visible = false;					_messageViewClip.contentClip.alpha = 1;					_messageViewClip.addEventListener( BoogaEvent.ON_POPUP_HIDE, handlePopupHid );										_languagesSelectViewClip.addEventListener( BoogaEvent.ON_POPUP_HIDE, handlePopupHid );										_tutorialPopupViewClip.contentClip.visible = false;					_tutorialPopupViewClip.contentClip.alpha = 1;										_tableBackgroundViewClip.hide();					_tableBackgroundViewClip.contentClip.alpha = 1;										_facebookCreditsBalanceViewClip.addEventListener( BoogaEvent.ON_FACEBOOK_ADD_CREDITS, handleAddFacebookCreditsClicked, false, 0, true );					_addFacebookCreditsViewClip.addEventListener( BoogaEvent.ON_POPUP_HIDE, handlePopupHid );					_unlockNewIslandViewClip.addEventListener( BoogaEvent.ON_POPUP_HIDE, handlePopupHid );										_bugReportingClip.addEventListener( "onClick", handleBugReportingClicked );					_bugReportingFormViewClip.addEventListener( BoogaEvent.ON_POPUP_HIDE, handlePopupHid );										_mainNavigationClip.addEventListener( BoogaEvent.ON_NAVIGATE_TO_SEND_GIFT, handleNavigateToSendGift, false, 0, true );					_mainNavigationClip.addEventListener( BoogaEvent.ON_NAVIGATE_TO_MESSAGE, handleNavigateToMessage, false, 0, true );					_mainNavigationClip.addEventListener( BoogaEvent.ON_NAVIGATE_TO_STORE, handleNavigateToStore, false, 0, true );					_mainNavigationClip.addEventListener( BoogaEvent.ON_NAVIGATE_TO_LANGUAGES, handleNavigateToLanguages, false, 0, true );															//TODO:					//	We need to check for new messages every min here, and display the exclamation point if we have new messages.					_messageDataController = new MessageDataController();					_messageDataController.addEventListener( "onComplete", handleGetNewMessagesCountComplete );										_checkForNewMessagesTimer = new CustomTimer( 30000 );					//_checkForNewMessagesTimer.addEventListener( TimerEvent.TIMER, handleCheckForNewMessagesTimerFired, false, 0, true );					_checkForNewMessagesTimer.onTimerFired.add( handleCheckForNewMessagesTimerFired );					_checkForNewMessagesTimer.start();										if( MainGameController.getInstance().currentUser.level >= 7 )					{						//_mainNavigationClip.store_mc.visible = true;						//_mainNavigationClip.storeBackground_mc.visible = true;						EventNotificationCenter.getInstance().sendNotification( BoogaEvent.ON_NAVIGATION_STORE_SHOW, this );					}					else					{						//_mainNavigationClip.store_mc.visible = false;						//_mainNavigationClip.storeBackground_mc.visible = false;						EventNotificationCenter.getInstance().sendNotification( BoogaEvent.ON_NAVIGATION_STORE_HIDE, this );					}										EventNotificationCenter.getInstance().addEventListener( BoogaEvent.ON_EXIT_FULL_SCREEN, handleExitFullScreen );					//EventNotificationCenter.getInstance().addEventListener( BoogaEvent.ON_SMALL_ADVENTURE_LEVEL_SHOW, showSmallAdventureLevel, false, 0, true );					//EventNotificationCenter.getInstance().addEventListener( BoogaEvent.ON_SMALL_ADVENTURE_LEVEL_HIDE, hideSmallAdventureLevel, false, 0, true );					//EventNotificationCenter.getInstance().addEventListener( BoogaEvent.ON_ADVENTURE_LEVEL_UPDATE, handleUpdateAdventureLevel, false, 0, true );					//EventNotificationCenter.getInstance().addEventListener( BoogaEvent.ON_ADVENTURE_LEVEL_POPUP_SHOW, handleUpdateAdventureLevel, false, 0, true );					//TextFormatting.formatTextWithFontName( adventureLevel_mc.score_mc.label_txt, String(MainGameController.getInstance().currentUser.adventureLevel), "Lithos Pro Black", false, TextFieldAutoSize.CENTER );					//TweenLite.to( adventureLevel_mc, .5, {alpha:1} );					//adventureLevel_mc.visible = false;					//adventureLevel_mc.alpha = 1;										_mysteryGiftPopupViewClip.addEventListener( BoogaEvent.ON_POPUP_HIDE, handlePopupHid );										_adventureLevelPopupViewClip.addEventListener( BoogaEvent.ON_POPUP_HIDE, handlePopupHid );					//_adventureLevelPopupViewClip.show();										//ConsoleBroadcaster.broadcast( "MainGame", "main game controller "+MainGameController.getInstance() );					//ConsoleBroadcaster.broadcast( "MainGame", "currentUser "+MainGameController.getInstance().currentUser );					//ConsoleBroadcaster.broadcast( "MainGame", "currentIslandId: "+MainGameController.getInstance().currentUser.currentIslandId );					//ConsoleBroadcaster.broadcast( "MainGame", "island: "+MainGameDataIndex.getInstance().getIsland( MainGameController.getInstance().currentUser.currentIslandId ) );										_islandSelectionViewClip.hide();					_islandSelectionViewClip.contentClip.alpha = 1;					_islandSelectionViewClip.initIsland( MainGameDataIndex.getInstance().getIsland( MainGameController.getInstance().currentUser.currentIslandId ) );					//_islandSelectionViewClip.addEventListener( BoogaEvent.ISLAND_SELECTION_GAME_LEVEL_ICON_CLICK, handleIslandSelectionViewGameLevelIconClicked, false, 0, true );					//_islandSelectionViewClip.addEventListener( BoogaEvent.ISLAND_SELECTION_ARCHEOLOGY_ICON_CLICK, handleIslandSelectionViewArcheologyIconClicked, false, 0, true );					//_islandSelectionViewClip.addEventListener( BoogaEvent.ISLAND_SELECTION_CRYPTOLOGY_ICON_CLICK, handleIslandSelectionViewCryptologyIconClicked, false, 0, true );					//_islandSelectionViewClip.addEventListener( BoogaEvent.ON_ARCHEOLOGY_DIG, handleArcheologyDig, false, 0, true );										ConsoleBroadcaster.broadcast( "MainGame", "hiding content clips" );										_contentViews = new Vector.<AbstractContentView>;					_contentViews.push( _playViewClip );					//_contentViews.push( _archeologyViewClip );					_contentViews.push( _journalViewClip );					_contentViews.push( _storeViewClip );					_contentViews.push( _messageViewClip );										//var nc:NavigationController = NavigationController.getInstance();					NavigationController.getInstance().registerListenerForGroup( handleMainNavigationNavigateTo, "MainNavigation" );										ConsoleBroadcaster.broadcast( "MainGame", "navigate to "+SettingsIndex.getInstance().initialViewToShow );										EventNotificationCenter.getInstance().addEventListener( BoogaEvent.ON_TUTORIAL_SHOW_FULL_SCREEN, handleShowTutorialFullScreen, false, 0, true );					EventNotificationCenter.getInstance().addEventListener( BoogaEvent.ON_TUTORIAL_HIDE_FULL_SCREEN, handleHideTutorialFullScreen, false, 0, true );					EventNotificationCenter.getInstance().addEventListener( BoogaEvent.ON_TUTORIAL_SHOW_STORE, handleShowTutorialStore, false, 0, true );					EventNotificationCenter.getInstance().addEventListener( BoogaEvent.ON_TRANSITION_SHOW, handleShowTransition, false, 0, true );					EventNotificationCenter.getInstance().addEventListener( BoogaEvent.ON_TRANSITION_HIDE, handleHideTransition, false, 0, true );					EventNotificationCenter.getInstance().addEventListener( BoogaEvent.ON_UI_ELEMENTS_HIDE, handleHideUIElements, false, 0, true );										//EventNotificationCenter.getInstance().addEventListener( BoogaEvent.ON_CHEAT_DETECTED, handleCheatDetected, false, 0, true );										//TODO:					//	If user has completed the game, check if there is a new island/village available										NavigationController.getInstance().navigateTo( 0, "MainNavigation" );										if( SettingsIndex.getInstance().initialViewToShow == 5 )					{						//NavigationController.getInstance().navigateTo( 5, "MainNavigation" );						handleNavigateToMessage();					}										MainGameController.getInstance().startMainBackgroundMusic();				}								protected function handleExitFullScreen( event:CustomEvent ):void				{					ConsoleBroadcaster.broadcast( "MainGame", "full screen ? "+StageDisplayState.FULL_SCREEN );										if( _contentClip.stage.displayState == StageDisplayState.FULL_SCREEN )						_contentClip.stage.displayState = StageDisplayState.NORMAL;				}							/** handleCheatDetected			  *	---------------------------------------------------------------------------- *			  *	If cheats are enabled, this will check for any cheats that are entered.			  *	---------------------------------------------------------------------------- 			 	protected function handleCheatDetected( event:CustomEvent ):void				{					if( event.customParameters.keywordIndex == 14 )					{						_mysteryGiftPopupViewClip.show();						_islandSelectionViewClip.willShowMagnifyingGlassCursor = false;						_islandSelectionViewClip.hideMagnifyingGlassMouseCursor();					}				}*/							/** handleUpdateAdventureLevel			  *	---------------------------------------------------------------------------- 				protected function handleUpdateAdventureLevel( event:CustomEvent ):void				{					TextFormatting.formatTextWithFontName( adventureLevel_mc.score_mc.label_txt, String(MainGameController.getInstance().currentUser.adventureLevel), "Lithos Pro Black", false, TextFieldAutoSize.CENTER );				}								protected function showSmallAdventureLevel( event:CustomEvent=null ):void				{					adventureLevel_mc.visible = true;				}								protected function hideSmallAdventureLevel( event:CustomEvent=null ):void				{					adventureLevel_mc.visible = false;				}*/				/*				protected function handleShowAdventureLevelPopup( event:CustomEvent ):void				{					if( _adventureLevelPopupViewClip.willShowPopupView )					{						_adventureLevelPopupViewClip.show();												if( _mainNavigationClip.contentId == 0 || _mainNavigationClip.contentId == 1 )							_islandSelectionViewClip.hideMagnifyingGlassMouseCursor();					}				}				*/							/** handleMainNavigationNavigateTo			  *	---------------------------------------------------------------------------- */				protected function handleMainNavigationNavigateTo( contentId:* ):void				{					//ConsoleBroadcaster.broadcast( "MainGame", "handleMainNavigationNavigateTo ----- "+contentId );										//trace( "_messageViewClip: "+_messageViewClip );					//trace( "_storeViewClip: "+_storeViewClip );					//trace( "_sendGiftViewClip: "+_sendGiftViewClip );					//trace( "_gameboardViewClip: "+_gameboardViewClip );										if( _messageViewClip.isContentVisible )						_messageViewClip.hide();										if( _storeViewClip.isContentVisible )						_storeViewClip.hide();										if( _sendGiftViewClip.isContentVisible )						_sendGiftViewClip.hide();										if( _languagesSelectViewClip.isContentVisible )						_languagesSelectViewClip.hide();										if( _addFacebookCreditsViewClip.isContentVisible )						_addFacebookCreditsViewClip.hide();										if( _currentContentView != _contentViews[contentId] )					{						if( _gameboardViewClip.isPlayingGameLevel )						{							trace( "pop up the exitConfirmation for game level" );							//_playViewClip.pauseGame();							_gameboardViewClip.pauseGame(false);							//_exitConfirmationViewClip.addEventListener( BoogaEvent.ON_EXIT_CONFIRMATION_CONTINUE, handleExitGameLevelContinue );							//_exitConfirmationViewClip.addEventListener( BoogaEvent.ON_EXIT_CONFIRMATION_CANCEL, handleExitGameLevelCancel );							_exitConfirmationViewClip.onContinueClicked.add( handleExitGameLevelContinue );							_exitConfirmationViewClip.onCancelClicked.add( handleExitGameLevelCancel );							_exitConfirmationViewClip.show();							return;						}						else if( _gameboardViewClip.isPlayingDigLevel )						{							trace( "pop up the exitConfirmation for dig level" );							_gameboardViewClip.pauseGame(false);							_gameboardViewClip.gameboardReference.hideDigMouseCursor();							//_exitConfirmationViewClip.addEventListener( BoogaEvent.ON_EXIT_CONFIRMATION_CONTINUE, handleExitGameLevelContinue );							//_exitConfirmationViewClip.addEventListener( BoogaEvent.ON_EXIT_CONFIRMATION_CANCEL, handleExitGameLevelCancel );							_exitConfirmationViewClip.onContinueClicked.add( handleExitGameLevelContinue );							_exitConfirmationViewClip.onCancelClicked.add( handleExitGameLevelCancel );							_exitConfirmationViewClip.show();							return;						}												showTransition();												if( _currentContentView != null )						{							_currentContentView.hide();							_islandSelectionViewClip.hide();						}												_currentContentView = _contentViews[contentId];						_currentContentView.show();												//trace( "_currentContentView: "+_currentContentView );												if( contentId == 0 )						{							//play view							//_currentContentView.visible = false;														if( MainGameController.getInstance().currentUser.level >= 7 )							{								_mainNavigationClip.store_mc.visible = true;								_mainNavigationClip.storeBackground_mc.visible = true;							}							else							{								_mainNavigationClip.store_mc.visible = false;								_mainNavigationClip.storeBackground_mc.visible = false;							}													}						else if( contentId == 1 )						{							//journal view						}												if( MainGameController.getInstance().currentUser.level >= 7 )						{							EventNotificationCenter.getInstance().sendNotification( BoogaEvent.ON_NAVIGATION_STORE_SHOW, this );						}												//if( _adventureLevelPopupViewClip.willShowPopupView )						//{							//_adventureLevelPopupViewClip.show();						//}												//if( MainGameController.getInstance().currentUser.tutorialStore && MainGameController.getInstance().currentUser.level >= 7 )						//{							//handleShowTutorialStore(null);						//}											}									}							/** handleNavigateToSendGift			  *	---------------------------------------------------------------------------- */				protected function handleNavigateToSendGift( event:BoogaEvent=null ):void				{					if( _mainNavigationClip.contentId == 0 )						_islandSelectionViewClip.hideMagnifyingGlassMouseCursor();										if( _messageViewClip.isContentVisible )						_messageViewClip.hide();										if( _storeViewClip.isContentVisible )						_storeViewClip.hide();										if( _languagesSelectViewClip.isContentVisible )						_languagesSelectViewClip.hide();										if( _addFacebookCreditsViewClip.isContentVisible )						_addFacebookCreditsViewClip.hide();										_sendGiftViewClip.show();										if( _playViewClip.gameboardView.isPlayingGameLevel )					{						//_playViewClip.gameboardView.gameboardController.pause();						_gameboardViewClip.pauseGame(false);						_gameboardViewClip.showPlayViewControlsClip();						//_gameboardViewClip.playViewControlsClip.showGameLevelControls();					}					else if( _gameboardViewClip.isPlayingDigLevel )					{						_gameboardViewClip.gameboardReference.hideDigMouseCursor();					}				}							/** handleNavigateToMessage			  *	---------------------------------------------------------------------------- */				protected function handleNavigateToMessage( event:BoogaEvent=null ):void				{					trace( "handleNavigateToMessage();" );										if( _mainNavigationClip.contentId == 0 )						_islandSelectionViewClip.hideMagnifyingGlassMouseCursor();										if( _sendGiftViewClip.isContentVisible )						_sendGiftViewClip.hide();										if( _storeViewClip.isContentVisible )						_storeViewClip.hide();										if( _languagesSelectViewClip.isContentVisible )						_languagesSelectViewClip.hide();										if( _addFacebookCreditsViewClip.isContentVisible )						_addFacebookCreditsViewClip.hide();										_messageViewClip.show();										handlePopupShow();				}							/** handleNavigateToStore			  *	---------------------------------------------------------------------------- */				protected function handleNavigateToStore( event:BoogaEvent=null ):void				{					if( _mainNavigationClip.contentId == 0 )						_islandSelectionViewClip.hideMagnifyingGlassMouseCursor();										if( _messageViewClip.isContentVisible )						_messageViewClip.hide();										if( _sendGiftViewClip.isContentVisible )						_sendGiftViewClip.hide();										if( _languagesSelectViewClip.isContentVisible )						_languagesSelectViewClip.hide();										if( _addFacebookCreditsViewClip.isContentVisible )						_addFacebookCreditsViewClip.hide();										_storeViewClip.show();										handlePopupShow();				}							/** handleNavigateToLanguage			  *	---------------------------------------------------------------------------- */				protected function handleNavigateToLanguages( event:BoogaEvent=null ):void				{					if( _mainNavigationClip.contentId == 0 )						_islandSelectionViewClip.hideMagnifyingGlassMouseCursor();										if( _messageViewClip.isContentVisible )						_messageViewClip.hide();										if( _sendGiftViewClip.isContentVisible )						_sendGiftViewClip.hide();										if( _storeViewClip.isContentVisible )						_storeViewClip.hide();										if( _addFacebookCreditsViewClip.isContentVisible )						_addFacebookCreditsViewClip.hide();										_languagesSelectViewClip.show();										handlePopupShow();				}							/** handlePopupShow			  *	---------------------------------------------------------------------------- */				protected function handlePopupShow():void				{					if( _gameboardViewClip.isPlayingGameLevel )					{						//_gameboardViewClip.gameboardController.pause();						_gameboardViewClip.pauseGame(false);						_gameboardViewClip.showPlayViewControlsClip();						//_gameboardViewClip.playViewControlsClip.showGameLevelControls();					}					else if( _gameboardViewClip.isPlayingDigLevel )					{						_gameboardViewClip.gameboardReference.hideDigMouseCursor();					}				}							/** handlePopupHid			  *	---------------------------------------------------------------------------- */				protected function handlePopupHid( event:BoogaEvent ):void				{					trace( "isPlayingGameLevel: "+_gameboardViewClip.isPlayingGameLevel );					trace( "isPlayingDigLevel: "+_gameboardViewClip.isPlayingDigLevel );										if( _gameboardViewClip.isPlayingGameLevel )					{						//_gameboardViewClip.gameboardController.unpause();						_gameboardViewClip.unpauseGame();						_gameboardViewClip.showPlayViewControlsClip();					}					else if( _gameboardViewClip.isPlayingDigLevel )					{						_gameboardViewClip.gameboardReference.showDigMouseCursor();					}					else if( _gameboardViewClip.isContentVisible )					{											}					else					{						if( _mainNavigationClip.contentId == 0 )						{							_islandSelectionViewClip.willShowMagnifyingGlassCursor = true;							_islandSelectionViewClip.showMagnifyingGlassMouseCursor();						}					}										if( event.currentTarget == _messageViewClip )					{						if( MainGameController.getInstance().currentUser.messagesCount > 0 )						{							_mainNavigationClip.showNewMessage();						}						else						{							_mainNavigationClip.hideNewMessage();						}					}				}							/** handleExitGameLevelContinue			  *	---------------------------------------------------------------------------- */				protected function handleExitGameLevelContinue():void				{					_exitConfirmationViewClip.onContinueClicked.remove( handleExitGameLevelContinue );					_exitConfirmationViewClip.onCancelClicked.remove( handleExitGameLevelCancel );										_exitConfirmationViewClip.hide();										if( _gameboardViewClip.isPlayingGameLevel )					{						_gameboardViewClip.stopPlayGameLevel();					}					else if( _gameboardViewClip.isPlayingDigLevel )					{						_gameboardViewClip.stopPlayDigLevel();					}										NavigationController.getInstance().navigateTo( _mainNavigationClip.contentId, _mainNavigationClip.group );										if( MainGameController.getInstance().currentUser.level >= 7 )					{						EventNotificationCenter.getInstance().sendNotification( BoogaEvent.ON_NAVIGATION_STORE_SHOW, this );					}				}							/** handleExitGameLevelCancel			  *	---------------------------------------------------------------------------- */				protected function handleExitGameLevelCancel():void				{					_exitConfirmationViewClip.onContinueClicked.remove( handleExitGameLevelContinue );					_exitConfirmationViewClip.onCancelClicked.remove( handleExitGameLevelCancel );										_exitConfirmationViewClip.hide();										if( _gameboardViewClip.isPlayingGameLevel )					{						_gameboardViewClip.unpauseGame();						NavigationController.getInstance().navigateTo( 0, _mainNavigationClip.group );					}					else if( _gameboardViewClip.isPlayingDigLevel )					{						_gameboardViewClip.unpauseGame();						//_gameboardViewClip.gameboardReference.showDigMouseCursor();						NavigationController.getInstance().navigateTo( 1, _mainNavigationClip.group );					}										//NavigationController.getInstance().navigateTo( 0, _mainNavigationClip.group );				}							/** handleExitDigLevelContinue			  *	---------------------------------------------------------------------------- 				protected function handleExitDigLevelContinue( event:BoogaEvent ):void				{					_exitConfirmationViewClip.removeEventListener( BoogaEvent.ON_EXIT_CONFIRMATION_CONTINUE, handleExitDigLevelContinue );					_exitConfirmationViewClip.removeEventListener( BoogaEvent.ON_EXIT_CONFIRMATION_CANCEL, handleExitDigLevelCancel );										_exitConfirmationViewClip.hide();					_gameboardViewClip.stopPlayDigLevel();					NavigationController.getInstance().navigateTo( _mainNavigationClip.contentId, _mainNavigationClip.group );										if( MainGameController.getInstance().currentUser.level >= 7 )					{						EventNotificationCenter.getInstance().sendNotification( BoogaEvent.ON_NAVIGATION_STORE_SHOW, this );					}				}*/							/** handleExitDigLevelCancel			  *	---------------------------------------------------------------------------- 				protected function handleExitDigLevelCancel( event:BoogaEvent ):void				{					_exitConfirmationViewClip.removeEventListener( BoogaEvent.ON_EXIT_CONFIRMATION_CONTINUE, handleExitDigLevelContinue );					_exitConfirmationViewClip.removeEventListener( BoogaEvent.ON_EXIT_CONFIRMATION_CANCEL, handleExitDigLevelCancel );										_exitConfirmationViewClip.hide();					//NavigationController.getInstance().navigateTo( 1, _mainNavigationClip.group );				}*/							/** handleShowTutorialFullScreen			  *	---------------------------------------------------------------------------- */				protected function handleShowTutorialFullScreen( event:CustomEvent ):void				{					var globalPosition:Point = _playViewControlsClip.fullScreen_mc.parent.localToGlobal( new Point(_playViewControlsClip.fullScreen_mc.x+10, _playViewControlsClip.fullScreen_mc.y+10) );					EventNotificationCenter.getInstance().sendNotificationWithParameters( BoogaEvent.ON_TUTORIAL_SHOW, this, {targetX:globalPosition.x, targetY:globalPosition.y, text:StringsIndex.getInstance().getStringByName("TUTORIAL_FULL_SCREEN_1")} );										_playViewControlsClip.disableButtonsForFullScreenTutorial();					_mainNavigationClip.languagesClip.setDeactive();				}								private function handleHideTutorialFullScreen( event:CustomEvent ):void				{					_mainNavigationClip.languagesClip.setActive();					_playViewControlsClip.enableButtonsAfterFullScreenTutorial();				}							/** handleShowTutorialStore			  *	---------------------------------------------------------------------------- */				protected function handleShowTutorialStore( event:CustomEvent ):void				{					var globalPosition:Point = _mainNavigationClip.store_mc.parent.localToGlobal( new Point(_mainNavigationClip.store_mc.x+30, _mainNavigationClip.store_mc.y+15) );					EventNotificationCenter.getInstance().sendNotificationWithParameters( BoogaEvent.ON_TUTORIAL_SHOW, this, {targetX:globalPosition.x, targetY:globalPosition.y, text:StringsIndex.getInstance().getStringByName("TUTORIAL_STORE_1")} );				}							/** handleNewIslandUnlocked			  *	---------------------------------------------------------------------------- */				private function handleNewIslandUnlocked( event:BoogaEvent ):void				{					_islandSelectionViewClip.willShowMagnifyingGlassCursor = false;										_unlockNewIslandViewClip.setNewIsland( _islandSelectionViewClip.island );					_unlockNewIslandViewClip.show();										_islandSelectionViewClip.hideMagnifyingGlassMouseCursor();				}							/** handleExitGameClicked			  *	---------------------------------------------------------------------------- */				private function handleExitGameClicked( event:GameLevelEvent ):void				{					_exitConfirmationViewClip.onContinueClicked.add( handleExitGameLevelToMapContinue );					_exitConfirmationViewClip.onCancelClicked.add( handleExitGameLevelToMapCancel );					_exitConfirmationViewClip.show();				}								private function handleExitGameLevelToMapContinue():void				{					_exitConfirmationViewClip.onContinueClicked.remove( handleExitGameLevelToMapContinue );					_exitConfirmationViewClip.onCancelClicked.remove( handleExitGameLevelToMapCancel );					_exitConfirmationViewClip.hide();										_playViewClip.showIslandSelect();				}								private function handleExitGameLevelToMapCancel():void				{					_exitConfirmationViewClip.onContinueClicked.remove( handleExitGameLevelToMapContinue );					_exitConfirmationViewClip.onCancelClicked.remove( handleExitGameLevelToMapCancel );					_exitConfirmationViewClip.hide();										_gameboardViewClip.unpauseGame();				}								private function handleReplayGameClicked( event:GameLevelEvent ):void				{					_exitConfirmationViewClip.onContinueClicked.add( handleReplayGameLevelContinue );					_exitConfirmationViewClip.onCancelClicked.add( handleReplayGameLevelCancel );					_exitConfirmationViewClip.show(false);				}								private function handleReplayGameLevelContinue():void				{					_exitConfirmationViewClip.onContinueClicked.remove( handleReplayGameLevelContinue );					_exitConfirmationViewClip.onCancelClicked.remove( handleReplayGameLevelCancel );					_exitConfirmationViewClip.hide();										_playViewClip.replayGameLevel();				}								private function handleReplayGameLevelCancel():void				{					_exitConfirmationViewClip.onContinueClicked.remove( handleReplayGameLevelContinue );					_exitConfirmationViewClip.onCancelClicked.remove( handleReplayGameLevelCancel );					_exitConfirmationViewClip.hide();										_gameboardViewClip.unpauseGame();				}								private function handleLoadIslandsDataCompleted( event:BoogaEvent ):void				{					if( MainGameController.getInstance().currentUser.mysteryGift && !MainGameController.getInstance().currentUser.tutorialMap )					{						//_mysteryGiftPopupViewClip.initMysteryGift( GameLevelDataIndex.getInstance().gods[0] );						_mysteryGiftPopupViewClip.show();						_islandSelectionViewClip.willShowMagnifyingGlassCursor = false;						_islandSelectionViewClip.hideMagnifyingGlassMouseCursor();					}				}							/** showTransition			  *	---------------------------------------------------------------------------- */				protected function showTransition():void				{					trace( "showTransition();" );										whiteFlash_mc.alpha = 0;					whiteFlash_mc.visible = true;					TweenLite.to( whiteFlash_mc, .25, {alpha:1} );					TweenLite.to( whiteFlash_mc, .25, {alpha:0, delay:.25, overwrite:false, onComplete:handleTransitionAnimationEnds} );										//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_screen_transition_flash.wav").volume, 0, "sfx_screen_transition_flash.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_screen_transition_flash.wav", false, "sfx_screen_transition_flash.wav", "sfx_screen_transition_flash.wav", SoundEffectPlayer.SOUND_PLAYER_SFX );				}							/** handleShowTransition			  *	---------------------------------------------------------------------------- */				protected function handleShowTransition( event:CustomEvent ):void				{					showTransition();				}							/** handleHideTransition			  *	---------------------------------------------------------------------------- */				protected function handleHideTransition( event:CustomEvent ):void				{					TweenLite.killTweensOf( whiteFlash_mc );					whiteFlash_mc.visible = false;				}							/** handleTransitionAnimationEnds			  *	---------------------------------------------------------------------------- */				protected function handleTransitionAnimationEnds():void				{					whiteFlash_mc.visible = false;				}											/** handleBugReportingClicked			  *	---------------------------------------------------------------------------- */				protected function handleBugReportingClicked( event:Event ):void				{					if( _mainNavigationClip.contentId == 0 )						_islandSelectionViewClip.hideMagnifyingGlassMouseCursor();										_bugReportingFormViewClip.show();										handlePopupShow();									}				/*				protected function handleBugReportingFormHide( event:BoogaEvent ):void				{					if( _mainNavigationClip.contentId == 0 || _mainNavigationClip.contentId == 1 )						_islandSelectionViewClip.showMagnifyingGlassMouseCursor();										if( _gameboardViewClip.isPlayingGameLevel )					{						_gameboardViewClip.gameboardController.unpause();						_gameboardViewClip.showPlayViewControlsClip();						//_gameboardViewClip.playViewControlsClip.showGameLevelControls();					}				}				*/							/** handleAddFacebookCreditsClicked			  *	---------------------------------------------------------------------------- */				protected function handleAddFacebookCreditsClicked( event:BoogaEvent ):void				{					if( _mainNavigationClip.contentId == 0 )						_islandSelectionViewClip.hideMagnifyingGlassMouseCursor();										if( _messageViewClip.isContentVisible )						_messageViewClip.hide();										if( _storeViewClip.isContentVisible )						_storeViewClip.hide();										if( _sendGiftViewClip.isContentVisible )						_sendGiftViewClip.hide();										if( _languagesSelectViewClip.isContentVisible )						_languagesSelectViewClip.hide();										handlePopupShow();										_addFacebookCreditsViewClip.show();				}											/** handleCheckForNewMessagesTimerFired			  *	---------------------------------------------------------------------------- */				protected function handleCheckForNewMessagesTimerFired( timer:CustomTimer ):void				{					_messageDataController.getNewMessagesCount( MainGameController.getInstance().currentUser.id );				}								protected function handleGetNewMessagesCountComplete( event:CustomEvent ):void				{					if( event.customParameters.count > 0 )					{						_mainNavigationClip.showNewMessage();						MainGameController.getInstance().currentUser.messagesCount = event.customParameters.count;					}					else						_mainNavigationClip.hideNewMessage();				}								private function handleFullScreenToggled( event:Event=null ):void				{					if( _contentClip.stage.displayState == StageDisplayState.FULL_SCREEN )					{						var yDifference:Number = 160;						if( _mainNavigationClip.normalScreenY - 160 < MainGameDataIndex.getInstance().outOfBoundsRectangle.top )						{							//yDifference = 160 + MainGameDataIndex.getInstance().outOfBoundsRectangle.top;							yDifference = _mainNavigationClip.normalScreenY - MainGameDataIndex.getInstance().outOfBoundsRectangle.top - 10;						}												ConsoleBroadcaster.broadcast( "MainGame", "yDifference: "+yDifference );						ConsoleBroadcaster.broadcast( "MainGame", "top: "+MainGameDataIndex.getInstance().outOfBoundsRectangle.top );												_mainNavigationClip.dynamicClip.y = _mainNavigationClip.normalScreenY - yDifference;						_facebookCreditsBalanceViewClip.contentClip.y = _facebookCreditsBalanceViewClip.normalScreenY - yDifference;						_playViewControlsClip.contentClip.y = _playViewControlsClip.normalScreenY - yDifference;						_playViewClip.toggleFullScreen( true, yDifference );					}					else					{						_mainNavigationClip.dynamicClip.y = _mainNavigationClip.normalScreenY;						_facebookCreditsBalanceViewClip.contentClip.y = _facebookCreditsBalanceViewClip.normalScreenY;						_playViewControlsClip.contentClip.y = _playViewControlsClip.normalScreenY;						_playViewClip.toggleFullScreen( false );					}				}											/** handleHideUIElements			  *	---------------------------------------------------------------------------- *			  *	When the tutorial level started, hide the top bar.			  *	---------------------------------------------------------------------------- */				private function handleHideUIElements( event:CustomEvent ):void				{					//_playViewClip.gameboardView.gameboardController.addEventListener( BoogaEvent.ON_UI_ELEMENTS_SHOW, handleShowUIElements, false, 0, true );					EventNotificationCenter.getInstance().addEventListener( BoogaEvent.ON_UI_ELEMENTS_SHOW, handleShowUIElements, false, 0, true );										_mainNavigationClip.dynamicClip.visible = false;					_facebookCreditsBalanceViewClip.contentClip.visible = false;					_playViewControlsClip.contentClip.visible = false;										_playViewClip.hideReplayExitButtons();					_playViewClip.hideSmallAdventureLevel();				}							/** handleShowUIElements			  *	---------------------------------------------------------------------------- *			  *	When the tutorial level is finished, show the top bar.			  *	---------------------------------------------------------------------------- */				private function handleShowUIElements( event:CustomEvent ):void				{					//_playViewClip.gameboardView.gameboardController.removeEventListener( BoogaEvent.ON_UI_ELEMENTS_SHOW, handleShowUIElements );					EventNotificationCenter.getInstance().removeEventListener( BoogaEvent.ON_UI_ELEMENTS_SHOW, handleShowUIElements );										_mainNavigationClip.dynamicClip.visible = true;					_facebookCreditsBalanceViewClip.contentClip.visible = true;					_playViewControlsClip.contentClip.visible = true;										_playViewClip.showReplayExitButtons();					_playViewClip.showSmallAdventureLevel();				}								public function showWarningPopupForLowerQuality():void				{					if( _gameboardViewClip.isPlayingGameLevel )					{						_gameboardViewClip.pauseGame(false);						//_gameboardViewClip.showPlayViewControlsClip();					}					else if( _mainNavigationClip.contentId == 0 )					{						_islandSelectionViewClip.hideMagnifyingGlassMouseCursor();					}										EventNotificationCenter.getInstance().addSignalListener( BoogaEvent.ON_WARNING_HIDE, handleWarningHid, this );					EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_WARNING_SHOW, this, {text:StringsIndex.getInstance().getStringByName("QUALITY_ADJUSTMENT")} );				}								private function handleWarningHid( customParameters:Object ):void				{					EventNotificationCenter.getInstance().removeSignalListener( BoogaEvent.ON_WARNING_HIDE, handleWarningHid );										if( _gameboardViewClip.isPlayingGameLevel )					{						_gameboardViewClip.unpauseGame();					}					else if( _mainNavigationClip.contentId == 0 )					{						_islandSelectionViewClip.showMagnifyingGlassMouseCursor();					}									}							/** checkForFPS			  *	---------------------------------------------------------------------------- 				public function checkForFPS():void				{					var enemy:Enemy;					_sampleEnemies = new Vector.<Enemy>;					var assets:Array = [];										for( var i:int=0; i<GameLevelDataIndex.getInstance().enemies.length; ++i )					{						enemy = GameLevelDataIndex.getInstance().enemies[i];												if( enemy != null )						{							_sampleEnemies.push( enemy );														assets.push( {id:enemy.walkUpAnimationObject.cacheId, url:enemy.walkUpAnimationObject.assetURL} );							assets.push( {id:enemy.walkDownAnimationObject.cacheId, url:enemy.walkDownAnimationObject.assetURL} );						}						else						{							break;						}												if( i == 3 )							break;					}										_loadingAssetViewClip.showLoadingProgress();										MainGameController.getInstance().assetLoaderController.addEventListener( AssetLoaderEvent.COMPLETE, handleLoadToCheckForFPSComplete, false, 0, true );					MainGameController.getInstance().assetLoaderController.addEventListener( AssetLoaderEvent.ERROR, handleLoadToCheckForFPSError, false, 0, true );					MainGameController.getInstance().assetLoaderController.loadAssets( assets );				}								protected function handleLoadToCheckForFPSComplete( event:AssetLoaderEvent ):void				{					MainGameController.getInstance().assetLoaderController.removeEventListener( AssetLoaderEvent.COMPLETE, handleLoadToCheckForFPSComplete );					MainGameController.getInstance().assetLoaderController.removeEventListener( AssetLoaderEvent.ERROR, handleLoadToCheckForFPSError );										var animationDisplayObject:AnimationDisplayObject;										_sampleAnimationDisplayObjects = new Vector.<AnimationDisplayObject>;										for( var i:int=0; i<_sampleEnemies.length; ++i )					{						animationDisplayObject = new AnimationDisplayObject();						animationDisplayObject.contentClip = new (getDefinitionByName("DisplayObject.animation") as Class)();						animationDisplayObject.smoothing = false;						animationDisplayObject.init();						animationDisplayObject.animationObject = _sampleEnemies[i].walkUpAnimationObject;						animationDisplayObject.sourceBD = BitmapDataManager.getInstance().getBitmapData( _sampleEnemies[i].walkUpAnimationObject.cacheId ).bitmapData;						animationDisplayObject.contentClip.x = i*100;						animationDisplayObject.contentClip.y = 0;						checkFPSContainer_mc.addChild( animationDisplayObject.contentClip );						animationDisplayObject.initCanvas();						animationDisplayObject.startAnimation(true);						_sampleAnimationDisplayObjects.push( animationDisplayObject );												animationDisplayObject = new AnimationDisplayObject();						animationDisplayObject.contentClip = new (getDefinitionByName("DisplayObject.animation") as Class)();						animationDisplayObject.smoothing = false;						animationDisplayObject.init();						animationDisplayObject.animationObject = _sampleEnemies[i].walkDownAnimationObject;						animationDisplayObject.sourceBD = BitmapDataManager.getInstance().getBitmapData( _sampleEnemies[i].walkDownAnimationObject.cacheId ).bitmapData;						animationDisplayObject.contentClip.x = i*100;						animationDisplayObject.contentClip.y = 100;						checkFPSContainer_mc.addChild( animationDisplayObject.contentClip );						animationDisplayObject.initCanvas();						animationDisplayObject.startAnimation(true);						_sampleAnimationDisplayObjects.push( animationDisplayObject );					}										_checkForFPSTimer = new CustomTimer( 33, 155 );					_checkForFPSTimer.addEventListener( TimerEvent.TIMER, handleCheckForFPSTimerFired );					_checkForFPSTimer.addEventListener( TimerEvent.TIMER_COMPLETE, handleCheckForFPSTimerCompleted );					_checkForFPSTimer.start();				}								protected function handleLoadToCheckForFPSError( event:AssetLoaderEvent ):void				{					MainGameController.getInstance().assetLoaderController.removeEventListener( AssetLoaderEvent.COMPLETE, handleLoadToCheckForFPSComplete );					MainGameController.getInstance().assetLoaderController.removeEventListener( AssetLoaderEvent.ERROR, handleLoadToCheckForFPSError );				}								protected function handleCheckForFPSTimerFired( event:TimerEvent ):void				{					for( var i:int=0; i<_sampleAnimationDisplayObjects.length; ++i )					{						_sampleAnimationDisplayObjects[i].showNextAnimation();					}				}								protected function handleCheckForFPSTimerCompleted( event:TimerEvent ):void				{					_checkForFPSTimer.removeEventListener( TimerEvent.TIMER, handleCheckForFPSTimerFired );					_checkForFPSTimer.removeEventListener( TimerEvent.TIMER_COMPLETE, handleCheckForFPSTimerCompleted );					_checkForFPSTimer = null;										for( var i:int=0; i<_sampleAnimationDisplayObjects.length; ++i )					{						_sampleAnimationDisplayObjects[i].stopAnimation();						checkFPSContainer_mc.removeChild( _sampleAnimationDisplayObjects[i].contentClip );						_sampleAnimationDisplayObjects[i].kill();						_sampleAnimationDisplayObjects[i] = null;					}										_loadingAssetViewClip.hideLoadingProgress();										init();				}*/		}			}