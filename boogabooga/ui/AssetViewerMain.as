/** AssetViewerMain  *	---------------------------------------------------------------------------- *  *	@desc: Base Main Class that should take care of all the preloading of  *		the necessary files for the game.  *	@author:  *		Christian Widodo [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui	{		import flash.display.MovieClip;		import flash.display.Stage;		import flash.display.StageAlign;		import flash.display.StageScaleMode;		import flash.events.Event;		import flash.events.IOErrorEvent;		import flash.events.FullScreenEvent;		import flash.events.ProgressEvent;		import flash.external.ExternalInterface;		import flash.net.URLLoader;		import flash.net.URLRequest;		import flash.net.URLRequestMethod;		import flash.net.URLVariables;		import flash.text.Font;		import flash.utils.getDefinitionByName;		import flash.text.Font;				import com.avatarlabs.utils.cache.AssetLoader;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.AssetLoaderEvent;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.loader.CustomLoader;				import com.boogabooga.data.SettingsIndex;		import flash.system.LoaderContext;		import flash.system.ApplicationDomain;				public class AssetViewerMain extends MovieClip		{			protected var _backgroundClip:MovieClip;			protected var _linkageId:String;			protected var _assetURL:String;						/**	Stage Instances **/			public var assetContainer_mc:MovieClip;			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function AssetViewerMain()				{					this.loaderInfo.addEventListener( ProgressEvent.PROGRESS, handlePreloadProgress, false, 0, true );					this.loaderInfo.addEventListener( Event.COMPLETE, handlePreloadComplete, false, 0, true );										this.addEventListener( Event.ENTER_FRAME, handleEnterFrame, false, 0, true );										ConsoleBroadcaster.enabled = true;										ExternalInterface.addCallback( 'loadEnvironmentAsset', loadEnvironmentAsset );					ExternalInterface.addCallback( 'checkEnvironmentAsset', checkEnvironmentAsset );										ConsoleBroadcaster.broadcast( "AssetViewerMain", 'external interface available ? '+ExternalInterface.available );										stop();									}							/** handlePreloadProgress			  *	---------------------------------------------------------------------------- */				protected function handlePreloadProgress( event:ProgressEvent ):void				{					//ConsoleBroadcaster.broadcast( "AssetViewerMain", "handlePreloadProgress():" );				}							/** handlePreloadComplete			  *	---------------------------------------------------------------------------- */				protected function handlePreloadComplete( event:Event ):void				{					ConsoleBroadcaster.broadcast( "AssetViewerMain", "handlePreloadComplete();" );										event.currentTarget.removeEventListener( ProgressEvent.PROGRESS, handlePreloadProgress );					event.currentTarget.removeEventListener( Event.COMPLETE, handlePreloadComplete );					removeEventListener( Event.ENTER_FRAME, handleEnterFrame );										ExternalInterface.call( 'swfIsReady' );				}								protected function handleEnterFrame( event:Event ):void				{					if( this.loaderInfo.bytesLoaded == this.loaderInfo.bytesTotal )					{						ConsoleBroadcaster.broadcast( "AssetViewerMain", "handleEnterFrame done" );												event.currentTarget.removeEventListener( ProgressEvent.PROGRESS, handlePreloadProgress );						event.currentTarget.removeEventListener( Event.COMPLETE, handlePreloadComplete );						removeEventListener( Event.ENTER_FRAME, handleEnterFrame );												ExternalInterface.call( 'swfIsReady' );					}				}								protected function loadEnvironmentAsset( linkageId:String, url:String ):void				{					ConsoleBroadcaster.broadcast( 'AssetViewerMain', 'loadEnvironmentAsset( '+linkageId+', '+url+' );' );										_linkageId = linkageId;					_assetURL = url;										var assetLoader:AssetLoader = new AssetLoader();						assetLoader.autoKill = true;						//assetLoader.addEventListener( AssetLoaderEvent.START, handleLoadAdditionalFilesStart, false, 0, true );						assetLoader.addEventListener( AssetLoaderEvent.COMPLETE, handleLoadAdditionalFilesComplete, false, 0, true );						assetLoader.addEventListener( AssetLoaderEvent.PROGRESS, handleLoadAdditionalFilesProgress, false, 0, true );						assetLoader.addEventListener( AssetLoaderEvent.ERROR, handleLoadAdditionalFilesError, false, 0, true );						//assetLoader.addEventListener( AssetLoaderEvent.ITEM_COMPLETE, handleLoadAdditionalFilesItemComplete, false, 0, true );						assetLoader.addAssetToLoad( linkageId+'Swf', url );						assetLoader.startLoadAssets();				}							/** handleLoadAdditionalFilesStart			  *	---------------------------------------------------------------------------- */				protected function handleLoadAdditionalFilesStart( event:AssetLoaderEvent ):void				{									}							/** handleLoadAdditionalFilesComplete			  *	---------------------------------------------------------------------------- */				protected function handleLoadAdditionalFilesComplete( event:AssetLoaderEvent ):void				{					ConsoleBroadcaster.broadcast( "AssetViewerMain", "handleLoadAdditionalFilesComplete();" );										//event.currentTarget.removeEventListener( AssetLoaderEvent.START, handleLoadAdditionalFilesStart );					event.currentTarget.removeEventListener( AssetLoaderEvent.PROGRESS, handleLoadAdditionalFilesProgress );					event.currentTarget.removeEventListener( AssetLoaderEvent.COMPLETE, handleLoadAdditionalFilesComplete );					event.currentTarget.removeEventListener( AssetLoaderEvent.ERROR, handleLoadAdditionalFilesError );										while( assetContainer_mc.numChildren > 0 )						assetContainer_mc.removeChildAt(0);										try					{						var clip:MovieClip = new (getDefinitionByName(_linkageId) as Class)();							clip.x = clip.width;							clip.y = clip.height;													assetContainer_mc.addChild( clip );												ExternalInterface.call( 'loadEnvironmentAssetSuccess' );					}					catch( e:Error )					{						ExternalInterface.call( 'loadEnvironmentAssetError' );					}				}							/** handleLoadAdditionalFilesProgress			  *	---------------------------------------------------------------------------- */				protected function handleLoadAdditionalFilesProgress( event:AssetLoaderEvent ):void				{					trace( event.percentage );				}							/** handleLoadAdditionalFilesError			  *	---------------------------------------------------------------------------- */				protected function handleLoadAdditionalFilesError( event:AssetLoaderEvent ):void				{					ConsoleBroadcaster.broadcast( "AssetViewerMain", "handleLoadAdditionalFilesError();" );										ExternalInterface.call( 'loadEnvironmentAssetError' );				}								protected function checkEnvironmentAsset( linkageId:String, url:String ):void				{									}		}			}