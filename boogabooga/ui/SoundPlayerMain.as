/** SoundPlayerMain  *	---------------------------------------------------------------------------- *  *	@desc: SoundPlayerMain class for sound_player.fla to play the sound from the  *		editor so game designers can test how loud it is.  *	@author:  *		Christian Widodo [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui	{		import flash.display.MovieClip;		import flash.display.Stage;		import flash.display.StageAlign;		import flash.display.StageScaleMode;		import flash.events.Event;		import flash.events.IOErrorEvent;		import flash.events.FullScreenEvent;		import flash.events.ProgressEvent;		import flash.external.ExternalInterface;		import flash.net.URLLoader;		import flash.net.URLRequest;		import flash.net.URLRequestMethod;		import flash.net.URLVariables;		import flash.system.ApplicationDomain;		import flash.system.LoaderContext;		import flash.text.Font;		import flash.utils.getDefinitionByName;		import flash.text.Font;				import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.AssetLoaderEvent;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.loader.CustomLoader;		import com.avatarlabs.utils.sound.SoundEffectPlayer;		import com.avatarlabs.utils.userinterface.UIButton;				import com.boogabooga.data.SettingsIndex;		import com.boogabooga.controller.AssetLoaderController;		import com.avatarlabs.utils.userinterface.UICheckBox;		import flash.text.TextField;				public class SoundPlayerMain extends MovieClip		{			protected var _backgroundClip:MovieClip;			protected var _assetURL:String;			protected var _soundId:String;			protected var _volume:Number;						protected var _assetLoaderController:AssetLoaderController;						/**	Stage Instances **/			public var container_mc:MovieClip;			public var play_mc:UIButton;			public var pause_mc:UIButton;			public var loopCheckBox_mc:UICheckBox;			public var error_txt:TextField;			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function SoundPlayerMain()				{					this.loaderInfo.addEventListener( ProgressEvent.PROGRESS, handlePreloadProgress, false, 0, true );					this.loaderInfo.addEventListener( Event.COMPLETE, handlePreloadComplete, false, 0, true );										this.addEventListener( Event.ENTER_FRAME, handleEnterFrame, false, 0, true );										ConsoleBroadcaster.enabled = true;										stop();										ExternalInterface.addCallback( "playSound", playSound );					ExternalInterface.addCallback( "stopSound", stopSound );										SoundEffectPlayer.getInstance().addEventListener( "onPlaySoundError", handlePlaySoundError );				}							/** handlePreloadProgress			  *	---------------------------------------------------------------------------- */				protected function handlePreloadProgress( event:ProgressEvent ):void				{					//ConsoleBroadcaster.broadcast( "SoundPlayerMain", "handlePreloadProgress():" );				}							/** handlePreloadComplete			  *	---------------------------------------------------------------------------- */				protected function handlePreloadComplete( event:Event ):void				{					ConsoleBroadcaster.broadcast( "SoundPlayerMain", "handlePreloadComplete();" );										event.currentTarget.removeEventListener( ProgressEvent.PROGRESS, handlePreloadProgress );					event.currentTarget.removeEventListener( Event.COMPLETE, handlePreloadComplete );					removeEventListener( Event.ENTER_FRAME, handleEnterFrame );										//loadBackgroundAsset();										init();				}								protected function handleEnterFrame( event:Event ):void				{					if( this.loaderInfo.bytesLoaded == this.loaderInfo.bytesTotal )					{						ConsoleBroadcaster.broadcast( "SoundPlayerMain", "handleEnterFrame done" );												event.currentTarget.removeEventListener( ProgressEvent.PROGRESS, handlePreloadProgress );						event.currentTarget.removeEventListener( Event.COMPLETE, handlePreloadComplete );						removeEventListener( Event.ENTER_FRAME, handleEnterFrame );												init();					}				}								protected function init():void				{					play_mc.addEventListener( "onClick", handlePlayClicked, false, 0, true );					pause_mc.addEventListener( "onClick", handlePauseClicked, false, 0, true );										if( this.loaderInfo.parameters.baseURL )						SettingsIndex.getInstance().contentURL = this.loaderInfo.parameters.baseURL;										ConsoleBroadcaster.broadcast( "SoundPlayerMain", "baseURL: "+SettingsIndex.getInstance().baseURL );				}								protected function handlePlayClicked( event:Event ):void				{					ExternalInterface.call( "getSoundProperties" );										//playSound( "files/assets/sounds/sound_main.swf", "music_loop_store_map_dig_journal.wav", 1 );				}								protected function handlePauseClicked( event:Event ):void				{					stopSound();				}								protected function playSound( assetURL:String, soundId:String, volume:Number ):void				{					ConsoleBroadcaster.broadcast( "SoundPlayerMain", "playSound("+assetURL+", "+soundId+", "+volume+");" );										error_txt.text = "";										if( _assetLoaderController == null )					{						_assetLoaderController = new AssetLoaderController();						_assetLoaderController.addEventListener( AssetLoaderEvent.COMPLETE, handleLoadAssetComplete );						_assetLoaderController.addEventListener( AssetLoaderEvent.ERROR, handleLoadAssetError );					}										_assetURL = assetURL;					_soundId = soundId;					_volume = volume;										_assetLoaderController.loadAssets( [{id:assetURL, url:assetURL}] );				}								protected function stopSound():void				{					ConsoleBroadcaster.broadcast( "SoundPlayerMain", "stopSound();" );										SoundEffectPlayer.getInstance().stopAllSounds();				}								protected function handleLoadAssetComplete( event:AssetLoaderEvent ):void				{					ConsoleBroadcaster.broadcast( "SoundPlayerMain", "handleLoadAssetComplete();" );										SoundEffectPlayer.getInstance().addSound( _soundId, _soundId );					SoundEffectPlayer.getInstance().setVolume( _volume );					SoundEffectPlayer.getInstance().playLibrarySound( _soundId, loopCheckBox_mc.checked );				}								protected function handleLoadAssetError( event:AssetLoaderEvent ):void				{					error_txt.text = "error in loading sound file";				}								protected function handlePlaySoundError( event:CustomEvent ):void				{					error_txt.text = "Error in playing sound "+_soundId;				}						}			}