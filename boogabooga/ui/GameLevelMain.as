/** GameLevelMain  *	---------------------------------------------------------------------------- *  *	@author:  *		Christian Widodo [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui	{		import flash.display.MovieClip;		import flash.display.Stage;		import flash.display.StageAlign;		import flash.display.StageScaleMode;		import flash.events.ErrorEvent;		import flash.events.Event;		import flash.events.IOErrorEvent;		import flash.events.FullScreenEvent;		import flash.events.ProgressEvent;		import flash.external.ExternalInterface;		import flash.net.URLLoader;		import flash.net.URLRequest;		import flash.net.URLRequestMethod;		import flash.net.URLVariables;		import flash.system.ApplicationDomain;		import flash.system.LoaderContext;		import flash.text.Font;		import flash.text.TextField;		import flash.utils.getDefinitionByName;				import com.adobe.serialization.json.JSONDecoder;		import com.desuade.partigen.emitters.Emitter;		import com.desuade.partigen.renderers.StandardRenderer;		import com.desuade.partigen.renderers.Renderer;		import com.greensock.TweenLite;		import com.avatarlabs.utils.DebuggerUtil;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.AssetLoaderEvent;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.fps.FPS;		import com.avatarlabs.utils.loader.CustomLoader;		import com.avatarlabs.utils.navigation.*;		import com.avatarlabs.utils.sound.SoundEffectPlayer;		import com.avatarlabs.utils.text.TextFormatting;				import com.boogabooga.controller.gamelevel.GameboardController;		import com.boogabooga.controller.gamelevel.GameLevelDataController;		import com.boogabooga.controller.maingame.UserDataController;		import com.boogabooga.data.SettingsIndex;		import com.boogabooga.ui.gamelevel.Gameboard;		import com.boogabooga.controller.maingame.RequiredDataController;				public class GameLevelMain extends BaseMain		{			protected var _gameLevelDataController:GameLevelDataController;						protected var _gameboardController:GameboardController;									//FPS			protected var _fps:FPS;						/**	Stage Instances **/			public var gameboard_mc:MovieClip;			public var assetContainer_mc:MovieClip;			public var fps_txt:TextField;			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function GameLevelMain()				{					_debug = true;										ConsoleBroadcaster.enabled = true;					ConsoleBroadcaster.traceOutput = true;					DebuggerUtil.init( stage );										this.loaderInfo.addEventListener( ProgressEvent.PROGRESS, handlePreloadProgress, false, 0, true );					this.loaderInfo.addEventListener( Event.COMPLETE, handlePreloadComplete, false, 0, true );										stop();									}							/** handlePreloadProgress			  *	---------------------------------------------------------------------------- */				override protected function handlePreloadProgress( event:ProgressEvent ):void				{					//ConsoleBroadcaster.broadcast( "WeaponDisplayObject", "handlePreloadProgress():" );				}							/** handlePreloadComplete			  *	---------------------------------------------------------------------------- */				override protected function handlePreloadComplete( event:Event ):void				{					ConsoleBroadcaster.broadcast( "GameLevelMain", "handlePreloadComplete();" );										if( this.loaderInfo.parameters.debug == "false" )					{						ConsoleBroadcaster.enabled = false;					}										event.currentTarget.removeEventListener( ProgressEvent.PROGRESS, handlePreloadProgress );					event.currentTarget.removeEventListener( Event.COMPLETE, handlePreloadComplete );										//loadRequiredFiles();									}							/** finishedLoadingRequiredFiles			  *	---------------------------------------------------------------------------- */				override protected function finishedLoadingRequiredFiles():void				{					//loadGameLevelData();										//play();										EventNotificationCenter.getInstance().addEventListener( "onParticleAssetLoadComplete", handleLoadParticlesComplete );										var loader:CustomLoader = new CustomLoader();						loader.addEventListener( "onLoadComplete", handleLoadParticleAssetComplete );						loader.addEventListener( "onLoadProgress", handleLoadParticleAssetProgress );						loader.addEventListener( IOErrorEvent.IO_ERROR, handleLoadError );						loader.loadAsset( assetContainer_mc, SettingsIndex.getInstance().contentURL+"particles_asset.swf" );									}							/** finishedLoadingFonts			  *	---------------------------------------------------------------------------- 				override protected function finishedLoadingFonts():void				{					//TODO:					//	Overwrite this function in your main class					//Load in asset swf, make sure it's not cached									}*/								protected function handleLoadParticleAssetComplete( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onLoadComplete", handleLoadParticleAssetComplete );					event.currentTarget.removeEventListener( "onLoadProgress", handleLoadParticleAssetProgress );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleLoadError );				}								protected function handleLoadParticleAssetProgress( event:CustomEvent ):void				{									}								protected function handleLoadError( event:IOErrorEvent ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "GameLevelMain", "handleLoadError();" );				}							/** handleLoadParticlesComplete			  *	---------------------------------------------------------------------------- */				protected function handleLoadParticlesComplete( event:CustomEvent ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "GameLevelMain", "handleLoadParticlesComplete();" );					//finishedLoadingRequiredFiles();										EventNotificationCenter.getInstance().removeEventListener( "onParticleAssetLoadComplete", handleLoadParticlesComplete );										var loader:CustomLoader = new CustomLoader();						loader.addEventListener( "onLoadComplete", handleLoadAssetFileComplete );						loader.addEventListener( "onLoadProgress", handleLoadAssetFileProgress );						loader.addEventListener( IOErrorEvent.IO_ERROR, handleLoadError );						loader.loadAsset( assetContainer_mc, SettingsIndex.getInstance().contentURL+"assets.swf" );				}								protected function handleLoadAssetFileComplete( event:CustomEvent ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "GameLevelMain", "handleLoadAssetFileComplete();" );										event.currentTarget.removeEventListener( "onLoadComplete", handleLoadAssetFileComplete );					event.currentTarget.removeEventListener( "onLoadProgress", handleLoadAssetFileProgress );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleLoadError );										//finishedLoadingRequiredFiles();					loadGameLevelData();				}								protected function handleLoadAssetFileProgress( event:CustomEvent ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "GameLevelMain", "handleLoadAssetFileProgress();" );				}							/** loadGameLevelData			  *	---------------------------------------------------------------------------- */				protected function loadGameLevelData():void				{					var requiredDataController:RequiredDataController = new RequiredDataController();						requiredDataController.addEventListener( "onComplete", handleLoadRequiredDataComplete );						requiredDataController.addEventListener( "onError", handleLoadRequiredDataError );						requiredDataController.loadRequiredData();				}							/** handleLoadRequiredDataComplete			  *	---------------------------------------------------------------------------- */				protected function handleLoadRequiredDataComplete( event:CustomEvent ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "GameLevelMain", "handleLoadRequiredDataComplete();" );										event.currentTarget.removeEventListener( "onComplete", handleLoadRequiredDataComplete );					event.currentTarget.removeEventListener( "onError", handleLoadRequiredDataError );										//play();					var userDataController:UserDataController = new UserDataController();						userDataController.addEventListener( "onComplete", handleLoadCurrentUserComplete, false, 0, true );						userDataController.addEventListener( "onError", handleLoadCurrentUserError, false, 0, true );										if( this.loaderInfo.parameters.fbId != undefined )					{						userDataController.loadCurrentUserData( this.loaderInfo.parameters.fbId, true );					}					else if( this.loaderInfo.url.indexOf("file://") == 0 )					{						userDataController.loadCurrentUserData( 1, false );					}					else					{						userDataController.loadCurrentUserData( 1, false );					}									}							/** handleLoadRequiredDataError			  *	---------------------------------------------------------------------------- */				protected function handleLoadRequiredDataError( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleLoadRequiredDataComplete );					event.currentTarget.removeEventListener( "onError", handleLoadRequiredDataError );				}							/** init			  *	---------------------------------------------------------------------------- */				public function init():void				{					//trace( "gameboard_mc: "+gameboard_mc );										//addChild( new FPS() );										_fps = new FPS();					//_fps.fps_txt = fps_txt;					_fps.addEventListener( "onFPSUpdate", handleFPSUpdate, false, 0, true );					_fps.startFPSCounter();										_gameboardController = new GameboardController();					_gameboardController.gameboardReference = new Gameboard();					_gameboardController.gameboardReference.contentClip = gameboard_mc;					_gameboardController.gameboardReference.init();				}							/** handleFPSUpdate			  *	---------------------------------------------------------------------------- */				protected function handleFPSUpdate( event:CustomEvent ):void				{					TextFormatting.formatTextWithFontName( fps_txt, "FPS: "+event.customParameters.fps, "Lithos Pro Black" );				}							/** handleLoadCurrentUserComplete			  *	---------------------------------------------------------------------------- */				protected function handleLoadCurrentUserComplete( event:CustomEvent ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "GameLevelMain", "handleLoadCurrentUserComplete();" );										event.currentTarget.removeEventListener( "onComplete", handleLoadCurrentUserComplete );					event.currentTarget.removeEventListener( "onError", handleLoadCurrentUserError );										play();				}							/** handleLoadCurrentUserError			  *	---------------------------------------------------------------------------- */				protected function handleLoadCurrentUserError( event:CustomEvent ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "GameLevelMain", "handleLoadCurrentUserError();" );										event.currentTarget.removeEventListener( "onComplete", handleLoadCurrentUserComplete );					event.currentTarget.removeEventListener( "onError", handleLoadCurrentUserError );				}		}			}