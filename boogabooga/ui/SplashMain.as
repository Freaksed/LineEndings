/** SplashMain  *	---------------------------------------------------------------------------- *  *	@author:  *		Christian Widodo [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui	{		import flash.display.MovieClip;		import flash.display.Stage;		import flash.display.StageAlign;		import flash.display.StageScaleMode;		import flash.display.StageQuality;		import flash.events.ErrorEvent;		import flash.events.Event;		import flash.events.IOErrorEvent;		import flash.events.FullScreenEvent;		import flash.events.ProgressEvent;		import flash.events.TimerEvent;		import flash.external.ExternalInterface;		import flash.geom.Rectangle;		import flash.net.SharedObject;		import flash.system.ApplicationDomain;		import flash.system.Capabilities;		import flash.system.LoaderContext;		import flash.system.Security;		import flash.system.System;		import flash.text.Font;		import flash.text.TextField;		import flash.text.TextFieldAutoSize;		import flash.utils.getDefinitionByName;		import flash.utils.getTimer;		import flash.profiler.showRedrawRegions;				//import com.adobe.serialization.json.JSONDecoder;		//import com.desuade.partigen.emitters.Emitter;		//import com.desuade.partigen.renderers.StandardRenderer;		//import com.desuade.partigen.renderers.Renderer;		//import com.greensock.TweenLite;		import com.avatarlabs.utils.DebuggerUtil;		import com.avatarlabs.utils.cache.AssetLoader;		import com.avatarlabs.utils.cache.AssetsIndex;		//import com.avatarlabs.utils.cache.BitmapDataManager;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.AssetLoaderEvent;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		//import com.avatarlabs.utils.fps.FPS;		import com.avatarlabs.utils.loader.CustomLoader;		import com.avatarlabs.utils.navigation.*;		import com.avatarlabs.utils.sound.SoundEffectPlayer;		import com.avatarlabs.utils.text.TextFormatting;		//import com.avatarlabs.utils.timers.CustomTimer;		//import com.avatarlabs.utils.userinterface.UIButton;		//import com.demonsters.debugger.MonsterDebugger;		import com.gskinner.performance.PerformanceTest;		import com.gskinner.performance.TestSuite;		import com.gskinner.tests.Bitwise;		import com.gskinner.tests.GraphicsTests;				//import com.boogabooga.controller.AssetLoaderController;		//import com.boogabooga.controller.gamelevel.GameboardController;		//import com.boogabooga.controller.gamelevel.GameLevelDataController;		import com.boogabooga.controller.maingame.MainGameController;		import com.boogabooga.controller.maingame.MessageDataController;		import com.boogabooga.controller.maingame.RequiredDataController;		import com.boogabooga.controller.maingame.UserDataController;		import com.boogabooga.controller.maingame.TrackingDataController;		import com.boogabooga.data.SettingsIndex;		import com.boogabooga.data.SoundsIndex;		import com.boogabooga.data.StringsIndex;		//import com.boogabooga.data.gamelevel.Enemy;		import com.boogabooga.data.gamelevel.GameLevelDataIndex;		import com.boogabooga.data.maingame.MainGameDataIndex;		import com.boogabooga.events.BoogaEvent;		//import com.boogabooga.ui.gamelevel.AnimationDisplayObject;		import com.boogabooga.ui.maingame.BetaView;		import com.boogabooga.ui.maingame.LoadingAssetView;		import com.boogabooga.ui.maingame.MainNavigation;		import com.boogabooga.ui.maingame.StartScreenView;		import com.boogabooga.ui.maingame.message.MessageView;		import com.boogabooga.utils.CheatUtil;		import com.adobe.serialization.json.JSONDecoder;		import com.boogabooga.data.maingame.User;				public class SplashMain extends BaseMain		{			private var _loadingAssetViewClip:LoadingAssetView;			private var _messageViewClip:MessageView;			private var _startScreenViewClip:StartScreenView;						//protected var _beta:Boolean = false;			private var _betaViewClip:BetaView;						//private var _sampleEnemies:Vector.<Enemy>;			//private var _sampleAnimationDisplayObjects:Vector.<AnimationDisplayObject>;			//private var _checkForFPSTimer:CustomTimer;			//private var _fps:FPS;						private var _bitwiseTestSuite:Bitwise;			private var _graphicsTestSuite:GraphicsTests;						/**	Stage Instances **/			public var betaView_mc:MovieClip;			public var startScreenView_mc:MovieClip;			public var mainGameContainer_mc:MovieClip;			public var initialLoadingScreen_mc:MovieClip;			public var assetContainer_mc:MovieClip;			public var messageView_mc:MovieClip;			public var loadingAssetView_mc:MovieClip;			public var spinAnimation_mc:MovieClip;			public var checkFPSContainer_mc:MovieClip;			public var performanceTime_txt:TextField;			public var version_mc:MovieClip;			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function SplashMain()				{					_debug = true;										SettingsIndex.getInstance().betaBuild = true;					SettingsIndex.getInstance().devBuild = false;										ConsoleBroadcaster.enabled = true;					ConsoleBroadcaster.traceOutput = true;					DebuggerUtil.init( stage );					//MonsterDebugger.initialize( this );					//MonsterDebugger.trace( this, "Hello" );					CheatUtil.init( stage );										var fullScreenBound:Rectangle = new Rectangle( -422, -182, 1536, 960 );										if( Capabilities.screenResolutionX > fullScreenBound.width && Capabilities.screenResolutionY > fullScreenBound.height )					{						stage.fullScreenSourceRect = new Rectangle( fullScreenBound.x, fullScreenBound.y, fullScreenBound.width, fullScreenBound.height );						stage.scaleMode = StageScaleMode.NO_BORDER;						MainGameDataIndex.getInstance().outOfBoundsRectangle = new Rectangle( fullScreenBound.x, fullScreenBound.y, fullScreenBound.width, fullScreenBound.height );					}					else					{						stage.scaleMode = StageScaleMode.NO_SCALE;						MainGameDataIndex.getInstance().outOfBoundsRectangle = new Rectangle( -(Capabilities.screenResolutionX-stage.stageWidth)*.5, -(Capabilities.screenResolutionY-stage.stageHeight)*.5, Capabilities.screenResolutionX, Capabilities.screenResolutionY );					}					/*					if( Capabilities.isDebugger )					{						showRedrawRegions( true, 0xFF0000 );					}					*/										ConsoleBroadcaster.broadcast( "SplashMain", "rectangle: "+MainGameDataIndex.getInstance().outOfBoundsRectangle );					ConsoleBroadcaster.broadcast( "SplashMain", "fullScreenSourceRect: "+stage.fullScreenSourceRect );										this.loaderInfo.addEventListener( ProgressEvent.PROGRESS, handlePreloadProgress, false, 0, true );					this.loaderInfo.addEventListener( Event.COMPLETE, handlePreloadComplete, false, 0, true );										//stage.quality = StageQuality.LOW;										stop();									}							/** handlePreloadProgress			  *	---------------------------------------------------------------------------- */				override protected function handlePreloadProgress( event:ProgressEvent ):void				{					//ConsoleBroadcaster.broadcast( "WeaponDisplayObject", "handlePreloadProgress():" );				}							/** handlePreloadComplete			  *	---------------------------------------------------------------------------- */				override protected function handlePreloadComplete( event:Event ):void				{					ConsoleBroadcaster.broadcast( "SplashMain", "handlePreloadComplete();" );										super.handlePreloadComplete( event );				}							/** finishedLoadingFonts			  *	---------------------------------------------------------------------------- 				override protected function finishedLoadingFonts():void				{					//TODO:					//	Overwrite this function in your main class					//Load in asset swf, make sure it's not cached														}*/							/** finishedLoadingRequiredFiles			  *	---------------------------------------------------------------------------- */				override protected function finishedLoadingRequiredFiles():void				{					//loadAdditionalFiles();										loadRequiredDataForSplashMessage();				}							/** loadAdditionalFiles			  *	---------------------------------------------------------------------------- */				protected function loadAdditionalFiles():void				{					var assetLoader:AssetLoader = new AssetLoader();						assetLoader.autoKill = true;						assetLoader.addEventListener( AssetLoaderEvent.START, handleLoadAdditionalFilesStart, false, 0, true );						assetLoader.addEventListener( AssetLoaderEvent.PROGRESS, handleLoadAdditionalFilesProgress, false, 0, true );						assetLoader.addEventListener( AssetLoaderEvent.COMPLETE, handleLoadAdditionalFilesComplete, false, 0, true );						assetLoader.addEventListener( AssetLoaderEvent.ERROR, handleLoadAdditionalFilesError, false, 0, true );						assetLoader.addEventListener( AssetLoaderEvent.ITEM_COMPLETE, handleLoadAdditionalFilesItemComplete, false, 0, true );						assetLoader.addAssetToLoad( "SoundSplashSwf", SettingsIndex.getInstance().contentURL+"files/assets/sounds/initial_load_set.swf" );						assetLoader.addAssetToLoad( "Locale_"+MainGameController.getInstance().currentUser.locale, SettingsIndex.getInstance().contentURL+"files/xml/copy_"+MainGameController.getInstance().currentUser.locale+".xml" );						assetLoader.startLoadAssets();				}							/** handleLoadAdditionalFilesStart			  *	---------------------------------------------------------------------------- */				protected function handleLoadAdditionalFilesStart( event:AssetLoaderEvent ):void				{					ConsoleBroadcaster.broadcast( "SplashMain", "handleLoadAdditionalFilesStart();" );				}							/** handleLoadAdditionalFilesProgress			  *	---------------------------------------------------------------------------- */				protected function handleLoadAdditionalFilesProgress( event:AssetLoaderEvent ):void				{									}							/** handleLoadAdditionalFilesItemComplete			  *	---------------------------------------------------------------------------- */				protected function handleLoadAdditionalFilesItemComplete( event:AssetLoaderEvent ):void				{					if( event.customParameters.id == "Locale_"+MainGameController.getInstance().currentUser.locale )					{						//trace( "xml content "+event.customParameters.content );												var xml:XML = new XML(event.customParameters.content);						var localizations:XMLList = xml.localization;												for( var i:int=0; i<localizations.length(); ++i )						{							StringsIndex.getInstance().addString( localizations[i].id.text(), localizations[i].name.text(), localizations[i].string.text() );						}												AssetsIndex.getInstance().removeLoadedAsset( "Locale_"+MainGameController.getInstance().currentUser.locale );												GameLevelDataIndex.getInstance().buildWeaponStatistics();						GameLevelDataIndex.getInstance().buildGodStatistics();						GameLevelDataIndex.getInstance().buildEnemyStatistics();												MainGameController.getInstance().currentUser.updateItemStatistics();					}				}							/** handleLoadAdditionalFilesComplete			  *	---------------------------------------------------------------------------- */				protected function handleLoadAdditionalFilesComplete( event:AssetLoaderEvent ):void				{					ConsoleBroadcaster.broadcast( "SplashMain", "handleLoadAdditionalFilesComplete();" );										event.currentTarget.removeEventListener( AssetLoaderEvent.START, handleLoadAdditionalFilesStart );					event.currentTarget.removeEventListener( AssetLoaderEvent.PROGRESS, handleLoadAdditionalFilesProgress );					event.currentTarget.removeEventListener( AssetLoaderEvent.COMPLETE, handleLoadAdditionalFilesComplete );					event.currentTarget.removeEventListener( AssetLoaderEvent.ERROR, handleLoadAdditionalFilesError );					event.currentTarget.removeEventListener( AssetLoaderEvent.ITEM_COMPLETE, handleLoadAdditionalFilesItemComplete );										var soundEffectPlayer:SoundEffectPlayer = SoundEffectPlayer.getInstance();						//soundEffectPlayer.addSound( "splash_screen_reveal_sound.mp3", "splash_screen_reveal_sound.mp3" );						//soundEffectPlayer.addSound( "music_loop_splash_screen.wav", "music_loop_splash_screen.wav" );						//soundEffectPlayer.addSound( "sxf_airplane_fly_loop.wav", "sxf_airplane_fly_loop.wav" );						//soundEffectPlayer.addSound( "booga_jungle_atmosphere.wav", "booga_jungle_atmosphere.wav" );										//loadRequiredDataForSplashMessage();										//play();					//checkForFPS();					checkPerformance();				}							/** handleLoadAdditionalFilesError			  *	---------------------------------------------------------------------------- */				protected function handleLoadAdditionalFilesError( event:AssetLoaderEvent ):void				{					ConsoleBroadcaster.broadcast( "SplashMain", "handleLoadAdditionalFilesError();" );				}							/** loadRequiredDataForSplashMessage			  *	---------------------------------------------------------------------------- */				protected function loadRequiredDataForSplashMessage():void				{					var requiredDataController:RequiredDataController = new RequiredDataController();						requiredDataController.addEventListener( "onComplete", handleLoadRequiredDataForSplashMessageComplete );						requiredDataController.addEventListener( "onError", handleLoadRequiredDataForSplashMessageError );						requiredDataController.loadRequiredDataForSplashMessage();				}							/** handleLoadRequiredDataForSplashMessageComplete			  *	---------------------------------------------------------------------------- */				protected function handleLoadRequiredDataForSplashMessageComplete( event:CustomEvent ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "BoogaBoogaMain", "handleLoadRequiredDataForSplashMessageComplete();" );										event.currentTarget.removeEventListener( "onComplete", handleLoadRequiredDataForSplashMessageComplete );					event.currentTarget.removeEventListener( "onError", handleLoadRequiredDataForSplashMessageError );															if( SettingsIndex.getInstance().fbId != 0 )					{						//userDataController.loadCurrentUserData( SettingsIndex.getInstance().fbId, true );						MainGameController.getInstance().facebookFunctions.addEventListener( "onGetUserInfoComplete", handleFBLoginComplete );						MainGameController.getInstance().facebookFunctions.addEventListener( "onGetUserInfoError", handleFBLoginError );						MainGameController.getInstance().facebookFunctions.init();					}					else					{						loadCurrentUserDataForSplashMessage();					}									}							/** handleLoadRequiredDataForSplashMessageError			  *	---------------------------------------------------------------------------- */				protected function handleLoadRequiredDataForSplashMessageError( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleLoadRequiredDataForSplashMessageComplete );					event.currentTarget.removeEventListener( "onError", handleLoadRequiredDataForSplashMessageError );										//TODO:					//	Display error message!!!				}								protected function handleFBLoginComplete( event:CustomEvent ):void				{					ConsoleBroadcaster.broadcast( "BoogaBoogaMain", "handleFBLoginComplete();" );										MainGameController.getInstance().facebookFunctions.removeEventListener( "onGetUserInfoComplete", handleFBLoginComplete );					MainGameController.getInstance().facebookFunctions.removeEventListener( "onGetUserInfoError", handleFBLoginError );										loadCurrentUserDataForSplashMessage();				}								protected function handleFBLoginError( event:CustomEvent ):void				{					ConsoleBroadcaster.broadcast( "BoogaBoogaMain", "handleFBLoginComplete();" );										MainGameController.getInstance().facebookFunctions.removeEventListener( "onGetUserInfoComplete", handleFBLoginComplete );					MainGameController.getInstance().facebookFunctions.removeEventListener( "onGetUserInfoError", handleFBLoginError );				}							/** loadCurrentUserDataForSplashMessage			  *	---------------------------------------------------------------------------- */				protected function loadCurrentUserDataForSplashMessage():void				{					var userDataController:UserDataController = new UserDataController();						userDataController.addEventListener( "onComplete", handleLoadCurrentUserDataForSplashMessageComplete, false, 0, true );						userDataController.addEventListener( "onError", handleLoadCurrentUserDataForSplashMessageError, false, 0, true );										if( SettingsIndex.getInstance().fbId != 0 )						userDataController.loadCurrentUserDataForSplashMessage( MainGameController.getInstance().facebookFunctions.fbId, true, MainGameController.getInstance().facebookFunctions.firstName, 																				MainGameController.getInstance().facebookFunctions.lastName, MainGameController.getInstance().facebookFunctions.fbProfilePicURL, 																				MainGameController.getInstance().facebookFunctions.locale, MainGameController.getInstance().facebookFunctions.birthday, 																				MainGameController.getInstance().facebookFunctions.gender, MainGameController.getInstance().facebookFunctions.email,																				MainGameController.getInstance().facebookFunctions.timezone, SettingsIndex.getInstance().origin );					else						userDataController.loadCurrentUserDataForSplashMessage( "7", false );				}							/** handleLoadCurrentUserDataForSplashMessageComplete			  *	---------------------------------------------------------------------------- */				protected function handleLoadCurrentUserDataForSplashMessageComplete( event:CustomEvent ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "BoogaBoogaMain", "handleLoadCurrentUserDataForSplashMessageComplete();" );										event.currentTarget.removeEventListener( "onComplete", handleLoadCurrentUserDataForSplashMessageComplete );					event.currentTarget.removeEventListener( "onError", handleLoadCurrentUserDataForSplashMessageError );										//SettingsIndex.getInstance().fbId = MainGameController.getInstance().currentUser.fbId;										//getNewMessagesCount();										//play();					loadAdditionalFiles();				}							/** handleLoadCurrentUserDataForSplashMessageError			  *	---------------------------------------------------------------------------- */				protected function handleLoadCurrentUserDataForSplashMessageError( event:CustomEvent ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "BoogaBoogaMain", "handleLoadCurrentUserDataForSplashMessageError();" );										event.currentTarget.removeEventListener( "onComplete", handleLoadCurrentUserDataForSplashMessageComplete );					event.currentTarget.removeEventListener( "onError", handleLoadCurrentUserDataForSplashMessageError );				}							/** init			  *	---------------------------------------------------------------------------- */				public function init():void				{					//trace( "gameboard_mc: "+gameboard_mc );										//addChild( new FPS() );										version_mc.visible = false;					version_mc.alpha = 1;					version_mc.mouseChildren = false;					version_mc.mouseEnabled = false;					version_mc.label_txt.mouseEnabled = false;										EventNotificationCenter.getInstance().addSignalListener( BoogaEvent.ON_CHEAT_DETECTED, handleCheatDetected, this );										_startScreenViewClip = new StartScreenView();					_startScreenViewClip.contentClip = startScreenView_mc;					_startScreenViewClip.init();										if( MainGameController.getInstance().currentUser.messagesCount > 0 )					{						_startScreenViewClip.messageExclamation_mc.visible = true;					}										_startScreenViewClip.addEventListener( "onPlayClicked", handlePlayClicked, false, 0, true );					_startScreenViewClip.addEventListener( "onMessageClicked", handleMessageClicked, false, 0, true );					_startScreenViewClip.onStartScreenAnimationCompleted.add( handleStartScreenAnimationCompleted );										_loadingAssetViewClip = new LoadingAssetView();					_loadingAssetViewClip.contentClip = loadingAssetView_mc;					_loadingAssetViewClip.init();										_messageViewClip = new MessageView();					_messageViewClip.contentClip = messageView_mc;					_messageViewClip.init();										_messageViewClip.contentClip.visible = false;					_messageViewClip.contentClip.alpha = 1;					_messageViewClip.loadingAssetViewClip = _loadingAssetViewClip;										_loadingAssetViewClip.contentClip.visible = false;					_loadingAssetViewClip.contentClip.alpha = 1;										initialLoadingScreen_mc.visible = false;					initialLoadingScreen_mc.alpha = 1;					initialLoadingScreen_mc.scrollRect = new Rectangle( 0, 0, 760, 625 );					//initialLoadingScreen_mc.cacheAsBitmap = true;					initialLoadingScreen_mc.loadingBar_mc.gotoAndStop(1);					initialLoadingScreen_mc.animation_mc.mist_mc.gotoAndStop(1);					initialLoadingScreen_mc.animation_mc.cloud1_mc.gotoAndStop(1);					initialLoadingScreen_mc.animation_mc.plane_mc.gotoAndStop(1);					initialLoadingScreen_mc.animation_mc.plane_mc.propeller_mc.gotoAndStop(1);					initialLoadingScreen_mc.animation_mc.plane_mc.body_mc.cloudresidue_mc.gotoAndStop(1);					initialLoadingScreen_mc.animation_mc.cloud2_mc.gotoAndStop(1);					initialLoadingScreen_mc.animation_mc.cloud3_mc.gotoAndStop(1);					initialLoadingScreen_mc.animation_mc.map_mc.gotoAndStop(1);					initialLoadingScreen_mc.animation_mc.map_mc.trail_mc.gotoAndStop(1);					initialLoadingScreen_mc.adventureBegins_mc.gotoAndStop(1);					initialLoadingScreen_mc.loading_mc.stop();					TextFormatting.formatTextWithFontName( initialLoadingScreen_mc.loading_mc.label_txt, "Loading", "Lithos Pro Black", false, TextFieldAutoSize.LEFT );										//trace( "initialLoadingScreen_mc: "+initialLoadingScreen_mc );					//trace( "initialLoadingScreen_mc.parent: "+initialLoadingScreen_mc.parent );					/*					if( !SettingsIndex.getInstance().devBuild )					{						_betaViewClip = new BetaView();						_betaViewClip.contentClip = betaView_mc;						_betaViewClip.init();						_betaViewClip.addEventListener( "onPlayClicked", handleBetaViewPlayClicked, false, 0, true );						_betaViewClip.contentClip.alpha = 1;					}					else					{						removeChild( betaView_mc );												_startScreenViewClip.contentClip.play();					}*/										removeChild( betaView_mc );										_startScreenViewClip.contentClip.play();										ExternalInterface.addCallback( 'handleGetRandomFriendsCallback', handleGetRandomFriendsCallback );					ExternalInterface.call( 'getRandomFriends' );				}								private function handleGetRandomFriendsCallback( friendsData:String ):void				{					//ConsoleBroadcaster.broadcast( 'SplashMain', 'friendsData: '+friendsData );					var friends:Array = new JSONDecoder(friendsData).getValue();					var user:User;										if( friends != null )					{						for( var i:int=0; i<friends.length; ++i )						{							user = new User();							user.firstName = friends[i]['first_name'];							user.lastName = friends[i]['last_name'];							user.fbId = friends[i]['uid'];							user.fbProfilePicURL = friends[i]['pic_square'];														//ConsoleBroadcaster.broadcast( 'SplashMain', 'friend firstName: '+user.firstName );							//ConsoleBroadcaster.broadcast( 'SplashMain', 'friend lastName: '+user.lastName );							//ConsoleBroadcaster.broadcast( 'SplashMain', 'friend fbId: '+user.fbId );							//ConsoleBroadcaster.broadcast( 'SplashMain', 'friend fbProfilePicURL: '+user.fbProfilePicURL );														MainGameController.getInstance().nonAppUserFriends.push( user );						}					}										//MainGameController.getInstance().currentUser.friends = friends;				}							/** handleBetaViewPlayClicked			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function handleBetaViewPlayClicked( event:Event ):void				{					_betaViewClip.removeEventListener( "onPlayClicked", handleBetaViewPlayClicked );					_betaViewClip.kill();					removeChild( _betaViewClip.contentClip );					_betaViewClip = null;										_startScreenViewClip.contentClip.play();				}							/** handlePlayClicked			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function handlePlayClicked( event:Event ):void				{					//NavigationController.getInstance().navigateTo( 0, "MainNavigation" );					SettingsIndex.getInstance().initialViewToShow = 0;										SoundEffectPlayer.getInstance().stopSound( "music_loop_splash_screen.wav", "SplashScreenMusicLoop", "music_loop_splash_screen.wav" );					_startScreenViewClip.removeEventListener( "onPlayClicked", handlePlayClicked );					_startScreenViewClip.removeEventListener( "onMessageClicked", handleMessageClicked );					_startScreenViewClip.onStartScreenAnimationCompleted.remove( handleStartScreenAnimationCompleted );					//_startScreenViewClip.removeEventListener( "onPlayRevealSound", handlePlayRevealSound );					//_startScreenViewClip.removeEventListener( "onPlayLoopSound", handlePlayLoopSound );					_startScreenViewClip.kill();					removeChild( _startScreenViewClip.contentClip );					_startScreenViewClip = null;										loadMainGame();				}								private function handleStartScreenAnimationCompleted():void				{					//ConsoleBroadcaster.broadcast( "SplashMain", "requests: "+SettingsIndex.getInstance().requests );										if( SettingsIndex.getInstance().requests == 1 )					{						_messageViewClip.addEventListener( BoogaEvent.ON_POPUP_HIDE, handleMessageHid, false, 0, true );						_messageViewClip.show();					}				}							/** handleMessageClicked			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function handleMessageClicked( event:Event ):void				{					/*					//NavigationController.getInstance().navigateTo( 5, "MainNavigation" );					SettingsIndex.getInstance().initialViewToShow = 5;										SoundEffectPlayer.getInstance().stopSound( "music_loop_splash_screen.wav", "SplashScreenBgMusic" );					_startScreenViewClip.removeEventListener( "onPlayClicked", handlePlayClicked );					_startScreenViewClip.removeEventListener( "onMessageClicked", handleMessageClicked );					_startScreenViewClip.kill();					removeChild( _startScreenViewClip.contentClip );										loadMainGame();					*/										_messageViewClip.addEventListener( BoogaEvent.ON_POPUP_HIDE, handleMessageHid, false, 0, true );					_messageViewClip.show();				}								protected function handleMessageHid( event:BoogaEvent ):void				{					if( MainGameController.getInstance().currentUser.messagesCount > 0 )					{						_startScreenViewClip.messageExclamation_mc.visible = true;					}					else					{						_startScreenViewClip.messageExclamation_mc.visible = false;					}										_messageViewClip.removeEventListener( BoogaEvent.ON_POPUP_HIDE, handleMessageHid );				}							/** loadMainGame			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function loadMainGame():void				{					//TODO:					//	Should we load the main game file in the background?										initialLoadingScreen_mc.loadingBar_mc.visible = false;					initialLoadingScreen_mc.visible = true;					initialLoadingScreen_mc.loadingBar_mc.play();					initialLoadingScreen_mc.animation_mc.mist_mc.play();					initialLoadingScreen_mc.animation_mc.cloud1_mc.play();					initialLoadingScreen_mc.animation_mc.plane_mc.play();					initialLoadingScreen_mc.animation_mc.plane_mc.propeller_mc.play();					initialLoadingScreen_mc.animation_mc.plane_mc.body_mc.cloudresidue_mc.play();					initialLoadingScreen_mc.animation_mc.cloud2_mc.play();					initialLoadingScreen_mc.animation_mc.cloud3_mc.play();					initialLoadingScreen_mc.animation_mc.map_mc.play();					initialLoadingScreen_mc.animation_mc.map_mc.trail_mc.play();					initialLoadingScreen_mc.adventureBegins_mc.play();					initialLoadingScreen_mc.loading_mc.play();										var customLoader:CustomLoader = new CustomLoader();						customLoader.addEventListener( "onLoadProgress", handleLoadMainGameProgress );						customLoader.addEventListener( "onLoadComplete", handleLoadMainGameComplete );						customLoader.loaderContext = new LoaderContext( false, ApplicationDomain.currentDomain );											if( SettingsIndex.getInstance().fbId != 0 )						customLoader.loadAsset( mainGameContainer_mc, SettingsIndex.getInstance().contentURL+"main.swf?r="+getTimer() );					else						customLoader.loadAsset( mainGameContainer_mc, SettingsIndex.getInstance().contentURL+"main.swf" );										//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("music_loop_airplane_load_screen.wav").volume, 0, "AirplaneLoadingMusic" );					SoundEffectPlayer.getInstance().playLibrarySound( "music_loop_airplane_load_screen.wav", true, "AirplaneLoadingMusic", "music_loop_airplane_load_screen.wav" );										//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sxf_airplane_fly_loop.wav").volume, 0, "AirplaneEngineLoop" );					SoundEffectPlayer.getInstance().playLibrarySound( "sxf_airplane_fly_loop.wav", true, "AirplaneEngineLoop", "sxf_airplane_fly_loop.wav" );										EventNotificationCenter.getInstance().addEventListener( "onMainGameInitialized", handleMainGameInitialized );				}								protected function handleLoadMainGameProgress( event:CustomEvent ):void				{					//TODO:					//	Animate the loading bar to reflect the progress				}								protected function handleLoadMainGameComplete( event:CustomEvent ):void				{									}								protected function handleMainGameInitialized( event:CustomEvent ):void				{					EventNotificationCenter.getInstance().removeEventListener( "onMainGameInitialized", handleMainGameInitialized );										trace( "System.totalMemory: "+System.totalMemory );										SoundEffectPlayer.getInstance().stopSound( "sxf_airplane_fly_loop.wav", "AirplaneEngineLoop", "sxf_airplane_fly_loop.wav" );					SoundEffectPlayer.getInstance().stopSound( "music_loop_airplane_load_screen.wav", "AirplaneLoadingMusic", "music_loop_airplane_load_screen.wav" );										initialLoadingScreen_mc.visible = false;					initialLoadingScreen_mc.stop();					initialLoadingScreen_mc.loadingBar_mc.gotoAndStop(1);					initialLoadingScreen_mc.animation_mc.mist_mc.gotoAndStop(1);					initialLoadingScreen_mc.animation_mc.cloud1_mc.gotoAndStop(1);					initialLoadingScreen_mc.animation_mc.plane_mc.gotoAndStop(1);					initialLoadingScreen_mc.animation_mc.plane_mc.propeller_mc.gotoAndStop(1);					initialLoadingScreen_mc.animation_mc.plane_mc.body_mc.cloudresidue_mc.gotoAndStop(1);					initialLoadingScreen_mc.animation_mc.cloud2_mc.gotoAndStop(1);					initialLoadingScreen_mc.animation_mc.cloud3_mc.gotoAndStop(1);					initialLoadingScreen_mc.animation_mc.map_mc.gotoAndStop(1);					initialLoadingScreen_mc.animation_mc.map_mc.trail_mc.gotoAndStop(1);										//trace( "initialLoadingScreen_mc.parent: "+initialLoadingScreen_mc.parent );										removeChild( initialLoadingScreen_mc );										trace( "System.totalMemory: "+System.totalMemory );									}							/** getNewMessagesCount			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function getNewMessagesCount():void				{					var messageDataController:MessageDataController = new MessageDataController();						messageDataController.addEventListener( "onComplete", handleGetNewMessagesCountComplete );						messageDataController.getNewMessagesCount( MainGameController.getInstance().currentUser.id );				}								protected function handleGetNewMessagesCountComplete( event:CustomEvent ):void				{					if( event.customParameters.count > 0 )					{						//MovieClip(_startScreenViewClip.contentClip.message_mc).exclamation_mc.visible = true;						//_startScreenViewClip.messageExclamation_mc.visible = true;						MainGameController.getInstance().currentUser.messagesCount = event.customParameters.count;					}				}								private function checkPerformance():void				{					_bitwiseTestSuite = new Bitwise();					_bitwiseTestSuite.addEventListener( Event.COMPLETE, handleBitwiseTestSuiteCompleted, false, 0, true );										_graphicsTestSuite = new GraphicsTests();					_graphicsTestSuite.addEventListener( Event.COMPLETE, handleGraphicsTestSuiteCompleted, false, 0, true );										//PerformanceTest.getInstance().delay = 100;					PerformanceTest.queue( _bitwiseTestSuite );					PerformanceTest.queue( _graphicsTestSuite );				}								private function handleBitwiseTestSuiteCompleted( event:Event ):void				{					_bitwiseTestSuite.removeEventListener( Event.COMPLETE, handleBitwiseTestSuiteCompleted );										//trace( "_bitwiseTestSuite time: "+_bitwiseTestSuite.time );					//TextFormatting.formatTextWithFontName( performanceTime_txt, String(_bitwiseTestSuite.time), "Lithos Pro Black" );				}								private function handleGraphicsTestSuiteCompleted( event:Event ):void				{					_graphicsTestSuite.removeEventListener( Event.COMPLETE, handleGraphicsTestSuiteCompleted );										performanceTime_txt.visible = false;					trace( "_graphicsTestSuite time: "+_graphicsTestSuite.time );					TextFormatting.formatTextWithFontName( performanceTime_txt, String(_bitwiseTestSuite.time+_graphicsTestSuite.time), "Lithos Pro Black" );										SettingsIndex.getInstance().benchmarkScore = _bitwiseTestSuite.time+_graphicsTestSuite.time;										var sharedObject:SharedObject = SharedObject.getLocal( "AL_BoogaBooga", "/" );										//if( !sharedObject.data.benchmarkScoreSaved )					if( true )					{						var trackingDataController:TrackingDataController = new TrackingDataController();							trackingDataController.saveBenchmarkScore( MainGameController.getInstance().currentUser.id, _bitwiseTestSuite.time+_graphicsTestSuite.time );												sharedObject.data.benchmarkScoreSaved = true;						sharedObject.flush();					}										spinAnimation_mc.stop();										play();				}							/** handleCheatDetected			  *	---------------------------------------------------------------------------- *			  *	If cheats are enabled, this will check for any cheats that are entered.			  *	---------------------------------------------------------------------------- */			 	protected function handleCheatDetected( customParameters:Object ):void				{					if( customParameters.keywordIndex == 15 )					{						version_mc.visible = true;					}				}							/** checkForFPS			  *	---------------------------------------------------------------------------- 				public function checkForFPS():void				{					_fps = new FPS();					_fps.stage = stage;					_fps.addThreshold( 24 );					_fps.addThreshold( 16 );					//_fps.fps_txt = fps_txt;					//_fps.addEventListener( "onFPSUpdate", handleFPSUpdate, false, 0, true );					_fps.onFPSUpdated.add( handleFPSUpdated );					_fps.onFPSThresholdPassed.add( handleFPSThresholdPassed );					_fps.startFPSCounter();										var enemy:Enemy;					_sampleEnemies = new Vector.<Enemy>;					var assets:Array = [];										for( var i:int=0; i<GameLevelDataIndex.getInstance().enemies.length; ++i )					{						enemy = GameLevelDataIndex.getInstance().enemies[i];												if( enemy != null )						{							_sampleEnemies.push( enemy );														assets.push( {id:enemy.walkUpAnimationObject.cacheId, url:enemy.walkUpAnimationObject.assetURL} );							assets.push( {id:enemy.walkDownAnimationObject.cacheId, url:enemy.walkDownAnimationObject.assetURL} );						}						else						{							break;						}												if( i == 6 )							break;					}										//_loadingAssetViewClip.showLoadingProgress();										MainGameController.getInstance().assetLoaderController.addEventListener( AssetLoaderEvent.COMPLETE, handleLoadToCheckForFPSComplete, false, 0, true );					MainGameController.getInstance().assetLoaderController.addEventListener( AssetLoaderEvent.ERROR, handleLoadToCheckForFPSError, false, 0, true );					MainGameController.getInstance().assetLoaderController.loadAssets( assets );				}								protected function handleLoadToCheckForFPSComplete( event:AssetLoaderEvent ):void				{					MainGameController.getInstance().assetLoaderController.removeEventListener( AssetLoaderEvent.COMPLETE, handleLoadToCheckForFPSComplete );					MainGameController.getInstance().assetLoaderController.removeEventListener( AssetLoaderEvent.ERROR, handleLoadToCheckForFPSError );										var animationDisplayObject:AnimationDisplayObject;										_sampleAnimationDisplayObjects = new Vector.<AnimationDisplayObject>;										for( var i:int=0; i<_sampleEnemies.length; ++i )					{						animationDisplayObject = new AnimationDisplayObject();						animationDisplayObject.contentClip = new (getDefinitionByName("DisplayObject.animation") as Class)();						animationDisplayObject.smoothing = false;						animationDisplayObject.init();						animationDisplayObject.animationObject = _sampleEnemies[i].walkUpAnimationObject;						animationDisplayObject.sourceBD = BitmapDataManager.getInstance().getBitmapData( _sampleEnemies[i].walkUpAnimationObject.cacheId ).bitmapData;						animationDisplayObject.contentClip.x = i*100;						animationDisplayObject.contentClip.y = 0;						checkFPSContainer_mc.addChild( animationDisplayObject.contentClip );						animationDisplayObject.initCanvas();						animationDisplayObject.startAnimation(true);						_sampleAnimationDisplayObjects.push( animationDisplayObject );												animationDisplayObject = new AnimationDisplayObject();						animationDisplayObject.contentClip = new (getDefinitionByName("DisplayObject.animation") as Class)();						animationDisplayObject.smoothing = false;						animationDisplayObject.init();						animationDisplayObject.animationObject = _sampleEnemies[i].walkDownAnimationObject;						animationDisplayObject.sourceBD = BitmapDataManager.getInstance().getBitmapData( _sampleEnemies[i].walkDownAnimationObject.cacheId ).bitmapData;						animationDisplayObject.contentClip.x = i*100;						animationDisplayObject.contentClip.y = 100;						checkFPSContainer_mc.addChild( animationDisplayObject.contentClip );						animationDisplayObject.initCanvas();						animationDisplayObject.startAnimation(true);						_sampleAnimationDisplayObjects.push( animationDisplayObject );					}										_checkForFPSTimer = new CustomTimer( 33, 95 );					_checkForFPSTimer.addEventListener( TimerEvent.TIMER, handleCheckForFPSTimerFired );					_checkForFPSTimer.addEventListener( TimerEvent.TIMER_COMPLETE, handleCheckForFPSTimerCompleted );					_checkForFPSTimer.start();				}								protected function handleLoadToCheckForFPSError( event:AssetLoaderEvent ):void				{					MainGameController.getInstance().assetLoaderController.removeEventListener( AssetLoaderEvent.COMPLETE, handleLoadToCheckForFPSComplete );					MainGameController.getInstance().assetLoaderController.removeEventListener( AssetLoaderEvent.ERROR, handleLoadToCheckForFPSError );				}								protected function handleCheckForFPSTimerFired( event:TimerEvent ):void				{					for( var i:int=0; i<_sampleAnimationDisplayObjects.length; ++i )					{						_sampleAnimationDisplayObjects[i].showNextAnimation();					}				}								protected function handleCheckForFPSTimerCompleted( event:TimerEvent ):void				{					_checkForFPSTimer.removeEventListener( TimerEvent.TIMER, handleCheckForFPSTimerFired );					_checkForFPSTimer.removeEventListener( TimerEvent.TIMER_COMPLETE, handleCheckForFPSTimerCompleted );					_checkForFPSTimer = null;										for( var i:int=0; i<_sampleAnimationDisplayObjects.length; ++i )					{						_sampleAnimationDisplayObjects[i].stopAnimation();						checkFPSContainer_mc.removeChild( _sampleAnimationDisplayObjects[i].contentClip );						_sampleAnimationDisplayObjects[i].kill();						_sampleAnimationDisplayObjects[i] = null;					}										_fps.onFPSThresholdPassed.remove( handleFPSThresholdPassed );					_fps.stopFPSCounter();					_fps.kill();					_fps = null;										play();				}								protected function handleFPSUpdated( fps:Number ):void				{					ConsoleBroadcaster.broadcast( "SplashMain", "handleFPSUpdated("+fps+");" );				}								protected function handleFPSThresholdPassed( fps:Number ):void				{					ConsoleBroadcaster.broadcast( "SplashMain", "handleFPSThresholdPassed();" );										SettingsIndex.getInstance().improvePerformance( fps );				}				*/		}			}