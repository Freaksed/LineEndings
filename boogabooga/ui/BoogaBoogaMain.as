/** BoogaBoogaMain  *	---------------------------------------------------------------------------- *  *	@author:  *		Christian Widodo [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui	{		import flash.display.MovieClip;		import flash.display.Stage;		import flash.display.StageAlign;		import flash.display.StageScaleMode;		import flash.events.ErrorEvent;		import flash.events.Event;		import flash.events.IOErrorEvent;		import flash.events.FullScreenEvent;		import flash.events.ProgressEvent;		import flash.external.ExternalInterface;		import flash.net.URLLoader;		import flash.net.URLRequest;		import flash.net.URLRequestMethod;		import flash.net.URLVariables;		import flash.system.ApplicationDomain;		import flash.system.LoaderContext;		import flash.text.Font;		import flash.text.TextField;		import flash.utils.getDefinitionByName;		import flash.utils.getTimer;				import com.greensock.TweenLite;		import com.avatarlabs.utils.DebuggerUtil;		import com.avatarlabs.utils.cache.AssetsIndex;		import com.avatarlabs.utils.cache.AssetLoader;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.AssetLoaderEvent;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.fps.FPS;		import com.avatarlabs.utils.loader.CustomLoader;		import com.avatarlabs.utils.navigation.*;		import com.avatarlabs.utils.sound.SoundEffectPlayer;		import com.avatarlabs.utils.text.TextFormatting;		//import com.demonsters.debugger.MonsterDebugger;				import com.boogabooga.controller.gamelevel.GameboardController;		import com.boogabooga.controller.gamelevel.GameLevelDataController;		import com.boogabooga.controller.maingame.MainGameController;		import com.boogabooga.controller.maingame.RequiredDataController;		import com.boogabooga.controller.maingame.UserDataController;		import com.boogabooga.data.SettingsIndex;		import com.boogabooga.data.StringsIndex;		//import com.boogabooga.data.gamelevel.Enemy;		import com.boogabooga.data.gamelevel.GameLevelDataIndex;		import com.boogabooga.events.BoogaEvent;		import com.boogabooga.ui.maingame.MainGame;		import com.boogabooga.utils.CheatUtil;				public class BoogaBoogaMain extends BaseMain		{			//protected var _gameLevelDataController:GameLevelDataController;						//protected var _contentViews:Array;			//protected var _currentContentView:AbstractContentView;						protected var _loadParticlesComplete:Boolean = false;			protected var _loadAdditionalFilesComplete:Boolean = false;						protected var _mainGame:MainGame;						//FPS			protected var _fps:FPS;						/**	Stage Instances **/			public var fps_txt:TextField;			public var mainGame_mc:MovieClip;			public var checkFPSContainer_mc:MovieClip;			public var version_mc:MovieClip;			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function BoogaBoogaMain()				{					_debug = true;										ConsoleBroadcaster.enabled = false;					ConsoleBroadcaster.traceOutput = true;					DebuggerUtil.init( stage );					//MonsterDebugger.initialize( this );					//MonsterDebugger.trace( this, "Hello" );					CheatUtil.init( stage );										this.loaderInfo.addEventListener( ProgressEvent.PROGRESS, handlePreloadProgress, false, 0, true );					this.loaderInfo.addEventListener( Event.COMPLETE, handlePreloadComplete, false, 0, true );										stop();									}							/** handlePreloadProgress			  *	---------------------------------------------------------------------------- */				override protected function handlePreloadProgress( event:ProgressEvent ):void				{					//ConsoleBroadcaster.broadcast( "WeaponDisplayObject", "handlePreloadProgress():" );				}							/** handlePreloadComplete			  *	---------------------------------------------------------------------------- */				override protected function handlePreloadComplete( event:Event ):void				{					ConsoleBroadcaster.broadcast( "BoogaBoogaMain", "handlePreloadComplete();" );										super.handlePreloadComplete( event );									}							/** finishedLoadingRequiredFiles			  *	---------------------------------------------------------------------------- 				override protected function finishedLoadingRequiredFiles():void				{															//play();				}*/							/** finishedLoadingRequiredFiles			  *	---------------------------------------------------------------------------- */				override protected function finishedLoadingRequiredFiles():void				{					//TODO:					//	Overwrite this function in your main class					//Load in asset swf, make sure it's not cached															//loadAdditionalFiles();					loadRequiredData();				}							/** handleLoadParticleAssetComplete			  *	---------------------------------------------------------------------------- */				protected function loadAdditionalFiles():void				{					EventNotificationCenter.getInstance().addEventListener( "onParticleAssetLoadComplete", handleLoadParticlesComplete );										var assetLoader:AssetLoader = new AssetLoader();						assetLoader.autoKill = true;						assetLoader.addEventListener( AssetLoaderEvent.START, handleLoadAdditionalFilesStart, false, 0, true );						assetLoader.addEventListener( AssetLoaderEvent.COMPLETE, handleLoadAdditionalFilesComplete, false, 0, true );						assetLoader.addEventListener( AssetLoaderEvent.PROGRESS, handleLoadAdditionalFilesProgress, false, 0, true );						assetLoader.addEventListener( AssetLoaderEvent.ERROR, handleLoadAdditionalFilesError, false, 0, true );						assetLoader.addEventListener( AssetLoaderEvent.ITEM_COMPLETE, handleLoadAdditionalFilesItemComplete, false, 0, true );						assetLoader.addAssetToLoad( "Locale_"+MainGameController.getInstance().currentUser.locale, SettingsIndex.getInstance().contentURL+"files/xml/copy_"+MainGameController.getInstance().currentUser.locale+".xml" );						assetLoader.addAssetToLoad( "AssetsSwf", SettingsIndex.getInstance().contentURL+"assets.swf" );						assetLoader.addAssetToLoad( "ParticlesAssetSwf", SettingsIndex.getInstance().contentURL+"particles_asset.swf" );						assetLoader.addAssetToLoad( "GameplaySoundSetSwf", SettingsIndex.getInstance().contentURL+"files/assets/sounds/gameplay_sound_set.swf" );						assetLoader.addAssetToLoad( "GeneralGameSetSwf", SettingsIndex.getInstance().contentURL+"files/assets/sounds/general_game_set.swf" );										if( SettingsIndex.getInstance().fbId != 0 )						assetLoader.addAssetToLoad( "GameLevelSwf", SettingsIndex.getInstance().contentURL+"gamelevel.swf?r="+getTimer() );					else						assetLoader.addAssetToLoad( "GameLevelSwf", SettingsIndex.getInstance().contentURL+"gamelevel.swf" );											assetLoader.startLoadAssets();				}							/** handleLoadAdditionalFilesStart			  *	---------------------------------------------------------------------------- */				protected function handleLoadAdditionalFilesStart( event:AssetLoaderEvent ):void				{									}							/** handleLoadAdditionalFilesComplete			  *	---------------------------------------------------------------------------- */				protected function handleLoadAdditionalFilesComplete( event:AssetLoaderEvent ):void				{					ConsoleBroadcaster.broadcast( "BoogaBoogaMain", "handleLoadAdditionalFilesComplete();" );										event.currentTarget.removeEventListener( AssetLoaderEvent.START, handleLoadAdditionalFilesStart );					event.currentTarget.removeEventListener( AssetLoaderEvent.PROGRESS, handleLoadAdditionalFilesProgress );					event.currentTarget.removeEventListener( AssetLoaderEvent.COMPLETE, handleLoadAdditionalFilesComplete );					event.currentTarget.removeEventListener( AssetLoaderEvent.ERROR, handleLoadAdditionalFilesError );										_loadAdditionalFilesComplete = true;										if( _loadAdditionalFilesComplete && _loadParticlesComplete )					{						//loadRequiredData();						play();					}				}							/** handleLoadAdditionalFilesProgress			  *	---------------------------------------------------------------------------- */				protected function handleLoadAdditionalFilesProgress( event:AssetLoaderEvent ):void				{					//trace( event.percentage );				}							/** handleLoadAdditionalFilesItemComplete			  *	---------------------------------------------------------------------------- */				protected function handleLoadAdditionalFilesItemComplete( event:AssetLoaderEvent ):void				{					if( event.customParameters.id == "Locale_"+MainGameController.getInstance().currentUser.locale )					{						//trace( "xml content "+event.customParameters.content );												var xml:XML = new XML(event.customParameters.content);						var localizations:XMLList = xml.localization;												for( var i:int=0; i<localizations.length(); ++i )						{							StringsIndex.getInstance().addString( localizations[i].id.text(), localizations[i].name.text(), localizations[i].string.text() );						}												AssetsIndex.getInstance().removeLoadedAsset( "Locale_"+MainGameController.getInstance().currentUser.locale );												trace( "building statistics" );						GameLevelDataIndex.getInstance().buildWeaponStatistics();						GameLevelDataIndex.getInstance().buildGodStatistics();						GameLevelDataIndex.getInstance().buildEnemyStatistics();												MainGameController.getInstance().currentUser.updateItemStatistics();					}				}							/** handleLoadAdditionalFilesError			  *	---------------------------------------------------------------------------- */				protected function handleLoadAdditionalFilesError( event:AssetLoaderEvent ):void				{					ConsoleBroadcaster.broadcast( "BoogaBoogaMain", "handleLoadAdditionalFilesError();" );				}							/** handleLoadParticlesComplete			  *	---------------------------------------------------------------------------- */				protected function handleLoadParticlesComplete( event:CustomEvent ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "BoogaBoogaMain", "handleLoadParticlesComplete();" );					//finishedLoadingRequiredFiles();										EventNotificationCenter.getInstance().removeEventListener( "onParticleAssetLoadComplete", handleLoadParticlesComplete );										_loadParticlesComplete = true;										if( _loadAdditionalFilesComplete && _loadParticlesComplete )					{						//loadRequiredData();						play();					}									}							/** loadRequiredData			  *	---------------------------------------------------------------------------- */				protected function loadRequiredData():void				{					var requiredDataController:RequiredDataController = new RequiredDataController();						requiredDataController.addEventListener( "onComplete", handleLoadRequiredDataComplete );						requiredDataController.addEventListener( "onError", handleLoadRequiredDataError );						requiredDataController.loadRequiredData();										}							/** handleLoadRequiredDataComplete			  *	---------------------------------------------------------------------------- */				protected function handleLoadRequiredDataComplete( event:CustomEvent ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "BoogaBoogaMain", "handleLoadRequiredDataComplete();" );										event.currentTarget.removeEventListener( "onComplete", handleLoadRequiredDataComplete );					event.currentTarget.removeEventListener( "onError", handleLoadRequiredDataError );										//play();										loadCurrentUserData();				}							/** handleLoadRequiredDataError			  *	---------------------------------------------------------------------------- */				protected function handleLoadRequiredDataError( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleLoadRequiredDataComplete );					event.currentTarget.removeEventListener( "onError", handleLoadRequiredDataError );										//TODO:					//	Display error message!!!				}							/** loadCurrentUserData			  *	---------------------------------------------------------------------------- */				protected function loadCurrentUserData():void				{					if( SettingsIndex.getInstance().fbId != 0 )					{						if( MainGameController.getInstance().facebookFunctions.isInitialized )						{							var userDataController:UserDataController = new UserDataController();								userDataController.addEventListener( "onComplete", handleLoadCurrentUserComplete, false, 0, true );								userDataController.addEventListener( "onError", handleLoadCurrentUserError, false, 0, true );								userDataController.loadCurrentUserData( MainGameController.getInstance().facebookFunctions.fbId, true, MainGameController.getInstance().facebookFunctions.firstName, 																				MainGameController.getInstance().facebookFunctions.lastName, MainGameController.getInstance().facebookFunctions.fbProfilePicURL, 																				MainGameController.getInstance().facebookFunctions.locale, MainGameController.getInstance().facebookFunctions.birthday, 																				MainGameController.getInstance().facebookFunctions.gender, MainGameController.getInstance().facebookFunctions.email,																				MainGameController.getInstance().facebookFunctions.timezone, SettingsIndex.getInstance().origin );						}						else						{							MainGameController.getInstance().facebookFunctions.addEventListener( "onGetUserInfoComplete", handleFBLoginComplete );							MainGameController.getInstance().facebookFunctions.addEventListener( "onGetUserInfoError", handleFBLoginError );							MainGameController.getInstance().facebookFunctions.init();						}					}					else					{						var userDataController2:UserDataController = new UserDataController();							userDataController2.addEventListener( "onComplete", handleLoadCurrentUserComplete, false, 0, true );							userDataController2.addEventListener( "onError", handleLoadCurrentUserError, false, 0, true );							userDataController2.loadCurrentUserData( "7", false );					}				}							/** handleFBLoginComplete			  *	---------------------------------------------------------------------------- */				protected function handleFBLoginComplete( event:CustomEvent ):void				{					ConsoleBroadcaster.broadcast( "BoogaBoogaMain", "handleFBLoginComplete();" );										MainGameController.getInstance().facebookFunctions.removeEventListener( "onGetUserInfoComplete", handleFBLoginComplete );					MainGameController.getInstance().facebookFunctions.removeEventListener( "onGetUserInfoError", handleFBLoginError );										/*					var userDataController:UserDataController = new UserDataController();						userDataController.addEventListener( "onComplete", handleLoadCurrentUserComplete, false, 0, true );						userDataController.addEventListener( "onError", handleLoadCurrentUserError, false, 0, true );						userDataController.loadCurrentUserData( MainGameController.getInstance().facebookFunctions.fbId, true, MainGameController.getInstance().facebookFunctions.firstName, MainGameController.getInstance().facebookFunctions.lastName, MainGameController.getInstance().facebookFunctions.fbProfilePicURL );					*/					loadCurrentUserData();				}							/** handleFBLoginError			  *	---------------------------------------------------------------------------- */				protected function handleFBLoginError( event:CustomEvent ):void				{					ConsoleBroadcaster.broadcast( "BoogaBoogaMain", "handleFBLoginComplete();" );										MainGameController.getInstance().facebookFunctions.removeEventListener( "onGetUserInfoComplete", handleFBLoginComplete );					MainGameController.getInstance().facebookFunctions.removeEventListener( "onGetUserInfoError", handleFBLoginError );				}							/** handleLoadCurrentUserComplete			  *	---------------------------------------------------------------------------- */				protected function handleLoadCurrentUserComplete( event:CustomEvent ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "BoogaBoogaMain", "handleLoadCurrentUserComplete();" );										event.currentTarget.removeEventListener( "onComplete", handleLoadCurrentUserComplete );					event.currentTarget.removeEventListener( "onError", handleLoadCurrentUserError );										//play();					loadAdditionalFiles();				}							/** handleLoadCurrentUserError			  *	---------------------------------------------------------------------------- */				protected function handleLoadCurrentUserError( event:CustomEvent ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "BoogaBoogaMain", "handleLoadCurrentUserError();" );										event.currentTarget.removeEventListener( "onComplete", handleLoadCurrentUserComplete );					event.currentTarget.removeEventListener( "onError", handleLoadCurrentUserError );										//TODO:					//	Do something if there is an error loading user data				}							/** init			  *	---------------------------------------------------------------------------- */				public function init():void				{					ConsoleBroadcaster.broadcast( "BoogaBoogaMain", "init();" );										//trace( "gameboard_mc: "+gameboard_mc );										//addChild( new FPS() );										version_mc.visible = false;					version_mc.alpha = 1;					version_mc.mouseChildren = false;					version_mc.mouseEnabled = false;					version_mc.label_txt.mouseEnabled = false;										EventNotificationCenter.getInstance().addSignalListener( BoogaEvent.ON_CHEAT_DETECTED, handleCheatDetected, this );										MainGameController.getInstance().runGarbageCollector();					/**/					_fps = new FPS();					_fps.stage = stage;					_fps.addThreshold( 24 );					_fps.addThreshold( 16 );					//_fps.fps_txt = fps_txt;					//_fps.addEventListener( "onFPSUpdate", handleFPSUpdate, false, 0, true );					_fps.onFPSUpdated.add( handleFPSUpdated );					_fps.onFPSThresholdPassed.add( handleFPSThresholdPassed );					//_fps.startFPSCounter();										if( SettingsIndex.getInstance().devBuild )					{						fps_txt.mouseEnabled = false;						fps_txt.y = 6;					}					else					{						fps_txt.visible = false;					}					/**/					//ConsoleBroadcaster.broadcast( "BoogaBoogaMain", "send notification" );										_mainGame = new MainGame();					_mainGame.contentClip = mainGame_mc;					_mainGame.init();										EventNotificationCenter.getInstance().sendNotification( "onMainGameInitialized", this );					//EventNotificationCenter.getInstance().addEventListener( BoogaEvent.ON_FPS_CHECKER_STARTED, handleFPSCheckerStarted, false, 0, true );					//EventNotificationCenter.getInstance().addEventListener( BoogaEvent.ON_FPS_CHECKER_STOPPED, handleFPSCheckerStopped, false, 0, true );					EventNotificationCenter.getInstance().addSignalListener( BoogaEvent.ON_FPS_CHECKER_STARTED, handleFPSCheckerStarted, this );					EventNotificationCenter.getInstance().addSignalListener( BoogaEvent.ON_FPS_CHECKER_STOPPED, handleFPSCheckerStopped, this );					SettingsIndex.getInstance().onLowestPerformanceReached.add( handleLowestPerformanceReached );					SettingsIndex.getInstance().onQualityLowered.add( handleQualityLowered );										//_mainGame.checkForFPS();				}								private function handleFPSCheckerStarted( customParameters:Object ):void				{					_fps.startFPSCounter();				}								private function handleFPSCheckerStopped( customParameters:Object ):void				{					_fps.stopFPSCounter();				}							/** handleFPSUpdated			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function handleFPSUpdated( fps:Number ):void				{					TextFormatting.formatTextWithFontName( fps_txt, "FPS: "+fps, "Lithos Pro Black" );				}								protected function handleFPSThresholdPassed( fps:Number ):void				{					ConsoleBroadcaster.broadcast( "BoogaBoogaMain", "handleFPSThresholdPassed();" );										SettingsIndex.getInstance().improvePerformance( fps );				}								protected function handleLowestPerformanceReached():void				{					SettingsIndex.getInstance().onLowestPerformanceReached.remove( handleLowestPerformanceReached );					_fps.stopFPSCounter();					fps_txt.visible = false;				}								protected function handleQualityLowered():void				{					//EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_WARNING_SHOW, this, {text:StringsIndex.getInstance().getStringByName("QUALITY_ADJUSTMENT")} );					_mainGame.showWarningPopupForLowerQuality();				}							/** handleCheatDetected			  *	---------------------------------------------------------------------------- *			  *	If cheats are enabled, this will check for any cheats that are entered.			  *	---------------------------------------------------------------------------- */			 	protected function handleCheatDetected( customParameters:Object ):void				{					trace( 'handleCheatDetected(); '+customParameters.keywordIndex );					if( customParameters.keywordIndex == 15 )					{						version_mc.visible = true;					}					/*else if( event.customParameters.keywordIndex == 4 )					{						_mainGame.showWarningPopupForLowerQuality();					}*/				}						}			}