/** ParticlesAssetMain *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui	{		import flash.display.MovieClip;		import flash.display.Stage;		import flash.display.StageAlign;		import flash.display.StageScaleMode;		import flash.events.Event;		import flash.events.EventDispatcher;		import flash.events.IOErrorEvent;		import flash.events.ProgressEvent;		import flash.external.ExternalInterface;		import flash.net.URLLoader;		import flash.net.URLRequest;		import flash.net.URLRequestMethod;		import flash.net.URLVariables;		import flash.system.ApplicationDomain;		import flash.system.LoaderContext;		import flash.text.Font;		import com.desuade.partigen.emitters.*;		import com.desuade.partigen.particles.*;		import com.desuade.partigen.controllers.*;		import com.desuade.partigen.renderers.*;				import com.adobe.serialization.json.JSONDecoder;		import com.adobe.serialization.json.JSONEncoder;		import com.avatarlabs.utils.cache.AssetLoader;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.AssetLoaderEvent;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.particles.*;		import com.greensock.TweenLite;		import com.hydrotik.queueloader.QueueLoader;		import com.hydrotik.queueloader.QueueLoaderEvent;				import com.boogabooga.data.SettingsIndex;				public class ParticlesAssetMain extends MovieClip		{			protected var _particles:Array;			protected var _particlesLoadedCount:int;						protected var _queueLoader:QueueLoader;						/**	Stage Instances **/			public var assetContainer_mc:MovieClip;			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function ParticlesAssetMain()				{					this.loaderInfo.addEventListener( ProgressEvent.PROGRESS, handlePreloadProgress, false, 0, true );					this.loaderInfo.addEventListener( Event.COMPLETE, handlePreloadComplete, false, 0, true );										stop();									}							/** handlePreloadProgress			  *	---------------------------------------------------------------------------- */				private function handlePreloadProgress( event:ProgressEvent ):void				{					//ConsoleBroadcaster.broadcast( "ParticleAssetMain", "handlePreloadProgress():" );				}							/** handlePreloadComplete			  *	---------------------------------------------------------------------------- */				private function handlePreloadComplete( event:Event ):void				{					ConsoleBroadcaster.broadcast( "ParticleAssetMain", "handlePreloadComplete();" );										event.currentTarget.removeEventListener( ProgressEvent.PROGRESS, handlePreloadProgress );					event.currentTarget.removeEventListener( Event.COMPLETE, handlePreloadComplete );										//Load in asset swf, make sure it's not cached					loadParticles();				}							/** loadParticles			  *	---------------------------------------------------------------------------- */				private function loadParticles():void				{					_particlesLoadedCount = 0;										_particles = new Array();					_particles.push( "bee2" );					_particles.push( "chicken_collect" );					_particles.push( "chip_stone" );					_particles.push( "chip_wood" );					_particles.push( "explode_stone" );					_particles.push( "explode_wood" );					_particles.push( "fireball_hit" );					_particles.push( "god_fire_02" );					_particles.push( "healing" );					_particles.push( "ice_hit" );					_particles.push( "poison_hit" );					_particles.push( "tntmask_explosion" );					_particles.push( "tntexplosion" );										//var particle:Particle;					//var particleXMLLoader:URLLoader;					/*					for( var i:int=0; i<particles.length; i++ )					{						//loadParticle(particles[i]);						particle = new Particle();						particle.id = particles[i];						particle.assetURL = particles[i]+".xml";												particleXMLLoader = new URLLoader();						particleXMLLoader.addEventListener( Event.COMPLETE, handleParticleXMLLoadComplete );						particleXMLLoader.addEventListener( IOErrorEvent.IO_ERROR, handleParticleXMLLoadError );						particleXMLLoader.load( new URLRequest(particle.assetURL) );					}					*/										loadParticle();				}							/** loadParticle			  *	---------------------------------------------------------------------------- */				private function loadParticle():void				{					/*					if( _particlesLoadedCount < _particles.length )					{						//trace( "loading "+"files/assets/particles/"+_particles[_particlesLoadedCount]+".xml");												var particleXMLLoader:URLLoader = new URLLoader();							particleXMLLoader.addEventListener( Event.COMPLETE, handleParticleXMLLoadComplete );							particleXMLLoader.addEventListener( IOErrorEvent.IO_ERROR, handleParticleXMLLoadError );							particleXMLLoader.load( new URLRequest( "files/assets/particles/"+_particles[_particlesLoadedCount]+".xml") );					}					else					{						//complete in loading all the particles						EventNotificationCenter.getInstance().sendNotification( "onParticleAssetInit", this );												//trace( PartigenParticlesIndex.getInstance().getParticleById( "chip_stone" ).xml );					}					*/										_queueLoader = new QueueLoader( true, new LoaderContext(false, ApplicationDomain.currentDomain), true, "AssetLoader" );					_queueLoader.addEventListener( QueueLoaderEvent.QUEUE_START, handleQueueStart );					_queueLoader.addEventListener( QueueLoaderEvent.QUEUE_PROGRESS, handleQueueProgress );					_queueLoader.addEventListener( QueueLoaderEvent.QUEUE_COMPLETE, handleQueueComplete );					_queueLoader.addEventListener( QueueLoaderEvent.ITEM_START, handleItemStart );					_queueLoader.addEventListener( QueueLoaderEvent.ITEM_PROGRESS, handleItemProgress );					_queueLoader.addEventListener( QueueLoaderEvent.ITEM_COMPLETE, handleItemComplete );					_queueLoader.addEventListener( QueueLoaderEvent.ITEM_ERROR, handleItemError );										for( var i:uint=0; i<_particles.length; ++i )					{						_queueLoader.addItem( SettingsIndex.getInstance().contentURL+"files/assets/particles/"+_particles[i]+".xml", null, {title:_particles[i]} );					}										_queueLoader.execute();				}											/** handleQueueStart			  *	---------------------------------------------------------------------------- */				private function handleQueueStart( event:QueueLoaderEvent ):void				{									}							/** handleQueueProgress			  *	---------------------------------------------------------------------------- */				private function handleQueueProgress( event:QueueLoaderEvent ):void				{					//trace( event.queuepercentage );					//trace( event.bytesLoaded+", "+event.bytesTotal );					//trace( event.queueBytes );										EventNotificationCenter.getInstance().sendNotificationWithParameters( "onParticleAssetLoadProgress", this, {queuepercentage:event.queuepercentage} );				}							/** handleQueueComplete			  *	---------------------------------------------------------------------------- */				private function handleQueueComplete( event:QueueLoaderEvent ):void				{					_queueLoader.removeEventListener( QueueLoaderEvent.QUEUE_START, handleQueueStart );					_queueLoader.removeEventListener( QueueLoaderEvent.QUEUE_PROGRESS, handleQueueProgress );					_queueLoader.removeEventListener( QueueLoaderEvent.QUEUE_COMPLETE, handleQueueComplete );					_queueLoader.removeEventListener( QueueLoaderEvent.ITEM_START, handleItemStart );					_queueLoader.removeEventListener( QueueLoaderEvent.ITEM_PROGRESS, handleItemProgress );					_queueLoader.removeEventListener( QueueLoaderEvent.ITEM_COMPLETE, handleItemComplete );					_queueLoader.removeEventListener( QueueLoaderEvent.ITEM_ERROR, handleItemError );										EventNotificationCenter.getInstance().sendNotification( "onParticleAssetLoadComplete", this );										//trace( PartigenParticlesIndex.getInstance().getParticleById( "chip_stone" ).xml );									}							/** handleItemStart			  *	---------------------------------------------------------------------------- */				private function handleItemStart( event:QueueLoaderEvent ):void				{									}							/** handleItemProgress			  *	---------------------------------------------------------------------------- */				private function handleItemProgress( event:QueueLoaderEvent ):void				{									}							/** handleItemComplete			  *	---------------------------------------------------------------------------- */				private function handleItemComplete( event:QueueLoaderEvent ):void				{					//trace( "handleItemComplete("+event.title+");" );										var particle:PartigenParticle = new PartigenParticle();						particle.id = event.title;						particle.assetURL = event.path.url;						particle.xml = new XML(event.content);										PartigenParticlesIndex.getInstance().addParticle( particle );				}							/** handleItemError			  *	---------------------------------------------------------------------------- */				private function handleItemError( event:QueueLoaderEvent ):void				{									}											/** handleParticleXMLLoadComplete			  *	---------------------------------------------------------------------------- 				private function handleParticleXMLLoadComplete( event:Event ):void				{					event.currentTarget.removeEventListener( Event.COMPLETE, handleParticleXMLLoadComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleParticleXMLLoadError );										var particle:PartigenParticle = new PartigenParticle();						particle.id = _particles[_particlesLoadedCount];						particle.assetURL = _particles[_particlesLoadedCount]+".xml";						particle.xml = new XML(event.currentTarget.data);										PartigenParticlesIndex.getInstance().addParticle( particle );										_particlesLoadedCount++;										loadParticle();				}*/							/** handleParticleXMLLoadError			  *	---------------------------------------------------------------------------- 				private function handleParticleXMLLoadError( event:IOErrorEvent ):void				{					ConsoleBroadcaster.broadcast( "ParticleAssetMain", "handleParticleXMLLoadError();" );										event.currentTarget.removeEventListener( Event.COMPLETE, handleParticleXMLLoadComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleParticleXMLLoadError );										loadParticle();				}*/						}			}