/** GameLevelEditorMain  *	---------------------------------------------------------------------------- *  *	@author:  *		Christian Widodo [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui	{		import flash.display.MovieClip;		import flash.display.Stage;		import flash.display.StageAlign;		import flash.display.StageScaleMode;		import flash.events.ErrorEvent;		import flash.events.Event;		import flash.events.IOErrorEvent;		import flash.events.FullScreenEvent;		import flash.events.ProgressEvent;		import flash.external.ExternalInterface;		import flash.geom.Rectangle;		import flash.net.URLLoader;		import flash.net.URLRequest;		import flash.net.URLRequestMethod;		import flash.net.URLVariables;		import flash.system.ApplicationDomain;		import flash.system.Capabilities;		import flash.system.LoaderContext;		import flash.text.Font;		import flash.text.TextField;		import flash.utils.getDefinitionByName;				import com.adobe.serialization.json.JSONDecoder;		import com.desuade.partigen.emitters.Emitter;		import com.desuade.partigen.renderers.StandardRenderer;		import com.desuade.partigen.renderers.Renderer;		import com.greensock.TweenLite;		import com.avatarlabs.utils.DebuggerUtil;		import com.avatarlabs.utils.cache.AssetsIndex;		import com.avatarlabs.utils.cache.AssetLoader;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.AssetLoaderEvent;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.fps.FPS;		import com.avatarlabs.utils.loader.CustomLoader;		import com.avatarlabs.utils.navigation.*;		import com.avatarlabs.utils.sound.SoundEffectPlayer;		import com.avatarlabs.utils.text.TextFormatting;		import com.avatarlabs.utils.userinterface.UIButton;		//import com.demonsters.debugger.MonsterDebugger;				import com.boogabooga.controller.AssetLoaderController;		//import com.boogabooga.controller.gamelevel.GameboardController;		//import com.boogabooga.controller.gamelevel.GameLevelDataController;		import com.boogabooga.controller.maingame.MainGameController;		import com.boogabooga.controller.maingame.RequiredDataController;		import com.boogabooga.controller.maingame.UserDataController;		import com.boogabooga.data.SettingsIndex;		import com.boogabooga.data.StringsIndex;		import com.boogabooga.data.gamelevel.GameLevelDataIndex;		import com.boogabooga.data.maingame.MainGameDataIndex;		//import com.boogabooga.data.gamelevel.GameLevelDataIndex;		//import com.boogabooga.ui.gamelevel.Gameboard;		//import com.boogabooga.ui.gameleveleditor.GameboardEditor;		import com.boogabooga.ui.gameleveleditor.GameEditor;		import com.boogabooga.utils.CheatUtil;				public class GameLevelEditorMain extends BaseMain		{			//protected var _gameLevelDataController:GameLevelDataController;						//FPS			protected var _fps:FPS;						protected var _loadAdditionalFilesComplete:Boolean = false;			protected var _loadParticlesComplete:Boolean = false;			protected var _gameEditorClip:GameEditor;						/**	Stage Instances **/			public var assetContainer_mc:MovieClip;			public var fps_txt:TextField;			public var gameEditor_mc:MovieClip;			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function GameLevelEditorMain()				{					_debug = true;										ConsoleBroadcaster.enabled = false;					ConsoleBroadcaster.traceOutput = true;					DebuggerUtil.init( stage );					//MonsterDebugger.initialize( this );					//MonsterDebugger.trace( this, "Hello" );					CheatUtil.init( stage );										var fullScreenBound:Rectangle = new Rectangle( -292, 18, 1536, 960 );										if( Capabilities.screenResolutionX > fullScreenBound.width && Capabilities.screenResolutionY > fullScreenBound.height )					{						stage.fullScreenSourceRect = new Rectangle( fullScreenBound.x, fullScreenBound.y, fullScreenBound.width, fullScreenBound.height );						stage.scaleMode = StageScaleMode.NO_BORDER;						MainGameDataIndex.getInstance().outOfBoundsRectangle = new Rectangle( fullScreenBound.x, fullScreenBound.y, fullScreenBound.width, fullScreenBound.height );					}					else					{						stage.scaleMode = StageScaleMode.NO_SCALE;						MainGameDataIndex.getInstance().outOfBoundsRectangle = new Rectangle( 0, 0, stage.stageWidth, stage.stageHeight );					}										this.loaderInfo.addEventListener( ProgressEvent.PROGRESS, handlePreloadProgress, false, 0, true );					this.loaderInfo.addEventListener( Event.COMPLETE, handlePreloadComplete, false, 0, true );										stop();									}							/** handlePreloadProgress			  *	---------------------------------------------------------------------------- */				override protected function handlePreloadProgress( event:ProgressEvent ):void				{					//ConsoleBroadcaster.broadcast( "WeaponDisplayObject", "handlePreloadProgress():" );				}							/** handlePreloadComplete			  *	---------------------------------------------------------------------------- */				override protected function handlePreloadComplete( event:Event ):void				{					ConsoleBroadcaster.broadcast( "GameLevelEditorMain", "handlePreloadComplete();" );										super.handlePreloadComplete( event );				}							/** finishedLoadingRequiredFiles			  *	---------------------------------------------------------------------------- */				override protected function finishedLoadingRequiredFiles():void				{					ConsoleBroadcaster.broadcast( "GameLevelEditorMain", "finishedLoadingRequiredFiles();" );										loadRequiredData();									}								protected function loadAdditionalFiles():void				{					EventNotificationCenter.getInstance().addEventListener( "onParticleAssetLoadComplete", handleLoadParticlesComplete );										var assetLoader:AssetLoader = new AssetLoader();						assetLoader.autoKill = true;						assetLoader.addEventListener( AssetLoaderEvent.START, handleLoadAdditionalFilesStart, false, 0, true );						assetLoader.addEventListener( AssetLoaderEvent.COMPLETE, handleLoadAdditionalFilesComplete, false, 0, true );						assetLoader.addEventListener( AssetLoaderEvent.PROGRESS, handleLoadAdditionalFilesProgress, false, 0, true );						assetLoader.addEventListener( AssetLoaderEvent.ERROR, handleLoadAdditionalFilesError, false, 0, true );						assetLoader.addEventListener( AssetLoaderEvent.ITEM_COMPLETE, handleLoadAdditionalFilesItemComplete, false, 0, true );						assetLoader.addAssetToLoad( "Locale_"+MainGameController.getInstance().currentUser.locale, SettingsIndex.getInstance().contentURL+"files/xml/copy_"+MainGameController.getInstance().currentUser.locale+".xml" );						assetLoader.addAssetToLoad( "AssetsSwf", SettingsIndex.getInstance().contentURL+"assets.swf" );						assetLoader.addAssetToLoad( "ParticlesAssetSwf", SettingsIndex.getInstance().contentURL+"particles_asset.swf" );						assetLoader.addAssetToLoad( "GameLevelSwf", SettingsIndex.getInstance().contentURL+"gamelevel.swf" );						assetLoader.addAssetToLoad( "BoogaBoogaAsset1Swf", SettingsIndex.getInstance().contentURL+"boogabooga_asset1.swf" );						assetLoader.addAssetToLoad( "GameplaySoundSetSwf", SettingsIndex.getInstance().contentURL+"files/assets/sounds/gameplay_sound_set.swf" );						assetLoader.addAssetToLoad( "GeneralGameSetSwf", SettingsIndex.getInstance().contentURL+"files/assets/sounds/general_game_set.swf" );						assetLoader.startLoadAssets();										/*					var loader:CustomLoader = new CustomLoader();						loader.loaderContext = new LoaderContext( true, ApplicationDomain.currentDomain );						loader.addEventListener( "onLoadComplete", handleLoadParticleAssetComplete );						loader.addEventListener( "onLoadProgress", handleLoadParticleAssetProgress );						loader.addEventListener( IOErrorEvent.IO_ERROR, handleLoadError );						loader.loadAsset( assetContainer_mc, SettingsIndex.getInstance().contentURL+"particles_asset.swf" );					*/				}							/** handleLoadAdditionalFilesStart			  *	---------------------------------------------------------------------------- */				protected function handleLoadAdditionalFilesStart( event:AssetLoaderEvent ):void				{									}							/** handleLoadAdditionalFilesItemComplete			  *	---------------------------------------------------------------------------- */				protected function handleLoadAdditionalFilesItemComplete( event:AssetLoaderEvent ):void				{					if( event.customParameters.id == "Locale_"+MainGameController.getInstance().currentUser.locale )					{						//trace( "xml content "+event.customParameters.content );												var xml:XML = new XML(event.customParameters.content);						var localizations:XMLList = xml.localization;												for( var i:int=0; i<localizations.length(); ++i )						{							StringsIndex.getInstance().addString( localizations[i].id.text(), localizations[i].name.text(), localizations[i].string.text() );						}												AssetsIndex.getInstance().removeLoadedAsset( "Locale_"+MainGameController.getInstance().currentUser.locale );												GameLevelDataIndex.getInstance().buildWeaponStatistics();						GameLevelDataIndex.getInstance().buildGodStatistics();						GameLevelDataIndex.getInstance().buildEnemyStatistics();												MainGameController.getInstance().currentUser.updateItemStatistics();					}				}							/** handleLoadAdditionalFilesComplete			  *	---------------------------------------------------------------------------- */				protected function handleLoadAdditionalFilesComplete( event:AssetLoaderEvent ):void				{					ConsoleBroadcaster.broadcast( "BoogaBoogaMain", "handleLoadAdditionalFilesComplete();" );										event.currentTarget.removeEventListener( AssetLoaderEvent.START, handleLoadAdditionalFilesStart );					event.currentTarget.removeEventListener( AssetLoaderEvent.PROGRESS, handleLoadAdditionalFilesProgress );					event.currentTarget.removeEventListener( AssetLoaderEvent.COMPLETE, handleLoadAdditionalFilesComplete );					event.currentTarget.removeEventListener( AssetLoaderEvent.ERROR, handleLoadAdditionalFilesError );					event.currentTarget.removeEventListener( AssetLoaderEvent.ITEM_COMPLETE, handleLoadAdditionalFilesItemComplete );										_loadAdditionalFilesComplete = true;										if( _loadAdditionalFilesComplete && _loadParticlesComplete )					{						play();					}										}							/** handleLoadAdditionalFilesProgress			  *	---------------------------------------------------------------------------- */				protected function handleLoadAdditionalFilesProgress( event:AssetLoaderEvent ):void				{					//trace( event.percentage );				}							/** handleLoadAdditionalFilesError			  *	---------------------------------------------------------------------------- */				protected function handleLoadAdditionalFilesError( event:AssetLoaderEvent ):void				{					ConsoleBroadcaster.broadcast( "BoogaBoogaMain", "handleLoadAdditionalFilesError();" );				}							/** handleLoadParticleAssetComplete			  *	---------------------------------------------------------------------------- 				protected function handleLoadParticleAssetComplete( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onLoadComplete", handleLoadParticleAssetComplete );					event.currentTarget.removeEventListener( "onLoadProgress", handleLoadParticleAssetProgress );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleLoadError );				}*/							/** handleLoadParticleAssetProgress			  *	---------------------------------------------------------------------------- 				protected function handleLoadParticleAssetProgress( event:CustomEvent ):void				{									}*/							/** handleLoadError			  *	---------------------------------------------------------------------------- 				protected function handleLoadError( event:IOErrorEvent ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "GameLevelEditorMain", "handleLoadError();" );				}*/							/** handleLoadParticlesComplete			  *	---------------------------------------------------------------------------- */				protected function handleLoadParticlesComplete( event:CustomEvent ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "GameLevelEditorMain", "handleLoadParticlesComplete();" );					//finishedLoadingRequiredFiles();										EventNotificationCenter.getInstance().removeEventListener( "onParticleAssetLoadComplete", handleLoadParticlesComplete );										_loadParticlesComplete = true;										if( _loadAdditionalFilesComplete && _loadParticlesComplete )					{						play();					}										/*					var loader:CustomLoader = new CustomLoader();						loader.loaderContext = new LoaderContext( true, ApplicationDomain.currentDomain );						loader.addEventListener( "onLoadComplete", handleLoadAssetFileComplete );						loader.addEventListener( "onLoadProgress", handleLoadAssetFileProgress );						loader.addEventListener( IOErrorEvent.IO_ERROR, handleLoadError );						loader.loadAsset( assetContainer_mc, SettingsIndex.getInstance().contentURL+"assets.swf" );					*/				}							/** handleLoadAssetFileComplete			  *	---------------------------------------------------------------------------- 				protected function handleLoadAssetFileComplete( event:CustomEvent ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "GameLevelEditorMain", "handleLoadAssetFileComplete();" );										event.currentTarget.removeEventListener( "onLoadComplete", handleLoadAssetFileComplete );					event.currentTarget.removeEventListener( "onLoadProgress", handleLoadAssetFileProgress );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleLoadError );										//finishedLoadingRequiredFiles();					var loader:CustomLoader = new CustomLoader();						loader.loaderContext = new LoaderContext( true, ApplicationDomain.currentDomain );						loader.addEventListener( "onLoadComplete", handleLoadGameLevelAssetComplete, false, 0, true );						loader.addEventListener( "onLoadProgress", handleLoadGameLevelAssetProgress, false, 0, true );						loader.addEventListener( IOErrorEvent.IO_ERROR, handleLoadError, false, 0, true );						loader.loadAsset( assetContainer_mc, SettingsIndex.getInstance().contentURL+"gamelevel.swf" );											var loader2:CustomLoader = new CustomLoader();						loader2.loadAsset( assetContainer_mc, SettingsIndex.getInstance().contentURL+"boogabooga_asset1.swf" );									}*/							/** handleLoadAssetFileProgress			  *	---------------------------------------------------------------------------- 				protected function handleLoadAssetFileProgress( event:CustomEvent ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "GameLevelEditorMain", "handleLoadAssetFileProgress();" );				}*/							/** handleLoadGameLevelAssetComplete			  *	---------------------------------------------------------------------------- 				protected function handleLoadGameLevelAssetComplete( event:CustomEvent ):void				{					ConsoleBroadcaster.broadcast( "GameLevelEditorMain", "handleLoadGameLevelAssetComplete();" );										event.currentTarget.removeEventListener( "onLoadComplete", handleLoadGameLevelAssetComplete );					event.currentTarget.removeEventListener( "onLoadProgress", handleLoadGameLevelAssetProgress );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleLoadError );										//finishedLoadingRequiredFiles();					loadGameLevelData();				}								protected function handleLoadGameLevelAssetProgress( event:CustomEvent ):void				{									}				*/							/** loadGameLevelData			  *	---------------------------------------------------------------------------- */				protected function loadRequiredData():void				{					var requiredDataController:RequiredDataController = new RequiredDataController();						requiredDataController.addEventListener( "onComplete", handleLoadRequiredDataComplete );						requiredDataController.addEventListener( "onError", handleLoadRequiredDataError );						requiredDataController.loadRequiredData();				}							/** handleLoadRequiredDataComplete			  *	---------------------------------------------------------------------------- */				protected function handleLoadRequiredDataComplete( event:CustomEvent ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "GameLevelEditorMain", "handleLoadRequiredDataComplete();" );										event.currentTarget.removeEventListener( "onComplete", handleLoadRequiredDataComplete );					event.currentTarget.removeEventListener( "onError", handleLoadRequiredDataError );										//play();										var userDataController:UserDataController = new UserDataController();						userDataController.addEventListener( "onComplete", handleLoadCurrentUserComplete, false, 0, true );						userDataController.addEventListener( "onError", handleLoadCurrentUserError, false, 0, true );										userDataController.loadCurrentUserData( "1", false );									}							/** handleLoadRequiredDataError			  *	---------------------------------------------------------------------------- */				protected function handleLoadRequiredDataError( event:CustomEvent ):void				{					event.currentTarget.removeEventListener( "onComplete", handleLoadRequiredDataComplete );					event.currentTarget.removeEventListener( "onError", handleLoadRequiredDataError );				}							/** handleLoadCurrentUserComplete			  *	---------------------------------------------------------------------------- */				protected function handleLoadCurrentUserComplete( event:CustomEvent ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "GameLevelEditorMain", "handleLoadCurrentUserComplete();" );										event.currentTarget.removeEventListener( "onComplete", handleLoadCurrentUserComplete );					event.currentTarget.removeEventListener( "onError", handleLoadCurrentUserError );										MainGameController.getInstance().currentUser.level = 999;										//play();					loadAdditionalFiles();				}							/** handleLoadCurrentUserError			  *	---------------------------------------------------------------------------- */				protected function handleLoadCurrentUserError( event:CustomEvent ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "GameLevelEditorMain", "handleLoadCurrentUserError();" );										event.currentTarget.removeEventListener( "onComplete", handleLoadCurrentUserComplete );					event.currentTarget.removeEventListener( "onError", handleLoadCurrentUserError );				}							/** init			  *	---------------------------------------------------------------------------- */				public function init():void				{					ConsoleBroadcaster.broadcast( "GameLevelEditorMain", "init();" );					//trace( "gameboard_mc: "+gameboard_mc );										//addChild( new FPS() );										_fps = new FPS();					_fps.stage = stage;					_fps.addThreshold( 24 );					_fps.addThreshold( 16 );					//_fps.fps_txt = fps_txt;					//_fps.addEventListener( "onFPSUpdate", handleFPSUpdate, false, 0, true );					_fps.onFPSUpdated.add( handleFPSUpdated );					//_fps.onFPSThresholdPassed.add( handleFPSThresholdPassed );					_fps.startFPSCounter();										_gameEditorClip = new GameEditor();					_gameEditorClip.contentClip = gameEditor_mc;										//trace( "_gameEditorClip: "+_gameEditorClip );										if( this.loaderInfo.parameters.gameLevelId != undefined && this.loaderInfo.parameters.gameLevelId != '' )					{						ConsoleBroadcaster.broadcast( "GameLevelEditorMain", "loading gameLevel "+this.loaderInfo.parameters.gameLevelId );												//gameEditor_mc.loadGameLevel( this.loaderInfo.parameters.gameLevelId );						_gameEditorClip.gameLevelIdToLoad = this.loaderInfo.parameters.gameLevelId;					}					else if( this.loaderInfo.url.search('file://') >= 0 )					{						//trace( "setting game level id to 1" );												//gameEditor_mc.loadGameLevel(2);						_gameEditorClip.gameLevelIdToLoad = 1;					}										_gameEditorClip.init();					_gameEditorClip.editingGameLevel = this.loaderInfo.parameters.gameLevel == "true";				}							/** handleFPSUpdated			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function handleFPSUpdated( fps:Number ):void				{					TextFormatting.formatTextWithFontName( fps_txt, "FPS: "+fps, "Lithos Pro Black" );				}								protected function handleFPSThresholdPassed( fps:Number ):void				{					ConsoleBroadcaster.broadcast( "GameLevelEditorMain", "handleFPSThresholdPassed();" );					SettingsIndex.getInstance().improvePerformance( fps );				}						}			}