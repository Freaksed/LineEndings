/** LaserDisplayObject  *	---------------------------------------------------------------------------- *  *	@desc:  *		This is the display object clip that will represent Projectile class.  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.gamelevel.projectiles	{		import flash.display.Bitmap;		import flash.display.BitmapData;		import flash.display.BlendMode;		import flash.display.DisplayObject;		import flash.display.DisplayObjectContainer;		import flash.display.MovieClip;		import flash.events.Event;		import flash.events.FullScreenEvent;		import flash.events.IOErrorEvent;		import flash.events.ProgressEvent;		import flash.geom.ColorTransform;		import flash.geom.Matrix;		import flash.geom.Point;		import flash.geom.Rectangle;		import flash.utils.getDefinitionByName;				import com.greensock.TweenLite;		import com.avatarlabs.utils.cache.*;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.loader.CustomLoader;		import com.avatarlabs.utils.UtilFunctions;		import com.avatarlabs.utils.VectorUtil;				//import com.gamelevel.data.*;		import com.boogabooga.data.gamelevel.AbstractGameObject;		import com.boogabooga.data.gamelevel.Enemy;		import com.boogabooga.data.gamelevel.Projectile;		import com.boogabooga.data.gamelevel.Weapon;		import com.boogabooga.ui.gamelevel.AnimationDisplayObject;		import com.boogabooga.ui.gamelevel.GameLevelDisplayObject;		import com.boogabooga.utils.GameLevelUtil;				public class LaserDisplayObject extends ProjectileDisplayObject		{			//protected var _owner:AbstractGameObject;			//protected var _projectile:Projectile;						//protected var _destinationPointIn2D:Point;			//protected var _movementX:Number;			//protected var _movementY:Number;			//protected var _movementAltitude:Number;			//protected var _direction:int;						//protected var _moving:Boolean;			//protected var _alive:Boolean;						protected var _targetAltitude:Number;			protected var _animationClips:Vector.<AnimationDisplayObject>;						protected var _laserClipPaddingX:Number;			protected var _laserClipPaddingY:Number;						/**	Stage Instances **/			//public var animation_mc:AnimationDisplayObject;			//public var hitarea_mc:MovieClip;			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function LaserDisplayObject()				{					//init();				}							/** setDestinationPointIn2D			  *	---------------------------------------------------------------------------- */				override public function setDestinationPointIn2D( p:Point, altitude:Number=0 ):void				{					_destinationPointIn2D = p;					_targetAltitude = altitude;										_animationClips = new Vector.<AnimationDisplayObject>;										//_movementX = _movementY = 0;										_movementX = _destinationPointIn2D.x - _positionIn2D.x;					_movementY = _destinationPointIn2D.y - _positionIn2D.y;					_movementAltitude = altitude - _altitude;										//trace( "_movementX: "+_movementX );					//trace( "_movementY: "+_movementY );										var numberOfAnimationClips:int;										if( _direction == GameLevelUtil.DIRECTION_UP || _direction == GameLevelUtil.DIRECTION_RIGHT )					{						if( _movementX != 0 ) numberOfAnimationClips = (Math.abs(_movementX) - Math.abs(_projectile.upAnimationObject.customPosition.x));						else if( _movementY != 0 ) numberOfAnimationClips = (Math.abs(_movementY) - Math.abs(_projectile.upAnimationObject.customPosition.y));												numberOfAnimationClips = numberOfAnimationClips < 0 ? 1 : Math.round( numberOfAnimationClips / 60 );												//trace( "customPosition: "+_projectile.upAnimationObject.customPosition );					}					else					{						if( _movementX != 0 ) numberOfAnimationClips = (Math.abs(_movementX) - Math.abs(_projectile.downAnimationObject.customPosition.x));						else if( _movementY != 0 ) numberOfAnimationClips = (Math.abs(_movementY) - Math.abs(_projectile.downAnimationObject.customPosition.y));												numberOfAnimationClips = numberOfAnimationClips < 0 ? 1 : Math.round( numberOfAnimationClips / 60 );												//trace( "customPosition: "+_projectile.downAnimationObject.customPosition );					}										//trace( "numberOfAnimationClips: "+numberOfAnimationClips );										var animationClip:AnimationDisplayObject;										_animationClips.push( _animationClip );										for( var i:int=1; i<numberOfAnimationClips; ++i )					{						animationClip = new AnimationDisplayObject();						animationClip.contentClip = new (getDefinitionByName("ProjectileDisplayObject.animation") as Class)();						animationClip.contentClip.name = "animation"+i+"_mc";						animationClip.contentClip.visible = false;						animationClip.init();						_animationClips.push( animationClip );												_contentClip.addChild( animationClip.contentClip );					}										/*					var ratioX = Math.abs( _movementX / _projectile.speed );					var ratioY = Math.abs( _movementY / _projectile.speed );										if( ratioX > ratioY )					{						_movementX = _movementX / ratioX;						_movementY = _movementY / ratioX;						_movementAltitude = _movementAltitude / ratioX;					}					else					{						_movementX = _movementX / ratioY;						_movementY = _movementY / ratioY;						_movementAltitude = _movementAltitude / ratioY;					}					*/					//trace( "_movementX: "+_movementX );					//trace( "_movementY: "+_movementY );				}							/** init			  *	---------------------------------------------------------------------------- */				override public function init():void				{					//trace( "LaserDisplayObject: init();" );										super.init();										_debug = true;										_moving = false;					_alive = false;										_laserClipPaddingX = 28;					_laserClipPaddingY = 16;										_type = TYPE_LASER;				}							/** pause			  *	---------------------------------------------------------------------------- */				override public function pause():void				{					if( _moving )					{						//_contentClip.removeEventListener( Event.ENTER_FRAME, handleEnterFrameMoving );					}										for( var i:int=0; i<_animationClips.length; ++i )					{						_animationClips[i].pause();					}				}							/** unpause			  *	---------------------------------------------------------------------------- */				override public function unpause():void				{					if( _moving )					{						//_contentClip.addEventListener( Event.ENTER_FRAME, handleEnterFrameMoving, false, 0, true );					}										for( var i:int=0; i<_animationClips.length; ++i )					{						_animationClips[i].unpause();					}				}							/** kill			  *	---------------------------------------------------------------------------- */				override public function kill():void				{					for( var i:int=0; i<_animationClips.length; ++i )					{						_animationClips[i].stopAnimation();						_animationClips[i].kill();						_contentClip.removeChild( _animationClips[i].contentClip );						_animationClips[i] = null;					}										VectorUtil.removeAll( _animationClips );					_animationClips = null;										super.kill();				}							/** updateOnEnterFrame			  *	---------------------------------------------------------------------------- *			  *	This updates the display object on every enter frame loop.			  *	---------------------------------------------------------------------------- */				override public function updateOnEnterFrame():void				{					if( _needToBeUpdatedOnEnterFrame )					{						if( _moving )						{							for( var i:int=0; i<_animationClips.length; ++i )							{								_animationClips[i].showNextAnimation();							}						}					}				}							/** startMoving			  *	---------------------------------------------------------------------------- */				override public function startMoving():void				{										//trace( "direction: "+direction );										var i:int;										switch( direction )					{						case GameLevelUtil.DIRECTION_UP:							//animation_mc.animationObject = _projectile.upAnimationObject;							//animation_mc.sourceBD = BitmapDataManager.getInstance().getBitmapData( animation_mc.animationObject.cacheId ).bitmapData;							//animation_mc.initCanvas( false );							for( i=0; i<_animationClips.length; ++i )							{								_animationClips[i].contentClip.x = -i*_laserClipPaddingX + _projectile.upAnimationObject.customPosition.x;								_animationClips[i].contentClip.y = -i*_laserClipPaddingY + _projectile.upAnimationObject.customPosition.y;								_animationClips[i].animationObject = _projectile.upAnimationObject;								_animationClips[i].sourceBD = BitmapDataManager.getInstance().getBitmapData( _animationClip.animationObject.cacheId ).bitmapData;								_animationClips[i].initCanvas( false );								_animationClips[i].contentClip.visible = true;								_animationClips[i].startAnimation( true, 0 );							}							break;												case GameLevelUtil.DIRECTION_RIGHT:							//animation_mc.animationObject = _projectile.upAnimationObject;							//animation_mc.sourceBD = BitmapDataManager.getInstance().getBitmapData( animation_mc.animationObject.cacheId ).bitmapData;							//animation_mc.initCanvas( true );							for( i=0; i<_animationClips.length; ++i )							{								_animationClips[i].contentClip.x = i*_laserClipPaddingX - _projectile.upAnimationObject.customPosition.x;								_animationClips[i].contentClip.y = -i*_laserClipPaddingY + _projectile.upAnimationObject.customPosition.y;								_animationClips[i].animationObject = _projectile.upAnimationObject;								_animationClips[i].sourceBD = BitmapDataManager.getInstance().getBitmapData( _animationClip.animationObject.cacheId ).bitmapData;								_animationClips[i].initCanvas( true );								_animationClips[i].contentClip.visible = true;								_animationClips[i].startAnimation( true, 0 );							}							break;												case GameLevelUtil.DIRECTION_DOWN:							//animation_mc.animationObject = _projectile.downAnimationObject;							//animation_mc.sourceBD = BitmapDataManager.getInstance().getBitmapData( animation_mc.animationObject.cacheId ).bitmapData;							//animation_mc.initCanvas( false );							for( i=0; i<_animationClips.length; ++i )							{								_animationClips[i].contentClip.x = i*_laserClipPaddingX + _projectile.downAnimationObject.customPosition.x;								_animationClips[i].contentClip.y = i*_laserClipPaddingY + _projectile.downAnimationObject.customPosition.y;								_animationClips[i].animationObject = _projectile.downAnimationObject;								_animationClips[i].sourceBD = BitmapDataManager.getInstance().getBitmapData( _animationClip.animationObject.cacheId ).bitmapData;								_animationClips[i].initCanvas( false );								_animationClips[i].contentClip.visible = true;								_animationClips[i].startAnimation( true, 0 );							}							break;													case GameLevelUtil.DIRECTION_LEFT:							//animation_mc.animationObject = _projectile.downAnimationObject;							//animation_mc.sourceBD = BitmapDataManager.getInstance().getBitmapData( animation_mc.animationObject.cacheId ).bitmapData;							//animation_mc.initCanvas( true );							for( i=0; i<_animationClips.length; ++i )							{								_animationClips[i].contentClip.x = -i*_laserClipPaddingX - _projectile.downAnimationObject.customPosition.x;								_animationClips[i].contentClip.y = i*_laserClipPaddingY + _projectile.downAnimationObject.customPosition.y;								_animationClips[i].animationObject = _projectile.downAnimationObject;								_animationClips[i].sourceBD = BitmapDataManager.getInstance().getBitmapData( _animationClip.animationObject.cacheId ).bitmapData;								_animationClips[i].initCanvas( true );								_animationClips[i].contentClip.visible = true;								_animationClips[i].startAnimation( true, 0 );							}							break;					}										_moving = true;					_alive = true;										//animation_mc.visible = true;					//animation_mc.startAnimation( true, 0 );					//_contentClip.addEventListener( Event.ENTER_FRAME, handleEnterFrameMoving, false, 0, true );				}							/** stopMoving			  *	---------------------------------------------------------------------------- 				override public function stopMoving():void				{					if( _moving )					{						for( var i:int=0; i<_animationClips.length; ++i )						{							_animationClips[i].stopAnimation();						}												super.stopMoving();												//_contentClip.removeEventListener( Event.ENTER_FRAME, handleEnterFrameMoving );					}				}*/							/** die			  *	---------------------------------------------------------------------------- 				public function die():void				{					if( _debug ) ConsoleBroadcaster.broadcast( "LaserDisplayObject", "die();" );										if( _alive )					{						stopMoving();												_alive = false;												dispatchEvent( new GameLevelEvent(GameLevelEvent.REMOVE_FROM_GAME) );					}				}*/							/** handleenterFrameMoving			  *	---------------------------------------------------------------------------- */				override protected function handleEnterFrameMoving( event:Event ):void				{										//trace( "x: "+_contentClip.x );					//trace( "y: "+_contentClip.y );					//trace( "visible: "+_contentClip.visible );										//dispatchEvent( new GameLevelEvent(GameLevelEvent.MOVING) );										//TODO:					//	If a projectile is out of range, remove it from the game.					//	Probably if x/y < -1000 && x/y > 2000				}						}			}