/** CatapultDisplayObject  *	---------------------------------------------------------------------------- *  *	@desc:  *		This is the display object clip that will represent Projectile class.  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.gamelevel.projectiles	{		import flash.display.Bitmap;		import flash.display.BitmapData;		import flash.display.BlendMode;		import flash.display.DisplayObject;		import flash.display.DisplayObjectContainer;		import flash.display.MovieClip;		import flash.events.Event;		import flash.events.FullScreenEvent;		import flash.events.IOErrorEvent;		import flash.events.ProgressEvent;		import flash.geom.ColorTransform;		import flash.geom.Matrix;		import flash.geom.Point;		import flash.geom.Rectangle;		import flash.utils.getDefinitionByName;				import com.greensock.TweenLite;		import com.avatarlabs.utils.cache.*;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.loader.CustomLoader;		import com.avatarlabs.utils.UtilFunctions;		import org.osflash.signals.Signal;				//import com.gamelevel.data.*;		import com.boogabooga.data.gamelevel.AbstractGameObject;		import com.boogabooga.data.gamelevel.Enemy;		import com.boogabooga.data.gamelevel.Projectile;		import com.boogabooga.data.gamelevel.Weapon;		import com.boogabooga.events.GameLevelEvent;		import com.boogabooga.ui.gamelevel.GameLevelDisplayObject;		import com.boogabooga.utils.GameLevelUtil;				public class CatapultDisplayObject extends ProjectileDisplayObject		{			//protected var _owner:AbstractGameObject;			//protected var _projectile:Projectile;						//protected var _destinationPointIn2D:Point;			//protected var _movementX:Number;			//protected var _movementY:Number;			//protected var _movementAltitude:Number;			//protected var _direction:int;						//protected var _moving:Boolean;			//protected var _alive:Boolean;						protected var _targetAltitude:Number;			protected var _highestAltitude:Number;			protected var _maxAltitudeSpeed:Number;			protected var _travelTime:Number;			protected var _goingUp:Boolean;			protected var _halfPoint:Point;						public var onAmmoHit:Signal;						/**	Stage Instances **/			//public var animation_mc:AnimationDisplayObject;			//public var hitarea_mc:MovieClip;			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function CatapultDisplayObject()				{					//init();				}							/** setDestinationPointIn2D			  *	---------------------------------------------------------------------------- */				override public function setDestinationPointIn2D( p:Point, altitude:Number=0 ):void				{					_destinationPointIn2D = p;					_targetAltitude = altitude;										/*					var ratioX = Math.abs( _movementX / _projectile.speed );					var ratioY = Math.abs( _movementY / _projectile.speed );										if( ratioX > ratioY )					{						_movementX = _movementX / ratioX;						_movementY = _movementY / ratioX;						_movementAltitude = _movementAltitude / ratioX;					}					else					{						_movementX = _movementX / ratioY;						_movementY = _movementY / ratioY;						_movementAltitude = _movementAltitude / ratioY;					}					*/					//trace( "_movementX: "+_movementX );					//trace( "_movementY: "+_movementY );				}							/** set/get contentClip			  *	---------------------------------------------------------------------------- 				override public function set contentClip( m:MovieClip ):void				{					_contentClip = m;					_contentClip.mouseChildren = false;					_contentClip.mouseEnabled = false;										animation_mc = _contentClip.animation_mc;					hitarea_mc = _contentClip.hitarea_mc;										animation_mc.visible = false;										//animation_mc.addEventListener( "onAnimationEvent", handleAnimationEventFired, false, 0, true );				}*/							/** init			  *	---------------------------------------------------------------------------- */				override public function init():void				{					//trace( "CatapultDisplayObject: init();" );										super.init();										_debug = true;										_moving = false;					_alive = false;										_highestAltitude = -200;					_travelTime = 1500;					_maxAltitudeSpeed = 0;					_goingUp = true;										onAmmoHit = new Signal( CatapultDisplayObject );										_type = TYPE_CATAPULT;				}							/** pause			  *	---------------------------------------------------------------------------- */				override public function pause():void				{					/*					if( _moving )					{						_contentClip.removeEventListener( Event.ENTER_FRAME, handleEnterFrameMoving );					}					*/					_animationClip.pause();				}							/** unpause			  *	---------------------------------------------------------------------------- */				override public function unpause():void				{					/*					if( _moving )					{						_contentClip.addEventListener( Event.ENTER_FRAME, handleEnterFrameMoving, false, 0, true );					}					*/					_animationClip.unpause();				}							/** kill			  *	---------------------------------------------------------------------------- */				override public function kill():void				{					//trace( "kill();" );										/*					if( _moving )					{						_contentClip.removeEventListener( Event.ENTER_FRAME, handleEnterFrameMoving );					}					*/					_halfPoint = null;										onAmmoHit = null;										super.kill();				}							/** updateOnEnterFrame			  *	---------------------------------------------------------------------------- *			  *	This updates the display object on every enter frame loop.			  *	---------------------------------------------------------------------------- */				override public function updateOnEnterFrame():void				{					if( _needToBeUpdatedOnEnterFrame )					{						if( _moving )						{							handleEnterFrameMoving( null );						}												if( _animationClip != null )							_animationClip.showNextAnimation();					}				}							/** startMoving			  *	---------------------------------------------------------------------------- */				override public function startMoving():void				{					_moving = true;					_alive = true;										//trace( "direction: "+direction );										switch( direction )					{						case GameLevelUtil.DIRECTION_UP:							//_animationClip.contentClip.x += _projectile.upAnimationObject.customPosition.x;							//_animationClip.contentClip.y += _projectile.upAnimationObject.customPosition.y;							//_animationClip.offsetX = _projectile.upAnimationObject.customPosition.x;							//_animationClip.offsetY = _projectile.upAnimationObject.customPosition.y;							_positionIn2D.x += _projectile.upAnimationObject.customPosition.x;							_positionIn2D.y += _projectile.upAnimationObject.customPosition.y;							_animationClip.animationObject = _projectile.upAnimationObject;							_animationClip.sourceBD = BitmapDataManager.getInstance().getBitmapData( _animationClip.animationObject.cacheId ).bitmapData;							_animationClip.initCanvas( false );							break;												case GameLevelUtil.DIRECTION_RIGHT:							//_animationClip.contentClip.x -= _projectile.upAnimationObject.customPosition.x;							//_animationClip.contentClip.y += _projectile.upAnimationObject.customPosition.y;							//_animationClip.offsetX = -_projectile.upAnimationObject.customPosition.x;							//_animationClip.offsetY = _projectile.upAnimationObject.customPosition.y;							_positionIn2D.x += _projectile.upAnimationObject.flippedCustomPosition.x;							_positionIn2D.y += _projectile.upAnimationObject.flippedCustomPosition.y;							_animationClip.animationObject = _projectile.upAnimationObject;							_animationClip.sourceBD = BitmapDataManager.getInstance().getBitmapData( _animationClip.animationObject.cacheId ).bitmapData;							_animationClip.initCanvas( true );							break;												case GameLevelUtil.DIRECTION_DOWN:							//_animationClip.contentClip.x += _projectile.downAnimationObject.customPosition.x;							//_animationClip.contentClip.y += _projectile.downAnimationObject.customPosition.y;							//_animationClip.offsetX = _projectile.downAnimationObject.customPosition.x;							//_animationClip.offsetY = _projectile.downAnimationObject.customPosition.y;							_positionIn2D.x += _projectile.downAnimationObject.customPosition.x;							_positionIn2D.y += _projectile.downAnimationObject.customPosition.y;							_animationClip.animationObject = _projectile.downAnimationObject;							_animationClip.sourceBD = BitmapDataManager.getInstance().getBitmapData( _animationClip.animationObject.cacheId ).bitmapData;							_animationClip.initCanvas( false );							break;													case GameLevelUtil.DIRECTION_LEFT:							//_animationClip.contentClip.x += _projectile.downAnimationObject.customPosition.x;							//_animationClip.contentClip.y -= _projectile.downAnimationObject.customPosition.y;							//_animationClip.offsetX = -_projectile.downAnimationObject.customPosition.x;							//_animationClip.offsetY = _projectile.downAnimationObject.customPosition.y;							_positionIn2D.x += _projectile.downAnimationObject.flippedCustomPosition.x;							_positionIn2D.y += _projectile.downAnimationObject.flippedCustomPosition.y;							_animationClip.animationObject = _projectile.downAnimationObject;							_animationClip.sourceBD = BitmapDataManager.getInstance().getBitmapData( _animationClip.animationObject.cacheId ).bitmapData;							_animationClip.initCanvas( true );							break;					}										_movementX = _destinationPointIn2D.x - _positionIn2D.x;					_movementY = _destinationPointIn2D.y - _positionIn2D.y;					_movementAltitude = _highestAltitude - _altitude;					_movementAltitude = _movementAltitude < 0 ? -_movementAltitude : _movementAltitude;										_halfPoint = new Point();					_halfPoint.x = _positionIn2D.x + (_destinationPointIn2D.x - _positionIn2D.x) / 2;					_halfPoint.y = _positionIn2D.y + (_destinationPointIn2D.y - _positionIn2D.y) / 2;										//trace( "start: "+_positionIn2D.x );					//trace( "end: "+_destinationPointIn2D.x );					//trace( "_halfPoint: "+_halfPoint );										_movementX = _movementX / (this._travelTime / _contentClip.stage.frameRate);					_movementY = _movementY / (this._travelTime / _contentClip.stage.frameRate);					_movementAltitude = _movementAltitude / (this._travelTime/2 / _contentClip.stage.frameRate);					_maxAltitudeSpeed = _movementAltitude;										_animationClip.contentClip.visible = true;					_animationClip.startAnimation( true, 0 );					//_contentClip.addEventListener( Event.ENTER_FRAME, handleEnterFrameMoving, false, 0, true );				}							/** stopMoving			  *	---------------------------------------------------------------------------- 				public function stopMoving():void				{					if( _moving )					{						_moving = false;												_contentClip.removeEventListener( Event.ENTER_FRAME, handleEnterFrameMoving );					}				}*/							/** die			  *	---------------------------------------------------------------------------- 				public function die():void				{					if( _debug ) ConsoleBroadcaster.broadcast( "CatapultDisplayObject", "die();" );										if( _alive )					{						stopMoving();												_alive = false;												dispatchEvent( new GameLevelEvent(GameLevelEvent.REMOVE_FROM_GAME) );					}				}*/							/** handleenterFrameMoving			  *	---------------------------------------------------------------------------- */				override protected function handleEnterFrameMoving( event:Event ):void				{					_positionIn2D.x += _movementX;					_positionIn2D.y += _movementY;										//TODO:					//	The catapult ammo movement going up and down aren't smooth at all. Revise it more !!!					if( _goingUp )					{						_altitude -= _movementAltitude;												if( _movementAltitude > 0 ) 						{							_movementAltitude -= .2;						}					}					else if( !_goingUp )					{						_altitude += _movementAltitude;												if( _movementAltitude < _maxAltitudeSpeed )						{							_movementAltitude += .2;						}					}										//trace( "_altitude: "+_altitude );					//trace( "_positionIn2D.x: "+_positionIn2D.x );										render();										if( _goingUp )					{						if( (_movementX > 0 && _positionIn2D.x > _halfPoint.x) || (_movementY > 0 && _positionIn2D.y > _halfPoint.y)  )							_goingUp = false;						else if( (_movementX < 0 && _positionIn2D.x < _halfPoint.x) || (_movementY < 0 && _positionIn2D.y < _halfPoint.y) )							_goingUp = false;					}										//trace( "x: "+_contentClip.x );					//trace( "y: "+_contentClip.y );					//trace( "visible: "+_contentClip.visible );										//NOTE:					//	I'm not sure if this is fine, not dispatching the onMoving when going up.					//	Right now, onMoving is only used by ProjectileDisplayObjectController to check if it hits anything.					if( !_goingUp )						//dispatchEvent( new GameLevelEvent(GameLevelEvent.MOVING) );						onMoved.dispatch( this );										if( altitude > 0 )					{						//trace( "ammo hits the ground" );												//dispatchEvent( new GameLevelEvent(GameLevelEvent.CATAPULT_AMMO_HIT) );						onAmmoHit.dispatch( this );						die();											}									}						}			}