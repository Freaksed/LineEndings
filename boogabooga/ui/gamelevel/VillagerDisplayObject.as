/** VillagerDisplayObject  *	---------------------------------------------------------------------------- *  *	@desc:  *		This is the display object clip that will represent Gate in the village  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.gamelevel	{		import flash.display.Bitmap;		import flash.display.BitmapData;		import flash.display.BlendMode;		import flash.display.DisplayObject;		import flash.display.DisplayObjectContainer;		import flash.display.MovieClip;		import flash.display.Sprite;		import flash.events.Event;		import flash.events.MouseEvent;		import flash.events.TimerEvent;		import flash.geom.ColorTransform;		import flash.geom.Matrix;		import flash.geom.Point;		import flash.geom.Rectangle;		import flash.utils.getDefinitionByName;				import com.greensock.TweenLite;		import com.avatarlabs.utils.UtilFunctions;		import com.avatarlabs.utils.VectorUtil;		import com.avatarlabs.utils.cache.BitmapDataManager;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.loader.CustomLoader;		import com.avatarlabs.utils.timers.CustomTimer;		import com.avatarlabs.utils.userinterface.UILabel;				import com.boogabooga.data.gamelevel.AbstractGameObject;		import com.boogabooga.data.gamelevel.GameLevelVillagerObject;		import com.boogabooga.data.gamelevel.Villager;		import com.boogabooga.data.gamelevel.Gate;		import com.boogabooga.events.BoogaEvent;		import com.boogabooga.events.GameLevelEvent;		import com.boogabooga.ui.gamelevel.AnimationDisplayObject;		import com.boogabooga.ui.gamelevel.GameLevelDisplayObject;				public class VillagerDisplayObject extends GameLevelDisplayObject		{			protected var _gameLevelVillagerObject:GameLevelVillagerObject;			protected var _villager:Villager;			//protected var _delayTime:Number;			protected var _animationTimer:CustomTimer;			protected var _currentTypeAnimation:int;			protected var _currentAnimationCount:int;						protected var _editable:Boolean;						protected var _animationClip:AnimationDisplayObject;						protected var _toStringOutput:String;						/**	Stage Instances **/			public var animation_mc:MovieClip;			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function VillagerDisplayObject()				{					//init();				}								override public function set contentClip( m:MovieClip ):void				{					super.contentClip = m;										animation_mc = _contentClip.animation_mc;										_animationClip = new AnimationDisplayObject();					_animationClip.contentClip = animation_mc;					_animationClip.init();					//_animationClip.addEventListener( BoogaEvent.ON_ANIMATION_ENDS, handleAnimationEnds );					_animationClip.onAnimationEnded.add( handleAnimationEnded );				}								public function set gameLevelVillagerObject( g:GameLevelVillagerObject ):void { _gameLevelVillagerObject = g; }				public function get gameLevelVillagerObject():GameLevelVillagerObject { return _gameLevelVillagerObject; }							/** set/get villager			  *	---------------------------------------------------------------------------- */				public function set villager( v:Villager ):void				{					_villager = v;										//_currentTypeAnimation = Villager.VILLAGER_REGULAR_ANIMATION;										_animationClip.contentClip.visible = true;					showAnimation( Villager.VILLAGER_REGULAR_ANIMATION, false );				}				public function get villager():Villager { return _villager; }								//public function set delayTime( n:Number ):void { _delayTime = n; }								public function set editable( b:Boolean ):void				{					_editable = b;										if( _editable )					{						_contentClip.buttonMode = true;						_contentClip.addEventListener( MouseEvent.MOUSE_DOWN, handleMouseDown, false, 0, true );					}					else					{						_contentClip.buttonMode = false;						_contentClip.removeEventListener( MouseEvent.MOUSE_DOWN, handleMouseDown );					}				}							/** handleMouseDown			  *	---------------------------------------------------------------------------- */				protected function handleMouseDown( event:MouseEvent ):void				{					ConsoleBroadcaster.broadcast( "EnvironmentDisplayObject", "handleMouseDown();" );										dispatchEvent( new CustomEvent("onClick") );				}							/** init			  *	---------------------------------------------------------------------------- */				override public function init():void				{					//trace( "VillagerDisplayObject: init();" );										super.init();										_animationClip.contentClip.visible = false;										_toStringOutput = "";				}							/** pause			  *	---------------------------------------------------------------------------- */				override public function pause():void				{					super.pause();										if( _animationTimer != null && _animationTimer.isRunning )					{						_animationTimer.pause();					}										//trace( "_animationClip.running: "+_animationClip.running );										if( _animationClip.running )						_animationClip.pause();				}							/** unpause			  *	---------------------------------------------------------------------------- */				override public function unpause():void				{					super.unpause();										if( _animationTimer != null && _animationTimer.isRunning )					{						_animationTimer.unpause();					}										if( _animationClip.running )						_animationClip.unpause();				}							/** kill			  *	---------------------------------------------------------------------------- */				override public function kill():void				{					if( _debug ) ConsoleBroadcaster.broadcast( toString(), "kill();" );										super.kill();										if( _animationTimer != null )					{						if( _animationTimer.isRunning )							_animationTimer.stop();												//_animationTimer.removeEventListener( TimerEvent.TIMER_COMPLETE, handleAnimationTimerCompleted );						_animationTimer.onTimerCompleted.remove( handleAnimationTimerCompleted );						_animationTimer.kill();						_animationTimer = null;					}										//_animationClip.removeEventListener( BoogaEvent.ON_ANIMATION_ENDS, handleAnimationEnds );					_animationClip.onAnimationEnded.remove( handleAnimationEnded );					_animationClip.stopAnimation();					_animationClip.kill();				}							/** updateOnEnterFrame			  *	---------------------------------------------------------------------------- *			  *	This updates the display object on every enter frame loop.			  *	---------------------------------------------------------------------------- */				override public function updateOnEnterFrame():void				{					if( _animationClip != null )					{						//trace( _animationClip.tileIndex );						//trace( _animationClip.running );						_animationClip.showNextAnimation();					}				}								public function startMoving():void				{					_animationClip.startAnimation(false);				}							/** showAnimation			  *	---------------------------------------------------------------------------- *			  *	Shows the animation of the gate based on the health.			  *	---------------------------------------------------------------------------- */				public function showAnimation( type:int, animate:Boolean=true ):void				{					ConsoleBroadcaster.broadcast( "VillagerDisplayObject", "showAnimation("+type+");" );					_currentTypeAnimation = type;										//if( _animationClip.running )						_animationClip.stopAnimation();										if( _animationTimer != null && _animationTimer.isRunning )						_animationTimer.stop();										switch( _currentTypeAnimation )					{						case Villager.VILLAGER_REGULAR_ANIMATION:							_animationClip.animationObject = _villager.regularAnimationObject;							_animationClip.sourceBD = BitmapDataManager.getInstance().getBitmapData( _villager.regularAnimationObject.cacheId ).bitmapData;							break;												case Villager.VILLAGER_HAPPY_ANIMATION:							_animationClip.animationObject = _villager.happyAnimationObject;							_animationClip.sourceBD = BitmapDataManager.getInstance().getBitmapData( _villager.happyAnimationObject.cacheId ).bitmapData;							break;												case Villager.VILLAGER_PRAY_ANIMATION:							_animationClip.animationObject = _villager.prayAnimationObject;							_animationClip.sourceBD = BitmapDataManager.getInstance().getBitmapData( _villager.prayAnimationObject.cacheId ).bitmapData;							break;												case Villager.VILLAGER_SCARED_ANIMATION:							_animationClip.animationObject = _villager.scaredAnimationObject;							_animationClip.sourceBD = BitmapDataManager.getInstance().getBitmapData( _villager.scaredAnimationObject.cacheId ).bitmapData;							break;												case Villager.VILLAGER_WORRIED_ANIMATION:							_animationClip.animationObject = _villager.worriedAnimationObject;							_animationClip.sourceBD = BitmapDataManager.getInstance().getBitmapData( _villager.worriedAnimationObject.cacheId ).bitmapData;							break;					}										_currentAnimationCount = 0;										_animationClip.initCanvas( false );					if( animate )						_animationClip.startAnimation(false);					else						_animationClip.showAnimation(0);				}								protected function handleAnimationEnded( animationDisplayObject:AnimationDisplayObject ):void				{					//trace( 'handleAnimationEnded();' );										if( _animationTimer == null )					{						_animationTimer = new CustomTimer(3000, 1);						//_animationTimer.addEventListener( TimerEvent.TIMER_COMPLETE, handleAnimationTimerCompleted, false, 0, true );						_animationTimer.onTimerCompleted.add( handleAnimationTimerCompleted );					}										switch( _currentTypeAnimation )					{						case Villager.VILLAGER_REGULAR_ANIMATION:							//_animationClip.stopAnimation();							_animationTimer.start();							break;												case Villager.VILLAGER_HAPPY_ANIMATION:						case Villager.VILLAGER_PRAY_ANIMATION:						case Villager.VILLAGER_SCARED_ANIMATION:						case Villager.VILLAGER_WORRIED_ANIMATION:							++_currentAnimationCount;							//trace( "_currentAnimationCount: "+_currentAnimationCount );							if( _currentAnimationCount > 5 )							{								//_currentAnimationCount = 0;								_animationClip.stopAnimation();																_animationClip.animationObject = _villager.regularAnimationObject;								_animationClip.sourceBD = BitmapDataManager.getInstance().getBitmapData( _villager.regularAnimationObject.cacheId ).bitmapData;								_animationClip.initCanvas();								_animationClip.showAnimation(0);																_animationTimer.start();							}							else							{								//trace( 'still looping the animation' );								//_animationClip.stopAnimation();								//_animationClip.showAnimation(0);								_animationClip.startAnimation(false, 0);							}							break;					}				}								protected function handleAnimationTimerCompleted( timer:CustomTimer ):void				{					//trace( "handleAnimationTimerCompleted();" );										_animationTimer.reset();										_animationClip.startAnimation(false);				}							/** toString			  *	---------------------------------------------------------------------------- */				override public function toString():String				{					if( _toStringOutput == "" )						_toStringOutput = "Villager_";										return _toStringOutput;				}		}			}