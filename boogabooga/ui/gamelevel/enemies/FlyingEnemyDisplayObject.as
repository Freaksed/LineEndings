/** FlyingEnemyDisplayObject  *	---------------------------------------------------------------------------- *  *	@desc:  *		This is the display object clip that will represent Enemy class.  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.gamelevel.enemies	{		import flash.display.Bitmap;		import flash.display.BitmapData;		import flash.display.BlendMode;		import flash.display.DisplayObject;		import flash.display.DisplayObjectContainer;		import flash.display.MovieClip;		import flash.events.Event;		import flash.events.IOErrorEvent;		import flash.events.ProgressEvent;		import flash.events.MouseEvent;		import flash.geom.ColorTransform;		import flash.geom.Matrix;		import flash.geom.Point;		import flash.geom.Rectangle;		import flash.events.TimerEvent;		import flash.utils.getDefinitionByName;				import com.greensock.TweenLite;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.loader.CustomLoader;		import com.avatarlabs.utils.timers.CustomTimer;		import com.avatarlabs.utils.UtilFunctions;		import com.avatarlabs.utils.cache.BitmapDataManager;				//import com.gamelevel.data.*;		import com.boogabooga.data.gamelevel.AbstractGameObject;		import com.boogabooga.data.gamelevel.Enemy;		import com.boogabooga.data.gamelevel.GameLevelDataIndex;		import com.boogabooga.events.BoogaEvent;		import com.boogabooga.ui.gamelevel.enemies.EnemyDisplayObject;		import com.boogabooga.utils.GameLevelUtil;				public class FlyingEnemyDisplayObject extends EnemyDisplayObject		{			protected var _fallDownTimer:CustomTimer;						/**	Stage Instances **/			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function FlyingEnemyDisplayObject()				{									}							/** kill			  *	---------------------------------------------------------------------------- */				override public function kill():void				{					//_contentClip.removeEventListener( Event.ENTER_FRAME, handleFlyingEnemyDeathEnterFrame );										if( _fallDownTimer )					{						if( _fallDownTimer.isRunning )						{							_fallDownTimer.stop();						}												//_fallDownTimer.removeEventListener( TimerEvent.TIMER, handleFallDownTimerFired );						_fallDownTimer.onTimerFired.remove( handleFallDownTimerFired );						_fallDownTimer.kill();						_fallDownTimer = null;					}										super.kill();				}							/** die			  *	---------------------------------------------------------------------------- */				override public function die():void				{					//_contentClip.addEventListener( Event.ENTER_FRAME, handleFlyingEnemyDeathEnterFrame, false, 0, true );										_fallDownTimer = new CustomTimer( 40 );					//_fallDownTimer.addEventListener( TimerEvent.TIMER, handleFallDownTimerFired, false, 0, true );					_fallDownTimer.onTimerFired.add( handleFallDownTimerFired );					_fallDownTimer.start();										super.die();				}							/** placedOnBoard			  *	---------------------------------------------------------------------------- *			  *	Called when EnemyDisplayObject gets added to the stage.			  *	Each weapon type is going to do different things ( either going to just stay			  *	static or actually going to start animating ).			  *	---------------------------------------------------------------------------- */				override public function placedOnBoard( customPosition:Boolean=false ):void				{					_altitude = -70;					super.placedOnBoard(customPosition);				}							/** handleFallDownTimerFired			  *	---------------------------------------------------------------------------- */				protected function handleFallDownTimerFired( timer:CustomTimer ):void				{					if( _altitude < 0 )					{						_altitude += 5;					}					else					{						_fallDownTimer.stop();					}										render();				}							/**	******************************************* *			  * AnimationDisplayObject Events			  *	******************************************* */			 				/** handleAttackAnimationEventFired			  *	---------------------------------------------------------------------------- */				override protected function handleAttackAnimationEventFired():void				{					//if( _debug ) ConsoleBroadcaster.broadcast( "FlyingEnemyDisplayObject", "handleAttackAnimationEventFired();" );										if( _alive && _attackedTarget != null )					{											}				}						}			}