/** EggEnemyDisplayObject  *	---------------------------------------------------------------------------- *  *	@desc:  *		This is the display object clip that will represent Enemy class.  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.gamelevel.enemies	{		import flash.display.Bitmap;		import flash.display.BitmapData;		import flash.display.BlendMode;		import flash.display.DisplayObject;		import flash.display.DisplayObjectContainer;		import flash.display.MovieClip;		import flash.events.Event;		import flash.events.IOErrorEvent;		import flash.events.ProgressEvent;		import flash.events.MouseEvent;		import flash.geom.ColorTransform;		import flash.geom.Matrix;		import flash.geom.Point;		import flash.geom.Rectangle;		import flash.events.TimerEvent;		import flash.utils.getDefinitionByName;				import com.greensock.TweenLite;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.loader.CustomLoader;		import com.avatarlabs.utils.timers.CustomTimer;		import com.avatarlabs.utils.UtilFunctions;		import com.avatarlabs.utils.cache.BitmapDataManager;		import org.osflash.signals.Signal;				//import com.gamelevel.data.*;		import com.boogabooga.data.gamelevel.AbstractGameObject;		import com.boogabooga.data.gamelevel.Enemy;		import com.boogabooga.data.gamelevel.GameLevelDataIndex;		import com.boogabooga.events.BoogaEvent;		import com.boogabooga.events.GameLevelEvent;		import com.boogabooga.ui.gamelevel.AnimationDisplayObject;		import com.boogabooga.ui.gamelevel.GameboardTile;		import com.boogabooga.ui.gamelevel.enemies.EnemyDisplayObject;		import com.boogabooga.utils.GameLevelUtil;				public class EggEnemyDisplayObject extends EnemyDisplayObject		{			protected var _hatchTimer:CustomTimer;						public var onHatched:Signal;						/**	Stage Instances **/			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function EggEnemyDisplayObject()				{									}								override public function init():void				{					super.init();										onHatched = new Signal( EggEnemyDisplayObject, Point, int, int, int, Vector.<GameboardTile> );				}							/** pause			  *	---------------------------------------------------------------------------- */				override public function pause():void				{					if( _hatchTimer != null && _hatchTimer.isRunning )					{						_hatchTimer.pause();					}										super.pause();				}							/** unpause			  *	---------------------------------------------------------------------------- */				override public function unpause():void				{					super.unpause();										if( _hatchTimer != null && _hatchTimer.isRunning )					{						_hatchTimer.unpause();					}									}							/** die			  *	---------------------------------------------------------------------------- */				override public function kill():void				{					stopHatchTimer();										onHatched = null;										super.kill();				}							/** die			  *	---------------------------------------------------------------------------- */				override public function die():void				{					stopHatchTimer();										_currentAnimationDisplayObject.stopAnimation();					//_currentAnimationDisplayObject.removeEventListener( BoogaEvent.ON_ANIMATION_ENDS, handleAnimationEnded );					//_currentAnimationDisplayObject.removeEventListener( BoogaEvent.ON_SOUND_EVENT, handleSoundEventFired );					_currentAnimationDisplayObject.onAnimationEnded.remove( handleAnimationEnded );					_currentAnimationDisplayObject.onSoundEventFired.remove( handleSoundEventFired );										super.die();				}							/** hitBySpringTrap			  *	---------------------------------------------------------------------------- *			  *	When enemies get hit by the spring trap, they will be flung up.			  *	---------------------------------------------------------------------------- */				override public function hitBySpringTrap():void				{					super.hitBySpringTrap();										stopHatchTimer();				}							/** placedOnBoard			  *	---------------------------------------------------------------------------- *			  *	Called when WeaponDisplayObject gets added to the stage.			  *	Each weapon type is going to do different things ( either going to just stay			  *	static or actually going to start animating ).			  *	---------------------------------------------------------------------------- */				override public function placedOnBoard( customPosition:Boolean=false ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "EggEnemyDisplayObject", "placedOnBoard();" );										//_positionIn2D.x = _path[_currentIndexInPath].positionIn2D.x;					//_positionIn2D.y = _path[_currentIndexInPath].positionIn2D.y;										//trace( "_positionIn2D: "+_positionIn2D );					//trace( "walkUpAnimation_mc: "+walkUpAnimation_mc );										_currentAnimationDisplayObject = _walkUpAnimationClip;					//_currentAnimationDisplayObject.addEventListener( BoogaEvent.ON_ANIMATION_ENDS, handleAnimationEnded, false, 0, true );					//_currentAnimationDisplayObject.addEventListener( BoogaEvent.ON_SOUND_EVENT, handleSoundEventFired, false, 0, true );					_currentAnimationDisplayObject.onAnimationEnded.add( handleAnimationEnded );					_currentAnimationDisplayObject.onSoundEventFired.add( handleSoundEventFired );					_currentAnimationDisplayObject.contentClip.visible = true;					_currentAnimationDisplayObject.initCanvas( false );					_currentAnimationDisplayObject.showAnimation( 0 );										_hatchTimer = new CustomTimer( _attackingGameObject.additionalAttackValue * 1000, 1 );					//_hatchTimer.addEventListener( TimerEvent.TIMER_COMPLETE, handleHatchTimerCompleted, false, 0, true );					_hatchTimer.onTimerCompleted.add( handleHatchTimerCompleted );										if( _slowedDown )						_hatchTimer.multiplier = 2;										_hatchTimer.start();										render();				}							/** slowDown			  *	---------------------------------------------------------------------------- */				override public function slowDown( duration:Number ):void				{					super.slowDown( duration );										if( _hatchTimer != null )						_hatchTimer.multiplier = 2;				}							/** handleSlowedDownTimerComplete			  *	---------------------------------------------------------------------------- */				override protected function handleSlowedDownTimerCompleted( timer:CustomTimer ):void				{					super.handleSlowedDownTimerCompleted( timer );										if( _hatchTimer != null )						_hatchTimer.multiplier = 1;				}							/** stopMoving			  *	---------------------------------------------------------------------------- */				override public function stopMoving():void				{					if( _hatchTimer != null && _hatchTimer.isRunning )					{						_hatchTimer.pause();					}										super.stopMoving();				}							/** continueMoving			  *	---------------------------------------------------------------------------- */				override public function continueMoving():void				{					if( _hatchTimer != null && _hatchTimer.isRunning )					{						_hatchTimer.unpause();					}										super.continueMoving();				}							/** stopHatchTimer			  *	---------------------------------------------------------------------------- */				protected function stopHatchTimer():void				{					if( _hatchTimer != null )					{						_hatchTimer.stop();						//_hatchTimer.removeEventListener( TimerEvent.TIMER_COMPLETE, handleHatchTimerCompleted );						_hatchTimer.onTimerCompleted.remove( handleHatchTimerCompleted );						_hatchTimer.kill();						_hatchTimer = null;					}				}							/** handleHatchTimerCompleted			  *	---------------------------------------------------------------------------- *			  *	This event is dispatched when the hatch timer for the egg completes.			  *	It plays the animation and then spawns the enemy when animation ends.			  *	---------------------------------------------------------------------------- */				protected function handleHatchTimerCompleted( timer:CustomTimer ):void				{					_alive = false;										stopHatchTimer();										//dispatchEvent( new CustomEvent( "onHatch", {currentTile:_currentTile, hatchlingId:_attackingGameObject.hatchlingId, pathIndex:_pathIndex}) );					//trace( _currentAnimationDisplayObject );										_currentAnimationDisplayObject.startAnimation( false, 0 );				}							/** handleAnimationEnded			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */			 	//protected function handleAnimationEnded( event:BoogaEvent ):void				protected function handleAnimationEnded( animationDisplayObject:AnimationDisplayObject ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "EggEnemyDisplayObject", "handleAnimationEnded();" );										//dispatchEvent( new GameLevelEvent(GameLevelEvent.HATCH, {positionIn2D:_positionIn2D, hatchlingId:_attackingGameObject.hatchlingId, pathIndex:_pathIndex, currentIndexInPath:_currentIndexInPath, path:_path}) );					onHatched.dispatch( this, _positionIn2D, _attackingGameObject.hatchlingId, _pathIndex, _currentIndexInPath, _path );										die();				}						}			}