/** EnemyDisplayObjectFactory  *	---------------------------------------------------------------------------- *  *	@desc:  *		Factory class for enemy display objects.  *		It will create specific class depending on the attack properties.  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.gamelevel.enemies	{		import flash.events.EventDispatcher;		import flash.utils.getDefinitionByName;				import com.avatarlabs.utils.cache.HashTable;		import com.boogabooga.data.gamelevel.Enemy;		import com.boogabooga.ui.gamelevel.GameLevelAttackingDisplayObject;		import com.boogabooga.ui.gamelevel.enemies.*;		import com.boogabooga.utils.GameLevelUtil;				public class EnemyDisplayObjectFactory extends EventDispatcher		{						/** Constructor			  *	---------------------------------------------------------------------------- */				public function EnemyDisplayObjectFactory()				{									}								public static function createEnemyDisplayObject( enemy:Enemy ):EnemyDisplayObject				{					var enemyDisplayObject:EnemyDisplayObject;										if( enemy.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_PROJECTILE_INDEX) )					{						enemyDisplayObject = new ProjectileEnemyDisplayObject();					}					else if( enemy.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_LASER_INDEX) )					{						enemyDisplayObject = new LaserEnemyDisplayObject();					}					else if( enemy.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_CATAPULT_INDEX) )					{						enemyDisplayObject = new CatapultEnemyDisplayObject();					}					else if( enemy.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_FLYER_INDEX) )					{						enemyDisplayObject = new FlyingEnemyDisplayObject();					}					else if( enemy.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_EGG_LAYER_INDEX) )					{						enemyDisplayObject = new EggLayerEnemyDisplayObject();					}					else if( enemy.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_EGG_INDEX) )					{						enemyDisplayObject = new EggEnemyDisplayObject();					}					else if( enemy.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_JUMPER_INDEX) || enemy.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_SUPER_JUMPER_INDEX) )					{						enemyDisplayObject = new JumpingEnemyDisplayObject();					}					else if( enemy.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_GHOST_INDEX) )					{						enemyDisplayObject = new GhostEnemyDisplayObject();					}					else					{						enemyDisplayObject = new EnemyDisplayObject();					}										enemyDisplayObject.contentClip = new (getDefinitionByName("EnemyDisplayObjectLibrary") as Class)();					enemyDisplayObject.init();					enemyDisplayObject.attackingGameObject = enemy;										return enemyDisplayObject;				}						}			}