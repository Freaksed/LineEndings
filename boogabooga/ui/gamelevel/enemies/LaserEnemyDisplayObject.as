/** LaserEnemyDisplayObject  *	---------------------------------------------------------------------------- *  *	@desc:  *		This is the display object clip that will represent Enemy class.  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.gamelevel.enemies	{		import flash.display.Bitmap;		import flash.display.BitmapData;		import flash.display.BlendMode;		import flash.display.DisplayObject;		import flash.display.DisplayObjectContainer;		import flash.display.MovieClip;		import flash.events.Event;		import flash.events.IOErrorEvent;		import flash.events.ProgressEvent;		import flash.events.MouseEvent;		import flash.geom.ColorTransform;		import flash.geom.Matrix;		import flash.geom.Point;		import flash.geom.Rectangle;		import flash.events.TimerEvent;		import flash.utils.getDefinitionByName;				import com.greensock.TweenLite;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.loader.CustomLoader;		import com.avatarlabs.utils.timers.CustomTimer;		import com.avatarlabs.utils.UtilFunctions;		import com.avatarlabs.utils.cache.BitmapDataManager;		import org.osflash.signals.Signal;				//import com.gamelevel.data.*;		import com.boogabooga.data.gamelevel.AbstractGameObject;		import com.boogabooga.data.gamelevel.Enemy;		import com.boogabooga.data.gamelevel.GameLevelDataIndex;		import com.boogabooga.events.BoogaEvent;		import com.boogabooga.events.GameLevelEvent;		import com.boogabooga.ui.gamelevel.enemies.EnemyDisplayObject;		import com.boogabooga.ui.gamelevel.projectiles.LaserDisplayObject;		import com.boogabooga.utils.GameLevelUtil;				public class LaserEnemyDisplayObject extends EnemyDisplayObject		{			protected var _laserTimer:CustomTimer;			protected var _laserHitTimer:CustomTimer;						protected var _laserDisplayObject:LaserDisplayObject;						public var onLaserFired:Signal;			public var onLaserHit:Signal;			public var onLaserStopped:Signal;						/**	Stage Instances **/			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function LaserEnemyDisplayObject()				{									}								public function set laserDisplayObject( l:LaserDisplayObject ):void { _laserDisplayObject = l; }				public function get laserDisplayObject():LaserDisplayObject { return _laserDisplayObject; }								override public function set reversed( b:Boolean ):void				{					super.reversed = b;										stopLaserTimer();				}							/** init			  *	---------------------------------------------------------------------------- */				override public function init():void				{					super.init();										onLaserFired = new Signal( LaserEnemyDisplayObject, Point, Number );					onLaserHit = new Signal( LaserEnemyDisplayObject );					onLaserStopped = new Signal( LaserEnemyDisplayObject, LaserDisplayObject );				}							/** pause			  *	---------------------------------------------------------------------------- */				override public function pause():void				{					//trace( "_moving: "+_moving );					//trace( "_attacking: "+_attacking );					//trace( "_laserTimer.isRunning: "+_laserTimer.isRunning );										if( _laserTimer != null && _laserTimer.isRunning )					{						//trace( "_laserTimer is paused" );						_laserTimer.pause();					}										if( _laserHitTimer != null && _laserHitTimer.isRunning )					{						_laserHitTimer.pause();					}										super.pause();				}							/** unpause			  *	---------------------------------------------------------------------------- */				override public function unpause():void				{					super.unpause();										if( _laserTimer != null && _laserTimer.isRunning )					{						_laserTimer.unpause();					}										if( _laserHitTimer != null && _laserHitTimer.isRunning )					{						_laserHitTimer.unpause();					}									}							/** die			  *	---------------------------------------------------------------------------- */				override public function die():void				{					stopLaserTimer();					//stopLaserHitTimer();										super.die();				}							/** kill			  *	---------------------------------------------------------------------------- */				override public function kill():void				{					stopLaserTimer();					//stopLaserHitTimer();										if( _laserTimer != null )					{						//_laserTimer.removeEventListener( TimerEvent.TIMER_COMPLETE, handleLaserTimerCompleted );						_laserTimer.onTimerCompleted.remove( handleLaserTimerCompleted );						_laserTimer.kill();						_laserTimer = null;					}										if( _laserHitTimer != null )					{						//_laserHitTimer.removeEventListener(TimerEvent.TIMER, handleLaserHitTimerFired );						_laserHitTimer.onTimerFired.remove( handleLaserHitTimerFired );						_laserHitTimer.kill();						_laserHitTimer = null;					}										_laserDisplayObject = null;										onLaserFired = null;					onLaserHit = null;					onLaserStopped = null;										super.kill();				}							/** startLaserTimer			  *	---------------------------------------------------------------------------- *			  *	Starts timer for the laser duration timer. Laser will stay up for as long as			  *	this timer is going.			  *	---------------------------------------------------------------------------- */				protected function startLaserTimer():void				{					if( _laserTimer == null )					{						//trace( "_attackingGameObject.additionalAttackValue: "+_attackingGameObject.additionalAttackValue );						_laserTimer = new CustomTimer( _attackingGameObject.additionalAttackValue*1000, 1 );						//_laserTimer.addEventListener( TimerEvent.TIMER_COMPLETE, handleLaserTimerCompleted );						_laserTimer.onTimerCompleted.add( handleLaserTimerCompleted );					}										_laserTimer.start();										startLaserHitTimer();				}							/** stopLaserTimer			  *	---------------------------------------------------------------------------- *			  *	Stops the laser duration timer abruptly. It needs to dispatch event to remove			  *	LaserDisplayObject that is currently active.			  *	---------------------------------------------------------------------------- */				protected function stopLaserTimer():void				{					stopLaserHitTimer();										if( _laserTimer != null && _laserTimer.isRunning )					{						_laserTimer.stop();												if( _laserDisplayObject != null )						{							//dispatchEvent( new GameLevelEvent(GameLevelEvent.LASER_STOP, {laserDisplayObject:_laserDisplayObject}) );							onLaserStopped.dispatch( this, _laserDisplayObject );							_laserDisplayObject = null;						}					}				}							/** handleLaserTimerCompleted			  *	---------------------------------------------------------------------------- *			  *	This event is dispatched when the laser duration timer finished. It dispatches			  *	an event so that the active LaserDisplayObject stops too.			  *	---------------------------------------------------------------------------- */				protected function handleLaserTimerCompleted( timer:CustomTimer ):void				{					//ConsoleBroadcaster.broadcast( "LaserEnemyDisplayObject", "handleLaserTimerCompleted();" );										//_laserDisplayObject.stopMoving();										stopLaserHitTimer();										_laserTimer.reset();					_currentAnimationDisplayObject.startAnimation( false, _currentAnimationDisplayObject.tileIndex );										//dispatchEvent( new GameLevelEvent(GameLevelEvent.LASER_STOP, {laserDisplayObject:_laserDisplayObject}) );					onLaserStopped.dispatch( this, _laserDisplayObject );										_laserDisplayObject = null;				}							/** startLaserHitTimer			  *	---------------------------------------------------------------------------- *			  *	Starts laser hit timer. This timer is used for the laser object to keep			  *	hitting all targets in range. Once target is hit, it can't get hit anymore.			  *	So this is really for any weapons that are added in the range when the laser			  *	is currently active.			  *	---------------------------------------------------------------------------- */				protected function startLaserHitTimer():void				{					if( _laserHitTimer == null )					{						_laserHitTimer = new CustomTimer( 33 );						//_laserHitTimer.addEventListener( TimerEvent.TIMER, handleLaserHitTimerFired, false, 0, true );						_laserHitTimer.onTimerFired.add( handleLaserHitTimerFired );					}										_laserHitTimer.start();				}							/** stopLaserHitTimer			  *	---------------------------------------------------------------------------- *			  *	Stops laser hit timer.			  *	---------------------------------------------------------------------------- */				protected function stopLaserHitTimer():void				{					if( _laserHitTimer != null && _laserHitTimer.isRunning )					{						_laserHitTimer.stop();					}				}							/** handleLaserHitTimerFired			  *	---------------------------------------------------------------------------- *			  *	Hits targets that aren't hit by htis laser yet.			  *	---------------------------------------------------------------------------- */				protected function handleLaserHitTimerFired( timer:CustomTimer ):void				{					//ConsoleBroadcaster.broadcast( "LaserEnemyDisplayObject", "handleLaserHitTimerFired();" );					//dispatchEvent( new GameLevelEvent(GameLevelEvent.LASER_HIT) );					onLaserHit.dispatch( this );				}							/**	******************************************* *			  * AnimationDisplayObject Events			  *	******************************************* */			 				/** handleAttackAnimationEventFired			  *	---------------------------------------------------------------------------- */				override protected function handleAttackAnimationEventFired():void				{					//if( _debug ) ConsoleBroadcaster.broadcast( "LaserEnemyDisplayObject", "handleAttackAnimationEventFired();" );										if( _alive && _attackedTarget != null )					{						//_attackedTarget.hit( _attackingGameObject, _attackingGameObject.power );						//_attackedTarget = null;												//dispatchEvent( new GameLevelEvent(GameLevelEvent.LASER_FIRE, {shootTo:_attackedTarget.positionIn2D, range:_attackingGameObject.range}) );						onLaserFired.dispatch( this, _attackedTarget.positionIn2D, _attackingGameObject.range );												//trace( "_currentAnimationDisplayObject: "+_currentAnimationDisplayObject );						_currentAnimationDisplayObject.stopAnimation();						startLaserTimer();												_attackedTarget = null;					}				}						}			}