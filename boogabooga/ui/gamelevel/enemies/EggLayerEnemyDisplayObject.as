/** EggLayerEnemyDisplayObject  *	---------------------------------------------------------------------------- *  *	@desc:  *		This is the display object clip that will represent Enemy class.  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.gamelevel.enemies	{		import flash.display.Bitmap;		import flash.display.BitmapData;		import flash.display.BlendMode;		import flash.display.DisplayObject;		import flash.display.DisplayObjectContainer;		import flash.display.MovieClip;		import flash.events.Event;		import flash.events.IOErrorEvent;		import flash.events.ProgressEvent;		import flash.events.MouseEvent;		import flash.geom.ColorTransform;		import flash.geom.Matrix;		import flash.geom.Point;		import flash.geom.Rectangle;		import flash.events.TimerEvent;		import flash.utils.getDefinitionByName;				import com.greensock.TweenLite;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.loader.CustomLoader;		import com.avatarlabs.utils.timers.CustomTimer;		import com.avatarlabs.utils.UtilFunctions;		import com.avatarlabs.utils.cache.BitmapDataManager;		import org.osflash.signals.Signal;				//import com.gamelevel.data.*;		import com.boogabooga.data.gamelevel.AbstractGameObject;		import com.boogabooga.data.gamelevel.Enemy;		import com.boogabooga.data.gamelevel.GameLevelDataIndex;		import com.boogabooga.events.BoogaEvent;		import com.boogabooga.events.GameLevelEvent;		import com.boogabooga.ui.gamelevel.GameboardTile;		import com.boogabooga.ui.gamelevel.enemies.EnemyDisplayObject;		import com.boogabooga.utils.GameLevelUtil;				public class EggLayerEnemyDisplayObject extends EnemyDisplayObject		{			protected var _hasLaidEgg:Boolean;			protected var _eggLayerTimer:CustomTimer;						public var onLaidEgg:Signal;						/**	Stage Instances **/			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function EggLayerEnemyDisplayObject()				{									}								override public function set reversed( b:Boolean ):void				{					super.reversed = b;										if( _reversed )					{						_eggLayerTimer.stop();					}					else if( !_reversed && !_inSpawnPath )					{						_eggLayerTimer.start();					}				}								override public function set pushedBack( b:Boolean ):void				{					super.pushedBack = b;										if( _pushedBack )					{						_eggLayerTimer.stop();					}				}							/** init			  *	---------------------------------------------------------------------------- */				override public function init():void				{					super.init();										_hasLaidEgg = false;										onLaidEgg = new Signal( EggLayerEnemyDisplayObject, Point, int, int, int, Vector.<GameboardTile> );				}							/** pause			  *	---------------------------------------------------------------------------- */				override public function pause():void				{					if( !_inSpawnPath && _eggLayerTimer && _eggLayerTimer.isRunning )					{						_eggLayerTimer.pause();					}										super.pause();				}							/** unpause			  *	---------------------------------------------------------------------------- */				override public function unpause():void				{					super.unpause();										if( !_inSpawnPath && _eggLayerTimer && _eggLayerTimer.isRunning && _moving )					{						trace( "unpause the egg layer timer" );						_eggLayerTimer.unpause();					}				}							/** kill			  *	---------------------------------------------------------------------------- */				override public function kill():void				{					if( _eggLayerTimer != null )					{						_eggLayerTimer.stop();						//_eggLayerTimer.removeEventListener( TimerEvent.TIMER_COMPLETE, handleEggLayerTimerCompleted );						_eggLayerTimer.onTimerCompleted.remove( handleEggLayerTimerCompleted );						_eggLayerTimer.kill();						_eggLayerTimer = null;					}										onLaidEgg = null;										super.kill();				}							/** moveToNextTile			  *	---------------------------------------------------------------------------- *			  *	This function is part of the enemy animation. It makes the enemy moves to			  *	next tile on its path.			  *	---------------------------------------------------------------------------- */				override protected function moveToNextTile():void				{					super.moveToNextTile();										//trace( "_oldDirection == _direction ? " +(_oldDirection == _direction) );										//_hasLaidEgg = false;				}							/** moveToNextPoint			  *	---------------------------------------------------------------------------- *			  *	Moves the display object to the next target point			  *	---------------------------------------------------------------------------- */				override protected function moveToNextPoint():void				{					super.moveToNextPoint();										//trace( "_passedHalfwayPoint: "+_passedHalfwayPoint );					/*					if( _currentIndexInPath > 0 && _passedHalfwayPoint && !_hasLaidEgg )					{						//trace( "lay en egg !!!!!" );												_hasLaidEgg = true;												dispatchEvent( new GameLevelEvent(GameLevelEvent.LAY_EGG, {currentTile:_currentTile, hatchlingId:_attackingGameObject.hatchlingId, pathIndex:_pathIndex, currentIndexInPath:_currentIndexInPath, path:_path}) );					}					*/				}							/** slowDown			  *	---------------------------------------------------------------------------- */				override public function slowDown( duration:Number ):void				{					super.slowDown( duration );										_eggLayerTimer.multiplier = 2;				}							/** handleSlowedDownTimerComplete			  *	---------------------------------------------------------------------------- */				override protected function handleSlowedDownTimerCompleted( timer:CustomTimer ):void				{					super.handleSlowedDownTimerCompleted( timer );										_eggLayerTimer.multiplier = 1;				}							/** startMoving			  *	---------------------------------------------------------------------------- *			  *	Starts the animation of the enemy moving across the level			  *	---------------------------------------------------------------------------- */				override public function startMoving():void				{					super.startMoving();										if( _eggLayerTimer == null )					{						_eggLayerTimer = new CustomTimer( _attackingGameObject.additionalAttackValue*2000, 1 );						//_eggLayerTimer.addEventListener( TimerEvent.TIMER_COMPLETE, handleEggLayerTimerCompleted, false, 0, true );						_eggLayerTimer.onTimerCompleted.add( handleEggLayerTimerCompleted );					}										if( !_inSpawnPath )					{						_eggLayerTimer.start();					}				}							/** continueMoving			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				override public function continueMoving():void				{					super.continueMoving();										if( _moving && !_inSpawnPath )					{						if( _eggLayerTimer != null )							_eggLayerTimer.unpause();					}				}							/** stopMoving			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				override public function stopMoving():void				{					//if( _debug ) ConsoleBroadcaster.broadcast( toString(), "stopMoving();" );										if( _moving && !_inSpawnPath )					{						if( _eggLayerTimer != null )						{							_eggLayerTimer.pause();						}					}										super.stopMoving();				}								protected function handleEggLayerTimerCompleted( timer:CustomTimer ):void				{					//trace( "handleEggLayerTimerCompleted();" );										//dispatchEvent( new GameLevelEvent(GameLevelEvent.LAY_EGG, {positionIn2D:_positionIn2D, hatchlingId:_attackingGameObject.hatchlingId, pathIndex:_pathIndex, currentIndexInPath:_currentIndexInPath, path:_path}) );					onLaidEgg.dispatch( this, _positionIn2D, _attackingGameObject.hatchlingId, _pathIndex, _currentIndexInPath, _path );										_eggLayerTimer.reset();					_eggLayerTimer.start();				}											/**	******************************************* *			  * AnimationDisplayObject Events			  *	******************************************* */			 				/** handleAttackAnimationEvent			  *	---------------------------------------------------------------------------- 				override protected function handleAttackAnimationEvent( event:BoogaEvent ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "EggLayerEnemyDisplayObject", "handleAttackAnimationEvent();" );										if( _alive && _attackedTarget != null )					{						_attackedTarget.hit( _attackingGameObject, _attackingGameObject.power );						_attackedTarget = null;											}				}*/						}			}