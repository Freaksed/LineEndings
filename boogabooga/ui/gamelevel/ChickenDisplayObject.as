/** ChickenDisplayObject  *	---------------------------------------------------------------------------- *  *	@desc:  *		This is the display object clip that will represent Enemy class.  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.gamelevel	{		import flash.display.Bitmap;		import flash.display.BitmapData;		import flash.display.BlendMode;		import flash.display.DisplayObject;		import flash.display.DisplayObjectContainer;		import flash.display.MovieClip;		import flash.display.Sprite;		import flash.events.Event;		import flash.events.MouseEvent;		import flash.geom.ColorTransform;		import flash.geom.Matrix;		import flash.geom.Point;		import flash.geom.Rectangle;		import flash.events.TimerEvent;		import flash.utils.getDefinitionByName;				import com.avatarlabs.utils.UtilFunctions;		import com.avatarlabs.utils.cache.BitmapDataManager;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.loader.CustomLoader;		import com.avatarlabs.utils.sound.SoundEffectPlayer;		import com.avatarlabs.utils.timers.CustomTimer;		import com.greensock.TweenLite;		import com.greensock.TimelineLite;		import com.greensock.easing.Circ;		import com.greensock.easing.Linear;		import com.greensock.easing.Sine;		import org.osflash.signals.Signal;				//import com.gamelevel.data.*;		import com.boogabooga.data.SoundsIndex;		import com.boogabooga.data.gamelevel.Chicken;		import com.boogabooga.data.gamelevel.GameLevelDataIndex;		import com.boogabooga.events.BoogaEvent;		import com.boogabooga.events.GameLevelEvent;		import com.boogabooga.ui.gamelevel.AnimationDisplayObject;		import com.boogabooga.ui.gamelevel.GameLevelDisplayObject;		import com.boogabooga.utils.GameLevelUtil;				public class ChickenDisplayObject extends GameLevelDisplayObject		{			protected var _chicken:Chicken;			protected var _alive:Boolean;			protected var _durationTimer:CustomTimer;			protected var _movingDurationTimer:CustomTimer;			protected var _movingTimer:CustomTimer;			//protected var _movementInterval:Number;			//protected var _shineTimer:CustomTimer;			protected var _diePosition:Point;			protected var _spawningAnimation:Boolean;			protected var _dyingAnimation:Boolean;			protected var _chickenObtainedAnimation:Boolean;						protected var _slotMachineFlyToPosition:Point;			protected var _slotMachineSpawnAnimation:Boolean;						protected var _movementAreaIndex:int;			protected var _movementArea:ChickenMovementArea;			protected var _movementX:Number;			protected var _movementY:Number;			protected var _moving:Boolean;						protected var _animationClip:AnimationDisplayObject;			protected var _peckAnimationClip:AnimationDisplayObject;			//protected var _shineAnimationClip:AnimationDisplayObject;						public var onRemovedFromGame:Signal;			public var onCollected:Signal;			public var onObtainedAnimationCompleted:Signal;			public var onSlotMachineSpawnAnimationCompleted:Signal;						/**	Stage Instances **/			public var animation_mc:MovieClip;			//public var eyeAnimation_mc:MovieClip;			public var peckAnimation_mc:MovieClip;			//public var shineAnimation_mc:MovieClip;			public var hitarea_mc:MovieClip;			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function ChickenDisplayObject()				{					//init();				}								override public function set contentClip( m:MovieClip ):void				{					super.contentClip = m;										animation_mc = _contentClip.animation_mc;					peckAnimation_mc = _contentClip.peckAnimation_mc;					//shineAnimation_mc = _contentClip.shineAnimation_mc;					hitarea_mc = _contentClip.hitarea_mc;										_animationClip = new AnimationDisplayObject();					_animationClip.contentClip = animation_mc;					_animationClip.init();										_peckAnimationClip = new AnimationDisplayObject();					_peckAnimationClip.contentClip = peckAnimation_mc;					_peckAnimationClip.init();					/*					_shineAnimationClip = new AnimationDisplayObject();					_shineAnimationClip.contentClip = shineAnimation-mc;					_shineAnimationClip.init();					*/				}							/** set/get chicken			  *	---------------------------------------------------------------------------- */				public function set chicken( c:Chicken ):void { _chicken = c; }				public function get chicken():Chicken { return _chicken; }								public function set movementAreaIndex( i:int ):void { _movementAreaIndex = i; }				public function set movementArea( c:ChickenMovementArea ):void { _movementArea = c; }								public function set diePosition( p:Point ):void { _diePosition = p; }				public function get diePosition():Point { return _diePosition; }								public function set slotMachineSpawnAnimation( b:Boolean ):void { _slotMachineSpawnAnimation = b; }											/** init			  *	---------------------------------------------------------------------------- */				override public function init():void				{					//trace( "ChickenDisplayObject: init();" );										super.init();										_contentClip.mouseChildren = false;					_contentClip.buttonMode = true;										_debug = true;										_spawningAnimation = true;					_dyingAnimation = false;					_chickenObtainedAnimation = false;					_alive = false;					_moving = false;										_animationClip.animationObject = GameLevelDataIndex.getInstance().getAnimationObjectByCacheId( "ChickenBounce" );					_animationClip.sourceBD = BitmapDataManager.getInstance().getBitmapData( _animationClip.animationObject.cacheId ).bitmapData;					_animationClip.initCanvas();					_animationClip.showAnimation(0);					_animationClip.contentClip.visible = true;					_animationClip.contentClip.mouseChildren = false;					_animationClip.contentClip.mouseEnabled = false;										/*					eyeAnimation_mc.visible = false;					eyeAnimation_mc.animationObject = GameLevelDataIndex.getInstance().getAnimationObjectByCacheId( "ChickenEye" );					//eyeAnimation_mc.sourceBD = BitmapDataManager.getInstance().getBitmapData( eyeAnimation_mc.animationObject.cacheId ).bitmapData;					eyeAnimation_mc.initCanvas();					eyeAnimation_mc.showAnimation(0);					eyeAnimation_mc.visible = true;					*/										_peckAnimationClip.animationObject = GameLevelDataIndex.getInstance().getAnimationObjectByCacheId( "ChickenPeck" );					_peckAnimationClip.sourceBD = BitmapDataManager.getInstance().getBitmapData( _peckAnimationClip.animationObject.cacheId ).bitmapData;					_peckAnimationClip.initCanvas();					_peckAnimationClip.contentClip.visible = false;					_peckAnimationClip.contentClip.mouseChildren = false;					_peckAnimationClip.contentClip.mouseEnabled = false;					/*					shineAnimation_mc.visible = false;					shineAnimation_mc.animationObject = GameLevelDataIndex.getInstance().getAnimationObjectByCacheId( "ChickenShine" );					shineAnimation_mc.sourceBD = BitmapDataManager.getInstance().getBitmapData( shineAnimation_mc.animationObject.cacheId ).bitmapData;					shineAnimation_mc.initCanvas();					shineAnimation_mc.mouseChildren = false;					shineAnimation_mc.mouseEnabled = false;					shineAnimation_mc.addEventListener( "onAnimationEnds", handleShineAnimationEnds );					*/					hitarea_mc.alpha = 0;										_slotMachineSpawnAnimation = false;										//_contentClip.addEventListener( MouseEvent.CLICK, handleClicked, false, 0, true );					_contentClip.addEventListener( MouseEvent.ROLL_OVER, handleRolledOver, false, 0, true );										onRemovedFromGame = new Signal();					onCollected = new Signal();					onObtainedAnimationCompleted = new Signal();					onSlotMachineSpawnAnimationCompleted = new Signal( ChickenDisplayObject );				}							/** pause			  *	---------------------------------------------------------------------------- */				override public function pause():void				{					if( _debug ) ConsoleBroadcaster.broadcast( "ChickenDisplayObject", "pause();" );										if( _durationTimer != null && _durationTimer.isRunning )						_durationTimer.pause();										if( _movingDurationTimer != null && _movingDurationTimer.isRunning )						_movingDurationTimer.pause();										if( _moving )					{						_movingTimer.pause();					}										//if( _shineTimer != null && _shineTimer.isRunning )					//	_shineTimer.pause();										_animationClip.pause();					_peckAnimationClip.pause();					//shineAnimation_mc.pause();										//if( !_spawningAnimation )						//TweenLite.killTweensOf( _contentClip, false );										}							/** unpause			  *	---------------------------------------------------------------------------- */				override public function unpause():void				{					if( _debug ) ConsoleBroadcaster.broadcast( "ChickenDisplayObject", "unpause();" );										if( _durationTimer != null && _durationTimer.isRunning )						_durationTimer.unpause();					else if( _durationTimer != null )						_durationTimer.start();					//trace( "_chickenObtainedAnimation: "+_chickenObtainedAnimation );										if( _moving )					{						_movingTimer.unpause();					}										if( _movingDurationTimer != null && _movingDurationTimer.isRunning )						_movingDurationTimer.unpause();					//else if( _spawningAnimation )						//TweenLite.to( _contentClip, .5, {scaleX:1, scaleY:1, onComplete:handleSpawnAnimationComplete} );					else if( _dyingAnimation )						TweenLite.to( _contentClip, .3, {scaleX:.1, scaleY:.1, onComplete:handleDieAnimationComplete} );					else if( _chickenObtainedAnimation )					{						playChickenObtainedAnimation();					}					else					{						startMoving();						_animationClip.unpause();						_peckAnimationClip.unpause();					}										//if( _shineTimer != null && _shineTimer.isRunning )					//	_shineTimer.unpause();										//shineAnimation_mc.unpause();									}							/** reset			  *	---------------------------------------------------------------------------- *			  *	Resets the chicken so we can reuse it.			  *	---------------------------------------------------------------------------- */				public function reset():void				{					_needToBeUpdatedOnEnterFrame = false;										if( _movingTimer != null )					{						_movingTimer.stop();					}										_contentClip.removeEventListener( MouseEvent.ROLL_OVER, handleRolledOver );										if( _durationTimer != null )					{						if( _durationTimer.isRunning )							_durationTimer.stop();					}										if( _movingDurationTimer != null )					{						if( _movingDurationTimer.isRunning )							_movingDurationTimer.stop();					}										TweenLite.killTweensOf( _contentClip );				}								public function reuse():void				{					_needToBeUpdatedOnEnterFrame = true;					_spawningAnimation = true;					_dyingAnimation = false;					_chickenObtainedAnimation = false;					_alive = false;					_moving = false;										_contentClip.addEventListener( MouseEvent.ROLL_OVER, handleRolledOver, false, 0, true );				}							/** updateChickenOnEnterFrame			  *	---------------------------------------------------------------------------- *			  *	This updates the display object on every enter frame loop.			  *	---------------------------------------------------------------------------- */				public function updateChickenOnEnterFrame( spawnOnly:Boolean=false ):void				{					if( _needToBeUpdatedOnEnterFrame )					{						//trace( "updatechickenOnEnterFrame("+spawnOnly+");" );												if( _slotMachineSpawnAnimation )						{													}						else if( _spawningAnimation )						{							//trace( "_spawningAnimation" );							if( _contentClip.scaleX < 1 )							{								_contentClip.scaleX += .1;								_contentClip.scaleY += .1;							}							else 							{								_spawningAnimation = false;								startMoving( spawnOnly );							}						}												if( !spawnOnly )						{							if( _moving )							{								_positionIn2D.x += _movementX;								_positionIn2D.y += _movementY;																//trace( "before render _contentClip.x: "+_contentClip.x );								render();								//trace( "after render _contentClip.x: "+_contentClip.x );							}														if( _animationClip != null )								_animationClip.showNextAnimation();														if( _peckAnimationClip != null )								_peckAnimationClip.showNextAnimation();						}					}				}							/** die			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function die():void				{					if( _alive )					{						_alive = false;						//_contentClip.removeEventListener( MouseEvent.CLICK, handleClicked );						_contentClip.removeEventListener( MouseEvent.ROLL_OVER, handleRolledOver );												_moving = false;						stopMoving();					}										_dyingAnimation = true;					TweenLite.to( _contentClip, .3, {scaleX:.1, scaleY:.1, onComplete:handleDieAnimationComplete} );					//dispatchEvent( new CustomEvent("onRemoveFromGame") );				}							/** stopMoving			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function stopMoving():void				{					_moving = false;										if( _movingTimer != null )					{						_movingTimer.stop();						//_movingTimer.removeEventListener( TimerEvent.TIMER_COMPLETE, handleMovingTimerCompleted );						_movingTimer.onTimerCompleted.remove( handleMovingTimerCompleted );						_movingTimer.kill();						_movingTimer = null;					}				}							/** handleDieAnimationComplete			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function handleDieAnimationComplete():void				{					_dyingAnimation = false;										//var globalPosition:Point = _contentClip.parent.localToGlobal( new Point(_diePosition.x, _diePosition.y) );					//EventNotificationCenter.getInstance().sendNotificationWithParameters( "onPlayParticle", this, {particleId:"chicken_collect", globalPosition:globalPosition} );										//dispatchEvent( new CustomEvent("onRemoveFromGame") );					//dispatchEvent( new GameLevelEvent(GameLevelEvent.REMOVE_FROM_GAME) );										onRemovedFromGame.dispatch(this);				}							/** kill			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				override public function kill():void				{					ConsoleBroadcaster.broadcast( "ChickenDisplayObject", "kill();" );										_needToBeUpdatedOnEnterFrame = false;										if( _alive )					{						_alive = false;						//_contentClip.removeEventListener( MouseEvent.CLICK,handleClicked );						_contentClip.removeEventListener( MouseEvent.ROLL_OVER, handleRolledOver );												stopMoving();					}										if( _durationTimer != null )					{						if( _durationTimer.isRunning )							_durationTimer.stop();												//_durationTimer.removeEventListener( TimerEvent.TIMER_COMPLETE, handleDurationTimerCompleted );						_durationTimer.onTimerCompleted.remove( handleDurationTimerCompleted );						_durationTimer.kill();						_durationTimer = null;					}										if( _movingDurationTimer != null )					{						if( _movingDurationTimer.isRunning )							_movingDurationTimer.stop();												//_movingDurationTimer.removeEventListener( TimerEvent.TIMER, handleMovingDurationTimerFired );						_movingDurationTimer.onTimerFired.remove( handleMovingDurationTimerFired );						_movingDurationTimer.kill();						_movingDurationTimer = null;					}					/*					if( _shineTimer != null )					{						if( _shineTimer.isRunning )							_shineTimer.stop();												_shineTimer.removeEventListener( TimerEvent.TIMER, handleShineTimerFired );						_shineTimer = null;					}					*/					_animationClip.pause();					_animationClip.kill();										_peckAnimationClip.pause();					_peckAnimationClip.kill();					/*					shineAnimation_mc.removeEventListener( "onAnimationEnds", handleShineAnimationEnds );					shineAnimation_mc.pause();					shineAnimation_mc.kill();					*/					TweenLite.killTweensOf( _contentClip );										onRemovedFromGame = null;					onCollected = null;					onObtainedAnimationCompleted = null;										super.kill();				}							/** pickRandomStartingPosition			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				public function pickRandomStartingPosition():void				{					if( _movementArea == null )						return;										var halfMovementAreaWidth:Number = _movementArea.movementAreaIn2D.width * .5;					var halfMovementAreaHeight:Number = _movementArea.movementAreaIn2D.height * .5;										_positionIn2D.x = (( _movementArea.movementAreaIn2D.left + halfMovementAreaWidth + Math.random()*halfMovementAreaWidth - Math.random()*halfMovementAreaWidth ) + .5) >> 0;					_positionIn2D.y = (( _movementArea.movementAreaIn2D.top + halfMovementAreaHeight + Math.random()*halfMovementAreaHeight - Math.random()*halfMovementAreaHeight ) + .5) >> 0;										render();										_spawningAnimation = true;					//TweenLite.to( _contentClip, .5, {scaleX:1, scaleY:1, onComplete:handleSpawnAnimationComplete} );				}							/** handleSpawnAnimationComplete			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				function handleSpawnAnimationComplete():void				{					_spawningAnimation = false;										//_contentClip.addEventListener( MouseEvent.ROLL_OVER, handleRolledOver, false, 0, true );				}								public function startSlotMachineSpawnAnimation():void				{					//_slotMachineFlyToPosition = point;					_slotMachineSpawnAnimation = true;										var randomIndex:int = int(Math.random()*5);						randomIndex = int(Math.random()*2) == 0 ? -randomIndex : randomIndex;						//randomIndex = -randomIndex;					var endOffset:int = randomIndex*10;										//_positionIn2D = GameLevelUtil.getPositionIn2D( new Point(_contentClip.x+90+endOffset, _contentClip.y-170) );										var timelineLite:TimelineLite = new TimelineLite();										if( randomIndex > 0 )					{						timelineLite.append( new TweenLite( _contentClip, .3, {x:_contentClip.x+20+endOffset, y:_contentClip.y-240+endOffset, scaleX:1, scaleY:1, ease:Circ.easeOut} ) );						timelineLite.append( new TweenLite( _contentClip, .2, {x:_contentClip.x+40+endOffset, y:_contentClip.y-200+endOffset, ease:Sine.easeInOut} ) );						timelineLite.append( new TweenLite( _contentClip, .2, {x:_contentClip.x+50+endOffset, y:_contentClip.y-220+endOffset} ) );						timelineLite.append( new TweenLite( _contentClip, .1, {x:_contentClip.x+60+endOffset, y:_contentClip.y-210+endOffset, onComplete:handleChickenSlotMachineSpawnAnimationComplete} ) );					}					else					{						timelineLite.append( new TweenLite( _contentClip, .3, {x:_contentClip.x-20+endOffset, y:_contentClip.y-160-endOffset, scaleX:1, scaleY:1, ease:Circ.easeOut} ) );						timelineLite.append( new TweenLite( _contentClip, .2, {x:_contentClip.x-40+endOffset, y:_contentClip.y-120-endOffset, ease:Sine.easeInOut} ) );						timelineLite.append( new TweenLite( _contentClip, .2, {x:_contentClip.x-50+endOffset, y:_contentClip.y-140-endOffset} ) );						timelineLite.append( new TweenLite( _contentClip, .1, {x:_contentClip.x-60+endOffset, y:_contentClip.y-130-endOffset, onComplete:handleChickenSlotMachineSpawnAnimationComplete} ) );												_animationClip.flipAnimation( true );						_peckAnimationClip.flipAnimation( true );					}									}								private function handleChickenSlotMachineSpawnAnimationComplete():void				{					_slotMachineSpawnAnimation = false;					//trace( UtilFunctions.localToLocal(_contentClip.parent, _movementArea.contentClip.parent) );					//trace( UtilFunctions.localToLocal(_contentClip, _movementArea.contentClip.parent) );					//trace( UtilFunctions.localToLocal(_contentClip, _movementArea.contentClip) );					_positionIn2D = GameLevelUtil.getPositionIn2D( UtilFunctions.localToLocal(_contentClip, _movementArea.contentClip) );					_movementArea.contentClip.addChild( _contentClip );										render();										onSlotMachineSpawnAnimationCompleted.dispatch( this );										//startMoving();										//var point:Point = GameLevelUtil.getPositionIn2D( new Point(_contentClip.x, _contentClip.y) );					//_positionIn2D = point;										startMoving();				}							/** startMoving			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				public function startMoving( spawnOnly:Boolean=false ):void				{					if( _durationTimer == null )					{						_durationTimer = new CustomTimer( _chicken.duration, 1 );						//_durationTimer.addEventListener( TimerEvent.TIMER_COMPLETE, handleDurationTimerCompleted, false, 0, true );						_durationTimer.onTimerCompleted.add( handleDurationTimerCompleted );					}										if( _movingDurationTimer == null )					{						_movingDurationTimer = new CustomTimer(1600);						//_movingDurationTimer.addEventListener( TimerEvent.TIMER, handleMovingDurationTimerFired, false, 0, true );						_movingDurationTimer.onTimerFired.add( handleMovingDurationTimerFired );					}					/*					if( _shineTimer == null )					{						_shineTimer = new CustomTimer(3000);						_shineTimer.addEventListener( TimerEvent.TIMER, handleShineTimerFired, false, 0, true );					}					*/					render();										//trace( "_positionIn2D: "+_positionIn2D );					//trace( "this.x: "+this.y+", this.y: "+this.y );										_alive = true;										_durationTimer.start();					_movingDurationTimer.start();										if( spawnOnly )					{						_durationTimer.pause();						_movingDurationTimer.pause();					}										//_shineTimer.start();				}							/** handleDurationTimerCompleted			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function handleDurationTimerCompleted( timer:CustomTimer ):void				{					_durationTimer.reset();										die();										//TODO:					//	Animation when the chicken is out										//dispatchEvent( new CustomEvent("onDurationEnd") );				}							/** handleMovingDurationTimerFired			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function handleMovingDurationTimerFired( timer:CustomTimer ):void				{					//trace( "handleMovingDurationTimerFired();" );										//TODO:					//	Need to refine the movement of the chicken										_peckAnimationClip.stopAnimation();					_peckAnimationClip.contentClip.visible = false;										//TODO:					//	Change this from tweening to enter frame or something so we can pause the movement.										//var movementX:Number = int(Math.random()*30 - Math.random()*30);					//var movementY:Number = int(Math.random()*30 - Math.random()*30);					//TweenLite.to( _contentClip, 1, {x:String(movementX), y:String(movementY), onComplete:handleMovementTweenComplete} );										_moving = true;					_movementX = (Math.random()*2 - Math.random()*2);					_movementY = (Math.random()*2 - Math.random()*2);										if( _positionIn2D.x + _movementX < _movementArea.movementAreaIn2D.left || _positionIn2D.x + _movementX > _movementArea.movementAreaIn2D.right )						_movementX = -_movementX;										if( _positionIn2D.y + _movementY < _movementArea.movementAreaIn2D.top || _positionIn2D.y + _movementY > _movementArea.movementAreaIn2D.bottom )						_movementY = -_movementY;										//trace( "_movementX: "+_movementX );					//trace( "_movementY: "+_movementY );										if( _movingTimer == null )					{						_movingTimer = new CustomTimer(1000, 1);						//_movingTimer.addEventListener( TimerEvent.TIMER_COMPLETE, handleMovingTimerCompleted, false, 0, true );						_movingTimer.onTimerCompleted.add( handleMovingTimerCompleted );					}					_movingTimer.start();										_positionIn2D.x += _movementX;					_positionIn2D.y += _movementY;										_animationClip.startAnimation( true, 0 );					_animationClip.contentClip.visible = true;					//eyeAnimation_mc.startAnimation( false, 0 );					//eyeAnimation_mc.contentClip.visible = true;										//var oldX:Number = _contentClip.x;					//var oldY:Number = _contentClip.y;										var movingRight:Boolean = false;										if( _movementX > 0 )					{						if( _movementY > 0 )						{							movingRight = true;						}						else if( _movementY < 0 && -_movementY < _movementX )						{							movingRight = true;						}						else						{							movingRight = false;						}					}					else if( _movementX < 0 )					{						if( _movementY < 0 )						{							movingRight = false;						}						else if( _movementY > 0 && _movementY > -_movementX )						{							movingRight = true;						}						else						{							movingRight = false;						}					}										if( movingRight )					{						//trace( "show right side animation" );						_animationClip.flipAnimation( false );						_peckAnimationClip.flipAnimation( false );						//shineAnimation_mc.flipAnimation( false );					}					else					{						//trace( "show left side animation" );						_animationClip.flipAnimation( true );						_peckAnimationClip.flipAnimation( true );						//shineAnimation_mc.flipAnimation( true );					}										render();										//trace( "_contentClip.x: "+_contentClip.x );					//trace( "_oldX: "+oldX );									}							/** handleMovingTimerCompleted			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function handleMovingTimerCompleted( timer:CustomTimer ):void				{					_movingTimer.stop();					_movingTimer.reset();										_moving = false;										_animationClip.stopAnimation();					_animationClip.contentClip.visible = false;										_peckAnimationClip.startAnimation( false, 0 );					_peckAnimationClip.contentClip.visible = true;				}							/** handleMovementTweenComplete			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function handleMovementTweenComplete():void				{					//trace( "handleMovementTweenComplete();" );										_animationClip.stopAnimation();					_animationClip.contentClip.visible = false;										_peckAnimationClip.startAnimation( false, 0 );					_peckAnimationClip.contentClip.visible = true;				}							/** handleShineTimerFired			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- 				protected function handleShineTimerFired( event:TimerEvent ):void				{					shineAnimation_mc.startAnimation( false, 0 );					shineAnimation_mc.contentClip.visible = true;				}*/							/** handleShineAnimationEnds			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- 				protected function handleShineAnimationEnds( event:CustomEvent ):void				{					shineAnimation_mc.contentClip.visible = false;				}*/								public function playChickenObtainedAnimation():void				{					var time:Number = .8;					var distance:Number = Math.sqrt( (_diePosition.x - _contentClip.x) * (_diePosition.x - _contentClip.x) + (_diePosition.y - _contentClip.y) * (_diePosition.y - _contentClip.y) );					time = int(distance)/1000;										if( time < .4 )					{						time = .4;					}										//trace( "distance: "+distance );					//trace( "time: "+time );										_chickenObtainedAnimation = true;					TweenLite.to( _contentClip, time, {x:_diePosition.x, y:_diePosition.y, onComplete:handleChickenObtainedAnimationComplete, ease:Circ.easeOut} );				}							/** handleClicked			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function handleRolledOver( event:MouseEvent ):void				{					if( !_alive )					{						return;					}					else					{						_alive = false;						//_contentClip.removeEventListener( MouseEvent.CLICK,handleClicked );						_contentClip.removeEventListener( MouseEvent.ROLL_OVER, handleRolledOver );					}										TweenLite.killTweensOf( _contentClip );										pause();					//die();										_durationTimer.stop();					_movingDurationTimer.stop();										_moving = false;										if( _movingTimer != null )						_movingTimer.stop();										var randomIndex:int = int(Math.random()*2);					var chickenPickupSfx:String = "";										if( randomIndex == 0 )						chickenPickupSfx = "sfx_chicken_pickup_1.wav";					else						chickenPickupSfx = "sfx_chicken_pickup_2.wav";										//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId(chickenPickupSfx).volume, 0, chickenPickupSfx );					SoundEffectPlayer.getInstance().playLibrarySound( chickenPickupSfx, false, chickenPickupSfx, chickenPickupSfx );										//dispatchEvent( new GameLevelEvent(GameLevelEvent.ON_CHICKEN_COLLECTED) );					onCollected.dispatch(this);				}								protected function handleChickenObtainedAnimationComplete():void				{					//trace( "handleChickenObtainedAnimationComplete();" );										_chickenObtainedAnimation = false;										//var globalPosition:Point = _contentClip.parent.localToGlobal( new Point(_diePosition.x, _diePosition.y) );					//EventNotificationCenter.getInstance().sendNotificationWithParameters( "onPlayParticle", this, {particleId:"chicken_collect", globalPosition:globalPosition} );										//dispatchEvent( new GameLevelEvent(GameLevelEvent.ON_CHICKEN_OBTAINED_ANIMATION_COMPLETE) );					onObtainedAnimationCompleted.dispatch(this);				}								/*				public function flyTo( point:Point ):void				{					TweenLite.to( _contentClip, .5, {} );				}				*/		}			}