/** GameboardMenuContentIcon  *	---------------------------------------------------------------------------- *  *	@desc:  *		Slider for the content scroller.  *	@author:  *		Christian Widodo [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.gamelevel.gameboardmenu	{		import flash.display.Bitmap;		import flash.display.MovieClip;		import flash.events.Event;		import flash.events.EventDispatcher;		import flash.events.IOErrorEvent;		import flash.events.MouseEvent;		import flash.events.ProgressEvent;		import flash.events.TimerEvent;		import flash.filters.GlowFilter;		import flash.geom.Point;		import flash.geom.Rectangle;		import flash.utils.Timer;		import flash.text.TextFieldAutoSize;				import com.greensock.TweenLite;		import com.avatarlabs.utils.cache.BitmapDataManager;		import com.avatarlabs.utils.cache.HashTable;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.loader.CustomLoader;		import com.avatarlabs.utils.sound.SoundEffectPlayer;		import com.avatarlabs.utils.text.TextFormatting;		import com.avatarlabs.utils.userinterface.DynamicUIButton;		import org.osflash.signals.Signal;				import com.boogabooga.data.gamelevel.AbstractGameObject;		import com.boogabooga.data.gamelevel.God;		import com.boogabooga.data.gamelevel.Weapon;		import com.boogabooga.events.GameLevelEvent;		import com.boogabooga.ui.gamelevel.Gameboard;		import com.boogabooga.ui.gamelevel.GameLevelDisplayObject;				public class GameboardMenuContentIcon extends EventDispatcher		{			protected var _contentClip:MovieClip;			protected var _id:int;			protected var _item:AbstractGameObject;			protected var _active:Boolean;						public var onRolledOver:Signal;			public var onRolledOut:Signal;			public var onMenuIconSelected:Signal;						/**	Stage Instances **/			public var cost_mc:MovieClip;			public var icon_mc:MovieClip;			public var iconContainer_mc:MovieClip;			public var chainlock_mc:MovieClip;			//public var elements_mc:MovieClip;			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function GameboardMenuContentIcon()				{					//init();				}								public function set contentClip( m:MovieClip ):void				{					_contentClip = m;					contentClip.stop();										cost_mc = _contentClip.cost_mc;					iconContainer_mc = _contentClip.iconContainer_mc;					icon_mc = iconContainer_mc.icon_mc;					chainlock_mc = _contentClip.chainlock_mc;					//elements_mc = _contentClip.elements_mc;										if( chainlock_mc ) chainlock_mc.visible = false;				}				public function get contentClip():MovieClip { return _contentClip; }								public function set id( i:int ):void { _id = i; }				public function get id():int { return _id; }								public function get active():Boolean { return _active; }							/** set/get item			  *	---------------------------------------------------------------------------- */				public function set item( a:AbstractGameObject ):void				{					_item = a;										var iconBitmap:Bitmap = new Bitmap(BitmapDataManager.getInstance().getBitmapData(_item.cacheIconId).bitmapData);						iconBitmap.width = 40;						iconBitmap.height = 40;						iconBitmap.smoothing = true;					icon_mc.addChild( iconBitmap );					/*					var element:MovieClip;					var elements:Array = GameLevelUtil.getItemElements( _item );										for( var i:int=0; i<elements.length; ++i )					{						element = new (getDefinitionByName(elements[i]) as Class)();						element.width = 19;						element.height = 20;						//element.x = -12;						element.y = -19 * i;						elements_mc.addChild( element );					}					*/					TextFormatting.formatTextWithFontName( MovieClip(cost_mc).label_txt, _item.cost, "Lithos Pro Black", false, TextFieldAutoSize.CENTER );					cost_mc.visible = true;									}				public function get item():AbstractGameObject				{					return _item;				}							/** dynamicInit			  *	---------------------------------------------------------------------------- */				public function init():void				{					//trace( "init();" );										_contentClip.mouseChildren = true;					_contentClip.mouseEnabled = true;										if( cost_mc != null )					{						TextFormatting.formatTextWithFontName( MovieClip(cost_mc).label_txt, "", "Lithos Pro Black", false, TextFieldAutoSize.CENTER );					}					//TextFormatting.formatUILabel( useCount_mc, MovieClip(useCount_mc).label_txt, "Lithos Pro Black", false );										//addEventListener( "onClick", handleIconClicked, false, 0, true );					icon_mc.addEventListener( MouseEvent.MOUSE_DOWN, handleIconMouseDown, false, 0, true );					icon_mc.addEventListener( MouseEvent.ROLL_OVER, handleIconRolledOver, false, 0, true );					icon_mc.addEventListener( MouseEvent.ROLL_OUT, handleIconRolledOut, false, 0, true );					icon_mc.buttonMode = true;										//trace( "fontName set" );										onRolledOver = new Signal( GameboardMenuContentIcon );					onRolledOut = new Signal();					onMenuIconSelected = new Signal( GameboardMenuContentIcon );				}								public function setDeactive():void				{					_active = false;					//icon_mc.removeEventListener( MouseEvent.MOUSE_DOWN, handleIconMouseDown );					//icon_mc.removeEventListener( MouseEvent.ROLL_OVER, handleIconRolledOver );					//icon_mc.removeEventListener( MouseEvent.ROLL_OUT, handleIconRolledOut );					//icon_mc.buttonMode = false;				}								public function setActive():void				{					_active = true;										//icon_mc.addEventListener( MouseEvent.MOUSE_DOWN, handleIconMouseDown, false, 0, true );					//icon_mc.addEventListener( MouseEvent.ROLL_OVER, handleIconRolledOver, false, 0, true );					//icon_mc.addEventListener( MouseEvent.ROLL_OUT, handleIconRolledOut, false, 0, true );					icon_mc.buttonMode = true;				}								public function kill():void				{					_item = null;										//removeEventListener( "onClick", handleIconClicked );					icon_mc.removeEventListener( MouseEvent.MOUSE_DOWN, handleIconMouseDown );					icon_mc.removeEventListener( MouseEvent.ROLL_OVER, handleIconRolledOver );					icon_mc.removeEventListener( MouseEvent.ROLL_OUT, handleIconRolledOut );										onRolledOver = null;					onRolledOut = null;				}							/** showLock			  *	---------------------------------------------------------------------------- */				public function showLock():void				{					//trace( "showLock();" );					//trace( "chainlock_mc: "+chainlock_mc );					if( chainlock_mc ) chainlock_mc.visible = true;					cost_mc.visible = false;					icon_mc.visible = false;					this.setDeactive();				}							/** hideLock			  *	---------------------------------------------------------------------------- */				public function hideLock():void				{					if( chainlock_mc ) chainlock_mc.visible = false;				}							/** playInsufficientAmount			  *	---------------------------------------------------------------------------- */				public function playInsufficientAmount():void				{									}							/** handleIconClicked			  *	---------------------------------------------------------------------------- 				protected function handleIconClicked( event:Event ):void				{					dispatchEvent( new GameLevelEvent(GameLevelEvent.ON_MENU_ICON_SELECTED) );				}*/								protected function handleIconMouseDown( event:MouseEvent ):void				{					//dispatchEvent( new GameLevelEvent(GameLevelEvent.ON_MENU_ICON_MOUSE_DOWN) );					onMenuIconSelected.dispatch( this );				}								protected function handleIconRolledOver( event:MouseEvent ):void				{					if( _active )					{						_contentClip.gotoAndStop(2);						SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav" );					}										onRolledOver.dispatch( this );				}								protected function handleIconRolledOut( event:MouseEvent ):void				{					if( _active )						_contentClip.gotoAndStop(1);										onRolledOut.dispatch();				}								public function update():Boolean				{					return false;				}		}			}