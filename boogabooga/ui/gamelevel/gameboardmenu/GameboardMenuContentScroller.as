/** GameboardMenuContentScroller  *	---------------------------------------------------------------------------- *  *	@desc:  *		Scroller for the available weapons to use in the menu.  *	@author:  *		Christian Widodo [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.gamelevel.gameboardmenu	{		import flash.display.MovieClip;		import flash.events.Event;		import flash.events.IOErrorEvent;		import flash.events.MouseEvent;		import flash.events.ProgressEvent;		import flash.events.TimerEvent;		import flash.filters.ColorMatrixFilter;		import flash.filters.GlowFilter;		import flash.geom.ColorTransform;		import flash.geom.Point;		import flash.geom.Rectangle;		import flash.text.TextFieldAutoSize;				import com.greensock.TweenLite;		import com.avatarlabs.utils.VectorUtil;		import com.avatarlabs.utils.cache.HashTable;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.loader.CustomLoader;		import com.avatarlabs.utils.timers.CustomTimer;		//import com.avatarlabs.utils.userinterface.UIButton;		//import com.avatarlabs.utils.userinterface.UIScroller;		import com.avatarlabs.utils.userinterface.DynamicUIScroller;		import com.avatarlabs.utils.userinterface.DynamicUISlider;		import org.osflash.signals.Signal;				import com.boogabooga.ui.gamelevel.gameboardmenu.GameboardMenuContentIcon;		import com.boogabooga.data.StringsIndex;		import com.boogabooga.data.gamelevel.AbstractGameObject;		import com.boogabooga.data.gamelevel.GameLevelCurrentData;		import com.boogabooga.data.gamelevel.Weapon;		import com.boogabooga.data.maingame.MainGameDataIndex;		import com.boogabooga.events.BoogaEvent;		import com.boogabooga.events.GameLevelEvent;		import com.boogabooga.ui.gamelevel.Gameboard;		import com.boogabooga.ui.gamelevel.GameLevelDisplayObject;		//import com.boogabooga.ui.gamelevel.gameboardmenu.GameboardMenuContentSlider;		import com.boogabooga.utils.GameLevelUtil;				public class GameboardMenuContentScroller extends DynamicUIScroller		{			protected var _debug:Boolean;						protected var _menuIcons:Vector.<GameboardMenuContentIcon>;			//protected var _currentIcon:UIButton;			protected var _sliderClip:DynamicUISlider;			protected var _greyColorTransform:ColorTransform;			protected var _originalColorTransform:ColorTransform;			//protected var _desaturatedColorMatrixFilter:ColorMatrixFilter;						private var _menuIconRolledOverTimer:CustomTimer;			private var _currentMenuIconRolledOver:GameboardMenuContentIcon;						public var onMenuIconSelected:Signal;						/**	Stage Instances **/			public var mask_mc:MovieClip;			public var slider_mc:MovieClip;			public var content_mc:MovieClip;			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function GameboardMenuContentScroller()				{					stop();										//init();				}								override public function set dynamicClip( m:MovieClip ):void				{					super.dynamicClip = m;										mask_mc = _dynamicClip.mask_mc;					slider_mc = _dynamicClip.slider_mc;					content_mc = _dynamicClip.content_mc;				}								public function get menuIcons():Vector.<GameboardMenuContentIcon> { return _menuIcons; }							/** init			  *	---------------------------------------------------------------------------- */				override public function dynamicInit():void				{					super.dynamicInit();										_dynamicClip.mouseChildren = true;					_dynamicClip.mouseEnabled = false;										_debug = true;										_menuIcons = new Vector.<GameboardMenuContentIcon>;										_sliderClip = new DynamicUISlider();					_sliderClip.dynamicClip = slider_mc;					_sliderClip.dynamicInit();					_sliderClip.setProperty( "y" );					_sliderClip.setHandle( slider_mc.handle_mc );					_sliderClip.setBounds( slider_mc.bound_mc );										setProperty( "x" );					setContent( content_mc );					setMask( mask_mc );					setSlider( _sliderClip );					//toggleSlider();					slider_mc.visible = false;										_greyColorTransform = new ColorTransform( .5, .5, .5, 1, 77, 77, 77, 0 );					_originalColorTransform = new ColorTransform();										//_desaturatedColorMatrixFilter = new ColorMatrixFilter([0.3086,0.6094,0.0820,0,0,0.3086,0.6094,0.0820,0,0,0.3086,0.6094,0.0820,0,0,0,0,0,1,0]);										_menuIconRolledOverTimer = new CustomTimer(1000, 1);					//_menuIconRolledOverTimer.addEventListener( TimerEvent.TIMER_COMPLETE, handleMenuIconRolledOverTimerCompleted );					_menuIconRolledOverTimer.onTimerCompleted.add( handleMenuIconRolledOverTimerCompleted );										onMenuIconSelected = new Signal( GameboardMenuContentIcon );				}							/** kill			  *	---------------------------------------------------------------------------- */				public function kill():void				{					if( _debug ) ConsoleBroadcaster.broadcast( "GameboardMenuContentScroller", "kill();" );										_menuIconRolledOverTimer.stop();					_menuIconRolledOverTimer.reset();										for( var i:uint=0; i<_menuIcons.length; ++i )					{						//_menuIcons[i].removeEventListener( GameLevelEvent.ON_MENU_ICON_SELECTED, handleIconClicked );						//_menuIcons[i].removeEventListener( GameLevelEvent.ON_MENU_ICON_MOUSE_DOWN, handleIconMouseDown );						//_menuIcons[i].removeEventListener( GameLevelEvent.ON_MENU_ICON_BUY_CLICKED, handleIconBuyClicked );						_menuIcons[i].onRolledOver.remove( handleIconRolledOver );						_menuIcons[i].onRolledOut.remove( handleIconRolledOut );						_menuIcons[i].onMenuIconSelected.remove( handleIconClicked );						_menuIcons[i].kill();						content_mc.removeChild( _menuIcons[i].contentClip );						_menuIcons[i] = null;					}										//_menuIcons = new Array();					VectorUtil.removeAll(_menuIcons);				}							/** addMenuIcon			  *	---------------------------------------------------------------------------- */				public function addMenuIcon( icon:GameboardMenuContentIcon ):void				{					icon.contentClip.x = 48 * _menuIcons.length;					icon.contentClip.y = 0;					icon.id = _menuIcons.length;					//icon.setId( item.id );					//trace( "setting text name" );					//icon.name_mc.setText( "test" );					//icon.name_mc.setHTMLText( "<span class='font1'>Test</span>" );					//icon.name_mc.setText( item.name );					content_mc.addChild( icon.contentClip );										//_menuIcons.push( {item:item, icon:icon} );					_menuIcons.push( icon );										//icon.addEventListener( GameLevelEvent.ON_MENU_ICON_SELECTED, handleIconClicked, false, 0, true );					//icon.addEventListener( GameLevelEvent.ON_MENU_ICON_MOUSE_DOWN, handleIconMouseDown, false, 0, true );										icon.onMenuIconSelected.add( handleIconClicked );					icon.onRolledOver.add( handleIconRolledOver );					icon.onRolledOut.add( handleIconRolledOut );										/*					if( icon.item != null && icon.item.consumable )					{						icon.addEventListener( GameLevelEvent.ON_MENU_ICON_BUY_CLICKED, handleIconBuyClicked, false, 0, true );					}					*/					toggleSlider();				}							/** resetMenu			  *	---------------------------------------------------------------------------- */				public function resetMenu():void				{					/*					for( var i:uint=0; i<_menuIcons.length; ++i )					{						_menuIcons[i].setActive(true);					}					*/										updateMenu( GameLevelCurrentData.getInstance().chickenCount );				}							/**	updateMenu			  *	---------------------------------------------------------------------------- */				public function updateMenu( chickenCount:uint ):void				{					for( var i:uint=0; i<_menuIcons.length; ++i )					{						if( _menuIcons[i].item == null )							continue;												if( _menuIcons[i].item.consumable )						{							//trace( "useCount: "+GameboardMenuContentIcon(_menuIcons[i]).item.useCount );														_menuIcons[i].update();														if( _menuIcons[i].item.useCount <= 0 )							{								_menuIcons[i].setDeactive();								//_menuIcons[i].contentClip.alpha = .5;								//_menuIcons[i].contentClip.transform.colorTransform = _greyColorTransform;								//_menuIcons[i].contentClip.filters = [MainGameDataIndex.DESATURATED_COLOR_MATRIX_FILTER];								GameLevelUtil.addDesaturatedFilterToMovieClip( _menuIcons[i].icon_mc );							}							else							{								_menuIcons[i].setActive();								//_menuIcons[i].contentClip.alpha = 1;								//_menuIcons[i].contentClip.transform.colorTransform = _originalColorTransform;								//_menuIcons[i].contentClip.filters = [];								GameLevelUtil.removeDesaturatedFilterFromMovieClip( _menuIcons[i].icon_mc );							}						}						else						{							//trace( "_menuIcons["+i+"].item.cost: "+_menuIcons[i].item.cost );							//trace( "chickenCount: "+chickenCount );							if( _menuIcons[i].item.cost > chickenCount )							{								_menuIcons[i].setDeactive();								//_menuIcons[i].contentClip.alpha = .5;								//_menuIcons[i].contentClip.transform.colorTransform = _greyColorTransform;								GameLevelUtil.addDesaturatedFilterToMovieClip( _menuIcons[i].icon_mc );							}							else							{								_menuIcons[i].setActive();								//_menuIcons[i].contentClip.alpha = 1;								//_menuIcons[i].contentClip.transform.colorTransform = _originalColorTransform;								//_menuIcons[i].contentClip.filters = [];								GameLevelUtil.removeDesaturatedFilterFromMovieClip( _menuIcons[i].icon_mc );							}						}					}				}								public function updateConsumableCount():GameboardMenuContentIcon				{					var updatedMenuIcon:GameboardMenuContentIcon;										for( var i:uint=0; i<_menuIcons.length; ++i )					{						if( _menuIcons[i].item == null )							continue;												if( _menuIcons[i].item.consumable )						{							if( _menuIcons[i].update() )							{								updatedMenuIcon = _menuIcons[i];							}														if( _menuIcons[i].item.useCount <= 0 )							{								_menuIcons[i].setDeactive();								//_menuIcons[i].contentClip.alpha = .5;								//_menuIcons[i].contentClip.transform.colorTransform = _greyColorTransform;								//_menuIcons[i].contentClip.filters = [MainGameDataIndex.DESATURATED_COLOR_MATRIX_FILTER];								GameLevelUtil.addDesaturatedFilterToMovieClip( _menuIcons[i].icon_mc );							}							else							{								_menuIcons[i].setActive();								//_menuIcons[i].contentClip.alpha = 1;								//_menuIcons[i].contentClip.transform.colorTransform = _originalColorTransform;								//_menuIcons[i].contentClip.filters = [];								GameLevelUtil.removeDesaturatedFilterFromMovieClip( _menuIcons[i].icon_mc );							}						}					}										return updatedMenuIcon;				}							/** handleIconClicked			  *	---------------------------------------------------------------------------- */				protected function handleIconClicked( icon:GameboardMenuContentIcon ):void				{					/*for( var i:uint=0; i<_menuIcons.length; ++i )					{						if( _menuIcons[i].id == event.currentTarget.id )						{							_menuIcons[i].setDeactive();							//_menuIcons[i].contentClip.transform.colorTransform = _greyColorTransform;						}						else						{							//(_menuIcons[i] as GameboardMenuContentIcon).setActive(true);						}					}*/										//dispatchEvent( new GameLevelEvent(GameLevelEvent.ON_MENU_ICON_SELECTED, {icon:event.currentTarget as GameboardMenuContentIcon}) );					onMenuIconSelected.dispatch( icon );				}								/*protected function handleIconMouseDown( event:GameLevelEvent ):void				{					//dispatchEvent( new GameLevelEvent(GameLevelEvent.ON_MENU_ICON_MOUSE_DOWN, {icon:event.currentTarget as GameboardMenuContentIcon}) );					onMenuIconSelected.dispatch( event.currentTarget );				}*/								/*protected function handleIconBuyClicked( event:GameLevelEvent ):void				{									}*/								protected function handleIconRolledOver( icon:GameboardMenuContentIcon ):void				{					//trace( "handleIconRolledOver();" );										_currentMenuIconRolledOver = icon;					_menuIconRolledOverTimer.start();									}								protected function handleIconRolledOut():void				{					//trace( "handleIconRolledOut();" );										_currentMenuIconRolledOver = null;					_menuIconRolledOverTimer.stop();					_menuIconRolledOverTimer.reset();					EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_TEXT_HOVER_HIDE, this );				}								protected function handleMenuIconRolledOverTimerCompleted( timer:CustomTimer ):void				{					_menuIconRolledOverTimer.reset();										if( _currentMenuIconRolledOver != null )					{						var text:String = StringsIndex.getInstance().getString(String(_currentMenuIconRolledOver.item.name));						var text2:String = StringsIndex.getInstance().getString(String(_currentMenuIconRolledOver.item.description));						var text3:String = _currentMenuIconRolledOver.item.statistic;												if( _currentMenuIconRolledOver.item is Weapon )						{							var elements:Array = GameLevelUtil.getItemElements(_currentMenuIconRolledOver.item);							EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_TEXT_HOVER_SHOW, this, {clip:_currentMenuIconRolledOver.contentClip, text:text, text2:text2, text3:text3, elements:elements, align:TextFieldAutoSize.CENTER} );						}						else						{							EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_TEXT_HOVER_SHOW, this, {clip:_currentMenuIconRolledOver.contentClip, text:text, text2:text2, text3:text3, align:TextFieldAutoSize.CENTER} );						}					}				}		}			}