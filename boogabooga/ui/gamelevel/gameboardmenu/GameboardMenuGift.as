/** GameboardMenuGift  *	---------------------------------------------------------------------------- *  *	@desc:  *		Gameboard Menu class that will contain the weapons, and other things  *		that users can place on the board. This will ideally be the bottom menu  *		in the gameplay.  *	@author:  *		Christian Widodo [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.gamelevel.gameboardmenu	{		import flash.display.Bitmap;		import flash.display.BitmapData;		//import flash.display.Loader;		import flash.display.MovieClip;		import flash.events.Event;		import flash.events.EventDispatcher;		import flash.events.IOErrorEvent;		import flash.events.MouseEvent;		import flash.events.TimerEvent;		//import flash.geom.Point;		//import flash.geom.Rectangle;		//import flash.net.URLRequest;		//import flash.system.ApplicationDomain;		//import flash.system.LoaderContext;		import flash.text.TextField;		import flash.text.TextFieldAutoSize;		import flash.utils.getDefinitionByName;				import com.greensock.TweenLite;		//import com.avatarlabs.utils.cache.HashTable;		import com.avatarlabs.utils.cache.BitmapDataManager;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		//import com.avatarlabs.utils.loader.CustomLoader;		import com.avatarlabs.utils.sound.SoundEffectPlayer;		import com.avatarlabs.utils.text.TextFormatting;		import com.avatarlabs.utils.timers.CustomTimer;		//import com.avatarlabs.utils.userinterface.UIButton;		import org.osflash.signals.Signal;				import com.boogabooga.data.StringsIndex;		import com.boogabooga.data.gamelevel.AbstractGameObject;		import com.boogabooga.data.gamelevel.GameLevelCurrentData;		import com.boogabooga.data.gamelevel.GameLevelDataIndex;		import com.boogabooga.data.gamelevel.God;		import com.boogabooga.data.gamelevel.Weapon;		import com.boogabooga.data.maingame.Gift;		import com.boogabooga.events.BoogaEvent;		//import com.boogabooga.ui.gamelevel.Gameboard;		import com.boogabooga.utils.GameLevelUtil;				public class GameboardMenuGift extends EventDispatcher		{			protected var _contentClip:MovieClip;						protected var _gift:Gift;						private var _giftIconRolledOverTimer:CustomTimer;						public var onGiftClicked:Signal;						/**	Stage Instances **/			public var bow_mc:MovieClip;			public var from1_txt:TextField;			public var from2_txt:TextField;			public var itemIcon_mc:MovieClip;			public var background_mc:MovieClip;			public var fromIcon_mc:MovieClip;			public var giverBackground_mc:MovieClip;			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function GameboardMenuGift()				{					//stop();										//init();				}							/** set/get contentClip			  *	---------------------------------------------------------------------------- */				public function set contentClip( m:MovieClip ):void				{					_contentClip = m;					_contentClip.stop();										bow_mc = _contentClip.bow_mc;					from1_txt = _contentClip.from1_txt;					from2_txt = _contentClip.from2_txt;					itemIcon_mc = _contentClip.itemIcon_mc;					background_mc = _contentClip.background_mc;					fromIcon_mc = _contentClip.fromIcon_mc;					giverBackground_mc = _contentClip.giverBackground_mc;				}				public function get contentClip():MovieClip { return _contentClip; }								public function get gift():Gift { return _gift; }							/** init			  *	---------------------------------------------------------------------------- */				public function init():void				{					_contentClip.mouseEnabled = false;					_contentClip.mouseChildren = true;										itemIcon_mc.mouseEnabled = false;					bow_mc.mouseEnabled = false;					bow_mc.cacheAsBitmap = true;										background_mc.buttonMode = true;					//background_mc.addEventListener( MouseEvent.CLICK, handleItemClicked );					background_mc.addEventListener( MouseEvent.MOUSE_DOWN, handleItemMouseDown );					background_mc.addEventListener( MouseEvent.ROLL_OVER, handleItemRolledOver );					background_mc.addEventListener( MouseEvent.ROLL_OUT, handleItemRolledOut );					background_mc.cacheAsBitmap = true;					giverBackground_mc.cacheAsBitmap = true;										_giftIconRolledOverTimer = new CustomTimer(1000, 1);					//_giftIconRolledOverTimer.addEventListener( TimerEvent.TIMER_COMPLETE, handleGiftIconRolledOverTimerCompleted );					_giftIconRolledOverTimer.onTimerCompleted.add( handleGiftIconRolledOverTimerCompleted );										onGiftClicked = new Signal( AbstractGameObject );				}								public function kill():void				{					_gift = null;										_giftIconRolledOverTimer.stop();					_giftIconRolledOverTimer.reset();										itemIcon_mc.cacheAsBitmap = false;					while( itemIcon_mc.numChildren > 0 )						itemIcon_mc.removeChildAt(0);										fromIcon_mc.cacheAsBitmap = false;					while( fromIcon_mc.numChildren > 0 )						fromIcon_mc.removeChildAt(0);				}							/** show			  *	---------------------------------------------------------------------------- */				public function show():void				{					_contentClip.visible = true;				}							/** hide			  *	---------------------------------------------------------------------------- */				public function hide():void				{					_contentClip.visible = false;				}							/** initGift			  *	---------------------------------------------------------------------------- */				public function initGift():void				{					if( GameLevelCurrentData.getInstance().gift != null )					{						_gift = GameLevelCurrentData.getInstance().gift;												var bitmap:Bitmap = new Bitmap( BitmapDataManager.getInstance().getBitmapData(_gift.item.cacheIconId).bitmapData );							bitmap.width = bitmap.height = 40;												itemIcon_mc.addChild( bitmap );						itemIcon_mc.cacheAsBitmap = true;												if( BitmapDataManager.getInstance().getBitmapData("UserFBProfilePic_"+_gift.fromId)== null )						{							BitmapDataManager.getInstance().addEventListener( Event.COMPLETE, handleLoadBitmapComplete );							BitmapDataManager.getInstance().loadBitmapToCache( _gift.fromProfilePicURL, "UserFBProfilePic_"+_gift.fromId );						}						else						{							addUserImage();						}						/*						var iconLoader:Loader = new Loader();							iconLoader.contentLoaderInfo.addEventListener( Event.COMPLETE, handleLoadIconComplete, false, 0, true );							iconLoader.load( new URLRequest(_gift.fromProfilePicURL), new LoaderContext(false, ApplicationDomain.currentDomain) );						*/						TextFormatting.formatTextWithFontName( from1_txt, "From: "+_gift.fromFirstName.charAt(0)+"."+_gift.fromLastName, "Lithos Pro Black" );						TextFormatting.formatTextWithFontName( from2_txt, "From: "+_gift.fromFirstName.charAt(0)+"."+_gift.fromLastName, "Lithos Pro Black" );					}				}								protected function handleLoadBitmapComplete( event:CustomEvent ):void				{					if( event.customParameters.cacheId == "UserFBProfilePic_"+_gift.fromId )					{						BitmapDataManager.getInstance().removeEventListener( Event.COMPLETE, handleLoadBitmapComplete );												addUserImage();					}				}							/** initGift			  *	---------------------------------------------------------------------------- */				protected function addUserImage():void				{					var bitmap:Bitmap = new Bitmap(BitmapDataManager.getInstance().getBitmapData("UserFBProfilePic_"+_gift.fromId).bitmapData);						bitmap.smoothing = true;						bitmap.width = bitmap.height = 35;										fromIcon_mc.addChild( bitmap );				}							/** handleItemClicked			  *	---------------------------------------------------------------------------- */				protected function handleItemClicked( event:MouseEvent ):void				{					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav" );										//dispatchEvent( new CustomEvent("onGiftClicked", {item:_gift.item}) );					onGiftClicked.dispatch( _gift.item );				}								protected function handleItemMouseDown( event:MouseEvent ):void				{					//dispatchEvent( new CustomEvent("onGiftClicked", {item:_gift.item}) );					onGiftClicked.dispatch( _gift.item );				}								protected function handleItemRolledOver( event:MouseEvent ):void				{					_contentClip.gotoAndStop(2);					_giftIconRolledOverTimer.start();				}								protected function handleItemRolledOut( event:MouseEvent ):void				{					_contentClip.gotoAndStop(1);					_giftIconRolledOverTimer.stop();					_giftIconRolledOverTimer.reset();					EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_TEXT_HOVER_HIDE, this );				}								protected function handleGiftIconRolledOverTimerCompleted( timer:CustomTimer ):void				{					var text:String = StringsIndex.getInstance().getString(String(_gift.item.name));					var text2:String = StringsIndex.getInstance().getString(String(_gift.item.description));					var text3:String = _gift.item.statistic;										if( _gift.item is Weapon )					{						var elements:Array = GameLevelUtil.getItemElements(_gift.item);						EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_TEXT_HOVER_SHOW, this, {clip:background_mc, text:text, text2:text2, text3:text3, elements:elements, align:TextFieldAutoSize.CENTER} );					}					else					{						EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_TEXT_HOVER_SHOW, this, {clip:background_mc, text:text, text2:text2, text3:text3, align:TextFieldAutoSize.CENTER} );					}				}		}			}