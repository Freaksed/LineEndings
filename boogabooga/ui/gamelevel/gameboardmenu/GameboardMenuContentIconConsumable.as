/** GameboardMenuContentIconConsumable  *	---------------------------------------------------------------------------- *  *	@desc:  *		Slider for the content scroller.  *	@author:  *		Christian Widodo [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.gamelevel.gameboardmenu	{		import flash.display.Bitmap;		import flash.display.MovieClip;		import flash.events.Event;		import flash.events.IOErrorEvent;		import flash.events.MouseEvent;		import flash.events.ProgressEvent;		import flash.events.TimerEvent;		import flash.filters.GlowFilter;		import flash.geom.ColorTransform;		import flash.geom.Point;		import flash.geom.Rectangle;		import flash.utils.Timer;		import flash.text.TextFieldAutoSize;				import com.greensock.TweenLite;		import com.avatarlabs.utils.cache.BitmapDataManager;		import com.avatarlabs.utils.cache.HashTable;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.loader.CustomLoader;		import com.avatarlabs.utils.sound.SoundEffectPlayer;		import com.avatarlabs.utils.text.TextFormatting;		import com.avatarlabs.utils.userinterface.DynamicUIButton;				import com.boogabooga.data.gamelevel.AbstractGameObject;		import com.boogabooga.data.gamelevel.Weapon;		import com.boogabooga.events.GameLevelEvent;		import com.boogabooga.ui.gamelevel.Gameboard;		import com.boogabooga.ui.gamelevel.GameLevelDisplayObject;		import com.avatarlabs.utils.timers.CustomTimer;				public class GameboardMenuContentIconConsumable extends GameboardMenuContentIcon		{			protected var _buyClip:DynamicUIButton;			protected var _insufficientAmountTimer:CustomTimer;			protected var _insufficientAmountColorTransform:ColorTransform;						/**	Stage Instances **/			public var buy_mc:MovieClip;			public var useCount_mc:MovieClip;			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function GameboardMenuContentIconConsumable()				{					//init();				}								override public function set contentClip( m:MovieClip ):void				{					super.contentClip = m;										useCount_mc = _contentClip.useCount_mc;					buy_mc = _contentClip.buy_mc;										_buyClip = new DynamicUIButton();					_buyClip.dynamicClip = buy_mc;					_buyClip.dynamicInit();					_buyClip.addEventListener( "onClick", handleBuyClicked, false, 0, true );					_buyClip.addEventListener( "onSetFocus", handleBuyRolledOver, false, 0, true );				}							/** set/get item			  *	---------------------------------------------------------------------------- */				override public function set item( a:AbstractGameObject ):void				{					_item = a;										//trace( (_item as Weapon).cost );										//icon_mc.addChild( new Bitmap(BitmapDataManager.getInstance().getBitmapData(_item.cacheIconId).bitmapData) );										var iconBitmap:Bitmap = new Bitmap(BitmapDataManager.getInstance().getBitmapData(_item.cacheIconId).bitmapData);						iconBitmap.width = 40;						iconBitmap.height = 40;						iconBitmap.smoothing = true;					icon_mc.addChild( iconBitmap );										//TextFormatting.formatTextWithFontName( MovieClip(useCount_mc).label_txt, _item.useCount, "SF Fedora", false, TextFieldAutoSize.CENTER );					TextFormatting.formatTextWithFontName( MovieClip(useCount_mc).label_txt, _item.useCount, "Lithos Pro Black", false, TextFieldAutoSize.CENTER );					useCount_mc.visible = true;									}							/** init			  *	---------------------------------------------------------------------------- */				override public function init():void				{					//trace( "init();" );										super.init();										TextFormatting.formatTextWithFontName( MovieClip(useCount_mc).label_txt, "", "Lithos Pro Black", false, TextFieldAutoSize.CENTER );										//trace( "fontName set" );				}								override public function update():Boolean				{					//useCount_mc.setText( _item.useCount );					var returnValue:Boolean = _item.useCount != useCount_mc.label_txt.text;										TextFormatting.formatTextWithFontName( MovieClip(useCount_mc).label_txt, _item.useCount, "Lithos Pro Black", false, TextFieldAutoSize.CENTER );										return returnValue;				}								override public function kill():void				{					if( _insufficientAmountTimer != null )					{						if( _insufficientAmountTimer.isRunning )							_insufficientAmountTimer.stop();												_insufficientAmountTimer.onTimerFired.remove( handleInsufficientAmountTimerFired );						_insufficientAmountTimer.onTimerCompleted.remove( handleInsufficientAmountTimerCompleted );						_insufficientAmountTimer.kill();						_insufficientAmountTimer = null;					}										super.kill();				}							/** playInsufficientAmount			  *	---------------------------------------------------------------------------- */				override public function playInsufficientAmount():void				{					//(redMultiplier=0.5, greenMultiplier=0.5, blueMultiplier=0.5, alphaMultiplier=1, redOffset=77, greenOffset=0, blueOffset=0, alphaOffset=0)										if( _insufficientAmountTimer == null )					{						_insufficientAmountTimer = new CustomTimer( 50, 10 );						//_insufficientAmountTimer.addEventListener( TimerEvent.TIMER, handleInsufficientAmountTimerFired, false, 0, true );						//_insufficientAmountTimer.addEventListener( TimerEvent.TIMER_COMPLETE, handleInsufficientAmountTimerCompleted, false, 0, true );						_insufficientAmountTimer.onTimerFired.add( handleInsufficientAmountTimerFired );						_insufficientAmountTimer.onTimerCompleted.add( handleInsufficientAmountTimerCompleted );												_insufficientAmountColorTransform = new ColorTransform( .5, .5, .5, 1, 77, 0, 0, 0 );					}										if( _insufficientAmountTimer.isRunning )					{						_insufficientAmountTimer.stop();						_insufficientAmountTimer.reset();					}										_insufficientAmountTimer.start();				}							/** handleInsufficientAmountTimerFired			  *	---------------------------------------------------------------------------- */				private function handleInsufficientAmountTimerFired( timer:CustomTimer ):void				{					//trace( _insufficientAmountTimer.repeatCount );					//trace( _insufficientAmountTimer.repeatCount&1 );					if( (_insufficientAmountTimer.currentCount & 1) == 0 )					{						//trace( 'tint buy button to red' );						buy_mc.transform.colorTransform = _insufficientAmountColorTransform;					}					else					{						//trace( 'take out the tint' );						buy_mc.transform.colorTransform = new ColorTransform();					}				}							/** handleInsufficientAmountTimerCompleted			  *	---------------------------------------------------------------------------- */				private function handleInsufficientAmountTimerCompleted( timer:CustomTimer ):void				{					_insufficientAmountTimer.reset();					buy_mc.transform.colorTransform = new ColorTransform();				}								protected function handleBuyClicked( event:Event ):void				{					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav", SoundEffectPlayer.SOUND_PLAYER_SFX );										//dispatchEvent( new GameLevelEvent(GameLevelEvent.ON_MENU_ICON_BUY_CLICKED) );					EventNotificationCenter.getInstance().sendNotificationWithParameters( GameLevelEvent.ON_MENU_ICON_BUY_CLICKED, this, {item:_item} );				}								protected function handleBuyRolledOver( event:Event ):void				{					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav", SoundEffectPlayer.SOUND_PLAYER_SFX );				}		}			}