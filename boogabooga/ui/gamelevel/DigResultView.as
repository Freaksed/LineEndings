/** DigResultView  *	---------------------------------------------------------------------------- *  *	@author:  *		Christian Widodo [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.gamelevel	{		import flash.display.Bitmap;		import flash.display.MovieClip;		import flash.events.Event;		import flash.events.EventDispatcher;		import flash.geom.Point;		import flash.text.TextField;		import flash.text.TextFieldAutoSize;		import flash.utils.getDefinitionByName;				import com.avatarlabs.utils.cache.BitmapDataManager;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.AssetLoaderEvent;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.sound.SoundEffectPlayer;		import com.avatarlabs.utils.text.TextFormatting;		import com.avatarlabs.utils.userinterface.DynamicUIButton;		import com.greensock.TweenLite;		import com.greensock.easing.Bounce;		import org.osflash.signals.Signal;				import com.boogabooga.controller.maingame.MainGameController;		import com.boogabooga.data.SettingsIndex;		import com.boogabooga.data.SoundsIndex;		import com.boogabooga.data.StringsIndex;		import com.boogabooga.data.gamelevel.AbstractGameObject;		import com.boogabooga.data.gamelevel.GameLevelDataIndex;		import com.boogabooga.data.gamelevel.God;		import com.boogabooga.data.gamelevel.Weapon;		import com.boogabooga.data.maingame.Treasure;		import com.boogabooga.data.maingame.Village;		import com.boogabooga.events.BoogaEvent;		import com.boogabooga.ui.maingame.DescriptionScroller;		import com.boogabooga.utils.GameLevelUtil;				public class DigResultView extends EventDispatcher		{			protected var _contentClip:MovieClip;			protected var _originalPosition:Point;						protected var _item:AbstractGameObject;						protected var _nextClip:DynamicUIButton;			protected var _leaveEarlyClip:DynamicUIButton;			protected var _islandSelectClip:DynamicUIButton;			protected var _playAgainClip:DynamicUIButton;			protected var _descriptionScrollerClip:DescriptionScroller;						protected var _viewType:int;			protected var _headerMinY:Number;			protected var _headerMaxHeight:Number;						public var onDigEarlyClicked:Signal;			public var onIslandSelectClicked:Signal;			public var onPlayAgainClicked:Signal;			public var onNextClicked:Signal;			public var onShowAnimationCompleted:Signal;						protected var _leaveEarlyPosition:Point;			protected var _islandSelectPosition:Point;			protected var _playAgainPosition:Point;			protected var _nextPosition:Point;						public static const VIEW_TYPE_DIG_DISCOVERIES:int = 0;			public static const VIEW_TYPE_LAST_DIG_DISCOVERIES:int = 1;			public static const VIEW_TYPE_DIG_NO_DISCOVERIES:int = 2;			public static const VIEW_TYPE_LAST_DIG_NO_DISCOVERIES:int = 3;						/**	Stage Instances **/			public var header_mc:MovieClip;			public var magicGlitterBunch_mc:MovieClip;			public var treasureName_mc:MovieClip;			public var image_mc:MovieClip;			public var next_mc:MovieClip;			public var leaveEarly_mc:MovieClip;			public var islandSelect_mc:MovieClip;			public var playAgain_mc:MovieClip;			public var paperBackground_mc:MovieClip;			public var background_mc:MovieClip;			public var elements_mc:MovieClip;			public var descriptionScroller_mc:MovieClip;			public var gift_mc:MovieClip;			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function DigResultView()				{					//init();				}								public function set contentClip( m:MovieClip ):void				{					_contentClip = m;										header_mc = _contentClip.header_mc;					magicGlitterBunch_mc = _contentClip.magicGlitterBunch_mc;					treasureName_mc = _contentClip.treasureName_mc;					image_mc = _contentClip.image_mc;					next_mc = _contentClip.next_mc;					next_mc.cacheAsBitmap = true;					leaveEarly_mc = _contentClip.leaveEarly_mc;					leaveEarly_mc.cacheAsBitmap = true;					islandSelect_mc = _contentClip.islandSelect_mc;					islandSelect_mc.cacheAsBitmap = true;					playAgain_mc = _contentClip.playAgain_mc;					playAgain_mc.cacheAsBitmap = true;					paperBackground_mc = _contentClip.paperBackground_mc;					paperBackground_mc.cacheAsBitmap = true;					background_mc = _contentClip.background_mc;					background_mc.cacheAsBitmap = true;					elements_mc = _contentClip.elements_mc;					elements_mc.visible = false;					gift_mc = _contentClip.gift_mc;					gift_mc.visible = false;										descriptionScroller_mc = _contentClip.descriptionScroller_mc;					descriptionScroller_mc.content_mc.label_txt.autoSize = TextFieldAutoSize.LEFT;					descriptionScroller_mc.content_mc.label_txt.styleSheet = SettingsIndex.getInstance().fontManager.getStyleSheet();					descriptionScroller_mc.visible = false;										_descriptionScrollerClip = new DescriptionScroller();					_descriptionScrollerClip.dynamicClip = descriptionScroller_mc;					_descriptionScrollerClip.dynamicInit();										_headerMinY = header_mc.y;					_headerMaxHeight = header_mc.height;										_leaveEarlyPosition = new Point( leaveEarly_mc.x, leaveEarly_mc.y );					_islandSelectPosition = new Point( islandSelect_mc.x, islandSelect_mc.y );					_playAgainPosition = new Point( playAgain_mc.x, playAgain_mc.y );					_nextPosition = new Point( next_mc.x, next_mc.y );										_originalPosition = new Point(_contentClip.x, _contentClip.y );									}				public function get contentClip():MovieClip { return _contentClip; }								public function set viewType( i:int ):void { _viewType = i; }				public function get viewType():int { return _viewType; }							/** init			  *	---------------------------------------------------------------------------- */				public function init():void				{					_nextClip = new DynamicUIButton();					_nextClip.dynamicClip = next_mc;					_nextClip.dynamicInit();					_nextClip.addEventListener( "onClick", handleNextClicked, false, 0, true );					_nextClip.addEventListener( "onSetFocus", handleNextRolledOver, false, 0, true );					_nextClip.addEventListener( "onKillFocus", handleNextRolledOut, false, 0, true );										_leaveEarlyClip = new DynamicUIButton();					_leaveEarlyClip.dynamicClip = leaveEarly_mc;					_leaveEarlyClip.dynamicInit();					_leaveEarlyClip.addEventListener( "onClick", handleLeaveEarlyClicked, false, 0, true );					_leaveEarlyClip.addEventListener( "onSetFocus", handleLeaveEarlyRolledOver, false, 0, true );					_leaveEarlyClip.addEventListener( "onKillFocus", handleLeaveEarlyRolledOut, false, 0, true );										_islandSelectClip = new DynamicUIButton();					_islandSelectClip.dynamicClip = islandSelect_mc;					_islandSelectClip.dynamicInit();					_islandSelectClip.addEventListener( "onClick", handleIslandSelectClicked, false, 0, true );					_islandSelectClip.addEventListener( "onSetFocus", handleIslandSelectRolledOver, false, 0, true );					_islandSelectClip.addEventListener( "onKillFocus", handleIslandSelectRolledOut, false, 0, true );										_playAgainClip = new DynamicUIButton();					_playAgainClip.dynamicClip = playAgain_mc;					_playAgainClip.dynamicInit();					_playAgainClip.addEventListener( "onClick", handlePlayAgainClicked, false, 0, true );					_playAgainClip.addEventListener( "onSetFocus", handlePlayAgainRolledOver, false, 0, true );					_playAgainClip.addEventListener( "onKillFocus", handlePlayAgainRolledOut, false, 0, true );										magicGlitterBunch_mc.gotoAndStop(1);					magicGlitterBunch_mc.visible = false;										_viewType = VIEW_TYPE_DIG_DISCOVERIES;										EventNotificationCenter.getInstance().addSignalListener( BoogaEvent.ON_LANGUAGE_CHANGED, handleLanguageChanged, this );										onDigEarlyClicked = new Signal();					onIslandSelectClicked = new Signal();					onPlayAgainClicked = new Signal();					onNextClicked = new Signal();					onShowAnimationCompleted = new Signal();				}							/** initTreasure			  *	---------------------------------------------------------------------------- *			  *	Initializes the treasure view with the treasure info			  *	---------------------------------------------------------------------------- */				public function initTreasure( item:Treasure ):void				{					_item = item;										paperBackground_mc.x = -80;					paperBackground_mc.y = -65;					image_mc.x = -14;					image_mc.y = -1;					magicGlitterBunch_mc.x = -130;										if( item.rarity == Treasure.RARITY_RARE )					{						//TextFormatting.formatTextWithFontName( header_mc.label_txt, "RARE FIND!", "SF Fedora", false, TextFieldAutoSize.CENTER );						TextFormatting.formatTextWithFontName( header_mc.label_txt, StringsIndex.getInstance().getStringByName("DIG_RARE_TREASURE_FOUND"), "Lithos Pro Black", false, TextFieldAutoSize.CENTER );					}					else					{						//TextFormatting.formatTextWithFontName( header_mc.label_txt, "COMMON FIND!", "SF Fedora", false, TextFieldAutoSize.CENTER );						TextFormatting.formatTextWithFontName( header_mc.label_txt, StringsIndex.getInstance().getStringByName("DIG_COMMON_TREASURE_FOUND"), "Lithos Pro Black", false, TextFieldAutoSize.CENTER );					}										header_mc.y = _headerMinY + int((_headerMaxHeight-header_mc.height)*.5);										if( BitmapDataManager.getInstance().getBitmapData(_item.cacheIconId) != null )					{						addImage();					}					else					{						MainGameController.getInstance().urgentAssetLoaderController.addBitmapToLoad( _item.cacheIconId, _item.iconURL );						MainGameController.getInstance().urgentAssetLoaderController.addEventListener( AssetLoaderEvent.COMPLETE, handleIconLoadComplete );						MainGameController.getInstance().urgentAssetLoaderController.startLoadAssets();					}										TextFormatting.formatTextWithFontName( treasureName_mc.label_txt, StringsIndex.getInstance().getString(String(item.name)), "Lithos Pro Black", false, TextFieldAutoSize.CENTER );					treasureName_mc.visible = true;										gift_mc.visible = false;					elements_mc.visible = false;					descriptionScroller_mc.visible = false;				}								public function initItem( a:AbstractGameObject ):void				{					_item = a;										paperBackground_mc.x = -160;					paperBackground_mc.y = -65;					image_mc.x = -94;					image_mc.y = -1;					magicGlitterBunch_mc.x = -210;										if( _item is Weapon )					{						var element:MovieClip;						var elements:Array = GameLevelUtil.getItemElements( _item );												for( var i:int=0; i<elements.length; ++i )						{							element = new (getDefinitionByName(elements[i]) as Class)();							element.y = -35 * i;							elements_mc.addChild( element );						}					}					else if( _item is God )					{											}										_descriptionScrollerClip.resetScroller();					_descriptionScrollerClip.content_mc.label_txt.htmlText = '<span class="font2Default">'+StringsIndex.getInstance().getString(String(_item.description))+'\n'+_item.statistic+'</span>';					_descriptionScrollerClip.toggleSlider();					descriptionScroller_mc.visible = true;					elements_mc.visible = true;					gift_mc.visible = true;										TextFormatting.formatTextWithFontName( header_mc.label_txt, StringsIndex.getInstance().getString(String(_item.name))+' (1 '+StringsIndex.getInstance().getStringByName('USE')+')', "Lithos Pro Black", false, TextFieldAutoSize.CENTER );					header_mc.y = _headerMinY + int((_headerMaxHeight-header_mc.height)*.5);										if( BitmapDataManager.getInstance().getBitmapData(_item.cacheIconId) != null )					{						addImage();					}					else					{						MainGameController.getInstance().urgentAssetLoaderController.addBitmapToLoad( _item.cacheIconId, _item.iconURL );						MainGameController.getInstance().urgentAssetLoaderController.addEventListener( AssetLoaderEvent.COMPLETE, handleIconLoadComplete );						MainGameController.getInstance().urgentAssetLoaderController.startLoadAssets();					}										treasureName_mc.visible = false;				}								public function reset():void				{					while( image_mc.numChildren > 0 )						image_mc.removeChildAt(0);										while( elements_mc.numChildren > 0 )						elements_mc.removeChildAt(0);				}							/** show			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				public function show():void				{					if( _viewType == VIEW_TYPE_DIG_DISCOVERIES )					{						_leaveEarlyClip.dynamicClip.x = _islandSelectPosition.x;						_leaveEarlyClip.dynamicClip.visible = true;						_nextClip.dynamicClip.x = _playAgainPosition.x;						_nextClip.dynamicClip.visible = true;												_islandSelectClip.dynamicClip.visible = false;						_playAgainClip.dynamicClip.visible = false;					}					else if( _viewType == VIEW_TYPE_LAST_DIG_DISCOVERIES )					{						_nextClip.dynamicClip.x = -44;						_nextClip.dynamicClip.visible = true;												_leaveEarlyClip.dynamicClip.visible = false;						_islandSelectClip.dynamicClip.visible = false;						_playAgainClip.dynamicClip.visible = false;					}					else if( _viewType == VIEW_TYPE_DIG_NO_DISCOVERIES )					{						_leaveEarlyClip.dynamicClip.x = _leaveEarlyPosition.x;						_leaveEarlyClip.dynamicClip.visible = true;						_islandSelectClip.dynamicClip.x = _islandSelectPosition.x;						_islandSelectClip.dynamicClip.visible = true;						_playAgainClip.dynamicClip.x = _playAgainPosition.x;						_playAgainClip.dynamicClip.visible = true;						_nextClip.dynamicClip.x = _nextPosition.x;						_nextClip.dynamicClip.visible = true;					}					else if( _viewType == VIEW_TYPE_LAST_DIG_NO_DISCOVERIES )					{						_islandSelectClip.dynamicClip.x = _islandSelectPosition.x - 50;						_islandSelectClip.dynamicClip.visible = true;						_playAgainClip.dynamicClip.x = _playAgainPosition.x - 50;						_playAgainClip.dynamicClip.visible = true;						_nextClip.dynamicClip.x = _nextPosition.x - 50;						_nextClip.dynamicClip.visible = true;												_leaveEarlyClip.dynamicClip.visible = false;					}										_contentClip.scaleX = .2;					_contentClip.scaleY = .2;					_contentClip.visible = true;										TweenLite.to( _contentClip, .5, {x:_originalPosition.x, y:_originalPosition.y, scaleX:1, scaleY:1, ease:Bounce.easeOut, onComplete:handleShowAnimationComplete} );				}								protected function handleShowAnimationComplete():void				{					if( _item is Treasure && _item.rarity == Treasure.RARITY_RARE )					{						magicGlitterBunch_mc.gotoAndPlay(1);						magicGlitterBunch_mc.visible = true;												//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_find_artifact_rare.wav").volume, 0, "sfx_find_artifact_rare.wav" );						SoundEffectPlayer.getInstance().playLibrarySound( "sfx_find_artifact_rare.wav", false, "sfx_find_artifact_rare.wav", "sfx_find_artifact_rare.wav", SoundEffectPlayer.SOUND_PLAYER_SFX );					}					else if( _item is Weapon || _item is God )					{						magicGlitterBunch_mc.gotoAndPlay(1);						magicGlitterBunch_mc.visible = true;												SoundEffectPlayer.getInstance().playLibrarySound( "sfx_weapon_purchase.mp3", false, "sfx_weapon_purchase.mp3", "sfx_weapon_purchase.mp3", SoundEffectPlayer.SOUND_PLAYER_SFX );					}					else					{						//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_find_artifiact_normal.wav").volume, 0, "sfx_find_artifiact_normal.wav" );						SoundEffectPlayer.getInstance().playLibrarySound( "sfx_find_artifiact_normal.wav", false, "sfx_find_artifiact_normal.wav", "sfx_find_artifiact_normal.wav", SoundEffectPlayer.SOUND_PLAYER_SFX );					}										onShowAnimationCompleted.dispatch();				}							/** hide			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				public function hide():void				{					ConsoleBroadcaster.broadcast( "DigResultView", "hide();" );										_contentClip.visible = false;										magicGlitterBunch_mc.gotoAndStop(1);					magicGlitterBunch_mc.visible = false;										reset();				}								public function enableDigEarlyButton():void				{					//_leaveEarlyClip.setActive();					//GameLevelUtil.removeDesaturatedFilterFromMovieClip( _leaveEarlyClip.dynamicClip );					_leaveEarlyClip.dynamicClip.visible = true;					_nextClip.dynamicClip.x = 6;				}								public function disableDigEarlyButton():void				{					//_leaveEarlyClip.setDeactive();					//GameLevelUtil.addDesaturatedFilterToMovieClip( _leaveEarlyClip.dynamicClip );					_leaveEarlyClip.dynamicClip.visible = false;					_nextClip.dynamicClip.x = -44;				}							/** handleIconLoadComplete			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function handleIconLoadComplete( event:AssetLoaderEvent ):void				{					ConsoleBroadcaster.broadcast( "NewDiscoveriesViewItem", "handleIconLoadComplete();" );										if( BitmapDataManager.getInstance().getBitmapData(_item.cacheIconId) != null )					{						addImage();					}				}							/** addImage			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function addImage():void				{					while( image_mc.numChildren > 0 )						image_mc.removeChildAt(0);										var bitmap:Bitmap = new Bitmap( BitmapDataManager.getInstance().getBitmapData(_item.cacheIconId).bitmapData );						bitmap.width = 100;						bitmap.height = 100;						bitmap.x = -50;						bitmap.y = -50;						bitmap.smoothing = true;					image_mc.addChild( bitmap );				}							/** handleNextClicked			  *	---------------------------------------------------------------------------- */				protected function handleNextClicked( event:Event ):void				{					//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_click.wav").volume, 0, "sfx_mouse_click.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav" );										//dispatchEvent( new BoogaEvent(BoogaEvent.ON_DIG_RESULT_VIEW_NEXT) );					onNextClicked.dispatch();				}								protected function handleNextRolledOver( event:Event ):void				{					//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_rollover.wav").volume, 0, "sfx_mouse_rollover.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav" );										if( _viewType == VIEW_TYPE_DIG_DISCOVERIES || _viewType == VIEW_TYPE_LAST_DIG_DISCOVERIES )					{						EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_TEXT_HOVER_SHOW, this, {clip:_nextClip.dynamicClip, text:StringsIndex.getInstance().getStringByName("DIG_NEXT")} );					}					else					{						EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_TEXT_HOVER_SHOW, this, {clip:_nextClip.dynamicClip, text:StringsIndex.getInstance().getStringByName("DISCOVERIES_NEXT_LEVEL")} );					}				}								protected function handleNextRolledOut( event:Event ):void				{					EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_TEXT_HOVER_HIDE, this );				}							/** handleLeaveEarlyClicked			  *	---------------------------------------------------------------------------- */				protected function handleLeaveEarlyClicked( event:Event ):void				{					//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_click.wav").volume, 0, "sfx_mouse_click.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav" );										//dispatchEvent(  new BoogaEvent(BoogaEvent.ON_DIG_RESULT_VIEW_LEAVE_EARLY) );					onDigEarlyClicked.dispatch();				}								protected function handleLeaveEarlyRolledOver( event:Event ):void				{					//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_rollover.wav").volume, 0, "sfx_mouse_rollover.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav" );										EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_TEXT_HOVER_SHOW, this, {clip:_leaveEarlyClip.dynamicClip, text:StringsIndex.getInstance().getStringByName("DIG_DIG")} );				}								protected function handleLeaveEarlyRolledOut( event:Event ):void				{					EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_TEXT_HOVER_HIDE, this );				}							/** handleIslandSelectClicked			  *	---------------------------------------------------------------------------- */				protected function handleIslandSelectClicked( event:Event ):void				{					//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_click.wav").volume, 0, "sfx_mouse_click.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav" );										//dispatchEvent( new BoogaEvent(BoogaEvent.ON_ISLAND_SELECT) );					onIslandSelectClicked.dispatch();				}							/** handleIslandSelectRolledOver			  *	---------------------------------------------------------------------------- */				protected function handleIslandSelectRolledOver( event:Event ):void				{					//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_rollover.wav").volume, 0, "sfx_mouse_rollover.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav" );										EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_TEXT_HOVER_SHOW, this, {clip:_islandSelectClip.dynamicClip, text:StringsIndex.getInstance().getStringByName("LEVEL_RESULT_ISLAND_SELECT")} );				}							/** handleIslandSelectRolledOut			  *	---------------------------------------------------------------------------- */				protected function handleIslandSelectRolledOut( event:Event ):void				{					EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_TEXT_HOVER_HIDE, this );				}							/** handlePlayAgainClicked			  *	---------------------------------------------------------------------------- */				protected function handlePlayAgainClicked( event:Event ):void				{					//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_click.wav").volume, 0, "sfx_mouse_click.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_click.wav", false, "sfx_mouse_click.wav", "sfx_mouse_click.wav" );										//dispatchEvent( new BoogaEvent(BoogaEvent.ON_PLAY_AGAIN) );					onPlayAgainClicked.dispatch();				}							/** handlePlayAgainRolledOver			  *	---------------------------------------------------------------------------- */				protected function handlePlayAgainRolledOver( event:Event ):void				{					//SoundEffectPlayer.getInstance().setVolume( SoundsIndex.getInstance().getSoundBySoundId("sfx_mouse_rollover.wav").volume, 0, "sfx_mouse_rollover.wav" );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_mouse_rollover.wav", false, "sfx_mouse_rollover.wav", "sfx_mouse_rollover.wav" );										EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_TEXT_HOVER_SHOW, this, {clip:_playAgainClip.dynamicClip, text:StringsIndex.getInstance().getStringByName("LEVEL_RESULT_PLAY_AGAIN")} );				}							/** handlePlayAgainRolledOut			  *	---------------------------------------------------------------------------- */				protected function handlePlayAgainRolledOut( event:Event ):void				{					EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_TEXT_HOVER_HIDE, this );				}							/** handleLanguageChanged			  *	---------------------------------------------------------------------------- *			  *	Updates the texts when the language is changed.			  *	---------------------------------------------------------------------------- */				private function handleLanguageChanged( customParameters:Object ):void				{					if( _item != null )					{						if( _item.rarity == Treasure.RARITY_RARE )						{							//TextFormatting.formatTextWithFontName( header_mc.label_txt, "RARE FIND!", "SF Fedora", false, TextFieldAutoSize.CENTER );							TextFormatting.formatTextWithFontName( header_mc.label_txt, StringsIndex.getInstance().getStringByName("DIG_RARE_TREASURE_FOUND"), "Lithos Pro Black", false, TextFieldAutoSize.CENTER );						}						else						{							//TextFormatting.formatTextWithFontName( header_mc.label_txt, "COMMON FIND!", "SF Fedora", false, TextFieldAutoSize.CENTER );							TextFormatting.formatTextWithFontName( header_mc.label_txt, StringsIndex.getInstance().getStringByName("DIG_COMMON_TREASURE_FOUND"), "Lithos Pro Black", false, TextFieldAutoSize.CENTER );						}												header_mc.y = _headerMinY + int((_headerMaxHeight-header_mc.height)*.5);												TextFormatting.formatTextWithFontName( treasureName_mc.label_txt, StringsIndex.getInstance().getString(String(_item.name)), "Lithos Pro Black", false, TextFieldAutoSize.CENTER );					}				}						}	}