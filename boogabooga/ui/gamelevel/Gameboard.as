/** Gameboard  *	---------------------------------------------------------------------------- *  *	@desc:  *		This class is the gameboard class that will control game level interactions.  *		Responsible to display all game level display objects,  hold reference  *		to all the controller system for the current level.  *	@author:  *		Christian Widodo [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.gamelevel	{		import flash.display.Bitmap;		import flash.display.BitmapData;		import flash.display.MovieClip;		import flash.display.Stage;		import flash.display.StageDisplayState;		import flash.display.StageScaleMode;		import flash.events.Event;		import flash.events.FullScreenEvent;		import flash.events.IOErrorEvent;		import flash.events.MouseEvent;		import flash.events.ProgressEvent;		import flash.events.TimerEvent;		import flash.external.ExternalInterface;		import flash.geom.ColorTransform;		import flash.geom.Matrix;		import flash.geom.Point;		import flash.geom.Rectangle;		import flash.net.LocalConnection;		import flash.net.URLLoader;		import flash.net.URLRequest;		import flash.net.URLRequestMethod;		import flash.net.URLVariables;		import flash.system.Capabilities;		import flash.system.System;		import flash.text.TextField;		import flash.text.TextFieldAutoSize;		import flash.text.TextFormat;		import flash.ui.Mouse;		import flash.utils.getDefinitionByName;		import flash.utils.getQualifiedClassName;		import flash.utils.getTimer;		import flash.utils.Timer;				import com.greensock.TweenLite;		import com.greensock.easing.Circ;		import com.greensock.easing.Linear;		import com.greensock.easing.Sine;		import com.greensock.plugins.*;		import com.avatarlabs.utils.UtilFunctions;		import com.avatarlabs.utils.VectorUtil;		import com.avatarlabs.utils.cache.BitmapDataManager;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.loader.CustomLoader;		import com.avatarlabs.utils.sound.SoundEffectPlayer;		import com.avatarlabs.utils.text.TextFormatting;		import com.avatarlabs.utils.timers.CustomTimer;		import com.avatarlabs.utils.timers.ElapsedTime;		import com.avatarlabs.utils.userinterface.DynamicUIButton;		//import nl.demonsters.debugger.MonsterDebugger;		import org.osflash.signals.Signal;				import com.boogabooga.controller.maingame.MainGameController;		import com.boogabooga.controller.gamelevel.GameboardController;		import com.boogabooga.data.StringsIndex;		import com.boogabooga.data.gamelevel.AbstractGameObject;		import com.boogabooga.data.gamelevel.ChickenMovementAreaData;		import com.boogabooga.data.gamelevel.DiggingMap;		import com.boogabooga.data.gamelevel.Enemy;		import com.boogabooga.data.gamelevel.GameLevel;		import com.boogabooga.data.gamelevel.GameLevelCurrentData;		import com.boogabooga.data.gamelevel.GameLevelDataIndex;		import com.boogabooga.data.gamelevel.GameLevelEnvironmentObject;		import com.boogabooga.data.gamelevel.God;		import com.boogabooga.data.gamelevel.Wave;		import com.boogabooga.data.gamelevel.WaveZone;		import com.boogabooga.data.gamelevel.Weapon;		import com.boogabooga.data.maingame.MainGameDataIndex;		import com.boogabooga.events.BoogaEvent;		import com.boogabooga.events.GameLevelEvent;		import com.boogabooga.ui.gamelevel.DiggingSpotView;		import com.boogabooga.ui.gamelevel.GameLevelDisplayLayer;		import com.boogabooga.ui.gamelevel.gameboardmenu.GameboardMenu;		import com.boogabooga.ui.gamelevel.gameboardmenu.GameboardMenuGift;		import com.boogabooga.ui.gamelevel.gameboardmenu.GameboardMenuEnemyCountIcon;		import com.boogabooga.ui.gamelevel.slotmachine.SlotMachineDisplayObject;		import com.boogabooga.ui.gamelevel.weapons.WeaponDisplayObject;		//import com.boogabooga.ui.maingame.weaponselection.WeaponSelectionEnemyCountIcon;		import com.boogabooga.utils.GameLevelUtil;		import com.boogabooga.data.gamelevel.AnimationObject;				public class Gameboard extends MovieClip		{			protected var _debug:Boolean;			protected var _isEditor:Boolean;			protected var _contentClip:MovieClip;			protected var _backgroundClip:MovieClip;			protected var _foregroundClip:MovieClip;			protected var _currentBackgroundId:String;						protected var _isometricStartPoint:Point;			protected var _isometricStartPointOffset:Point;			protected var _2DStartPoint:Point;						protected var _tiles:Vector.<Vector.<GameboardTile>>;			protected var _tilesLength:int;			protected var _newWeaponTile:GameboardTile;			protected var _addingNewWeapon:Boolean;			protected var _addingNewGod:Boolean;			protected var _deletingWeapon:Boolean;			protected var _giftSelected:Boolean;			protected var _currentItemSelected:AbstractGameObject;			protected var _newWeaponUpBitmap:Bitmap;			protected var _newWeaponDownBitmap:Bitmap;			protected var _newWeaponExtraBitmap:Bitmap;			protected var _newWeaponUpOriginalMatrix:Matrix;			protected var _newWeaponUpFlippedMatrix:Matrix;			protected var _newWeaponDownOriginalMatrix:Matrix;			protected var _newWeaponDownFlippedMatrix:Matrix;			protected var _delayAddNewWeaponListenerTimer:Timer;			protected var _delayDeleteWeaponListenerTimer:Timer;			protected var _delayAddNewGodListenerTimer:Timer;						protected var _gateTiles:Vector.<GameboardTile>;			protected var _inIsometricView:Boolean;						protected var _villageTiles:Vector.<Vector.<GameboardTile>>;			protected var _spawnArea1Tiles:Vector.<Vector.<GameboardTile>>;			protected var _spawnArea2Tiles:Vector.<Vector.<GameboardTile>>;			protected var _spawnArea3Tiles:Vector.<Vector.<GameboardTile>>;						protected var _gameboardController:GameboardController;						protected var _bound:Rectangle;						protected var _chickenMovementArea1:ChickenMovementArea;			protected var _chickenMovementArea2:ChickenMovementArea;			protected var _chickenMovementArea3:ChickenMovementArea;			protected var _diggingTiles1:Vector.<Vector.<DiggingTile>>;			protected var _diggingTiles2:Vector.<Vector.<DiggingTile>>;			protected var _diggingTiles3:Vector.<Vector.<DiggingTile>>;			protected var _activeDiggingTiles:Vector.<DiggingTile>;			protected var _diggingSpotViews:Vector.<DiggingSpotView>;						protected var _enemyIconClips:Vector.<GameboardMenuEnemyCountIcon>;						//protected var _environmentDisplayObjects:Vector.<EnvironmentDisplayObject>;			protected var _environmentDisplayObjects:Vector.<Vector.<Vector.<EnvironmentDisplayObject>>>;			//protected var _villageDisplayObjects:Vector.<EnvironmentDisplayObject>;			protected var _villageDisplayObjects:Vector.<Vector.<Vector.<EnvironmentDisplayObject>>>;						protected var _gameboardMenuClip:GameboardMenu;			protected var _giftClip:GameboardMenuGift;			protected var _chickenIndicatorClip:ChickenIndicator;			protected var _buyChickenClip:DynamicUIButton;			protected var _slotMachineClip:SlotMachineDisplayObject;			protected var _displayLayerClip:GameLevelDisplayLayer;			protected var _environmentObjectsDisplayLayerClip:GameLevelDisplayLayer;			protected var _resultScreenLoseClip:ResultScreenLose;			protected var _resultScreenWinClip:ResultScreenWin;			protected var _digResultViewClip:DigResultView;			protected var _newDiscoveriesViewClip:NewDiscoveriesView;			protected var _introAnimationViewClip:IntroAnimationView;			protected var _pauseScreenViewClip:PauseScreenView;			protected var _levelEndResultViewClip:LevelEndResultView;			//protected var _exitClip:DynamicUIButton;			//protected var _replayClip:DynamicUIButton;						protected var _mouseCursorBounds:Rectangle;						protected var _weaponPlacementClip:AnimationDisplayObject;			protected var _weaponRangeClips:Vector.<AnimationDisplayObject>;			protected var _weaponRangeClipsVisible:Boolean;			protected var _weaponPoweredUpClips:Vector.<AnimationDisplayObject>;			protected var _weaponAdditionClips:Vector.<AnimationDisplayObject>;						protected var _giftNormalScreenY:Number;			protected var _gameboardMenuNormalScreenY:Number;			protected var _chickenIndicatorNormalScreenY:Number;			protected var _buyChickenNormalScreenY:Number;			protected var _enemiesNormalScreenY:Number;			protected var _slotMachineNormalScreenY:Number;			protected var _chickenSlotMachinePosition:Point;						protected var _digTextOriginalTextFormat:TextFormat;			protected var _digText2OriginalTextFormat:TextFormat;			protected var _digTextMaxWidth:Number;						public var onTreasureDug:Signal;			public var onDigTreasureAnimationCompleted:Signal;			public var onDigSoundStarted:Signal;			public var onDigTextAnimationCompleted:Signal;			public var onPlayAgainClicked:Signal;			public var onIslandSelectClicked:Signal;			public var onResultScreenLoseAnimationDone:Signal;			public var onResultScreenWinAnimationDone:Signal;			public var onPlayNextLevelClicked:Signal;			public var onDigResultNextClicked:Signal;			public var onDigResultDigEarlyClicked:Signal;						public var onMenuIconSelected:Signal;			public var onWeaponPlacedOnInvalidSpot:Signal;			public var onMenuDeleteSelected:Signal;			public var onWeaponDeletedOnInvalidSpot:Signal;			public var onWeaponAdded:Signal;						public var onSlotSpinStarted:Signal;			public var onSlotSpinEnded:Signal;						/**	Stage Instances **/			public var gift_mc:MovieClip;			public var gameboardMenu_mc:MovieClip;			public var chickenIndicator_mc:MovieClip;			public var buyChicken_mc:MovieClip;			public var chickenAnimation_mc:MovieClip;			//public var exit_mc:MovieClip;			//public var replay_mc:MovieClip;						public var slotMachine_mc:MovieClip;			public var levelLoading_mc:MovieClip;						public var scaledElementContainer_mc:MovieClip;			//Scaled clips			public var startPointMarkerIsometric_mc:MovieClip;			public var startPointMarker2D_mc:MovieClip;			public var weaponMarker_mc:MovieClip;			public var newWeaponContainer_mc:MovieClip;			public var weaponPlacement_mc:MovieClip;			public var weaponRangeClipsContainer_mc:MovieClip;			public var weaponAdditionClipsContainer_mc:MovieClip;			public var tutorialTilePlacement_mc:MovieClip;			public var weaponRange_mc:MovieClip;			public var weaponRangeMask_mc:MovieClip;			public var newWeaponRange_mc:MovieClip;			public var weaponPoweredUpClipsContainer_mc:MovieClip;			public var effectClipsContainer_mc:MovieClip;			public var projectileClipsContainer_mc:MovieClip;			public var displayLayer_mc:MovieClip;			public var tilesContainer_mc:MovieClip;			public var villageTilesContainer_mc:MovieClip;			public var chickenArea1_mc:MovieClip;			public var chickenArea2_mc:MovieClip;			public var chickenArea3_mc:MovieClip;			public var foregroundContainer_mc:MovieClip;			//public var maskContainer_mc:MovieClip;			public var backgroundContainer_mc:MovieClip;			public var environmentObjectsDisplayLayer_mc:MovieClip;			//public var villageObjectsDisplayLayer_mc:GameLevelDisplayLayer;			public var diggingSpotViewsContainer_mc:MovieClip;			public var introAnimationContainer_mc:MovieClip;			public var blackBg_mc:MovieClip;						public var enemies_mc:MovieClip;			public var resultScreenLose_mc:MovieClip;			public var resultScreenWin_mc:MovieClip;			public var digText_mc:MovieClip;			public var mouseDigIcon_mc:MovieClip;			public var pauseScreen_mc:MovieClip;			public var digResultView_mc:MovieClip;			public var newDiscoveriesView_mc:MovieClip;			public var levelEndResultView_mc:MovieClip;			public var digAnimation_mc:MovieClip;			public var invisibleBlocker_mc:MovieClip;			public var mouseCursorBounds_mc:MovieClip;						public var version_mc:MovieClip;			//public var godAttackAnimation_mc:MovieClip;						/**	End Stage Instances **/						/** Constructor			 *	---------------------------------------------------------------------------- */				public function Gameboard()				{					stop();										//var debugger = new MonsterDebugger(this);										//init();				}								public function set contentClip( m:MovieClip ):void				{					_contentClip = m;										gameboardMenu_mc = _contentClip.gameboardMenu_mc;					gift_mc = _contentClip.gift_mc;					chickenIndicator_mc = _contentClip.chickenIndicator_mc;					chickenIndicator_mc.mouseChildren = false;					chickenIndicator_mc.mouseEnabled = false;					chickenAnimation_mc = _contentClip.chickenAnimation_mc;					scaledElementContainer_mc = _contentClip.scaledElementContainer_mc;					slotMachine_mc = _contentClip.slotMachine_mc;					levelLoading_mc = _contentClip.levelLoading_mc;					buyChicken_mc = _contentClip.buyChicken_mc;					buyChicken_mc.cacheAsBitmap = true;					enemies_mc = _contentClip.enemies_mc;					resultScreenLose_mc = _contentClip.resultScreenLose_mc;					resultScreenWin_mc = _contentClip.resultScreenWin_mc;					mouseDigIcon_mc = _contentClip.mouseDigIcon_mc;					mouseDigIcon_mc.cacheAsBitmap = true;					mouseDigIcon_mc.mouseChildren = false;					mouseDigIcon_mc.mouseEnabled = false;					digResultView_mc = _contentClip.digResultView_mc;					newDiscoveriesView_mc = _contentClip.newDiscoveriesView_mc;					digText_mc = _contentClip.digText_mc;					digAnimation_mc = _contentClip.digAnimation_mc;					digAnimation_mc.stop();					digAnimation_mc.visible = false;					invisibleBlocker_mc = _contentClip.invisibleBlocker_mc;					invisibleBlocker_mc.visible = false;					pauseScreen_mc = _contentClip.pauseScreen_mc;					pauseScreen_mc.visible = false;					pauseScreen_mc.alpha = 1;										_digTextOriginalTextFormat = UtilFunctions.clone( digText_mc.digTextAnimation_mc.label1_txt.getTextFormat() ) as TextFormat;					_digTextMaxWidth = digText_mc.digTextAnimation_mc.label1_txt.width;					_digText2OriginalTextFormat = UtilFunctions.clone( digText_mc.digTextAnimation_mc.label2_txt.getTextFormat() ) as TextFormat;										//exit_mc = _contentClip.exit_mc;					//replay_mc = _contentClip.replay_mc;										startPointMarkerIsometric_mc = scaledElementContainer_mc.startPointMarkerIsometric_mc;					startPointMarker2D_mc = scaledElementContainer_mc.startPointMarker2D_mc;					newWeaponContainer_mc = scaledElementContainer_mc.newWeaponContainer_mc;					newWeaponContainer_mc.mouseChildren = false;					newWeaponContainer_mc.mouseEnabled = false;					weaponMarker_mc = scaledElementContainer_mc.weaponMarker_mc;					weaponMarker_mc.mouseChildren = false;					weaponMarker_mc.mouseEnabled = false;					//weaponPlacement_mc = newWeaponContainer_mc.weaponPlacement_mc;					//weaponPlacement_mc.mouseChildren = false;					//weaponPlacement_mc.mouseEnabled = false;					//weaponRangeClipsContainer_mc = newWeaponContainer_mc.weaponRangeClipsContainer_mc;					newWeaponRange_mc = scaledElementContainer_mc.newWeaponRange_mc;					newWeaponRange_mc.mouseChildren = false;					newWeaponRange_mc.mouseEnabled = false;					weaponRangeClipsContainer_mc = newWeaponRange_mc.weaponRangeClipsContainer_mc;					weaponRangeClipsContainer_mc.mouseChildren = false;					weaponRangeClipsContainer_mc.mouseEnabled = false;					weaponAdditionClipsContainer_mc = scaledElementContainer_mc.weaponAdditionClipsContainer_mc;					weaponAdditionClipsContainer_mc.mouseChildren = false;					weaponAdditionClipsContainer_mc.mouseEnabled = false;					weaponRange_mc = newWeaponRange_mc.weaponRange_mc;					weaponRange_mc.mouseChildren = false;					weaponRange_mc.mouseEnabled = false;					weaponRange_mc.visible = false;					weaponRangeMask_mc = scaledElementContainer_mc.weaponRangeMask_mc;					weaponRangeMask_mc.cacheAsBitmap = true;					weaponRange_mc.cacheAsBitmap = true;					weaponRange_mc.mask = weaponRangeMask_mc;					weaponPoweredUpClipsContainer_mc = scaledElementContainer_mc.weaponPoweredUpClipsContainer_mc;					weaponPoweredUpClipsContainer_mc.mouseChildren = false;					weaponPoweredUpClipsContainer_mc.mouseEnabled = false;					weaponPoweredUpClipsContainer_mc.visible = false;					tutorialTilePlacement_mc = scaledElementContainer_mc.tutorialTilePlacement_mc;					tutorialTilePlacement_mc.stop();					tutorialTilePlacement_mc.visible = false;					effectClipsContainer_mc = scaledElementContainer_mc.effectClipsContainer_mc;					projectileClipsContainer_mc = scaledElementContainer_mc.projectileClipsContainer_mc;					displayLayer_mc = scaledElementContainer_mc.displayLayer_mc;					tilesContainer_mc = scaledElementContainer_mc.tilesContainer_mc;					villageTilesContainer_mc = scaledElementContainer_mc.villageTilesContainer_mc;					chickenArea1_mc = scaledElementContainer_mc.chickenArea1_mc;					chickenArea2_mc = scaledElementContainer_mc.chickenArea2_mc;					chickenArea3_mc = scaledElementContainer_mc.chickenArea3_mc;					environmentObjectsDisplayLayer_mc = scaledElementContainer_mc.environmentObjectsDisplayLayer_mc;					//villageObjectsDisplayLayer_mc = scaledElementContainer_mc.villageObjectsDisplayLayer_mc;					backgroundContainer_mc = scaledElementContainer_mc.backgroundContainer_mc;					foregroundContainer_mc = scaledElementContainer_mc.foregroundContainer_mc;					diggingSpotViewsContainer_mc = scaledElementContainer_mc.diggingSpotViewsContainer_mc;					//diggingSpotViewsContainer_mc.mouseChildren = false;					//diggingSpotViewsContainer_mc.mouseEnabled = false;					//introAnimationContainer_mc = scaledElementContainer_mc.introAnimationContainer_mc;					introAnimationContainer_mc = _contentClip.introAnimationContainer_mc;					introAnimationContainer_mc.mouseChildren = false;					introAnimationContainer_mc.mouseEnabled = false;					//blackBg_mc = scaledElementContainer_mc.blackBg_mc;					//blackBg_mc.visible = false;					levelEndResultView_mc = _contentClip.levelEndResultView_mc;										_giftNormalScreenY = gift_mc.y;					_gameboardMenuNormalScreenY = gameboardMenu_mc.y;					_chickenIndicatorNormalScreenY = chickenIndicator_mc.y;					_buyChickenNormalScreenY = buyChicken_mc.y;					_enemiesNormalScreenY = enemies_mc.y;					_slotMachineNormalScreenY = slotMachine_mc.y;										_chickenSlotMachinePosition = UtilFunctions.localToLocal( slotMachine_mc, chickenAnimation_mc );					//trace( "_chickenSlotMachinePosition: "+_chickenSlotMachinePosition );					//trace( UtilFunctions.localToLocal(slotMachine_mc, chickenArea2_mc) );										mouseCursorBounds_mc = _contentClip.mouseCursorBounds_mc;					_mouseCursorBounds = mouseCursorBounds_mc.getBounds(_contentClip);					mouseCursorBounds_mc.visible = false;										version_mc = _contentClip.version_mc;					version_mc.visible = false;					version_mc.alpha = 1;					version_mc.mouseChildren = false;					version_mc.mouseEnabled = false;					version_mc.label_txt.mouseEnabled = false;									}				public function get contentClip():MovieClip { return _contentClip; }								public function get gameboardMenuClip():GameboardMenu { return _gameboardMenuClip; }				public function get giftClip():GameboardMenuGift { return _giftClip; }				public function get chickenIndicatorClip():ChickenIndicator { return _chickenIndicatorClip; }				public function get buyChickenClip():DynamicUIButton { return _buyChickenClip; }				public function get slotMachineClip():SlotMachineDisplayObject { return _slotMachineClip; }				public function get displayLayerClip():GameLevelDisplayLayer { return _displayLayerClip; }				public function get environmentObjectsDisplayLayerClip():GameLevelDisplayLayer { return _environmentObjectsDisplayLayerClip; }				public function get resultScreenLoseClip():ResultScreenLose { return _resultScreenLoseClip; }				public function get resultScreenWinClip():ResultScreenWin { return _resultScreenWinClip; }				public function get digResultViewClip():DigResultView { return _digResultViewClip; }				public function get newDiscoveriesViewClip():NewDiscoveriesView { return _newDiscoveriesViewClip; }				public function get introAnimationViewClip():IntroAnimationView { return _introAnimationViewClip; }				public function get pauseScreenViewClip():PauseScreenView { return _pauseScreenViewClip; }				public function get levelEndResultViewClip():LevelEndResultView { return _levelEndResultViewClip; }								public function get enemyIconClips():Vector.<GameboardMenuEnemyCountIcon> { return _enemyIconClips; }								public function get isEditor():Boolean { return _isEditor; }								public function get chickenSlotMachinePosition():Point { return _chickenSlotMachinePosition; }							/** get tiles			  *	---------------------------------------------------------------------------- */				public function get tiles():Vector.<Vector.<GameboardTile>> { return _tiles; }							/** get gateTiles			  *	---------------------------------------------------------------------------- */				public function get gateTiles():Vector.<GameboardTile> { return _gateTiles; }								public function get villageTiles():Vector.<Vector.<GameboardTile>> { return _villageTiles; }								public function get diggingTiles1():Vector.<Vector.<DiggingTile>> { return _diggingTiles1; }				public function get diggingTiles2():Vector.<Vector.<DiggingTile>> { return _diggingTiles2; }				public function get diggingTiles3():Vector.<Vector.<DiggingTile>> { return _diggingTiles3; }							/** set/get inIsometricView			  *	---------------------------------------------------------------------------- */				public function set inIsometricView( b:Boolean ):void				{					_inIsometricView = b;										//After converting to isometric view, the tiles are in this rectangle, (x=-25.5, y=35.75, w=701.3, h=428.5)					//background_mc needs to add 10 pixels to the y										if( _inIsometricView )					{						tilesContainer_mc.x = _isometricStartPoint.x;						tilesContainer_mc.y = _isometricStartPoint.y;						weaponRangeMask_mc.x = _isometricStartPoint.x;						weaponRangeMask_mc.y = _isometricStartPoint.y;												villageTilesContainer_mc.x = _isometricStartPoint.x;// + _isometricStartPointOffset.x;						villageTilesContainer_mc.y = _isometricStartPoint.y;// + _isometricStartPointOffset.y;												_displayLayerClip.contentClip.x = _isometricStartPoint.x;// + _isometricStartPointOffset.x;						_displayLayerClip.contentClip.y = _isometricStartPoint.y;// + _isometricStartPointOffset.y;												_environmentObjectsDisplayLayerClip.contentClip.x = _isometricStartPoint.x;						_environmentObjectsDisplayLayerClip.contentClip.y = _isometricStartPoint.y;												//villageObjectsDisplayLayer_mc.x = _isometricStartPoint.x + _isometricStartPointOffset.x;						//villageObjectsDisplayLayer_mc.y = _isometricStartPoint.y + _isometricStartPointOffset.y;												projectileClipsContainer_mc.x = _isometricStartPoint.x;						projectileClipsContainer_mc.y = _isometricStartPoint.y;												chickenArea1_mc.x = chickenArea2_mc.x = chickenArea3_mc.x = _isometricStartPoint.x;						chickenArea1_mc.y = chickenArea2_mc.y = chickenArea3_mc.y = _isometricStartPoint.y;												scaledElementContainer_mc.scaleX = scaledElementContainer_mc.scaleY = .8;						chickenAnimation_mc.scaleX = chickenAnimation_mc.scaleY = .8;					}					else					{						tilesContainer_mc.x = _2DStartPoint.x;						tilesContainer_mc.y = _2DStartPoint.y;						weaponRangeMask_mc.x = _2DStartPoint.x;						weaponRangeMask_mc.y = _2DStartPoint.y;												villageTilesContainer_mc.x = _2DStartPoint.x;						villageTilesContainer_mc.y = _2DStartPoint.y;// - (GameLevelDataIndex.getInstance().boardMaxRows+1)*GameLevelUtil.TILE_2D_HEIGHT;												_displayLayerClip.contentClip.x = _2DStartPoint.x;						_displayLayerClip.contentClip.y = _2DStartPoint.y;// - (GameLevelDataIndex.getInstance().boardMaxRows+1)*GameLevelUtil.TILE_2D_HEIGHT;												_environmentObjectsDisplayLayerClip.contentClip.x = _2DStartPoint.x;						_environmentObjectsDisplayLayerClip.contentClip.y = _2DStartPoint.y;												//villageObjectsDisplayLayer_mc.x = _2DStartPoint.x;						//villageObjectsDisplayLayer_mc.y = _2DStartPoint.y - (GameLevelDataIndex.getInstance().boardMaxRows+1)*GameLevelUtil.TILE_2D_HEIGHT;												projectileClipsContainer_mc.x = _2DStartPoint.x;						projectileClipsContainer_mc.y = _2DStartPoint.y;												chickenArea1_mc.x = chickenArea2_mc.x = chickenArea3_mc.x = _2DStartPoint.x;						chickenArea1_mc.y = chickenArea2_mc.y = chickenArea3_mc.y = _2DStartPoint.y;												scaledElementContainer_mc.scaleX = scaledElementContainer_mc.scaleY = .5;						chickenAnimation_mc.scaleX = chickenAnimation_mc.scaleY = .5;					}										_chickenMovementArea1.inIsometricView = b;					_chickenMovementArea1.render();					_chickenMovementArea2.inIsometricView = b;					_chickenMovementArea2.render();					_chickenMovementArea3.inIsometricView = b;					_chickenMovementArea3.render();															var i:int, j:int, k:int;					var tilesLength1:int = _tiles.length;					var tilesLength2:int;										for( i=0; i<tilesLength1; ++i )					{						tilesLength2 = _tiles[i].length;						for( j=0; j<tilesLength2; ++j )						{							_tiles[i][j].inIsometricView = _inIsometricView;						}					}										tilesLength1 = _gateTiles.length;					for( i=0; i<tilesLength1; ++i )					{						_gateTiles[i].inIsometricView = _inIsometricView;					}										tilesLength1 = _villageTiles.length;					for( i=0; i<tilesLength1; ++i )					{						tilesLength2 = _villageTiles[i].length;						for( j=0; j<tilesLength2; ++j )						{							_villageTiles[i][j].inIsometricView = _inIsometricView;						}					}										tilesLength1 = _diggingTiles1.length;					for( i=0; i<tilesLength1; ++i )					{						tilesLength2 = _diggingTiles1[i].length;						for( j=0; j<tilesLength2; ++j )						{							_diggingTiles1[i][j].inIsometricView = _inIsometricView;						}					}										tilesLength1 = _diggingTiles2.length;					for( i=0; i<tilesLength1; ++i )					{						tilesLength2 = _diggingTiles2[i].length;						for( j=0; j<tilesLength2; ++j )						{							_diggingTiles2[i][j].inIsometricView = _inIsometricView;						}					}										tilesLength1 = _diggingTiles3.length;					for( i=0; i<tilesLength1; ++i )					{						tilesLength2 = _diggingTiles3[i].length;						for( j=0; j<tilesLength2; ++j )						{							_diggingTiles3[i][j].inIsometricView = _inIsometricView;						}					}										for( i=0; i<_environmentDisplayObjects.length; ++i )					{						for( j=0; j<_environmentDisplayObjects[i].length; ++j )						{							for( k=0; k<_environmentDisplayObjects[i][j].length; ++k )							{								//trace( "before, "+_environmentDisplayObjects[i].positionIn2D );								_environmentDisplayObjects[i][j][k].inIsometricView = _inIsometricView;								_environmentDisplayObjects[i][j][k].render();								//trace( "after, "+_environmentDisplayObjects[i].positionIn2D );							}						}					}										for( i=0; i<_villageDisplayObjects.length; ++i )					{						for( j=0; j<_villageDisplayObjects[i].length; ++j )						{							for( k=0; k<_villageDisplayObjects[i][j].length; ++k )							{								_villageDisplayObjects[i][j][k].inIsometricView = _inIsometricView;								_villageDisplayObjects[i][j][k].render();							}						}					}									}				public function get inIsometricView():Boolean { return _inIsometricView; }								public function set tileOpacity( n:Number ):void				{					var i:int, j:int;					var tilesLength1:int = _tiles.length;					var tilesLength2:int;										for( i=0; i<tilesLength1; ++i )					{						tilesLength2 = _tiles[i].length;						for( j=0; j<tilesLength2; ++j )						{							_tiles[i][j].tileOpacity = n;						}					}										tilesLength1 = _gateTiles.length;					for( i=0; i<tilesLength1; ++i )					{						_gateTiles[i].tileOpacity = n;					}										tilesLength1 = _villageTiles.length;					for( i=0; i<tilesLength1; ++i )					{						tilesLength2 = _villageTiles[i].length;						for( j=0; j<tilesLength2; ++j )						{							_villageTiles[i][j].tileOpacity = n;						}					}										tilesLength1 = _diggingTiles1.length;					for( i=0; i<tilesLength1; ++i )					{						tilesLength2 = _diggingTiles1[i].length;						for( j=0; j<tilesLength2; ++j )						{							_diggingTiles1[i][j].tileOpacity = n;						}					}										tilesLength1 = _diggingTiles2.length;					for( i=0; i<tilesLength1; ++i )					{						tilesLength2 = _diggingTiles2[i].length;						for( j=0; j<tilesLength2; ++j )						{							_diggingTiles2[i][j].tileOpacity = n;						}					}										tilesLength1 = _diggingTiles3.length;					for( i=0; i<tilesLength1; ++i )					{						tilesLength2 = _diggingTiles3[i].length;						for( j=0; j<tilesLength2; ++j )						{							_diggingTiles3[i][j].tileOpacity = n;						}					}				}								public function set gameboardController( gc:GameboardController ):void { _gameboardController = gc; }				public function get gameboardController():GameboardController { return _gameboardController; }								public function get bound():Rectangle				{					if( _bound == null )					{						_bound = new Rectangle( _tiles[1][0].positionIn2D.x, _tiles[1][0].positionIn2D.y, _tiles[1][7].positionIn2D.x - _tiles[1][0].positionIn2D.x, _tiles[7][0].positionIn2D.y - _tiles[1][0].positionIn2D.y );					}										//trace( "_bound: "+_bound );										return _bound;				}								public function get chickenMovementArea1():ChickenMovementArea { return _chickenMovementArea1; }				public function get chickenMovementArea2():ChickenMovementArea { return _chickenMovementArea2; }				public function get chickenMovementArea3():ChickenMovementArea { return _chickenMovementArea3; }								public function get environmentDisplayObjects():Vector.<Vector.<Vector.<EnvironmentDisplayObject>>> { return _environmentDisplayObjects };				public function get villageDisplayObjects():Vector.<Vector.<Vector.<EnvironmentDisplayObject>>> {return _villageDisplayObjects; };								public function get activeDiggingTiles():Vector.<DiggingTile> { return _activeDiggingTiles; }				public function get diggingSpotViews():Vector.<DiggingSpotView> { return _diggingSpotViews; }							/** init			  *	---------------------------------------------------------------------------- */				public function init():void				{					ConsoleBroadcaster.broadcast( "Gameboard", "init();" );										_debug = true;					_isEditor = false;					_inIsometricView = true;										onDigTextAnimationCompleted = new Signal();					onTreasureDug = new Signal();					onDigSoundStarted = new Signal();					onDigTextAnimationCompleted = new Signal();					onPlayAgainClicked = new Signal();					onIslandSelectClicked = new Signal();					onResultScreenLoseAnimationDone = new Signal();					onResultScreenWinAnimationDone = new Signal();					onPlayNextLevelClicked = new Signal();					onDigResultNextClicked = new Signal();					onDigResultDigEarlyClicked = new Signal();										onSlotSpinStarted = new Signal();					onSlotSpinEnded = new Signal( Boolean, Number );										onMenuIconSelected = new Signal();					onWeaponPlacedOnInvalidSpot = new Signal( AbstractGameObject );					onWeaponDeletedOnInvalidSpot = new Signal();					onMenuDeleteSelected = new Signal();					onWeaponAdded = new Signal();										EventNotificationCenter.getInstance().addSignalListener( BoogaEvent.ON_LANGUAGE_CHANGED, handleLanguageChanged, this );					EventNotificationCenter.getInstance().addSignalListener( BoogaEvent.ON_CHEAT_DETECTED, handleCheatDetected, this );										var i:int, j:int;										//displayLayer_mc.init();					//environmentObjectsDisplayLayer_mc.init();					//villageObjectsDisplayLayer_mc.init();										var gameboardMenuEnemyCountIcon:GameboardMenuEnemyCountIcon;										_enemyIconClips = new Vector.<GameboardMenuEnemyCountIcon>;										gameboardMenuEnemyCountIcon = new GameboardMenuEnemyCountIcon();					gameboardMenuEnemyCountIcon.contentClip = enemies_mc.enemyIcon1_mc;					gameboardMenuEnemyCountIcon.init();					_enemyIconClips.push( gameboardMenuEnemyCountIcon );										gameboardMenuEnemyCountIcon = new GameboardMenuEnemyCountIcon();					gameboardMenuEnemyCountIcon.contentClip = enemies_mc.enemyIcon2_mc;					gameboardMenuEnemyCountIcon.init();					_enemyIconClips.push( gameboardMenuEnemyCountIcon );										gameboardMenuEnemyCountIcon = new GameboardMenuEnemyCountIcon();					gameboardMenuEnemyCountIcon.contentClip = enemies_mc.enemyIcon3_mc;					gameboardMenuEnemyCountIcon.init();					_enemyIconClips.push( gameboardMenuEnemyCountIcon );										gameboardMenuEnemyCountIcon = new GameboardMenuEnemyCountIcon();					gameboardMenuEnemyCountIcon.contentClip = enemies_mc.enemyIcon4_mc;					gameboardMenuEnemyCountIcon.init();					_enemyIconClips.push( gameboardMenuEnemyCountIcon );										gameboardMenuEnemyCountIcon = new GameboardMenuEnemyCountIcon();					gameboardMenuEnemyCountIcon.contentClip = enemies_mc.enemyIcon5_mc;					gameboardMenuEnemyCountIcon.init();					_enemyIconClips.push( gameboardMenuEnemyCountIcon );										gameboardMenuEnemyCountIcon = new GameboardMenuEnemyCountIcon();					gameboardMenuEnemyCountIcon.contentClip = enemies_mc.enemyIcon6_mc;					gameboardMenuEnemyCountIcon.init();					_enemyIconClips.push( gameboardMenuEnemyCountIcon );										gameboardMenuEnemyCountIcon = new GameboardMenuEnemyCountIcon();					gameboardMenuEnemyCountIcon.contentClip = enemies_mc.enemyIcon7_mc;					gameboardMenuEnemyCountIcon.init();					_enemyIconClips.push( gameboardMenuEnemyCountIcon );										gameboardMenuEnemyCountIcon = new GameboardMenuEnemyCountIcon();					gameboardMenuEnemyCountIcon.contentClip = enemies_mc.enemyIcon8_mc;					gameboardMenuEnemyCountIcon.init();					_enemyIconClips.push( gameboardMenuEnemyCountIcon );										for( i=0; i<_enemyIconClips.length; ++i )					{						_enemyIconClips[i].contentClip.visible = false;						//_enemyIconClips[i].contentClip.mouseChildren = false;						//_enemyIconClips[i].contentClip.mouseEnabled = false;						_enemyIconClips[i].onRolledOver.add( handleEnemyIconRolledOver );						_enemyIconClips[i].onRolledOut.add( handleEnemyIconRolledOut );					}										_resultScreenLoseClip = new ResultScreenLose();					_resultScreenLoseClip.contentClip = resultScreenLose_mc;					_resultScreenLoseClip.init();					_resultScreenLoseClip.hide();					_resultScreenLoseClip.addEventListener( BoogaEvent.ON_PLAY_AGAIN, handleResultScreenLosePlayAgainClicked );					_resultScreenLoseClip.addEventListener( BoogaEvent.ON_ISLAND_SELECT, handleResultScreenLoseIslandSelectClicked );					_resultScreenLoseClip.addEventListener( BoogaEvent.ON_RESULT_SCREEN_LOSE_ANIMATION_DONE, handleResultScreenLoseAnimationDone );										_resultScreenWinClip = new ResultScreenWin();					_resultScreenWinClip.contentClip = resultScreenWin_mc;					_resultScreenWinClip.init();					_resultScreenWinClip.hide();					_resultScreenWinClip.addEventListener( BoogaEvent.ON_RESULT_SCREEN_WIN_ANIMATION_DONE, handleResultScreenWinAnimationDone );										//resultScreenLose_mc.visible = false;					//resultScreenLose_mc.addEventListener( BoogaEvent.ON_PLAY_AGAIN, handleResultScreenLosePlayAgainClicked );					//resultScreenLose_mc.addEventListener( BoogaEvent.ON_ISLAND_SELECT, handleResultScreenLoseIslandSelectClicked );										//resultScreenWin_mc.visible = false;					//resultScreenWin_mc.addEventListener( BoogaEvent.ON_RESULT_SCREEN_WIN_ANIMATION_DONE, handleResultScreenWinAnimationDone );										_pauseScreenViewClip = new PauseScreenView();					_pauseScreenViewClip.contentClip = pauseScreen_mc;					_pauseScreenViewClip.init();					_pauseScreenViewClip.hide();					//_pauseScreenViewClip.addEventListener( GameLevelEvent.ON_RESUME_CLICKED, handlePauseScreenResumeClicked );										digText_mc.visible = false;					//TextFormatting.formatTextWithFontName( digText_mc.digTextAnimation_mc.label1_txt, "Dig!!", "SF Fedora", false, TextFieldAutoSize.CENTER );					//TextFormatting.formatTextWithFontName( digText_mc.digTextAnimation_mc.label2_txt, "Dig!!", "SF Fedora", false, TextFieldAutoSize.CENTER );					/*					TextFormatting.formatTextWithFontName( digText_mc.digTextAnimation_mc.label1_txt, StringsIndex.getInstance().getStringByName("DIG_DIG"), "Lithos Pro Black", false, TextFieldAutoSize.CENTER );					TextFormatting.formatTextWithFontName( digText_mc.digTextAnimation_mc.label2_txt, StringsIndex.getInstance().getStringByName("DIG_DIG"), "Lithos Pro Black", false, TextFieldAutoSize.CENTER );					var digTextTF:TextFormat = digText_mc.digTextAnimation_mc.label1_txt.getTextFormat();					var digText2TF:TextFormat = digText_mc.digTextAnimation_mc.label2_txt.getTextFormat();										while( digText_mc.digTextAnimation_mc.label1_txt.width > _digTextMaxWidth )					{						digTextTF.size = Number(digTextTF.size) - 1;						digText_mc.digTextAnimation_mc.label1_txt.setTextFormat( digTextTF );						digText_mc.digTextAnimation_mc.label2_txt.setTextFormat( digTextTF );					}										digText2TF.size = digTextTF.size;					digText_mc.digTextAnimation_mc.label2_txt.setTextFormat( digText2TF );					*/					handleLanguageChanged(null);										_digResultViewClip = new DigResultView();					_digResultViewClip.contentClip = digResultView_mc;					_digResultViewClip.init();					_digResultViewClip.hide();					//_digResultViewClip.addEventListener( BoogaEvent.ON_DIG_RESULT_VIEW_NEXT, handleDigResultViewNextClicked );					//_digResultViewClip.addEventListener( BoogaEvent.ON_DIG_RESULT_VIEW_LEAVE_EARLY, handleDigResultViewLeaveEarlyClicked );					_digResultViewClip.onNextClicked.add( handleDigResultViewNextClicked );					_digResultViewClip.onDigEarlyClicked.add( handleDigResultViewDigEarlyClicked );					_digResultViewClip.onIslandSelectClicked.add( handleDigResultViewIslandSelectClicked );					_digResultViewClip.onPlayAgainClicked.add( handleDigResultViewPlayAgainClicked );										//digResultView_mc.visible = false;					//digResultView_mc.addEventListener( BoogaEvent.ON_DIG_RESULT_VIEW_NEXT, handleDigResultViewNextClicked );					//digResultView_mc.addEventListener( BoogaEvent.ON_DIG_RESULT_VIEW_LEAVE_EARLY, handleDigResultViewLeaveEarlyClicked );										_newDiscoveriesViewClip = new NewDiscoveriesView();					_newDiscoveriesViewClip.contentClip = newDiscoveriesView_mc;					_newDiscoveriesViewClip.init();					_newDiscoveriesViewClip.hide();					//_newDiscoveriesViewClip.addEventListener( BoogaEvent.ON_ISLAND_SELECT, handleNewDiscoveriesIslandSelectClicked );					//_newDiscoveriesViewClip.addEventListener( BoogaEvent.ON_PLAY_AGAIN, handleNewDiscoveriesPlayAgainClicked );					//_newDiscoveriesViewClip.addEventListener( BoogaEvent.ON_NEXT, handleNewDiscoveriesNextClicked );					_newDiscoveriesViewClip.onIslandSelectClicked.add( handleNewDiscoveriesIslandSelectClicked );					_newDiscoveriesViewClip.onPlayAgainClicked.add( handleNewDiscoveriesPlayAgainClicked );					_newDiscoveriesViewClip.onNextClicked.add( handleNewDiscoveriesNextClicked );										_levelEndResultViewClip = new LevelEndResultView();					_levelEndResultViewClip.contentClip = levelEndResultView_mc;					_levelEndResultViewClip.init();					_levelEndResultViewClip.hide();					_levelEndResultViewClip.onIslandSelectClicked.add( handleLevelEndResultIslandSelectClicked );					_levelEndResultViewClip.onPlayAgainClicked.add( handleLevelEndResultPlayAgainClicked );					_levelEndResultViewClip.onNextClicked.add( handleLevelEndResultNextClicked );										//newDiscoveriesView_mc.visible = false;					//newDiscoveriesView_mc.addEventListener( BoogaEvent.ON_ISLAND_SELECT, handleNewDiscoveriesIslandSelectClicked );					//newDiscoveriesView_mc.addEventListener( BoogaEvent.ON_PLAY_AGAIN, handleNewDiscoveriesPlayAgainClicked );					//newDiscoveriesView_mc.addEventListener( BoogaEvent.ON_NEXT, handleNewDiscoveriesNextClicked );										//_inIsometricView = true;					_isometricStartPoint = new Point( startPointMarkerIsometric_mc.x, startPointMarkerIsometric_mc.y );					_2DStartPoint = new Point( startPointMarker2D_mc.x, startPointMarker2D_mc.y );					_isometricStartPointOffset = GameLevelUtil.getPositionInIsometric( new Point(0, -(GameLevelDataIndex.getInstance().boardMaxRows+1)*GameLevelUtil.TILE_2D_HEIGHT) );										startPointMarkerIsometric_mc.visible = false;					startPointMarker2D_mc.visible = false;					//removeChild( startPointMarkerIsometric_mc );					//removeChild( startPointMarker2D_mc );										//this.scaleX = 0.5;					//this.scaleY = 0.5;										_environmentDisplayObjects = new Vector.<Vector.<Vector.<EnvironmentDisplayObject>>>;					for( i=0; i<GameLevelDataIndex.getInstance().boardMaxRows; ++i )					{						_environmentDisplayObjects[i] = new Vector.<Vector.<EnvironmentDisplayObject>>;						for( j=0; j<GameLevelDataIndex.getInstance().boardMaxColumns; ++j )						{							_environmentDisplayObjects[i][j] = new Vector.<EnvironmentDisplayObject>;						}					}					_villageDisplayObjects = new Vector.<Vector.<Vector.<EnvironmentDisplayObject>>>;					for( i=0; i<GameLevelDataIndex.getInstance().boardMaxRows; ++i )					{						_villageDisplayObjects[i] = new Vector.<Vector.<EnvironmentDisplayObject>>;						for( j=0; j<GameLevelDataIndex.getInstance().boardMaxColumns; ++j )						{							_villageDisplayObjects[i][j] = new Vector.<EnvironmentDisplayObject>;						}					}										_tiles = new Vector.<Vector.<GameboardTile>>;					_tilesLength = 0;					_gateTiles = new Vector.<GameboardTile>;					_diggingTiles1 = new Vector.<Vector.<DiggingTile>>;					_diggingTiles2 = new Vector.<Vector.<DiggingTile>>;					_diggingTiles3 = new Vector.<Vector.<DiggingTile>>;					_activeDiggingTiles = new Vector.<DiggingTile>;					_villageTiles = new Vector.<Vector.<GameboardTile>>;										_diggingSpotViews = new Vector.<DiggingSpotView>;										_chickenMovementArea1 = new ChickenMovementArea();					_chickenMovementArea1.contentClip = chickenArea1_mc;					_chickenMovementArea1.init();					//_chickenMovementArea1.positionIn2D.x = _isometricStartPoint.x + 810;					//_chickenMovementArea1.y = _isometricStartPoint.y;										_chickenMovementArea2 = new ChickenMovementArea();					_chickenMovementArea2.contentClip = chickenArea2_mc;					_chickenMovementArea2.init();					//_chickenMovementArea2.x = _isometricStartPoint.x;					//_chickenMovementArea2.y = _isometricStartPoint.y + 810;										_chickenMovementArea3 = new ChickenMovementArea();					_chickenMovementArea3.contentClip = chickenArea3_mc;					_chickenMovementArea3.init();					//_chickenMovementArea3.x = _isometricStartPoint.x - 270;					//_chickenMovementArea3.y = _isometricStartPoint.y;										_chickenMovementArea1.positionIn2D = new Point( 0, 0 );					_chickenMovementArea2.positionIn2D = new Point( 0, 0 );					_chickenMovementArea3.positionIn2D = new Point( 0, 0 );										//_chickenMovementArea1.setPoints( new Point(720, -45), new Point(1000, -45), new Point(1000, 675), new Point(720, 675) );					//_chickenMovementArea2.setPoints( new Point(-45, 720), new Point(675, 720), new Point(675, 1200), new Point(-40, 1200) );					//_chickenMovementArea3.setPoints( new Point(-200, -45), new Point(-90, -45), new Point(-90, 675), new Point(-200, 675) );					//_chickenMovementArea1.setPoints( new Point(765, -45), new Point(900, -45), new Point(900, 675), new Point(675, 675) );										//_chickenMovementArea1.setPoints( new Point(765, -45), new Point(945, -45), new Point(945, 675), new Point(765, 675) );					//_chickenMovementArea2.setPoints( new Point(-45, 765), new Point(675, 765), new Point(675, 945), new Point(-45, 945) );					//_chickenMovementArea3.setPoints( new Point(-315, -45), new Point(-135, -45), new Point(-135, 675), new Point(-315, 675) );										//trace( tilesContainer_mc.width );					//trace( tilesContainer_mc.height );										/*					_chickenMovementArea1.graphics.beginFill(0x000000, 1);					_chickenMovementArea1.graphics.moveTo( -100, 0 );					_chickenMovementArea1.graphics.lineTo( -10, 0 );					//_chickenMovementArea1.graphics.lineTo( 					*/										_environmentObjectsDisplayLayerClip = new GameLevelDisplayLayer();					_environmentObjectsDisplayLayerClip.contentClip = environmentObjectsDisplayLayer_mc;					_environmentObjectsDisplayLayerClip.init();										_displayLayerClip = new GameLevelDisplayLayer();					_displayLayerClip.contentClip = displayLayer_mc;					_displayLayerClip.init();										weaponMarker_mc.alpha = 1;					weaponMarker_mc.mouseChildren = false;					weaponMarker_mc.mouseEnabled = false;					weaponMarker_mc.visible = false;										//weaponPlacement_mc.visible = false;										_weaponRangeClips = new Vector.<AnimationDisplayObject>;					_weaponPoweredUpClips = new Vector.<AnimationDisplayObject>;					_weaponAdditionClips = new Vector.<AnimationDisplayObject>;										_gameboardMenuClip = new GameboardMenu();					_gameboardMenuClip.contentClip = gameboardMenu_mc;					_gameboardMenuClip.init();										_gameboardMenuClip.hide();					/*					_replayClip = new DynamicUIButton();					_replayClip.dynamicClip = replay_mc;					_replayClip.dynamicInit();					_replayClip.dynamicClip.visible = false;					_replayClip.addEventListener( "onClick", handleReplayClicked, false, 0, true );										_exitClip = new DynamicUIButton();					_exitClip.dynamicClip = exit_mc;					_exitClip.dynamicInit();					_exitClip.dynamicClip.visible = false;					_exitClip.addEventListener( "onClick", handleExitClicked, false, 0, true );					*/										_giftClip = new GameboardMenuGift();					_giftClip.contentClip = gift_mc;					_giftClip.init();					_giftClip.hide();										_slotMachineClip = new SlotMachineDisplayObject();					_slotMachineClip.contentClip = slotMachine_mc;					_slotMachineClip.init();					_slotMachineClip.hide();										//godAttackAnimation_mc.mouseChildren = false;										_buyChickenClip = new DynamicUIButton();					_buyChickenClip.dynamicClip = buyChicken_mc;					_buyChickenClip.dynamicInit();					_buyChickenClip.dynamicClip.visible = false;										_chickenIndicatorClip = new ChickenIndicator();					_chickenIndicatorClip.contentClip = chickenIndicator_mc;					_chickenIndicatorClip.init();					_chickenIndicatorClip.hide();										mouseDigIcon_mc.visible = false;					mouseDigIcon_mc.mouseChildren = false;					mouseDigIcon_mc.mouseEnabled = false;										levelLoading_mc.visible = false;										backgroundContainer_mc.cacheAsBitmap = true;					backgroundContainer_mc.mouseChildren = false;					backgroundContainer_mc.mouseEnabled = false;					foregroundContainer_mc.cacheAsBitmap = true;					foregroundContainer_mc.mouseChildren = false;					foregroundContainer_mc.mouseEnabled = false;										scaledElementContainer_mc.scaleX = scaledElementContainer_mc.scaleY = .8;					chickenAnimation_mc.scaleX = chickenAnimation_mc.scaleY = .8;					//tilesContainer_mc.scaleX = tilesContainer_mc.scaleY = .7;					//displayLayer_mc.scaleX = displayLayer_mc.scaleY = .7;					//projectileClipsContainer_mc.scaleX = projectileClipsContainer_mc.scaleY = .7;					//chickenArea1_mc.scaleX = chickenArea1_mc.scaleY = .7;					//chickenArea2_mc.scaleX = chickenArea2_mc.scaleY = .7;					//chickenArea3_mc.scaleX = chickenArea3_mc.scaleY = .7;					//weaponMarker_mc.scaleX = weaponMarker_mc.scaleY = .7;					//newWeaponContainer_mc.scaleX = newWeaponContainer_mc.scaleY = .7;					//backgroundContainer_mc.scaleX = backgroundContainer_mc.scaleY = .7;					//this.tileOpacity = 1;										digAnimation_mc.addEventListener( "onAnimationComplete", handleDigAnimationComplete, false, 0, true );					digAnimation_mc.addEventListener( "onDigSoundStart", handleDigAnimationSoundStart, false, 0, true );										inIsometricView = true;										initTiles();					/*					var fullScreenBound:Rectangle = backgroundContainer_mc.getBounds(_contentClip.stage);										if( Capabilities.screenResolutionX > fullScreenBound.width && Capabilities.screenResolutionY > fullScreenBound.height )					{						_contentClip.stage.fullScreenSourceRect = new Rectangle( fullScreenBound.x, fullScreenBound.y, fullScreenBound.width, fullScreenBound.height );						_contentClip.stage.scaleMode = StageScaleMode.NO_BORDER;						MainGameDataIndex.getInstance().outOfBoundsRectangle = new Rectangle( fullScreenBound.x, fullScreenBound.y, fullScreenBound.width, fullScreenBound.height );					}					else					{						_contentClip.stage.scaleMode = StageScaleMode.NO_SCALE;						MainGameDataIndex.getInstance().outOfBoundsRectangle = new Rectangle( 0, 0, _contentClip.stage.stageWidth, _contentClip.stage.stageHeight );					}					*/					dispatchEvent( new Event(Event.INIT) );				}							/** handleCheatDetected			  *	---------------------------------------------------------------------------- *			  *	If cheats are enabled, this will check for any cheats that are entered.			  *	---------------------------------------------------------------------------- */			 	protected function handleCheatDetected( customParameters:Object ):void				{					if( customParameters.keywordIndex == 15 )					{						version_mc.visible = true;					}				}							/** toggleFullScreen			  *	---------------------------------------------------------------------------- */				public function toggleFullScreen( fullScreen:Boolean ):void				{					if( fullScreen )					{						gift_mc.y = _giftNormalScreenY + 20;						gameboardMenu_mc.y = _gameboardMenuNormalScreenY + 20;						chickenIndicator_mc.y = _chickenIndicatorNormalScreenY + 20;						buyChicken_mc.y = _buyChickenNormalScreenY + 20;						enemies_mc.y = _enemiesNormalScreenY + 20;						slotMachine_mc.y = _slotMachineNormalScreenY + 20;												_gameboardController.chickenDisplayObjectController.updateChickenFlyToPosition();												_chickenSlotMachinePosition = UtilFunctions.localToLocal( slotMachine_mc, chickenAnimation_mc );						_chickenSlotMachinePosition.x += 50;						_chickenSlotMachinePosition.y += 50;					}					else					{						gift_mc.y = _giftNormalScreenY;						gameboardMenu_mc.y = _gameboardMenuNormalScreenY;						chickenIndicator_mc.y = _chickenIndicatorNormalScreenY;						buyChicken_mc.y = _buyChickenNormalScreenY;						enemies_mc.y = _enemiesNormalScreenY;						slotMachine_mc.y = _slotMachineNormalScreenY;												_gameboardController.chickenDisplayObjectController.updateChickenFlyToPosition();												_chickenSlotMachinePosition = UtilFunctions.localToLocal( slotMachine_mc, chickenAnimation_mc );						_chickenSlotMachinePosition.x += 50;						_chickenSlotMachinePosition.y += 50;					}				}							/** updateOnEnterFrame			  *	---------------------------------------------------------------------------- */				public function updateOnEnterFrame():void				{					for( var i:int=0; i<_weaponRangeClips.length; ++i )					{						if( _weaponRangeClips[i].running )						{							_weaponRangeClips[i].showNextAnimation();						}					}										for( i=0; i<_weaponPoweredUpClips.length; ++i )					{						if( _weaponPoweredUpClips[i].running )						{							_weaponPoweredUpClips[i].showNextAnimation();						}					}										_chickenIndicatorClip.updateOnEnterFrame();				}							/** initTiles			  *	---------------------------------------------------------------------------- */				protected function initTiles():void				{					var i:int, j:int;					var tile:GameboardTile;										var boardMaxRows = GameLevelDataIndex.getInstance().boardMaxRows;					var boardMaxColumns = GameLevelDataIndex.getInstance().boardMaxColumns;					var tileClass:Class = getDefinitionByName("GameboardTileLibrary") as Class;										//var gate:GateDisplayObject;					//var gateClass:Class = getDefinitionByName("GateDisplayObjectLibrary") as Class;					var gateTile:GameboardTile;										for( i=0; i<boardMaxRows; ++i )					{						//_tiles[i] = new Array();						_tiles[i] = new Vector.<GameboardTile>;												for( j=boardMaxColumns-1; j>=0; --j )						//for( i=0; i<boardMaxColumns; ++j )						{							tile = new GameboardTile();							tile.contentClip = new tileClass();							tile.init();							tile.layerNumber = 8 + boardMaxRows - j + i;							tile.inIsometricView = _inIsometricView;							tile.tileType = GameboardTile.TILE_TYPE_PLACEABLE;							tile.tileWidth = GameLevelUtil.TILE_2D_WIDTH;							tile.tileHeight = GameLevelUtil.TILE_2D_HEIGHT;							tile.x = (j*GameLevelUtil.TILE_2D_WIDTH);							tile.y = (i*GameLevelUtil.TILE_2D_HEIGHT);							tile.positionIn2D = new Point(tile.x, tile.y);							tile.row = i;							tile.column = j;							tile.id = (i * boardMaxRows) + j;							tile.contentClip.name = "tile_"+i+"_"+j;							tile.gameboardReference = this;							tile.editable = false;							tile.render();							//tile.addEventListener( "onTileClicked", handleGameboardTileClicked, false, 0, true );														//trace( "tile.id: "+tile.id );														//trace( tile.contentClip.name+" x: "+tile.x+", y:"+tile.y );														tilesContainer_mc.addChild( tile.contentClip );														//trace( tile+".layerNumber: "+tile.layerNumber );														//_tiles[i].push( tile );							_tiles[i].splice( 0, 0, tile );														//trace( tile.contentClip.name+".layerNumber: "+tile.layerNumber );							tile = null;						}												//trace( _tiles[i] );					}										_tilesLength = boardMaxRows;										GameLevelDataIndex.getInstance().gameTilesBounds = new Rectangle( -45, -45, 720, 720 );										for( j=0; j<boardMaxColumns; ++j )					{						gateTile = new GameboardTile();						gateTile.contentClip = new tileClass();						gateTile.init();						gateTile.inIsometricView = _inIsometricView;						gateTile.tileType = GameboardTile.TILE_TYPE_GATE;						gateTile.tileWidth = GameLevelUtil.TILE_2D_WIDTH;						gateTile.tileHeight = GameLevelUtil.TILE_2D_HEIGHT;						gateTile.x = j * GameLevelUtil.TILE_2D_WIDTH;						gateTile.y = -GameLevelUtil.TILE_2D_HEIGHT;						gateTile.positionIn2D = new Point( gateTile.x, gateTile.y );						gateTile.row = -1;						gateTile.column = j;						gateTile.layerNumber = 15 - j;						gateTile.id = boardMaxRows * boardMaxColumns + j;						gateTile.contentClip.name = "gateTile_"+i+"_"+j;						gateTile.gameboardReference = this;						gateTile.editable = false;						gateTile.render();												//trace( "gateTile.id: "+gateTile.id );						//trace( gateTile+".layerNumber: "+gateTile.layerNumber );												tilesContainer_mc.addChild( gateTile.contentClip );												_gateTiles.push( gateTile );												gateTile = null;					}										for( i=0; i<boardMaxRows; ++i )					{						_villageTiles[i] = new Vector.<GameboardTile>;						for( j=boardMaxColumns-1; j>=0; --j )						{							tile = new GameboardTile();							tile.contentClip = new tileClass();							tile.init();							tile.layerNumber = boardMaxRows - j + i - 1;							tile.inIsometricView = _inIsometricView;							tile.tileType = GameboardTile.TILE_TYPE_PLACEABLE;							tile.tileWidth = GameLevelUtil.TILE_2D_WIDTH;							tile.tileHeight = GameLevelUtil.TILE_2D_HEIGHT;							tile.x = (j*GameLevelUtil.TILE_2D_WIDTH);							tile.y = ((-boardMaxRows+i-1)*GameLevelUtil.TILE_2D_HEIGHT);							tile.positionIn2D = new Point(tile.x, tile.y);							tile.row = i;							tile.column = j;							tile.id = (i * boardMaxRows) + j;							tile.contentClip.name = "villageTile_"+i+"_"+j;							tile.gameboardReference = this;							tile.editable = false;							tile.render();														//trace( tile.contentClip.name+".layerNumber: "+tile.layerNumber );														villageTilesContainer_mc.addChild( tile.contentClip );														_villageTiles[i].splice( 0, 0, tile );						}					}										var diggingTile:DiggingTile;										//Creating digging tiles for area 1					for( i=0; i<boardMaxRows; ++i )					{						_diggingTiles1[i] = new Vector.<DiggingTile>;						for( j=0; j<boardMaxColumns; ++j )						{							diggingTile = new DiggingTile();							diggingTile.contentClip = new tileClass();							diggingTile.init();							diggingTile.layerNumber = boardMaxRows - 1 + i - j;							diggingTile.inIsometricView = _inIsometricView;							diggingTile.tileType = GameboardTile.TILE_TYPE_PLACEABLE;							diggingTile.tileWidth = GameLevelUtil.TILE_2D_WIDTH;							diggingTile.tileHeight = GameLevelUtil.TILE_2D_HEIGHT;							diggingTile.x = ((boardMaxColumns)*GameLevelUtil.TILE_2D_WIDTH) + (j*GameLevelUtil.TILE_2D_WIDTH);							diggingTile.y = (i*GameLevelUtil.TILE_2D_HEIGHT);							diggingTile.positionIn2D = new Point(diggingTile.x, diggingTile.y);							diggingTile.row = i;							diggingTile.column = j;							diggingTile.area = 0;							diggingTile.id = (i * boardMaxRows) + j;							diggingTile.contentClip.name = "diggingTile1_"+i+"_"+j;							diggingTile.gameboardReference = this;							diggingTile.editable = false;							diggingTile.render();														//trace( diggingTile+".layerNumber: "+diggingTile.layerNumber );														tilesContainer_mc.addChild( diggingTile.contentClip );							_diggingTiles1[i].push( diggingTile );							diggingTile = null;						}					}										//Creating digging tiles for area 2					for( i=0; i<boardMaxRows; ++i )					{						_diggingTiles2[i] = new Vector.<DiggingTile>;						for( j=0; j<boardMaxColumns; ++j )						{							diggingTile = new DiggingTile();							diggingTile.contentClip = new tileClass();							diggingTile.init();							diggingTile.layerNumber = 16 + boardMaxRows + i - j;							diggingTile.inIsometricView = _inIsometricView;							diggingTile.tileType = GameboardTile.TILE_TYPE_PLACEABLE;							diggingTile.tileWidth = GameLevelUtil.TILE_2D_WIDTH;							diggingTile.tileHeight = GameLevelUtil.TILE_2D_HEIGHT;							diggingTile.x = (j*GameLevelUtil.TILE_2D_WIDTH);							diggingTile.y = ((boardMaxRows)*GameLevelUtil.TILE_2D_HEIGHT) + (i*GameLevelUtil.TILE_2D_HEIGHT);							diggingTile.positionIn2D = new Point(diggingTile.x, diggingTile.y);							diggingTile.row = i;							diggingTile.column = j;							diggingTile.area = 1;							diggingTile.id = (i * boardMaxRows) + j;							diggingTile.contentClip.name = "diggingTile2_"+i+"_"+j;							diggingTile.gameboardReference = this;							diggingTile.editable = false;							diggingTile.render();														//trace( diggingTile+".layerNumber: "+diggingTile.layerNumber );														tilesContainer_mc.addChild( diggingTile.contentClip );							_diggingTiles2[i].push( diggingTile );							diggingTile = null;						}					}										//Creating digging tiles for area 3					for( i=0; i<boardMaxRows; ++i )					{						_diggingTiles3[i] = new Vector.<DiggingTile>;						for( j=0; j<boardMaxColumns; ++j )						{							diggingTile = new DiggingTile();							diggingTile.contentClip = new tileClass();							diggingTile.init();							diggingTile.layerNumber = 16 + boardMaxRows + i - j;							diggingTile.inIsometricView = _inIsometricView;							diggingTile.tileType = GameboardTile.TILE_TYPE_PLACEABLE;							diggingTile.tileWidth = GameLevelUtil.TILE_2D_WIDTH;							diggingTile.tileHeight = GameLevelUtil.TILE_2D_HEIGHT;							diggingTile.x = (-(boardMaxColumns)*GameLevelUtil.TILE_2D_WIDTH) + (j*GameLevelUtil.TILE_2D_WIDTH);							diggingTile.y = (i*GameLevelUtil.TILE_2D_HEIGHT);							diggingTile.positionIn2D = new Point(diggingTile.x, diggingTile.y);							diggingTile.row = i;							diggingTile.column = j;							diggingTile.area = 2;							diggingTile.id = (i * boardMaxRows) + j;							diggingTile.contentClip.name = "diggingTile3_"+i+"_"+j;							diggingTile.gameboardReference = this;							diggingTile.editable = false;							diggingTile.render();														//trace( diggingTile+".layerNumber: "+diggingTile.layerNumber );														tilesContainer_mc.addChild( diggingTile.contentClip );							_diggingTiles3[i].push( diggingTile );							diggingTile = null;						}					}				}							/** loadGameLevelBackground			  *	---------------------------------------------------------------------------- *			  *	Loads the game level background.			  *	---------------------------------------------------------------------------- */			 	public function loadGameLevelBackground( id:String ):void				{					if( _currentBackgroundId == id )						return;										//trace( "load in new background" );										_currentBackgroundId = id;										if( _backgroundClip != null )					{						backgroundContainer_mc.cacheAsBitmap = false;						backgroundContainer_mc.removeChild( _backgroundClip );						_backgroundClip = null;					}										if( _foregroundClip != null )					{						foregroundContainer_mc.cacheAsBitmap = false;						foregroundContainer_mc.removeChild( _foregroundClip );						_foregroundClip = null;					}										var islandClip:MovieClip = new (getDefinitionByName(id) as Class)();										_backgroundClip = islandClip.background_mc;					backgroundContainer_mc.addChild( _backgroundClip );					backgroundContainer_mc.cacheAsBitmap = true;										if( _backgroundClip != null && _backgroundClip.animation_mc != null )						_backgroundClip.animation_mc.stop();										_foregroundClip = islandClip.foreground_mc;					foregroundContainer_mc.addChild( _foregroundClip );					foregroundContainer_mc.cacheAsBitmap = false;										if( _foregroundClip != null && _foregroundClip.animation_mc != null )						_foregroundClip.animation_mc.stop();				}							/** showGameLevelBackground			  *	---------------------------------------------------------------------------- *			  *	Shows the game level background elements.			  *	---------------------------------------------------------------------------- */			 	public function showGameLevelBackground():void				{					backgroundContainer_mc.visible = true;					foregroundContainer_mc.visible = true;				}							/** hideGameLevelBackground			  *	---------------------------------------------------------------------------- *			  *	Hides the game level background elements.			  *	---------------------------------------------------------------------------- */			 	public function hideGameLevelBackground():void				{					backgroundContainer_mc.visible = false;					foregroundContainer_mc.visible = false;				}								public function initIntroAnimation():void				{					_introAnimationViewClip = new IntroAnimationView();					_introAnimationViewClip.contentClip = new (getDefinitionByName("IntroAnimationLibrary") as Class)();					_introAnimationViewClip.init();					introAnimationContainer_mc.addChild( _introAnimationViewClip.contentClip );										_introAnimationViewClip.startIntro();				}								public function killIntroAnimation():void				{					trace( 'killIntroAnimation();' );										if( _introAnimationViewClip != null )					{						_introAnimationViewClip.stopIntro();						introAnimationContainer_mc.removeChild( _introAnimationViewClip.contentClip );						_introAnimationViewClip.kill();						_introAnimationViewClip = null;					}				}							/** start			  *	---------------------------------------------------------------------------- *			  *	Starts the game.			  *	---------------------------------------------------------------------------- */			 	public function start():void				{					//displayLayer_mc.init();										Mouse.show();										//blackBg_mc.visible = false;										_weaponRangeClipsVisible = false;										var topLeft:Point = new Point();					var topRight:Point = new Point();					var bottomLeft:Point = new Point();					var bottomRight:Point = new Point();					var startX:Number = 810;					var startY:Number = 0;					var chickenMovementAreaData:ChickenMovementAreaData = _gameboardController.gameLevel.chickenMovementAreaDatas[0];										if( chickenMovementAreaData.topLeft.r == -1 && chickenMovementAreaData.topLeft.c == -1 )					{						_chickenMovementArea1.emptyArea = true;					}					else					{						_chickenMovementArea1.emptyArea = false;						topLeft = new Point(chickenMovementAreaData.topLeft.c*90 + startX - 45, chickenMovementAreaData.topLeft.r*90 + startY - 45);						topRight = new Point(chickenMovementAreaData.topRight.c*90 + startX + 45, topLeft.y);						bottomLeft = new Point(topLeft.x, chickenMovementAreaData.bottomLeft.r*90 + startY + 45);						bottomRight = new Point(topRight.x, bottomLeft.y);						_chickenMovementArea1.setPoints( topLeft, topRight, bottomRight, bottomLeft );					}										startX = 0;					startY = 810;					chickenMovementAreaData = _gameboardController.gameLevel.chickenMovementAreaDatas[1];										if( chickenMovementAreaData.topLeft.r == -1 && chickenMovementAreaData.topLeft.c == -1 )					{						_chickenMovementArea2.emptyArea = true;					}					else					{						_chickenMovementArea2.emptyArea = false;						topLeft = new Point( chickenMovementAreaData.topLeft.c*90 + startX - 45, chickenMovementAreaData.topLeft.r*90 + startY - 45 );						topRight = new Point( chickenMovementAreaData.topRight.c*90 + startX + 45, topLeft.y );						bottomLeft = new Point( topLeft.x, chickenMovementAreaData.bottomLeft.r*90 + startY + 45 );						bottomRight = new Point( topRight.x, bottomLeft.y );						_chickenMovementArea2.setPoints( topLeft, topRight, bottomRight, bottomLeft );					}										startX = -810;					startY = 0;					chickenMovementAreaData = _gameboardController.gameLevel.chickenMovementAreaDatas[2];										if( chickenMovementAreaData.topLeft.r == -1 && chickenMovementAreaData.topLeft.c == -1 )					{						_chickenMovementArea3.emptyArea = true;					}					else					{						_chickenMovementArea3.emptyArea = false;						topLeft = new Point( chickenMovementAreaData.topLeft.c*90 + startX - 45, chickenMovementAreaData.topLeft.r*90 + startY - 45 );						topRight = new Point( chickenMovementAreaData.topRight.c*90 + startX + 45, topLeft.y );						bottomLeft = new Point( topLeft.x, chickenMovementAreaData.bottomLeft.r*90 + startY + 45 );						bottomRight = new Point( topRight.x, bottomLeft.y );						_chickenMovementArea3.setPoints( topLeft, topRight, bottomRight, bottomLeft );					}										_chickenMovementArea1.inIsometricView = _inIsometricView;					_chickenMovementArea1.render();					_chickenMovementArea2.inIsometricView = _inIsometricView;					_chickenMovementArea2.render();					_chickenMovementArea3.inIsometricView = _inIsometricView;					_chickenMovementArea3.render();										showChickenAreas();										_resultScreenLoseClip.hide();					_resultScreenWinClip.hide();										_gameboardMenuClip.start();					//_gameboardMenuClip.addEventListener( GameLevelEvent.ON_MENU_ICON_SELECTED, handleGameboardMenuIconSelected, false, 0, true );					//_gameboardMenuClip.addEventListener( GameLevelEvent.ON_MENU_ICON_MOUSE_DOWN, handleGameboardMenuIconSelected, false, 0, true );					_gameboardMenuClip.onMenuIconSelected.add( handleGameboardMenuIconSelected );					_gameboardMenuClip.onMenuDeleteSelected.add( handleGameboardMenuDeleteSelected );					//_gameboardMenuClip.addEventListener( GameLevelEvent.ON_MENU_DELETE_SELECTED, handleGameboardMenuDeleteSelected, false, 0, true );					//_gameboardMenuClip.addEventListener( GameLevelEvent.ON_CHICKEN_INSUFFICIENT, handleInsufficientChickenToBuyWeapon, false, 0, true );					_gameboardMenuClip.onInsufficientChicken.add( handleInsufficientChickenToBuyWeapon );					_gameboardMenuClip.show();					/*					if( _weaponPlacementClip == null )					{						_weaponPlacementClip = new AnimationDisplayObject();						_weaponPlacementClip.contentClip = weaponPlacement_mc;						_weaponPlacementClip.init();						_weaponPlacementClip.animationObject = GameLevelDataIndex.getInstance().getAnimationObjectByCacheId("GoldenGlow");						_weaponPlacementClip.sourceBD = BitmapDataManager.getInstance().getBitmapData("GoldenGlow").bitmapData;						_weaponPlacementClip.initCanvas();					}					*/					if( !MainGameController.getInstance().currentUser.tutorialGameLevel || MainGameController.getInstance().currentUser.getUnlockedVillage(MainGameController.getInstance().currentUser.currentVillageId).villageOrder >= 4 )					{						_gameboardMenuClip.delete_mc.visible = true;					}					else					{						_gameboardMenuClip.delete_mc.visible = false;					}										if( _gameboardController.gameLevel.slotEnabled )					{						_slotMachineClip.start();						//_slotMachineClip.addEventListener( GameLevelEvent.ON_SLOT_SPIN_ENDS, handleSlotSpinEnds, false, 0, true );						//_slotMachineClip.addEventListener( GameLevelEvent.ON_SLOT_SPIN_STARTS, handleSlotSpinStarts, false, 0, true );						_slotMachineClip.onSlotSpinStarted.add( handleSlotSpinStarted );						_slotMachineClip.onSlotSpinEnded.add( handleSlotSpinEnded );						_slotMachineClip.show();					}										enemies_mc.visible = true;					//chickenIndicator_mc.visible = true;					_chickenIndicatorClip.show();																				if( _gameboardController.gameLevel.buyChickenEnabled )					{						_buyChickenClip.addEventListener( "onClick", handleBuyChickenClicked, false, 0, true );						_buyChickenClip.dynamicClip.visible = true;												_gameboardMenuClip.backgroundWide_mc.visible = true;						_gameboardMenuClip.background_mc.visible = false;												_giftClip.contentClip.x = 190;					}					else					{						_buyChickenClip.dynamicClip.visible = false;												_gameboardMenuClip.backgroundWide_mc.visible = false;						_gameboardMenuClip.background_mc.visible = true;												_giftClip.contentClip.x = 135;					}					/*					if( !MainGameController.getInstance().currentUser.tutorialGameLevel )					{						_exitClip.dynamicClip.visible = true;						_replayClip.dynamicClip.visible = true;					}					*/					if( GameLevelCurrentData.getInstance().gift != null )					{						_giftClip.initGift();						//_giftClip.addEventListener( "onGiftClicked", handleGiftClicked, false, 0, true );						_giftClip.onGiftClicked.add( handleGiftClicked );												if( !MainGameController.getInstance().currentUser.tutorialGameLevel )							_giftClip.show();					}					else					{						_giftClip.hide();					}										if( _backgroundClip != null && _backgroundClip.animation_mc != null )						_backgroundClip.animation_mc.play();										if( _foregroundClip != null && _foregroundClip.animation_mc != null )						_foregroundClip.animation_mc.play();										var i:int;										//TODO:					//	Include the decals/environment tiles here					//var envDisplayObject:EnvironmentDisplayObject;										//trace( "env objects length: "+_gameboardController.gameLevel.environmentObjects.length );					/**/					if( !_isEditor )					{						for( i=0; i<_gameboardController.gameLevel.environmentObjects.length; ++i )						{							addEnvironmentObject( _gameboardController.gameLevel.environmentObjects[i] );						}												for( i=0; i<_gameboardController.gameLevel.villageObjects.length; ++i )						{							addVillageObject( _gameboardController.gameLevel.villageObjects[i] );						}					}					/**/										_chickenSlotMachinePosition = UtilFunctions.localToLocal( slotMachine_mc, chickenAnimation_mc );					_chickenSlotMachinePosition.x += 50;					_chickenSlotMachinePosition.y += 50;										//pauseGame_mc.visible = true;					//unpauseGame_mc.visible = false;										_addingNewWeapon = false;					_addingNewGod = false;					_deletingWeapon = false;										projectileClipsContainer_mc.visible = true;										hideLoadingScreen();					hideInvisibleBlocker();				}							/** pause			  *	---------------------------------------------------------------------------- *			  *	Pauses the game and all the elements in the board.			  *	---------------------------------------------------------------------------- */			 	public function pause( displayPauseScreen:Boolean=true ):void				{					//pauseGame_mc.visible = false;					//unpauseGame_mc.visible = true;										_slotMachineClip.pause();										if( displayPauseScreen )					{						showLoadingScreen();						_pauseScreenViewClip.show();					}										if( _backgroundClip != null && _backgroundClip.animation_mc != null )						_backgroundClip.animation_mc.stop();										if( _foregroundClip != null && _foregroundClip.animation_mc != null )						_foregroundClip.animation_mc.stop();										var i:int, j:int, k:int;					var length1:int, length2:int, length3:int;										length1 = _environmentDisplayObjects.length;					for( i=0; i<length1; ++i )					{						length2 = _environmentDisplayObjects[i].length;						for( j=0; j<length2; ++j )						{							length3 = _environmentDisplayObjects[i][j].length;							for( k=0; k<length3; ++k )							{								_environmentDisplayObjects[i][j][k].pause();							}						}					}										length1 = _villageDisplayObjects.length;					for( i=0; i<_villageDisplayObjects.length; ++i )					{						length2 = _villageDisplayObjects[i].length;						for( j=0; j<length2; ++j )						{							length3 = _villageDisplayObjects[i][j].length;							for( k=0; k<length3; ++k )							{								_villageDisplayObjects[i][j][k].pause();							}						}					}				}							/** unpause			  *	---------------------------------------------------------------------------- *			  *	Unpauses the game and all the elements in the board.			  *	---------------------------------------------------------------------------- */			 	public function unpause():void				{					//pauseGame_mc.visible = true;					//unpauseGame_mc.visible = false;										_slotMachineClip.unpause();										hideInvisibleBlocker();					hideLoadingScreen();					_pauseScreenViewClip.hide();										if( _backgroundClip != null && _backgroundClip.animation_mc != null )						_backgroundClip.animation_mc.play();										if( _foregroundClip != null && _foregroundClip.animation_mc != null )						_foregroundClip.animation_mc.play();										var i:int, j:int, k:int;					var length1:int, length2:int, length3:int;										length1 = _environmentDisplayObjects.length;					for( i=0; i<length1; ++i )					{						length2 = _environmentDisplayObjects[i].length;						for( j=0; j<length2; ++j )						{							length3 = _environmentDisplayObjects[i][j].length;							for( k=0; k<length3; ++k )							{								_environmentDisplayObjects[i][j][k].unpause();							}						}					}										length1 = _villageDisplayObjects.length;					for( i=0; i<_villageDisplayObjects.length; ++i )					{						length2 = _villageDisplayObjects[i].length;						for( j=0; j<length2; ++j )						{							length3 = _villageDisplayObjects[i][j].length;							for( k=0; k<length3; ++k )							{								_villageDisplayObjects[i][j][k].unpause();							}						}					}				}							/** highlightWeaponRange			  *	---------------------------------------------------------------------------- *			  *	Highlights the weapon range, use the tiles if weapon is single lane.			  *	Use the circle range otherwise.			  *	---------------------------------------------------------------------------- */			 	public function highlightWeaponRange( item:AbstractGameObject, tile:GameboardTile, direction:int ):void				{					//if( !_weaponRangeClipsVisible )					//{						//trace( "highlightWeaponRange("+item+", "+tile+", "+direction+");" );												_weaponRangeClipsVisible = true;						var weaponRangeClip:AnimationDisplayObject;												if( item.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_SINGLE_LANE_INDEX) || item.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_MULTIPLE_DIRECTIONS_PROJECTILE_INDEX) )						{							//trace( "direction: "+direction );							var weaponRange:Vector.<GameboardTile> = _gameboardController.attackingDisplayObjectController.getTilesInAttackRangeForGameObject(item, tile, direction);							//trace( "weapon range: "+weaponRange );														//_weaponPlacementClip.contentClip.x = tilePosition.x;							//_weaponPlacementClip.contentClip.y = tilePosition.y;							//_weaponPlacementClip.startAnimation();							//_weaponPlacementClip.contentClip.visible = true;														var weaponRangeLength:int = weaponRange.length;														for( var i:int=0; i<weaponRangeLength; ++i )							{								if( _weaponRangeClips.length < weaponRangeLength )								{									addWeaponRangeClip();								}																weaponRangeClip = _weaponRangeClips[i];																weaponRangeClip.contentClip.x = weaponRange[i].contentClip.x - tile.contentClip.x;								weaponRangeClip.contentClip.y = weaponRange[i].contentClip.y - tile.contentClip.y;								weaponRangeClip.startAnimation();								weaponRangeClip.contentClip.visible = true;																//trace( "weaponRange x: "+weaponRangeClip.contentClip.x+", y: "+weaponRangeClip.contentClip.y );							}														//trace( "_weaponRangeClips.length: "+_weaponRangeClips.length );							//trace( "weaponRangeLength: "+weaponRangeLength );													}						else						{							if( _weaponRangeClips.length == 0 )							{								addWeaponRangeClip();							}														weaponRangeClip = _weaponRangeClips[0];							weaponRangeClip.contentClip.x = 0;							weaponRangeClip.contentClip.y = 0;							weaponRangeClip.startAnimation();							weaponRangeClip.contentClip.visible = true;														weaponRange_mc.visible = true;														//trace( "weaponRange_mc.x: "+weaponRange_mc.x );							//trace( "weaponRange_mc.y: "+weaponRange_mc.y );						}												var localPosition1:Point = UtilFunctions.localToLocal( tile.contentClip, scaledElementContainer_mc );						newWeaponContainer_mc.x = localPosition1.x;						newWeaponContainer_mc.y = localPosition1.y;						newWeaponContainer_mc.visible = true;						newWeaponRange_mc.x = newWeaponContainer_mc.x;						newWeaponRange_mc.y = newWeaponContainer_mc.y;						newWeaponRange_mc.visible = true;					//}				}							/** removeHighlightWeaponRange			  *	---------------------------------------------------------------------------- *			  *	Turns off the highlight weapon range.			  *	---------------------------------------------------------------------------- */			 	public function removeHighlightWeaponRange():void				{					stopWeaponRangeClipsAnimation();					newWeaponContainer_mc.visible = false;					_weaponRangeClipsVisible = false;					newWeaponRange_mc.visible = false;				}							/** stopWeaponRangeClipsAnimation			  *	---------------------------------------------------------------------------- *			  *	Stops the animated weapon range clips.			  *	---------------------------------------------------------------------------- */			 	public function stopWeaponRangeClipsAnimation():void				{					weaponRange_mc.visible = false;										for( var i:int=0; i<_weaponRangeClips.length; ++i )					{						if( _weaponRangeClips[i].running )						{							_weaponRangeClips[i].stopAnimation();							_weaponRangeClips[i].contentClip.visible = false;						}					}										_weaponRangeClipsVisible = false;				}							/** addWeaponRangeClip			  *	---------------------------------------------------------------------------- *			  *	Adds a weapon range clip if there's not enough clips to display current 			  *	weapon range.			  *	---------------------------------------------------------------------------- */			 	protected function addWeaponRangeClip():void				{					var weaponRangeClip:AnimationDisplayObject = new AnimationDisplayObject();						weaponRangeClip.contentClip = new (getDefinitionByName("DisplayObject.animation") as Class)();						weaponRangeClip.contentClip.mouseChildren = false;						weaponRangeClip.contentClip.mouseEnabled = false;						weaponRangeClip.contentClip.transform.colorTransform = new ColorTransform( 0, 0, 0, 1, 143, 237, 237, 0 );						weaponRangeClipsContainer_mc.addChild( weaponRangeClip.contentClip );						//weaponRangeClip.smoothing = false;						weaponRangeClip.init();						weaponRangeClip.animationObject = GameLevelDataIndex.getInstance().getAnimationObjectByCacheId("GoldenGlow");						weaponRangeClip.sourceBD = BitmapDataManager.getInstance().getBitmapData("GoldenGlow").bitmapData;						weaponRangeClip.initCanvas();						_weaponRangeClips.push( weaponRangeClip );				}								public function showTutorialTilePlacementOnLastTile():void				{					var lastTileIndex:int = _gameboardController.gameLevel.paths[0].length-1;					var tile:GameboardTile = _tiles[_gameboardController.gameLevel.paths[0][lastTileIndex].r][_gameboardController.gameLevel.paths[0][lastTileIndex].c];					var tilePosition:Point = scaledElementContainer_mc.globalToLocal(tile.contentClip.parent.localToGlobal(new Point(tile.x, tile.y)));										//trace( "tilePosition "+tilePosition );										tutorialTilePlacement_mc.x = tilePosition.x;					tutorialTilePlacement_mc.y = tilePosition.y;					tutorialTilePlacement_mc.visible = true;					tutorialTilePlacement_mc.play();				}								public function showTutorialTilePlacementOnSecondToLastTile():void				{					var secondToLastTileIndex:int = _gameboardController.gameLevel.paths[0].length-2;					var secondToLastTile:GameboardTile = _tiles[_gameboardController.gameLevel.paths[0][secondToLastTileIndex].r][_gameboardController.gameLevel.paths[0][secondToLastTileIndex].c];					var tilePosition:Point = scaledElementContainer_mc.globalToLocal(secondToLastTile.contentClip.parent.localToGlobal(new Point(secondToLastTile.x, secondToLastTile.y)));										tutorialTilePlacement_mc.x = tilePosition.x;					tutorialTilePlacement_mc.y = tilePosition.y;					tutorialTilePlacement_mc.visible = true;					tutorialTilePlacement_mc.play();				}							/** hideTutorialTilePlacement			  *	---------------------------------------------------------------------------- *			  *	Turns off the tutorial tile placement.			  *	---------------------------------------------------------------------------- */			 	public function hideTutorialTilePlacement():void				{					tutorialTilePlacement_mc.visible = false;					tutorialTilePlacement_mc.stop();				}							/** highlightWeaponPoweredUpClips			  *	---------------------------------------------------------------------------- *			  *	Turns on the weapon powered up clips.			  *	---------------------------------------------------------------------------- */			 	public function highlightWeaponPoweredUpClips():void				{					var weaponPoweredUpClip:AnimationDisplayObject;					var weaponPosition:Point;										for( var i:int=0; i<_gameboardController.weaponDisplayObjectController.weaponDisplayObjectsLength; ++i )					{						if( _weaponPoweredUpClips.length < _gameboardController.weaponDisplayObjectController.weaponDisplayObjectsLength )						{							addWeaponPoweredUpClip();						}												weaponPoweredUpClip = _weaponPoweredUpClips[i];												weaponPosition = UtilFunctions.localToLocal( _gameboardController.weaponDisplayObjectController.weaponDisplayObjects[i].contentClip, weaponPoweredUpClipsContainer_mc );						weaponPoweredUpClip.contentClip.x = weaponPosition.x;						weaponPoweredUpClip.contentClip.y = weaponPosition.y+10;						weaponPoweredUpClip.contentClip.visible = true;						weaponPoweredUpClip.startAnimation( true, 0 );					}										weaponPoweredUpClipsContainer_mc.visible = true;				}							/** removeHighlightWeaponPoweredUpClips			  *	---------------------------------------------------------------------------- *			  *	Turns ooff the weapon powered up clips.			  *	---------------------------------------------------------------------------- */			 	public function removeHighlightWeaponPoweredUpClips():void				{					weaponPoweredUpClipsContainer_mc.visible = false;										for( var i:int=0; i<_weaponPoweredUpClips.length; ++i )					{						_weaponPoweredUpClips[i].stopAnimation();						_weaponPoweredUpClips[i].contentClip.visible = false;					}				}							/** addWeaponPoweredUpClips			  *	---------------------------------------------------------------------------- *			  *	Adds a weapon powered up clip if there's not enough clips for current			  *	weapons on the board.			  *	---------------------------------------------------------------------------- */			 	protected function addWeaponPoweredUpClip():void				{					var weaponPoweredUpClip:AnimationDisplayObject = new AnimationDisplayObject();						weaponPoweredUpClip.contentClip = new (getDefinitionByName("DisplayObject.animation") as Class)();						weaponPoweredUpClip.contentClip.mouseChildren = false;						weaponPoweredUpClip.contentClip.mouseEnabled = false;						weaponPoweredUpClipsContainer_mc.addChild( weaponPoweredUpClip.contentClip );						//weaponPoweredUpClip.smoothing = false;						weaponPoweredUpClip.init();						weaponPoweredUpClip.animationObject = GameLevelDataIndex.getInstance().getAnimationObjectByCacheId("PowerringEffect");						weaponPoweredUpClip.sourceBD = BitmapDataManager.getInstance().getBitmapData("PowerringEffect").bitmapData;						weaponPoweredUpClip.initCanvas();						_weaponPoweredUpClips.push( weaponPoweredUpClip );				}							/** addWeaponAdditionClip			  *	---------------------------------------------------------------------------- *			  *	Adds an extra clip if weapons need it. For example, the snow cloud weapon			  *	has an extra snowflake clip that's placed on the bottom of weapons/enemies			  *	but on top of the range.			  *	---------------------------------------------------------------------------- */			 	public function addWeaponAdditionClip( animationObject:AnimationObject, weaponDisplayObject:WeaponDisplayObject ):AnimationDisplayObject				{					var position:Point = UtilFunctions.localToLocal( weaponDisplayObject.contentClip, weaponAdditionClipsContainer_mc );										var weaponAdditionClip:AnimationDisplayObject = new AnimationDisplayObject();						weaponAdditionClip.contentClip = new (getDefinitionByName("DisplayObject.animation") as Class)();						weaponAdditionClip.contentClip.mouseChildren = false;						weaponAdditionClip.contentClip.mouseEnabled = false;						weaponAdditionClipsContainer_mc.addChild( weaponAdditionClip.contentClip );						weaponAdditionClip.init();						weaponAdditionClip.animationObject = animationObject;						weaponAdditionClip.sourceBD = BitmapDataManager.getInstance().getBitmapData(animationObject.cacheId).bitmapData;						weaponAdditionClip.initCanvas();						weaponAdditionClip.contentClip.x = position.x;						weaponAdditionClip.contentClip.y = position.y;						weaponAdditionClip.startAnimation( true, 0 );										//trace( "position.x: "+position.x+", y: "+position.y );										_weaponAdditionClips.push( weaponAdditionClip );					//weaponAdditionClipsContainer_mc										return weaponAdditionClip;				}								public function removeWeaponAdditionClip( animationDisplayObject:AnimationDisplayObject ):void				{					VectorUtil.remove( _weaponAdditionClips, animationDisplayObject );					animationDisplayObject.stopAnimation();										weaponAdditionClipsContainer_mc.removeChild( animationDisplayObject.contentClip );					animationDisplayObject.kill();					animationDisplayObject = null;				}							/** end			  *	---------------------------------------------------------------------------- *			  *	Ends the game.			  *	---------------------------------------------------------------------------- */			 	public function end( win:Boolean=false, playWinAnimation:Boolean=true ):void				{					ConsoleBroadcaster.broadcast( "Gameboard", "endGame();" );										_giftClip.hide();					_gameboardMenuClip.hide();					buyChicken_mc.visible = false;					chickenIndicator_mc.visible = false;					newWeaponContainer_mc.visible = false;					newWeaponRange_mc.visible = false;					weaponPoweredUpClipsContainer_mc.visible = false;					/*					if( _addingNewWeapon )					{						_addingNewWeapon = false;												_contentClip.stage.removeEventListener( MouseEvent.MOUSE_MOVE, handleAddNewWeaponMouseMove );						_contentClip.stage.removeEventListener( MouseEvent.MOUSE_UP, handleAddNewWeaponMouseUp );												newWeaponContainer_mc.visible = false;					}										if( _addingNewGod )					{						_addingNewGod = false;												_contentClip.stage.removeEventListener( MouseEvent.MOUSE_MOVE, handleAddNewGodMouseMove );						_contentClip.stage.removeEventListener( MouseEvent.MOUSE_DOWN, handleAddNewGodMouseUp );												newWeaponContainer_mc.visible = false;					}					*/										removeAddDeleteWeaponListeners();										_slotMachineClip.hide();					enemies_mc.visible = false;										//_weaponPlacementClip.stopAnimation();					//_weaponPlacementClip.contentClip.visible = false;										stopWeaponRangeClipsAnimation();										dispatchEvent( new GameLevelEvent(GameLevelEvent.GAME_END, {win:win}) );										if( win )					{						showLoadingScreen();												trace( "playWinAnimation: "+playWinAnimation );												if( playWinAnimation )						{							_resultScreenWinClip.show();						}						else						{							//dispatchEvent( new BoogaEvent(BoogaEvent.ON_RESULT_SCREEN_WIN_ANIMATION_DONE) );						}					}					else					{						//blackBg_mc.visible = true;						showLoadingScreen();						_resultScreenLoseClip.show();					}										projectileClipsContainer_mc.visible = false;				}							/** kill			  *	---------------------------------------------------------------------------- *			  *	Kills the class, set things to null, remove listeners, etc.			  *	---------------------------------------------------------------------------- */			 	public function kill():void				{					if( _debug ) ConsoleBroadcaster.broadcast( "Gameboard", "kill();" );										if( _backgroundClip != null && _backgroundClip.animation_mc != null )						_backgroundClip.animation_mc.stop();										if( _foregroundClip != null && _foregroundClip.animation_mc != null )						_foregroundClip.animation_mc.stop();										//blackBg_mc.visible = false;					hideLoadingScreen();					hideDigMouseCursor();										//_gameboardMenuClip.removeEventListener( GameLevelEvent.ON_MENU_ICON_SELECTED, handleGameboardMenuIconSelected );					//_gameboardMenuClip.removeEventListener( GameLevelEvent.ON_MENU_ICON_MOUSE_DOWN, handleGameboardMenuIconSelected );					_gameboardMenuClip.onMenuIconSelected.remove( handleGameboardMenuIconSelected );					_gameboardMenuClip.onMenuDeleteSelected.remove( handleGameboardMenuDeleteSelected );					//_gameboardMenuClip.removeEventListener( GameLevelEvent.ON_MENU_DELETE_SELECTED, handleGameboardMenuDeleteSelected );					//_gameboardMenuClip.removeEventListener( GameLevelEvent.ON_CHICKEN_INSUFFICIENT, handleInsufficientChickenToBuyWeapon );					_gameboardMenuClip.onInsufficientChicken.remove( handleInsufficientChickenToBuyWeapon );					_gameboardMenuClip.kill();					_gameboardMenuClip.hide();										//_giftClip.removeEventListener( "onGiftClicked", handleGiftClicked );					_giftClip.onGiftClicked.remove( handleGiftClicked );					_giftClip.kill();					_giftClip.hide();										if( _gameboardController.gameLevel != null && _gameboardController.gameLevel.slotEnabled )					{						//_slotMachineClip.removeEventListener( GameLevelEvent.ON_SLOT_SPIN_STARTS, handleSlotSpinStarts );						//_slotMachineClip.removeEventListener( GameLevelEvent.ON_SLOT_SPIN_ENDS, handleSlotSpinEnds );						_slotMachineClip.onSlotSpinStarted.remove( handleSlotSpinStarted );						_slotMachineClip.onSlotSpinEnded.remove( handleSlotSpinEnded );						_slotMachineClip.hide();						_slotMachineClip.kill();					}										enemies_mc.visible = false;					//chickenIndicator_mc.visible = false;					_chickenIndicatorClip.hide();										if( _gameboardController.gameLevel != null && _gameboardController.gameLevel.buyChickenEnabled )					{						_buyChickenClip.dynamicClip.removeEventListener( "onClick", handleBuyChickenClicked );						_buyChickenClip.dynamicClip.visible = false;					}										_resultScreenLoseClip.hide();					_resultScreenWinClip.hide();										_digResultViewClip.hide();					_newDiscoveriesViewClip.hide();					_levelEndResultViewClip.hide();										hideLoadingScreen();					hideInvisibleBlocker();										resetDiggingTiles();										killIntroAnimation();										/*					var environmentDisplayObject:EnvironmentDisplayObject;					while( environmentObjectsDisplayLayer_mc.numChildren > 0 )					{						//environmentDisplayObject = environmentObjectsDisplayLayer_mc.removeChildAt(0) as EnvironmentDisplayObject;						//environmentDisplayObject.kill();						//trace( environmentObjectsDisplayLayer_mc.getChildAt(0) );						//environmentDisplayObject.kill();						//environmentObjectsDisplayLayer_mc.removeChildAt(0);						//environmentDisplayObject = null;					}					*/					var i:int, j:int, k:int;					for( i=0; i<_tiles.length; ++i )					{						for( j=0; j<_tiles[i].length; ++j )						{							//trace( "setting extra hit areas to false" );							_tiles[i][j].editable = true;							_tiles[i][j].tileType = GameboardTile.TILE_TYPE_PLACEABLE;							_tiles[i][j].tileOpacity = 0;							_tiles[i][j].hasExtraHitArea1 = false;							_tiles[i][j].hasExtraHitArea2 = false;							_tiles[i][j].hasExtraHitArea3 = false;							_tiles[i][j].hasExtraHitArea4 = false;							_tiles[i][j].editable = false;						}					}										if( !_isEditor )					{						removeEnvironmentObjects();												removeVillageObjects();					}										for( i=0; i<_diggingSpotViews.length; ++i )					{						_diggingSpotViews[i].hide();					}										//displayLayer_mc.kill();				}							/** showGameboardMenu			  *	---------------------------------------------------------------------------- *			  *	Shows gameboard menu.			  *	---------------------------------------------------------------------------- */			 	public function showGameboardMenu():void				{					_gameboardMenuClip.show();					chickenIndicator_mc.alpha = 0;					chickenIndicator_mc.visible = true;										enemies_mc.alpha = 0;					enemies_mc.visible = true;										TweenLite.to( chickenIndicator_mc, .25, {alpha:1} );					TweenLite.to( enemies_mc, .25, {alpha:1} );										if( _gameboardController.gameLevel.buyChickenEnabled )					{						buyChicken_mc.alpha = 0;						buyChicken_mc.visible = true;												TweenLite.to( buyChicken_mc, .25, {alpha:1} );					}									}							/** hideGameboardMenu			  *	---------------------------------------------------------------------------- *			  *	Hides gameboard menu.			  *	---------------------------------------------------------------------------- */			 	public function hideGameboardMenu():void				{					_gameboardMenuClip.hide();					chickenIndicator_mc.visible = false;					buyChicken_mc.visible = false;					enemies_mc.visible = false;				}								protected function removeAddDeleteWeaponListeners():void				{					if( _addingNewWeapon )					{						_addingNewWeapon = false;												_contentClip.stage.removeEventListener( MouseEvent.MOUSE_MOVE, handleAddNewWeaponMouseMove );						_contentClip.stage.removeEventListener( MouseEvent.MOUSE_UP, handleAddNewWeaponMouseUp );					}										if( _addingNewGod )					{						_addingNewGod = false;												_contentClip.stage.removeEventListener( MouseEvent.MOUSE_MOVE, handleAddNewGodMouseMove );						_contentClip.stage.removeEventListener( MouseEvent.MOUSE_UP, handleAddNewGodMouseUp );					}										if( _deletingWeapon )					{						_deletingWeapon = false;												_contentClip.stage.removeEventListener( MouseEvent.MOUSE_MOVE, handleDeleteWeaponMouseMove );						_contentClip.stage.removeEventListener( MouseEvent.MOUSE_UP, handleDeleteWeaponMouseUp );					}				}							/** showLoadingScreen			  *	---------------------------------------------------------------------------- *			  *	Shows the loading screen.			  *	---------------------------------------------------------------------------- */			 	public function showLoadingScreen():void				{					levelLoading_mc.visible = true;				}							/** hideLoadingScreen			  *	---------------------------------------------------------------------------- *			  *	Hides the loading screen.			  *	---------------------------------------------------------------------------- */			 	public function hideLoadingScreen():void				{					levelLoading_mc.visible = false;				}								public function showInvisibleBlocker():void				{					invisibleBlocker_mc.visible = true;				}								public function hideInvisibleBlocker():void				{					invisibleBlocker_mc.visible = false;				}							/** showChickenAreas			  *	---------------------------------------------------------------------------- *			  *	Shows the chicken areas			  *	---------------------------------------------------------------------------- */			 	public function showChickenAreas():void				{					chickenArea1_mc.visible = true;					chickenArea2_mc.visible = true;					chickenArea3_mc.visible = true;				}							/** hideChickenAreas			  *	---------------------------------------------------------------------------- *			  *	Hides the chicken areas.			  *	---------------------------------------------------------------------------- */			 	public function hideChickenAreas():void				{					chickenArea1_mc.visible = false;					chickenArea2_mc.visible = false;					chickenArea3_mc.visible = false;				}							/** highlightDiggingTiles			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */			 	public function highlightDiggingTiles( diggingMap:DiggingMap ):void				{					ConsoleBroadcaster.broadcast( "Gameboard", "highlightDiggingTiles();" );										diggingMap.output();										//trace( "diggingMap.spotsWithTreasures: "+diggingMap.spotsWithTreasures );										digText_mc.visible = true;					TweenLite.to( digText_mc, 1.2, {frameLabel:"endAnimation", onComplete:handleDigTextAnimationComplete, ease:Linear.easeNone} );					SoundEffectPlayer.getInstance().playLibrarySound( "sfx_pop_up_window.wav", false, "sfx_pop_up_window.wav", "sfx_pop_up_window.wav", SoundEffectPlayer.SOUND_PLAYER_SFX );										hideChickenAreas();					hideLoadingScreen();					hideInvisibleBlocker();										showDigMouseCursor();										//diggingMap.spots					var diggingTiles:Vector.<Vector.<DiggingTile>>;					var i:int, j:int;					var diggingTile:DiggingTile;										if( _activeDiggingTiles == null )						_activeDiggingTiles = new Vector.<DiggingTile>;										var totalDiggingSpots:int = 0;					var diggingSpotView:DiggingSpotView;					var diggingSpotPosition:Point;										for( i=0; i<diggingMap.spotsWithTreasures.length; ++i )					{						//trace( diggingMap.spotsWithTreasures[i] );												if( i == 0 )							diggingTiles = _diggingTiles1;						else if( i == 1 )							diggingTiles = _diggingTiles2;						else							diggingTiles = _diggingTiles3;												for( j=0; j<diggingMap.spotsWithTreasures[i].length; ++j )						{							++totalDiggingSpots;														if( _diggingSpotViews.length < totalDiggingSpots )							{								diggingSpotView = new DiggingSpotView();								diggingSpotView.contentClip = new (getDefinitionByName("DiggingSpotLibrary") as Class)();								diggingSpotView.init();								diggingSpotView.hide();								diggingSpotViewsContainer_mc.addChild( diggingSpotView.contentClip );																//diggingSpotView.contentClip.mouseChildren = false;								//diggingSpotView.contentClip.mouseEnabled = false;																_diggingSpotViews.push( diggingSpotView );							}							else							{								diggingSpotView = _diggingSpotViews[ totalDiggingSpots-1 ];							}														diggingTile = diggingTiles[diggingMap.spotsWithTreasures[i][j].r][diggingMap.spotsWithTreasures[i][j].c];							diggingTile.diggingSpotView = diggingSpotView;							diggingSpotPosition = UtilFunctions.localToLocal( diggingTile.contentClip, diggingSpotViewsContainer_mc );							diggingSpotView.contentClip.x = diggingSpotPosition.x;							diggingSpotView.contentClip.y = diggingSpotPosition.y;														//trace( "diggingTile: "+diggingTile );							//trace( "diggingSpotView.contentClip.x: "+diggingSpotView.contentClip.x+", y: "+diggingSpotView.contentClip.y );														if( diggingMap.spotsWithTreasures[i][j].d == 0 )							{								diggingTile = diggingTiles[diggingMap.spotsWithTreasures[i][j].r][diggingMap.spotsWithTreasures[i][j].c];								//diggingTile.editable = true;								//diggingTile.tileType = GameboardTile.TILE_TYPE_DIG_SPOT;								diggingTile.treasureId = diggingMap.spotsWithTreasures[i][j].tid;								diggingTile.weaponId = diggingMap.spotsWithTreasures[i][j].wid;								diggingTile.godId = diggingMap.spotsWithTreasures[i][j].gid;								//diggingTile.tileOpacity = .3;																//diggingTile.addEventListener( "onTileMouseOver", handleDiggingTileMouseOver );								//diggingTile.addEventListener( "onTileMouseOut", handleDiggingTileMouseOut );								//diggingTile.addEventListener( "onTileClicked", handleDiggingTileClicked );								_activeDiggingTiles.push( diggingTile );																diggingSpotView.diggingTile = diggingTile;								diggingSpotView.addEventListener( MouseEvent.CLICK, handleDiggingTileClicked, false, 0, true );																//trace( diggingTile );																//trace( "showDigView();" );																diggingSpotView.showDigView();							}							else							{								//trace( "showDugView();" );																diggingSpotView.showDugView();							}														diggingSpotView.show();						}					}										if( !_isEditor )					{						for( i=0; i<_gameboardController.gameLevel.environmentObjects.length; ++i )						{							addEnvironmentObject( _gameboardController.gameLevel.environmentObjects[i] );						}												for( i=0; i<_gameboardController.gameLevel.villageObjects.length; ++i )						{							addVillageObject( _gameboardController.gameLevel.villageObjects[i] );						}					}				}							/** resetDiggingTiles			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				public function resetDiggingTiles():void				{					for( var i:int=0; i<_activeDiggingTiles.length; ++i )					{						//_activeDiggingTiles[i].removeEventListener( "onTileClicked", handleDiggingTileClicked );						//_activeDiggingTiles[i].removeEventListener( "onTileMouseOver", handleDiggingTileMouseOver );						//_activeDiggingTiles[i].removeEventListener( "onTileMouseOut", handleDiggingTileMouseOut );						//_activeDiggingTiles[i].tileType = GameboardTile.TILE_TYPE_PLACEABLE;						//_activeDiggingTiles[i].tileOpacity = 0;						//_activeDiggingTiles[i].editable = false;						_activeDiggingTiles[i].diggingSpotView.removeEventListener( MouseEvent.CLICK, handleDiggingTileClicked );						_activeDiggingTiles[i].diggingSpotView = null;					}					VectorUtil.removeAll( _activeDiggingTiles );				}								protected function handleDigTextAnimationComplete():void				{					digText_mc.visible = false;					digText_mc.gotoAndStop(1);										onDigTextAnimationCompleted.dispatch();				}								public function playDigAnimation( position:Point ):void				{									}							/** highlightPathTiles			  *	---------------------------------------------------------------------------- */				public function highlightPathTiles():void				{					ConsoleBroadcaster.broadcast( "Gameboard", "highlightPathTiles();" );										var i:int, j:int;										for( i=0; i<_tiles.length; ++i )					{						for( j=0; j<_tiles[i].length; ++j )						{							if( _tiles[i][j].tileTypeIndex == GameboardTile.TILE_TYPE_PATH_INDEX )								_tiles[i][j].tileOpacity = .3;						}					}				}							/** handleBuyChickenClicked			  *	---------------------------------------------------------------------------- *			  *	When user clicks on the buy chicken icon in game, displays the buying view			  *	to buy more chicken.			  *	---------------------------------------------------------------------------- */			 	protected function handleBuyChickenClicked( event:Event ):void				{					dispatchEvent( new BoogaEvent(BoogaEvent.ON_BUY_CHICKEN) );				}								//protected function handleInsufficientChickenToBuyWeapon( event:GameLevelEvent ):void				protected function handleInsufficientChickenToBuyWeapon():void				{					chickenIndicator_mc.play();					//SoundEffectPlayer.getInstance().playLibrarySound( "buzzer.wav", false, "buzzer.wav", "buzzer.wav", SoundEffectPlayer.SOUND_PLAYER_SFX );				}											/** handleEnemyIconRolledOver			  *	---------------------------------------------------------------------------- */				private function handleEnemyIconRolledOver( enemyIcon:GameboardMenuEnemyCountIcon ):void				{					ConsoleBroadcaster.broadcast( "Gameboard", "handleEnemyIconRolledOver();" );										var enemy:Enemy = GameLevelDataIndex.getInstance().getEnemy( enemyIcon.enemyId );					var text:String = StringsIndex.getInstance().getString(String(enemy.name));					var text2:String = StringsIndex.getInstance().getString(String(enemy.description));					var text3:String = enemy.statistic;					var elements:Array = GameLevelUtil.getItemStrongElements( enemy );										//trace( "elements: "+elements );										EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_TEXT_HOVER_SHOW, this, {clip:enemyIcon.contentClip, text:text, text2:text2, text3:text3, elements:elements, align:TextFieldAutoSize.CENTER} );				}							/** handleEnemyIconsRolledOut			  *	---------------------------------------------------------------------------- */				private function handleEnemyIconRolledOut():void				{					EventNotificationCenter.getInstance().sendSignal( BoogaEvent.ON_TEXT_HOVER_HIDE, this );				}											/**	******************************************* *			  * ResultScreen Events			  *	******************************************* */			 				/** handleFullScreenClicked			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */			 	protected function handleResultScreenLosePlayAgainClicked( event:Event ):void				{					dispatchEvent( new BoogaEvent(BoogaEvent.ON_PLAY_AGAIN) );					//onPlayAgainClicked.dispatch();				}							/** handleResultScreenLoseIslandSelectClicked			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */			 	protected function handleResultScreenLoseIslandSelectClicked( event:Event ):void				{					dispatchEvent( new BoogaEvent(BoogaEvent.ON_ISLAND_SELECT) );					//onIslandSelectClicked.dispatch();				}								protected function handleResultScreenLoseAnimationDone( event:Event ):void				{					dispatchEvent( new BoogaEvent(BoogaEvent.ON_RESULT_SCREEN_LOSE_ANIMATION_DONE) );					//onResultScreenLoseAnimationDone.dispatch();				}							/** handleResultScreenWinAnimationDone			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */			 	protected function handleResultScreenWinAnimationDone( event:Event ):void				{					ConsoleBroadcaster.broadcast( "Gameboard", "handleResultScreenWinAnimationDone();" );										dispatchEvent( new BoogaEvent(BoogaEvent.ON_RESULT_SCREEN_WIN_ANIMATION_DONE) );					//onResultScreenWinAnimationDone.dispatch();										//TODO:					//	Displays the digging cursor, and hides the mouse pointer.										//showDigMouseCursor();									}								/*protected function handlePauseScreenResumeClicked( event:GameLevelEvent ):void				{					//_pauseScreenViewClip.hide();					//_gameboardController.unpause();				}*/							/** handleDiggingMouseMoved			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */			 	protected function handleDiggingMouseMoved( event:MouseEvent ):void				{					var localPosition:Point = _contentClip.globalToLocal( new Point(event.stageX, event.stageY) );					mouseDigIcon_mc.x = localPosition.x;					mouseDigIcon_mc.y = localPosition.y;										if( _mouseCursorBounds.containsPoint(localPosition) )					{						mouseDigIcon_mc.visible = true;						Mouse.hide();					}					else					{						mouseDigIcon_mc.visible = false;						Mouse.show();					}									}							/** showDigMouseCursor			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */			 	public function showDigMouseCursor():void				{					//trace( "showDigMouseCursor();" );										Mouse.hide();					var localPosition:Point = _contentClip.globalToLocal( new Point(_contentClip.stage.mouseX, _contentClip.stage.mouseY) );					mouseDigIcon_mc.x = localPosition.x;					mouseDigIcon_mc.y = localPosition.y;					mouseDigIcon_mc.visible = true;					_contentClip.stage.addEventListener( MouseEvent.MOUSE_MOVE, handleDiggingMouseMoved, false, 0, true );				}							/** hideDigMouseCursor			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */			 	public function hideDigMouseCursor():void				{					//trace( "hideDigMouseCursor();" );										_contentClip.stage.removeEventListener( MouseEvent.MOUSE_MOVE, handleDiggingMouseMoved );					Mouse.show();					mouseDigIcon_mc.visible = false;									}							/** handleDiggingTileClicked			  *	---------------------------------------------------------------------------- *			  *	Digging tile is clicked when user digs a treasure. Updates user's treasure			  *	map			  *	---------------------------------------------------------------------------- */			 	protected function handleDiggingTileClicked( event:Event ):void				{					ConsoleBroadcaster.broadcast( "Gameboard", "handleDiggingTileClicked();" );										hideDigMouseCursor();					//showLoadingScreen();															/*					var i:int, j:int;					for( i=0; i<_gameboardController.gameLevel.diggingMap.spotsWithTreasures.length; ++i )					{											}					*/										resetDiggingTiles();					showInvisibleBlocker();										var customParameters:Object = new Object();						customParameters.area = event.currentTarget.diggingTile.area;						customParameters.row = event.currentTarget.diggingTile										//dispatchEvent( new BoogaEvent(BoogaEvent.ON_DIG_TREASURE, {area:event.currentTarget.diggingTile.area, row:event.currentTarget.diggingTile.row, column:event.currentTarget.diggingTile.column, treasureId:event.currentTarget.diggingTile.treasureId, weaponId:event.currentTarget.diggingTile.weaponId}) );					dispatchEvent( new BoogaEvent(BoogaEvent.ON_DIG_TREASURE, {diggingTile:event.currentTarget.diggingTile}) );										var position:Point = UtilFunctions.localToLocal( event.currentTarget.diggingTile.contentClip, _contentClip );					digAnimation_mc.x = position.x;					digAnimation_mc.y = position.y;					digAnimation_mc.gotoAndPlay(1);					digAnimation_mc.visible = true;										_digResultViewClip.contentClip.x = position.x;					_digResultViewClip.contentClip.y = position.y;				}				/*				protected function handleDiggingTileMouseOver( event:Event ):void				{					trace( "handleDiggingTileMouseOver();" );					//event.currentTarget.tileOpacity = 1;										event.currentTarget.diggingSpotView.playAnimation();				}								protected function handleDiggingTileMouseOut( event:Event ):void				{					trace( "handleDiggingTileMouseOut();" );					//event.currentTarget.tileOpacity = .3;										event.currentTarget.diggingSpotView.stopAnimation();				}				*/				protected function handleDigAnimationComplete( event:Event ):void				{					//trace( "handleDigAnimationComplete();" );										hideInvisibleBlocker();					showLoadingScreen();										digAnimation_mc.visible = false;										dispatchEvent( new BoogaEvent(BoogaEvent.ON_DIG_TREASURE_ANIMATION_COMPLETE) );				}								protected function handleDigAnimationSoundStart( event:Event ):void				{					dispatchEvent( new BoogaEvent(BoogaEvent.ON_DIG_SOUND_START) );				}							/**	******************************************* *			  * DigResultView Events			  *	******************************************* */			 					//protected function handleDigResultViewNextClicked( event:BoogaEvent ):void				protected function handleDigResultViewNextClicked():void				{					if( _digResultViewClip.viewType == DigResultView.VIEW_TYPE_DIG_NO_DISCOVERIES || _digResultViewClip.viewType == DigResultView.VIEW_TYPE_LAST_DIG_NO_DISCOVERIES )					{						dispatchEvent( new BoogaEvent(BoogaEvent.ON_NEW_DISCOVERIES_VIEW_NEXT) );						//onPlayNextLevelClicked.dispatch();					}					else					{						dispatchEvent( new BoogaEvent(BoogaEvent.ON_DIG_RESULT_VIEW_NEXT) );						//onDigResultNextClicked.dispatch();					}				}								//protected function handleDigResultViewLeaveEarlyClicked( event:BoogaEvent ):void				protected function handleDigResultViewDigEarlyClicked():void				{					dispatchEvent( new BoogaEvent(BoogaEvent.ON_DIG_RESULT_VIEW_LEAVE_EARLY) );					//onDigResultDigEarlyClicked.dispatch();				}								protected function handleDigResultViewIslandSelectClicked():void				{					dispatchEvent( new BoogaEvent(BoogaEvent.ON_ISLAND_SELECT) );					//onIslandSelectClicked.dispatch();				}								protected function handleDigResultViewPlayAgainClicked():void				{					dispatchEvent( new BoogaEvent(BoogaEvent.ON_PLAY_AGAIN) );					//onPlayAgainClicked.dispatch();				}											/**	******************************************* *			  * NewDiscoveriesView Events			  *	******************************************* */								//protected function handleNewDiscoveriesIslandSelectClicked( event:Event ):void				protected function handleNewDiscoveriesIslandSelectClicked():void				{					dispatchEvent( new BoogaEvent(BoogaEvent.ON_ISLAND_SELECT) );					//onIslandSelectClicked.dispatch();				}								//protected function handleNewDiscoveriesPlayAgainClicked( event:Event ):void				protected function handleNewDiscoveriesPlayAgainClicked():void				{					dispatchEvent( new BoogaEvent(BoogaEvent.ON_PLAY_AGAIN) );					//onPlayAgainClicked.dispatch();				}								//protected function handleNewDiscoveriesNextClicked( event:Event ):void				protected function handleNewDiscoveriesNextClicked():void				{					dispatchEvent( new BoogaEvent(BoogaEvent.ON_NEW_DISCOVERIES_VIEW_NEXT) );					//onPlayNextLevelClicked.dispatch();				}											/**	******************************************* *			  * LevelEndResultView Events			  *	******************************************* */								protected function handleLevelEndResultIslandSelectClicked():void				{					dispatchEvent( new BoogaEvent(BoogaEvent.ON_ISLAND_SELECT) );					//onIslandSelectClicked.dispatch();				}								protected function handleLevelEndResultPlayAgainClicked():void				{					dispatchEvent( new BoogaEvent(BoogaEvent.ON_PLAY_AGAIN) );					//onPlayAgainClicked.dispatch();				}								protected function handleLevelEndResultNextClicked():void				{					dispatchEvent( new BoogaEvent(BoogaEvent.ON_NEW_DISCOVERIES_VIEW_NEXT) );					//onPlayNextLevelClicked.dispatch();				}								/*				public function addVillagerObject():VillagerDisplayObject				{					return null;				}				*/			/**	******************************************* *			  * Environment Objects			  *	******************************************* */			  				 	public function addEnvironmentObject( gameLevelEnvironmentObject:GameLevelEnvironmentObject ):EnvironmentDisplayObject				{					var envDisplayObject:EnvironmentDisplayObject = new EnvironmentDisplayObject();						envDisplayObject.contentClip = new (getDefinitionByName(GameLevelDataIndex.getInstance().getEnvironmentObject(gameLevelEnvironmentObject.environmentObjectId).name) as Class)();						//envDisplayObject.contentClip.cacheAsBitmap = true;						envDisplayObject.gameLevelEnvironmentObject = gameLevelEnvironmentObject;						envDisplayObject.contentClip.layerNumber = gameLevelEnvironmentObject.layer;						envDisplayObject.init();						//envDisplayObject.row = gameLevelEnvironmentObject.row;						//envDisplayObject.column = gameLevelEnvironmentObject.column;						//envDisplayObject.offsetPosition = new Point( gameLevelEnvironmentObject.positionX, gameLevelEnvironmentObject.positionY );												if( gameLevelEnvironmentObject.row < 0 )							envDisplayObject.positionIn2D = _gateTiles[envDisplayObject.gameLevelEnvironmentObject.column].positionIn2D.clone().add( new Point(envDisplayObject.gameLevelEnvironmentObject.positionX, envDisplayObject.gameLevelEnvironmentObject.positionY) );						else							envDisplayObject.positionIn2D = _tiles[envDisplayObject.gameLevelEnvironmentObject.row][envDisplayObject.gameLevelEnvironmentObject.column].positionIn2D.clone().add( new Point(envDisplayObject.gameLevelEnvironmentObject.positionX, envDisplayObject.gameLevelEnvironmentObject.positionY) );												envDisplayObject.inIsometricView = _inIsometricView;						envDisplayObject.render();												//trace( "envDisplayObject.x: "+envDisplayObject.x+", y:"+envDisplayObject.y );											_environmentObjectsDisplayLayerClip.addClipToLayerInFront( envDisplayObject.contentClip, (GameLevelDataIndex.getInstance().boardMaxRows - envDisplayObject.gameLevelEnvironmentObject.column + envDisplayObject.gameLevelEnvironmentObject.row), GameLevelDisplayLayerItem.LAYER_BACKGROUND );					//trace( "envDisplayObject.id: "+envDisplayObject.gameLevelEnvironmentObject.id );					//trace( "envDisplayObject.gameLevelEnvironmentObject.layer: "+envDisplayObject.gameLevelEnvironmentObject.layer );					//trace( "envDisplayobject.contentClip.parent.parent.name: "+envDisplayObject.contentClip.parent.parent.name );					//trace( "envDisplayobject.contentClip.parent.name: "+envDisplayObject.contentClip.parent.name );					//trace( "envDisplayObject.contentClip.layer: "+envDisplayObject.contentClip.parent.getChildIndex(envDisplayObject.contentClip) );										if( gameLevelEnvironmentObject.row < 0 )						_environmentDisplayObjects[0][envDisplayObject.gameLevelEnvironmentObject.column].push( envDisplayObject );					else						_environmentDisplayObjects[envDisplayObject.gameLevelEnvironmentObject.row][envDisplayObject.gameLevelEnvironmentObject.column].push( envDisplayObject );										//trace( "envDisplayObject.contentClip.totalFrames: "+envDisplayObject.contentClip.totalFrames );					if( envDisplayObject.contentClip.totalFrames > 1 )					{						//envDisplayObject.contentClip.play();						//envDisplayObject.contentClip.cacheAsBitmap = false;					}					else					{						envDisplayObject.contentClip.cacheAsBitmap = true;					}										return envDisplayObject;				}								public function removeEnvironmentObjects():void				{					var i:int, j:int, k:int;					for( i=0; i<_environmentDisplayObjects.length; ++i )					{						for( j=0; j<_environmentDisplayObjects[i].length; ++j )						{							for( k=0; k<_environmentDisplayObjects[i][j].length; ++k )							{								_environmentDisplayObjects[i][j][k].contentClip.stop();								_environmentDisplayObjects[i][j][k].contentClip.cacheAsBitmap = false;								_environmentDisplayObjects[i][j][k].contentClip.parent.removeChild( _environmentDisplayObjects[i][j][k].contentClip );								_environmentDisplayObjects[i][j][k].kill();							}							VectorUtil.removeAll( _environmentDisplayObjects[i][j] );						}					}					//VectorUtil.removeAll( _environmentDisplayObjects );				}								public function addVillageObject( gameLevelEnvironmentObject:GameLevelEnvironmentObject ):EnvironmentDisplayObject				{					var envDisplayObject:EnvironmentDisplayObject = new EnvironmentDisplayObject();						envDisplayObject.contentClip = new (getDefinitionByName(GameLevelDataIndex.getInstance().getEnvironmentObject(gameLevelEnvironmentObject.environmentObjectId).name) as Class)();						envDisplayObject.gameLevelEnvironmentObject = gameLevelEnvironmentObject;						envDisplayObject.contentClip.layerNumber = gameLevelEnvironmentObject.layer;						envDisplayObject.init();						envDisplayObject.positionIn2D = _villageTiles[envDisplayObject.gameLevelEnvironmentObject.row][envDisplayObject.gameLevelEnvironmentObject.column].positionIn2D.clone().add( new Point(envDisplayObject.gameLevelEnvironmentObject.positionX, envDisplayObject.gameLevelEnvironmentObject.positionY) );						envDisplayObject.inIsometricView = _inIsometricView;						envDisplayObject.render();										_displayLayerClip.addClipToLayerInFront( envDisplayObject.contentClip, (GameLevelDataIndex.getInstance().boardMaxRows - envDisplayObject.gameLevelEnvironmentObject.column + envDisplayObject.gameLevelEnvironmentObject.row), GameLevelDisplayLayerItem.LAYER_BACKGROUND );					//trace( "envDisplayObject.id: "+envDisplayObject.gameLevelEnvironmentObject.id );					//trace( "envDisplayObject.gameLevelEnvironmentObject.layer: "+envDisplayObject.gameLevelEnvironmentObject.layer );					//trace( "envDisplayobject.contentClip.parent.parent.name: "+envDisplayObject.contentClip.parent.parent.name );					//trace( "envDisplayobject.contentClip.parent.name: "+envDisplayObject.contentClip.parent.name );					//trace( "envDisplayObject.contentClip.layer: "+envDisplayObject.contentClip.parent.getChildIndex(envDisplayObject.contentClip) );					//trace( "envDisplayObject.x: "+envDisplayObject.x+", y:"+envDisplayObject.y );										if( envDisplayObject.contentClip.totalFrames > 1 )					{						//envDisplayObject.contentClip.play();						//envDisplayObject.contentClip.cacheAsBitmap = false;					}					else					{						envDisplayObject.contentClip.cacheAsBitmap = true;					}										_villageDisplayObjects[envDisplayObject.gameLevelEnvironmentObject.row][envDisplayObject.gameLevelEnvironmentObject.column].push( envDisplayObject );										return envDisplayObject;				}								public function removeVillageObjects():void				{					//trace( "removeVillageObjects();" );										var i:int, j:int, k:int;					for( i=0; i<_villageDisplayObjects.length; ++i )					{						for( j=0; j<_villageDisplayObjects[i].length; ++j )						{							for( k=0; k<_villageDisplayObjects[i][j].length; ++k )							{								_villageDisplayObjects[i][j][k].contentClip.stop();								_villageDisplayObjects[i][j][k].contentClip.cacheAsBitmap = false;								_villageDisplayObjects[i][j][k].contentClip.parent.removeChild( _villageDisplayObjects[i][j][k].contentClip );								_villageDisplayObjects[i][j][k].kill();							}							VectorUtil.removeAll( _villageDisplayObjects[i][j] );						}					}					//VectorUtil.removeAll( _villageDisplayObjects );				}				/*				private function handleReplayClicked( event:Event ):void				{					dispatchEvent( new BoogaEvent(GameLevelEvent.REPLAY_GAME_CLICKED) );				}								private function handleExitClicked( event:Event ):void				{					dispatchEvent( new BoogaEvent(GameLevelEvent.EXIT_GAME_CLICKED) );				}				*/			/**	******************************************* *			  * Gift Events			  *	******************************************* */			 					protected function handleGiftClicked( item:AbstractGameObject ):void				{					removeAddDeleteWeaponListeners();										_newWeaponTile = null;					_giftSelected = true;										resetWeaponIcon();										//_weaponPlacementClip.contentClip.transform.colorTransform = new ColorTransform();										_currentItemSelected = item;										setNewWeapon();									}								protected function setNewWeapon():void				{										if( _currentItemSelected is Weapon )					{						//weaponMarker_mc.alpha = .3;												var localPosition1:Point = scaledElementContainer_mc.globalToLocal( new Point(_contentClip.stage.mouseX, _contentClip.stage.mouseY) );						newWeaponContainer_mc.x = localPosition1.x;						newWeaponContainer_mc.y = localPosition1.y;						newWeaponRange_mc.x = newWeaponContainer_mc.x;						newWeaponRange_mc.y = newWeaponContainer_mc.y;												var bitmapData:BitmapData = BitmapDataManager.getInstance().getBitmapData(_currentItemSelected.upAnimationObject.cacheId).bitmapData;						var bitmapData2:BitmapData = new BitmapData( _currentItemSelected.upAnimationObject.tileWidth, _currentItemSelected.upAnimationObject.tileHeight );							bitmapData2.copyPixels( bitmapData, new Rectangle(0, 0, _currentItemSelected.upAnimationObject.tileWidth, _currentItemSelected.upAnimationObject.tileHeight), new Point() );						_newWeaponUpBitmap = new Bitmap( bitmapData2 );						_newWeaponUpBitmap.x = -_newWeaponUpBitmap.width/2 + _currentItemSelected.upAnimationObject.offset.x;						_newWeaponUpBitmap.y = -(_newWeaponUpBitmap.height-25) + _currentItemSelected.upAnimationObject.offset.y;						_newWeaponUpBitmap.visible = false;												if( _currentItemSelected.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_ADDITION_INDEX) && _currentItemSelected.additionalAttackUpAnimationObject != null )						{							var extraBitmapData:BitmapData = BitmapDataManager.getInstance().getBitmapData( _currentItemSelected.additionalAttackUpAnimationObject.cacheId ).bitmapData;							var extraFrameBitmapData:BitmapData = new BitmapData( _currentItemSelected.additionalAttackUpAnimationObject.tileWidth, _currentItemSelected.additionalAttackUpAnimationObject.tileHeight );								extraFrameBitmapData.copyPixels( extraBitmapData, new Rectangle(0, 0, _currentItemSelected.additionalAttackUpAnimationObject.tileWidth, _currentItemSelected.additionalAttackUpAnimationObject.tileHeight), new Point() );														_newWeaponExtraBitmap = new Bitmap( extraFrameBitmapData );							_newWeaponExtraBitmap.x = -_newWeaponExtraBitmap.width/2 + _currentItemSelected.additionalAttackUpAnimationObject.offset.x;							_newWeaponExtraBitmap.y = -(_newWeaponExtraBitmap.height-25) + _currentItemSelected.additionalAttackUpAnimationObject.offset.y;							//_newWeaponExtraBitmap.visible = false;							newWeaponContainer_mc.addChild( _newWeaponExtraBitmap );						}												bitmapData = BitmapDataManager.getInstance().getBitmapData(_currentItemSelected.downAnimationObject.cacheId).bitmapData;						bitmapData2 = new BitmapData( _currentItemSelected.downAnimationObject.tileWidth, _currentItemSelected.downAnimationObject.tileHeight );						bitmapData2.copyPixels( bitmapData, new Rectangle(0, 0, _currentItemSelected.downAnimationObject.tileWidth, _currentItemSelected.downAnimationObject.tileHeight), new Point() );						_newWeaponDownBitmap = new Bitmap( bitmapData2 );						_newWeaponDownBitmap.x = -_newWeaponDownBitmap.width/2 + _currentItemSelected.downAnimationObject.offset.x;						_newWeaponDownBitmap.y = -(_newWeaponDownBitmap.height-25) + _currentItemSelected.downAnimationObject.offset.y;												_newWeaponUpOriginalMatrix = _newWeaponUpBitmap.transform.matrix;						_newWeaponUpFlippedMatrix = _newWeaponUpOriginalMatrix.clone();						_newWeaponUpFlippedMatrix.a = -_newWeaponUpFlippedMatrix.a;						_newWeaponUpFlippedMatrix.tx = _newWeaponUpFlippedMatrix.tx+_newWeaponUpBitmap.width;												_newWeaponDownOriginalMatrix = _newWeaponDownBitmap.transform.matrix;						_newWeaponDownFlippedMatrix = _newWeaponDownOriginalMatrix.clone();						_newWeaponDownFlippedMatrix.a = -_newWeaponDownFlippedMatrix.a;						_newWeaponDownFlippedMatrix.tx = _newWeaponDownFlippedMatrix.tx+_newWeaponDownBitmap.width;												bitmapData = null;						bitmapData2 = null;												//var weaponIcon:Bitmap = new Bitmap(BitmapDataManager.getInstance().getBitmapData(_currentItemSelected.cacheIconId).bitmapData);							//weaponIcon.x = -weaponIcon.width/2;							//weaponIcon.y = -(weaponIcon.height-10);												newWeaponContainer_mc.addChild( _newWeaponUpBitmap );						newWeaponContainer_mc.addChild( _newWeaponDownBitmap );						newWeaponContainer_mc.visible = true;						newWeaponRange_mc.visible = true;												//trace( "mouse click event added" );												//trace( tiles[0][0].getBounds(this) );						//trace( weaponMarker_mc.getBounds(this) );												_addingNewWeapon = true;												if( !_currentItemSelected.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_SINGLE_LANE_INDEX) && !_currentItemSelected.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_MULTIPLE_DIRECTIONS_PROJECTILE_INDEX) )						{							weaponRange_mc.cacheAsBitmap = false;							if( _currentItemSelected.range > 16 )								weaponRange_mc.scaleX = weaponRange_mc.scaleY = 16;							else								weaponRange_mc.scaleX = weaponRange_mc.scaleY = (_currentItemSelected.range*2);							weaponRange_mc.cacheAsBitmap = true;							weaponRange_mc.mask = weaponRangeMask_mc;						}						/*						if( _currentItemSelected.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_SHIELD_INDEX) )						{							_gameboardController.toggleTilesExtraHitArea(true);						}						else						{							_gameboardController.toggleTilesExtraHitArea(false);						}						*/												delayAddNewWeaponListener();						//_contentClip.stage.addEventListener( MouseEvent.MOUSE_MOVE, handleAddNewWeaponMouseMove, false, 0, true );						//_contentClip.stage.addEventListener( MouseEvent.MOUSE_UP, handleAddNewWeaponMouseUp, false, 0, true );											}					else if( _currentItemSelected is God )					{						//TODO:						//	What to do when god is selected? 						//	If all gods are one time attack, then just do the attack right away?						//	Add just the icon for the god, instead of adding GodDisplayObjectLibrary												var localPosition2:Point = scaledElementContainer_mc.globalToLocal( new Point(_contentClip.stage.mouseX, _contentClip.stage.mouseY) );						newWeaponContainer_mc.x = localPosition2.x;						newWeaponContainer_mc.y = localPosition2.y;						newWeaponRange_mc.x = newWeaponContainer_mc.x;						newWeaponRange_mc.y = newWeaponContainer_mc.y;												var bitmapData3:BitmapData = BitmapDataManager.getInstance().getBitmapData(_currentItemSelected.animationObject.cacheId).bitmapData;						var bitmapData4:BitmapData = new BitmapData( _currentItemSelected.animationObject.tileWidth, _currentItemSelected.animationObject.tileHeight );							bitmapData4.copyPixels( bitmapData3, new Rectangle(0, 0, _currentItemSelected.animationObject.tileWidth, _currentItemSelected.animationObject.tileHeight), new Point());						_newWeaponDownBitmap = new Bitmap( bitmapData4 );						_newWeaponDownBitmap.x = -_newWeaponDownBitmap.width/2;						_newWeaponDownBitmap.y = -(_newWeaponDownBitmap.height-25);												bitmapData3 = null;						bitmapData4 = null;												//var godIcon:Bitmap = new Bitmap(BitmapDataManager.getInstance().getBitmapData(_currentItemSelected.cacheIconId).bitmapData);							//godIcon.x = -godIcon.width/2;							//godIcon.y = -(godIcon.height-10);												newWeaponContainer_mc.addChild( _newWeaponDownBitmap );						newWeaponContainer_mc.visible = true;						newWeaponRange_mc.visible = true;												_addingNewGod = true;												weaponRange_mc.cacheAsBitmap = false;						weaponRange_mc.scaleX = weaponRange_mc.scaleY = 16;						weaponRange_mc.cacheAsBitmap = true;						weaponRange_mc.mask = weaponRangeMask_mc;												//_gameboardController.toggleTilesExtraHitArea(true);												delayAddNewGodListener();						//_contentClip.stage.addEventListener( MouseEvent.MOUSE_MOVE, handleAddNewGodMouseMove, false, 0, true );						//_contentClip.stage.addEventListener( MouseEvent.MOUSE_UP, handleAddNewGodMouseUp, false, 0, true );					}				}							/**	******************************************* *			  * GameboardMenu Events			  *	******************************************* */			 					protected function resetWeaponIcon():void				{					if( _newWeaponExtraBitmap != null )					{						//trace( "_newWeaponExtraBitmap.parent: "+_newWeaponExtraBitmap.parent );						//newWeaponContainer_mc.removeChild( _newWeaponExtraBitmap );						_newWeaponExtraBitmap.bitmapData.dispose();					}										while( newWeaponContainer_mc.numChildren > 0 )						newWeaponContainer_mc.removeChildAt(0);										if( _newWeaponUpBitmap != null )						_newWeaponUpBitmap.bitmapData.dispose();										if( _newWeaponDownBitmap != null )						_newWeaponDownBitmap.bitmapData.dispose();										newWeaponContainer_mc.visible = false;					newWeaponRange_mc.visible = false;				}							/** handleGameboardMenuIconSelected			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */			 	protected function handleGameboardMenuIconSelected():void				{					//trace( "handleGameboardMenuIconSelected("+event.type+");" );										removeAddDeleteWeaponListeners();										if( _currentItemSelected == _gameboardMenuClip.currentItemSelected )					{						resetWeaponIcon();												_currentItemSelected = null;						_newWeaponTile = null;						_gameboardMenuClip.resetMenu();						_gameboardController.weaponDisplayObjectController.enableInteraction();												return;					}										//TODO:					//	Item is selected, so that means user can place weapons on board.										//trace( getQualifiedClassName(_gameboardMenuClip.currentItemSelected) );					//trace( typeof(_gameboardMenuClip.currentItemSelected) );					//trace( _gameboardMenuClip.currentItemSelected is Weapon );										_giftSelected = false;					_newWeaponTile = null;										resetWeaponIcon();										//_weaponPlacementClip.contentClip.transform.colorTransform = new ColorTransform();										_currentItemSelected = _gameboardMenuClip.currentItemSelected;										setNewWeapon();										if( MainGameController.getInstance().currentUser.tutorialGameLevel || MainGameController.getInstance().currentUser.tutorialGameLevelDelete )					{						//trace( "dispatch the damn event" );						//dispatchEvent( new GameLevelEvent(GameLevelEvent.ON_MENU_ICON_SELECTED) );						onMenuIconSelected.dispatch();					}										_gameboardController.weaponDisplayObjectController.disableInteraction();				}							/** delayAddNewWeaponListener			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */			 	protected function delayAddNewWeaponListener():void				{					if( _delayAddNewWeaponListenerTimer == null )					{						_delayAddNewWeaponListenerTimer = new Timer( 200, 1 );						_delayAddNewWeaponListenerTimer.addEventListener( TimerEvent.TIMER_COMPLETE, handleDelayAddNewWeaponListenerTimerComplete, false, 0, true );					}										_delayAddNewWeaponListenerTimer.start();										/*					var timer:Timer = new Timer( 200, 1 );						timer.addEventListener( TimerEvent.TIMER_COMPLETE, handleDelayAddNewWeaponListenerTimerComplete, false, 0, true );						timer.start();					*/				}								protected function handleDelayAddNewWeaponListenerTimerComplete( event:TimerEvent ):void				{					//event.currentTarget.removeEventListener( TimerEvent.TIMER_COMPLETE, handleDelayAddNewWeaponListenerTimerComplete );					_delayAddNewWeaponListenerTimer.reset();										_contentClip.stage.addEventListener( MouseEvent.MOUSE_MOVE, handleAddNewWeaponMouseMove, false, 0, true );					_contentClip.stage.addEventListener( MouseEvent.MOUSE_UP, handleAddNewWeaponMouseUp, false, 0, true );				}							/** delayAddNewGodListener			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */			 	protected function delayAddNewGodListener():void				{					if( _delayAddNewGodListenerTimer == null )					{						_delayAddNewGodListenerTimer = new Timer( 200, 1 );						_delayAddNewGodListenerTimer.addEventListener( TimerEvent.TIMER_COMPLETE, handleDelayAddNewGodListenerTimerComplete, false, 0, true );					}										_delayAddNewGodListenerTimer.start();										/*					var timer:Timer = new Timer( 200, 1 );						timer.addEventListener( TimerEvent.TIMER_COMPLETE, handleDelayAddNewGodListenerTimerComplete, false, 0, true );						timer.start();					*/				}								protected function handleDelayAddNewGodListenerTimerComplete( event:TimerEvent ):void				{					_delayAddNewGodListenerTimer.reset();										_contentClip.stage.addEventListener( MouseEvent.MOUSE_MOVE, handleAddNewGodMouseMove, false, 0, true );					_contentClip.stage.addEventListener( MouseEvent.MOUSE_UP, handleAddNewGodMouseUp, false, 0, true );				}							/** handleAddNewWeaponMouseMove			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */			 	protected function handleAddNewWeaponMouseMove( event:MouseEvent ):void				{					//trace( event.stageX );										var localPosition:Point = scaledElementContainer_mc.globalToLocal( new Point(event.stageX, event.stageY) );						//localPosition.x = localPosition.x * scaledElementContainer_mc.scaleX;						//localPosition.y = localPosition.y * scaledElementContainer_mc.scaleX;										//trace( localPosition );										//var localPosition2:Point = this.localToGlobal();										weaponMarker_mc.x = localPosition.x;					weaponMarker_mc.y = localPosition.y;					//weaponMarker_mc.visible = true;										//_newWeaponTile = null;					var newTile:GameboardTile;										var i:uint, j:uint;										//TODO:					//	Maybe we can optimize this by knowing the start of tile and position of the weapon marker?										if( _currentItemSelected.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_HEALING_INDEX) )					{						for( i=0; i<_tilesLength; ++i )						{							//if( !UtilFunctions.getCollisionRect( GameboardTile(_gateTiles[i]).isometricPath_mc, weaponMarker_mc, _contentClip, true ).isEmpty() && 							//	!_gameboardController.checkIfGateIsFullHealth(_gateTiles[i].column) && _gameboardController.checkIfGateIsInPath(_gateTiles[i].column) )							if( !UtilFunctions.getCollisionRect( _gateTiles[i].isometricPath_mc, weaponMarker_mc, _contentClip, true ).isEmpty() && !_gameboardController.checkIfGateIsFullHealth(_gateTiles[i].column) )							{								newTile = _gateTiles[i];								break;							}						}					}					else					{						for( i=0; i<_tilesLength; ++i )						{							for( j=0; j<_tiles[i].length; ++j )							{								if( _tiles[i][j].tileTypeIndex == GameboardTile.TILE_TYPE_PATH_INDEX && (_currentItemSelected.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_SHIELD_INDEX) ? _tiles[i][j].occupiedByWeapon : !_tiles[i][j].occupiedByWeapon) )								{									if( !UtilFunctions.getCollisionRect( _tiles[i][j].isometricPath_mc, weaponMarker_mc, _contentClip, true ).isEmpty() )									{										newTile = _tiles[i][j];									}									else if( !_currentItemSelected.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_SHIELD_INDEX) ) //if( _tiles[i][j].row == 0 )									{										//trace( "up extra hit area: "+_tiles[i][j].hasExtraHitArea1 );										//trace( "left extra hit area: "+_tiles[i][j].hasExtraHitArea4 );										//trace( "right extra hit area: "+_tiles[i][j].hasExtraHitArea2 );																				if( _tiles[i][j].hasExtraHitArea1 && !UtilFunctions.getCollisionRect( _tiles[i][j].extraHitArea1_mc, weaponMarker_mc, _contentClip, true ).isEmpty() )										{											newTile = _tiles[i][j];										}										else if( _tiles[i][j].hasExtraHitArea2 && !UtilFunctions.getCollisionRect( _tiles[i][j].extraHitArea2_mc, weaponMarker_mc, _contentClip, true ).isEmpty() )										{											newTile = _tiles[i][j];										}										else if( _tiles[i][j].hasExtraHitArea3 && !UtilFunctions.getCollisionRect( _tiles[i][j].extraHitArea3_mc, weaponMarker_mc, _contentClip, true ).isEmpty() )										{											newTile = _tiles[i][j];										}										else if( _tiles[i][j].hasExtraHitArea4 && !UtilFunctions.getCollisionRect( _tiles[i][j].extraHitArea4_mc, weaponMarker_mc, _contentClip, true ).isEmpty() )										{											newTile = _tiles[i][j];										}									}								}																if( newTile != null )								{									break;								}							}														if( newTile != null )								break;						}					}					/*					else if( _currentItemSelected.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_SHIELD_INDEX) )					{						for( i=0; i<_tilesLength; ++i )						{							for( j=0; j<_tiles[i].length; ++j )							{								if( _tiles[i][j].tileTypeIndex == GameboardTile.TILE_TYPE_PATH_INDEX &&									!GameboardTile(_tiles[i][j]).getCollisionRect( GameboardTile(_tiles[i][j]).isometricPath_mc, weaponMarker_mc, _contentClip, true ).isEmpty() &&									_tiles[i][j].occupiedByWeapon )								{									newTile = _tiles[i][j];								}							}						}					}					else					{						for( i=0; i<_tilesLength; ++i )						{							for( j=0; j<_tiles[i].length; ++j )							{								if( _tiles[i][j].tileTypeIndex == GameboardTile.TILE_TYPE_PATH_INDEX && 									!GameboardTile(_tiles[i][j]).getCollisionRect( GameboardTile(_tiles[i][j]).isometricPath_mc, weaponMarker_mc, _contentClip, true ).isEmpty() &&									!_tiles[i][j].occupiedByWeapon )								{									//_newWeaponTile = _tiles[i][j];									newTile = _tiles[i][j];									//trace( "newTile: "+newTile );									//trace( "newTile.occupiedByWeapon: "+newTile.occupiedByWeapon );									break;								}							}						}					}					*/					//trace( "newTile: "+newTile );										if( newTile != null && _gameboardController.canPlaceNewWeaponInTile(_currentItemSelected, newTile) )					{						//trace( "newTile.occupiedByWeapon: "+newTile.occupiedByWeapon );												var validSpot:Boolean = true;												if( MainGameController.getInstance().currentUser.tutorialGameLevel && MainGameController.getInstance().currentUser.currentTutorialStep == "TUTORIAL_LEVEL_6" )						{							var lastTileIndex:int = _gameboardController.gameLevel.paths[0].length-1;							var tile:GameboardTile = _tiles[_gameboardController.gameLevel.paths[0][lastTileIndex].r][_gameboardController.gameLevel.paths[0][lastTileIndex].c];														if( newTile.row != tile.row || newTile.column != tile.column )							{								validSpot = false;							}						}						else if( MainGameController.getInstance().currentUser.tutorialGameLevel && MainGameController.getInstance().currentUser.currentTutorialStep == "TUTORIAL_LEVEL_9" )						{							var secondToLastTileIndex:int = _gameboardController.gameLevel.paths[0].length-2;							var secondToLastTile:GameboardTile = _tiles[_gameboardController.gameLevel.paths[0][secondToLastTileIndex].r][_gameboardController.gameLevel.paths[0][secondToLastTileIndex].c];														if( newTile.row != secondToLastTile.row || newTile.column != secondToLastTile.column )							{								validSpot = false;							}						}						else if( MainGameController.getInstance().currentUser.tutorialGameLevelDelete && MainGameController.getInstance().currentUser.currentTutorialStep == "TUTORIAL_DELETE_4" )						{							var lastTileIndex2:int = _gameboardController.gameLevel.paths[0].length-1;							var lastTile2:GameboardTile = _tiles[_gameboardController.gameLevel.paths[0][lastTileIndex2].r][_gameboardController.gameLevel.paths[0][lastTileIndex2].c];														if( newTile.row != lastTile2.row || newTile.column != lastTile2.column )							{								validSpot = false;							}						}												if( !validSpot )						{							newWeaponContainer_mc.x = localPosition.x;							newWeaponContainer_mc.y = localPosition.y;							//newWeaponContainer_mc.visible = true;							newWeaponContainer_mc.alpha = .5;							newWeaponRange_mc.x = newWeaponContainer_mc.x;							newWeaponRange_mc.y = newWeaponContainer_mc.y;														//_weaponPlacementClip.stopAnimation();							//_weaponPlacementClip.contentClip.visible = false;							stopWeaponRangeClipsAnimation();														_newWeaponTile = null;						}						else if( newTile != _newWeaponTile )						{							SoundEffectPlayer.getInstance().playLibrarySound( "sfx_tile_hover_2.wav", false, "sfx_tile_hover_2.wav", "sfx_tile_hover_2.wav", SoundEffectPlayer.SOUND_PLAYER_SFX );														_newWeaponTile = newTile;							stopWeaponRangeClipsAnimation();														var tilePosition:Point = scaledElementContainer_mc.globalToLocal(_newWeaponTile.contentClip.parent.localToGlobal(new Point(_newWeaponTile.x, _newWeaponTile.y)));														newWeaponContainer_mc.x = tilePosition.x;							newWeaponContainer_mc.y = tilePosition.y;							//newWeaponContainer_mc.visible = true;							newWeaponContainer_mc.alpha = 1;							newWeaponRange_mc.x = newWeaponContainer_mc.x;							newWeaponRange_mc.y = newWeaponContainer_mc.y;														var weaponDirection:int = _gameboardController.findWeaponDirectionOnATilePath(_newWeaponTile);														if( !_currentItemSelected.oneDirectionOnly )							{								//weaponDirection = _gameboardController.findWeaponDirectionOnATilePath(_newWeaponTile);																switch( weaponDirection )								{									case GameLevelUtil.DIRECTION_UP:										_newWeaponUpBitmap.transform.matrix = _newWeaponUpOriginalMatrix;										_newWeaponUpBitmap.visible = true;										_newWeaponDownBitmap.visible = false;										break;																		case GameLevelUtil.DIRECTION_RIGHT:										_newWeaponUpBitmap.transform.matrix = _newWeaponUpFlippedMatrix;										_newWeaponUpBitmap.visible = true;										_newWeaponDownBitmap.visible = false;										break;																			case GameLevelUtil.DIRECTION_LEFT:										_newWeaponDownBitmap.transform.matrix = _newWeaponDownFlippedMatrix;										_newWeaponDownBitmap.visible = true;										_newWeaponUpBitmap.visible = false;										break;																		case GameLevelUtil.DIRECTION_DOWN:										_newWeaponDownBitmap.transform.matrix = _newWeaponDownOriginalMatrix;										_newWeaponDownBitmap.visible = true;										_newWeaponUpBitmap.visible = false;										break;								}															}														highlightWeaponRange( _currentItemSelected, _newWeaponTile, weaponDirection );						}					}					else					{						//var localPosition:Point = this.globalToLocal( new Point(event.stageX, event.stageY) );												newWeaponContainer_mc.x = localPosition.x;						newWeaponContainer_mc.y = localPosition.y;						//newWeaponContainer_mc.visible = true;						newWeaponContainer_mc.alpha = .5;						newWeaponRange_mc.x = newWeaponContainer_mc.x;						newWeaponRange_mc.y = newWeaponContainer_mc.y;												//_weaponPlacementClip.stopAnimation();						//_weaponPlacementClip.contentClip.visible = false;						stopWeaponRangeClipsAnimation();												_newWeaponTile = null;					}										//trace( "mouse in tile 0,0 ? "+GameboardTile(_tiles[0][0]).getCollisionRect( _tiles[0][0].isometricPath_mc, weaponMarker_mc, _contentClip, true ) );				}							/** handleAddNewWeaponMouseUp			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */			 	protected function handleAddNewWeaponMouseUp( event:MouseEvent ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "Gameboard", "handleAddNewWeaponMouseUp();" );										_contentClip.stage.removeEventListener( MouseEvent.MOUSE_MOVE, handleAddNewWeaponMouseMove );					_contentClip.stage.removeEventListener( MouseEvent.MOUSE_UP, handleAddNewWeaponMouseUp );										_addingNewWeapon = false;					//weaponMarker_mc.visible = false;					newWeaponContainer_mc.visible = false;					newWeaponRange_mc.visible = false;										//_weaponPlacementClip.stopAnimation();					//_weaponPlacementClip.contentClip.visible = false;					stopWeaponRangeClipsAnimation();										if( _newWeaponTile != null )					{						//trace( "adding new weapon on tile: "+_newWeaponTile );												//TODO:						//	Might want to move this WeaponDisplayObject creation to GameboardController instead of creating here.						//var weaponDisplayObject:WeaponDisplayObject = new (getDefinitionByName("WeaponDisplayObjectLibrary") as Class)();							//weaponDisplayObject.attackingGameObject = _currentItemSelected as Weapon;							//weaponDisplayObject.inIsometricView = _inIsometricView;							//weaponDisplayObject.currentTile = _newWeaponTile;												//_weaponDisplayObjectController.addWeaponDisplayObject( weaponDisplayObject );						//trace( "time when we're adding new weapon: "+getTimer() );						//_gameboardController.addWeapon( weaponDisplayObject );						//dispatchEvent( new CustomEvent("onAddWeaponDisplayObject", {weaponDisplayObject:weaponDisplayObject}) );						_gameboardController.addWeapon( _currentItemSelected as Weapon, _newWeaponTile, _giftSelected );												if( MainGameController.getInstance().currentUser.tutorialGameLevel || MainGameController.getInstance().currentUser.tutorialGameLevelDelete )						{							//trace( "dispatch weapon added event" );							//dispatchEvent( new GameLevelEvent(GameLevelEvent.ON_WEAPON_ADDED) );							onWeaponAdded.dispatch();						}												_newWeaponTile = null;												if( _giftSelected )						{							_giftSelected = false;							_giftClip.hide();							MainGameController.getInstance().deleteGift( GameLevelCurrentData.getInstance().gift );						}												resetWeaponIcon();					}					else					{						//trace( "clicked on invalid point" );						//trace( "_gameboardMenuClip.currentIconSelected: "+_gameboardMenuClip.currentIconSelected );						//trace( "newWeaponContainer_mc.parent: "+newWeaponContainer_mc.parent );						newWeaponContainer_mc.visible = true;						var position:Point;						if( _giftSelected )						{							position = UtilFunctions.localToLocal( gift_mc, newWeaponContainer_mc.parent );							_giftSelected = false;						}						else						{							position = UtilFunctions.localToLocal( _gameboardMenuClip.currentIconSelected.contentClip, newWeaponContainer_mc.parent );						}						TweenLite.to( newWeaponContainer_mc, .5, {x:position.x+20, y:position.y+40, ease:Circ.easeOut, onComplete:handleAnimateBackComplete});												SoundEffectPlayer.getInstance().playLibrarySound( "buzzer.wav", false, "buzzer.wav", "buzzer.wav", SoundEffectPlayer.SOUND_PLAYER_SFX );						//dispatchEvent( new BoogaEvent(BoogaEvent.ON_PLACE_WEAPON_ON_INVALID_SPOT, {item:_currentItemSelected}) );						onWeaponPlacedOnInvalidSpot.dispatch( _currentItemSelected );					}										_currentItemSelected = null;										_gameboardMenuClip.resetMenu();					//resetWeaponIcon();										_gameboardController.weaponDisplayObjectController.enableInteraction();				}								protected function handleAnimateBackComplete():void				{					//trace( "handleAnimateBackComplete();" );										newWeaponContainer_mc.visible = false;					resetWeaponIcon();				}							/** handleAddNewGodMouseMove			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */			 	protected function handleAddNewGodMouseMove( event:MouseEvent ):void				{					var localPosition:Point = scaledElementContainer_mc.globalToLocal( new Point(event.stageX, event.stageY) );					weaponMarker_mc.x = localPosition.x;					weaponMarker_mc.y = localPosition.y;					//weaponMarker_mc.visible = true;										//_newWeaponTile = null;					var newTile:GameboardTile;										var i:uint, j:uint;										for( i=0; i<_tilesLength; ++i )					{						for( j=0; j<_tiles[i].length; ++j )						{							if( _tiles[i][j].tileTypeIndex != GameboardTile.TILE_TYPE_GATE_INDEX && !UtilFunctions.getCollisionRect( _tiles[i][j].isometricPath_mc, weaponMarker_mc, _contentClip, true ).isEmpty() )							{								//_newWeaponTile = _tiles[i][j];								newTile = _tiles[i][j];								//trace( "newTile: "+newTile );								//trace( "newTile.occupiedByWeapon: "+newTile.occupiedByWeapon );								break;							}						}					}										if( newTile != null )					{						if( newTile != _newWeaponTile )						{							SoundEffectPlayer.getInstance().playLibrarySound( "sfx_tile_hover_2.wav", false, "sfx_tile_hover_2.wav", "sfx_tile_hover_2.wav", SoundEffectPlayer.SOUND_PLAYER_SFX );														_newWeaponTile = newTile;														if( newTile == null )							{								//newWeaponContainer_mc.visible = false;							}							else							{								var tilePosition:Point = scaledElementContainer_mc.globalToLocal(_newWeaponTile.contentClip.parent.localToGlobal(new Point(_newWeaponTile.x, _newWeaponTile.y)));																newWeaponContainer_mc.x = tilePosition.x;								newWeaponContainer_mc.y = tilePosition.y;								//newWeaponContainer_mc.visible = true;								newWeaponContainer_mc.alpha = 1;								newWeaponRange_mc.x = newWeaponContainer_mc.x;								newWeaponRange_mc.y = newWeaponContainer_mc.y;							}														//_weaponPlacementClip.startAnimation();							//_weaponPlacementClip.contentClip.visible = true;							if( _weaponRangeClips.length == 0 )							{								/*								var weaponRangeClip:AnimationDisplayObject = new AnimationDisplayObject();									weaponRangeClip.contentClip = new (getDefinitionByName("DisplayObject.animation") as Class)();									weaponRangeClip.contentClip.mouseChildren = false;									weaponRangeClip.contentClip.mouseEnabled = false;									weaponRangeClip.contentClip.transform.colorTransform = new ColorTransform( .5, .5, .5, 1, 72, 119, 119, 0 );									weaponRangeClipsContainer_mc.addChild( weaponRangeClip.contentClip );									weaponRangeClip.init();									weaponRangeClip.animationObject = GameLevelDataIndex.getInstance().getAnimationObjectByCacheId("GoldenGlow");									weaponRangeClip.sourceBD = BitmapDataManager.getInstance().getBitmapData("GoldenGlow").bitmapData;									weaponRangeClip.initCanvas();								_weaponRangeClips.push( weaponRangeClip );								*/								addWeaponRangeClip();							}														_weaponRangeClips[0].contentClip.x = 0;							_weaponRangeClips[0].contentClip.y = 0;							_weaponRangeClips[0].startAnimation();							_weaponRangeClips[0].contentClip.visible = true;							weaponRange_mc.cacheAsBitmap = false;							weaponRange_mc.scaleX = weaponRange_mc.scaleY = 16;							weaponRange_mc.cacheAsBitmap = true;							weaponRange_mc.mask = weaponRangeMask_mc;							weaponRange_mc.visible = true;							//trace( "weaponRange_mc.x: "+weaponRange_mc.x );							//trace( "weaponRange_mc.y: "+weaponRange_mc.y );						}					}					else					{						newWeaponContainer_mc.x = localPosition.x;						newWeaponContainer_mc.y = localPosition.y;						//newWeaponContainer_mc.visible = true;						newWeaponContainer_mc.alpha = .5;						newWeaponRange_mc.x = newWeaponContainer_mc.x;						newWeaponRange_mc.y = newWeaponContainer_mc.y;												_newWeaponTile = null;												//_weaponPlacementClip.stopAnimation();						//_weaponPlacementClip.contentClip.visible = false;						stopWeaponRangeClipsAnimation();					}				}							/** handleAddNewGodMouseUp			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */			 	protected function handleAddNewGodMouseUp( event:MouseEvent ):void				{					_contentClip.stage.removeEventListener( MouseEvent.MOUSE_MOVE, handleAddNewGodMouseMove );					_contentClip.stage.removeEventListener( MouseEvent.MOUSE_UP, handleAddNewGodMouseUp );										_addingNewGod = false;					//weaponMarker_mc.visible = false;					newWeaponContainer_mc.visible = false;					newWeaponRange_mc.visible = false;										//_weaponPlacementClip.stopAnimation();					//_weaponPlacementClip.contentClip.visible = false;					stopWeaponRangeClipsAnimation();										if( _newWeaponTile != null )					{						//trace( _newWeaponTile );												/*						var godDisplayObject:GodDisplayObject = new GodDisplayObject();							godDisplayObject.contentClip = new (getDefinitionByName("GodDisplayObjectLibrary") as Class)();							godDisplayObject.init();							godDisplayObject.god = _currentItemSelected as God;							godDisplayObject.inIsometricView = _inIsometricView;							godDisplayObject.currentTile = _newWeaponTile;												_gameboardController.addGod( godDisplayObject );						*/												_gameboardController.addGod( _currentItemSelected as God, _newWeaponTile, _giftSelected );												_newWeaponTile = null;												if( _giftSelected )						{							_giftSelected = false;							_giftClip.hide();							MainGameController.getInstance().deleteGift( GameLevelCurrentData.getInstance().gift );						}												resetWeaponIcon();					}					else					{						newWeaponContainer_mc.visible = true;						var position:Point;						if( _giftSelected )						{							position = UtilFunctions.localToLocal( gift_mc, newWeaponContainer_mc.parent );							_giftSelected = false;						}						else						{							position = UtilFunctions.localToLocal( _gameboardMenuClip.currentIconSelected.contentClip, newWeaponContainer_mc.parent );						}						TweenLite.to( newWeaponContainer_mc, .5, {x:position.x+20, y:position.y+40, ease:Circ.easeOut, onComplete:handleAnimateBackComplete});						SoundEffectPlayer.getInstance().playLibrarySound( "buzzer.wav", false, "buzzer.wav", "buzzer.wav", SoundEffectPlayer.SOUND_PLAYER_SFX );					}										_currentItemSelected = null;										_gameboardMenuClip.resetMenu();					//resetWeaponIcon();										_gameboardController.weaponDisplayObjectController.enableInteraction();				}							/** handleGameboardMenuDeleteSelected			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */			 	protected function handleGameboardMenuDeleteSelected():void				{					//_contentClip.stage.addEventListener( MouseEvent.MOUSE_MOVE, handleDeleteWeaponMouseMove, false, 0, true );					//_contentClip.stage.addEventListener( MouseEvent.MOUSE_UP, handleDeleteWeaponMouseUp, false, 0, true );										removeAddDeleteWeaponListeners();					resetWeaponIcon();										var deleteIcon:MovieClip = new (getDefinitionByName("GameboardMenu.DeleteIcon") as Class)();						deleteIcon.x = -deleteIcon.width/2;						deleteIcon.y = -deleteIcon.height/2;										var localPosition:Point = scaledElementContainer_mc.globalToLocal( new Point(_contentClip.stage.mouseX, _contentClip.stage.mouseY) );						newWeaponContainer_mc.x = localPosition.x;						newWeaponContainer_mc.y = localPosition.y;						newWeaponRange_mc.x = newWeaponContainer_mc.x;						newWeaponRange_mc.y = newWeaponContainer_mc.y;										newWeaponContainer_mc.addChild( deleteIcon );					newWeaponContainer_mc.visible = true;					newWeaponRange_mc.visible = true;										_newWeaponTile = null;					//weaponMarker_mc.visible = true;					//weaponMarker_mc.alpha = .3;										//_weaponPlacementClip.contentClip.transform.colorTransform = new ColorTransform( 0, 0, 0, 1, 255, 0, 0, 0 );					if( _weaponRangeClips.length == 0 )					{						/*						var weaponRangeClip:AnimationDisplayObject = new AnimationDisplayObject();							weaponRangeClip.contentClip = new (getDefinitionByName("DisplayObject.animation") as Class)();							weaponRangeClip.contentClip.mouseChildren = false;							weaponRangeClip.contentClip.mouseEnabled = false;							weaponRangeClip.contentClip.transform.colorTransform = new ColorTransform( .5, .5, .5, 1, 72, 119, 119, 0 );							weaponRangeClipsContainer_mc.addChild( weaponRangeClip.contentClip );							weaponRangeClip.init();							weaponRangeClip.animationObject = GameLevelDataIndex.getInstance().getAnimationObjectByCacheId("GoldenGlow");							weaponRangeClip.sourceBD = BitmapDataManager.getInstance().getBitmapData("GoldenGlow").bitmapData;							weaponRangeClip.initCanvas();						_weaponRangeClips.push( weaponRangeClip );						*/						addWeaponRangeClip();					}										_weaponRangeClips[0].contentClip.x = 0;					_weaponRangeClips[0].contentClip.y = 0;					_weaponRangeClips[0].contentClip.transform.colorTransform = new ColorTransform( 0, 0, 0, 1, 255, 0, 0, 0 );					_weaponRangeClips[0].startAnimation();					_weaponRangeClips[0].contentClip.visible = true;										_gameboardController.weaponDisplayObjectController.disableInteraction();										delayDeleteWeaponListener();										//dispatchEvent( new GameLevelEvent(GameLevelEvent.ON_MENU_DELETE_SELECTED) );					onMenuDeleteSelected.dispatch();				}							/** delayDeleteWeaponListener			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */			 	protected function delayDeleteWeaponListener():void				{					if( _delayDeleteWeaponListenerTimer == null )					{						_delayDeleteWeaponListenerTimer = new Timer( 200, 1 );						_delayDeleteWeaponListenerTimer.addEventListener( TimerEvent.TIMER_COMPLETE, handleDelayDeleteWeaponListenerComplete, false, 0, true );					}										_delayDeleteWeaponListenerTimer.start();										/*					var timer:Timer = new Timer( 200, 1 );						timer.addEventListener( TimerEvent.TIMER_COMPLETE, handleDelayDeleteWeaponListenerComplete, false, 0, true );						timer.start();					*/				}								protected function handleDelayDeleteWeaponListenerComplete( event:TimerEvent ):void				{					_delayDeleteWeaponListenerTimer.reset();										_contentClip.stage.addEventListener( MouseEvent.MOUSE_MOVE, handleDeleteWeaponMouseMove, false, 0, true );					_contentClip.stage.addEventListener( MouseEvent.MOUSE_UP, handleDeleteWeaponMouseUp, false, 0, true );				}							/** handleDeleteWeaponMouseMove			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */			 	protected function handleDeleteWeaponMouseMove( event:MouseEvent ):void				{					var localPosition:Point = scaledElementContainer_mc.globalToLocal( new Point(event.stageX, event.stageY) );					weaponMarker_mc.x = localPosition.x;					weaponMarker_mc.y = localPosition.y;										var newTile:GameboardTile;										var i:uint, j:uint;										for( i=0; i<_tilesLength; ++i )					{						for( j=0; j<_tiles[i].length; ++j )						{							//trace( "j: "+j );							if( _tiles[i][j].tileTypeIndex == GameboardTile.TILE_TYPE_PATH_INDEX )							{								if( !UtilFunctions.getCollisionRect( _tiles[i][j].isometricPath_mc, weaponMarker_mc, _contentClip, true ).isEmpty() )								{									//_newWeaponTile = _tiles[i][j];									newTile = _tiles[i][j];									//trace( "newTile: "+newTile );									//trace( "newTile.occupiedByWeapon: "+newTile.occupiedByWeapon );								}								/*								else //if( _tiles[i][j].row == 0 )								{									//trace( "up extra hit area: "+_tiles[i][j].hasExtraHitArea1 );									//trace( "left extra hit area: "+_tiles[i][j].hasExtraHitArea4 );									//trace( "right extra hit area: "+_tiles[i][j].hasExtraHitArea2 );																		if( _tiles[i][j].hasExtraHitArea1 && !UtilFunctions.getCollisionRect( _tiles[i][j].extraHitArea1_mc, weaponMarker_mc, _contentClip, true ).isEmpty() )									{										newTile = _tiles[i][j];									}									else if( _tiles[i][j].hasExtraHitArea2 && !UtilFunctions.getCollisionRect( _tiles[i][j].extraHitArea2_mc, weaponMarker_mc, _contentClip, true ).isEmpty() )									{										newTile = _tiles[i][j];									}									else if( _tiles[i][j].hasExtraHitArea3 && !UtilFunctions.getCollisionRect( _tiles[i][j].extraHitArea3_mc, weaponMarker_mc, _contentClip, true ).isEmpty() )									{										newTile = _tiles[i][j];									}									else if( _tiles[i][j].hasExtraHitArea4 && !UtilFunctions.getCollisionRect( _tiles[i][j].extraHitArea4_mc, weaponMarker_mc, _contentClip, true ).isEmpty() )									{										newTile = _tiles[i][j];									}								}								*/								if( newTile != null )								{									//trace( "found tile, no need to loop again" );									break;								}							}													}					}										//trace( "newTile: "+newTile );										if( newTile != null && newTile.occupiedByWeapon )					{						//trace( "newTile.occupiedByWeapon: "+newTile.occupiedByWeapon );												//weaponMarker_mc.visible = true;						//trace( "weaponMarker_mc.x: "+weaponMarker_mc.x );						//trace( "weaponMarker_mc.y: "+weaponMarker_mc.y );												if( _newWeaponTile != newTile )						{							SoundEffectPlayer.getInstance().playLibrarySound( "sfx_tile_hover_2.wav", false, "sfx_tile_hover_2.wav", "sfx_tile_hover_2.wav", SoundEffectPlayer.SOUND_PLAYER_SFX );														_newWeaponTile = newTile;														var tilePosition:Point = scaledElementContainer_mc.globalToLocal(_newWeaponTile.contentClip.parent.localToGlobal(new Point(_newWeaponTile.x, _newWeaponTile.y)));														newWeaponContainer_mc.x = tilePosition.x;							newWeaponContainer_mc.y = tilePosition.y;							//newWeaponContainer_mc.visible = true;							newWeaponContainer_mc.alpha = 1;							newWeaponRange_mc.x = newWeaponContainer_mc.x;							newWeaponRange_mc.y = newWeaponContainer_mc.y;														//_weaponPlacementClip.startAnimation();							//_weaponPlacementClip.contentClip.visible = true;							_weaponRangeClips[0].startAnimation();							_weaponRangeClips[0].contentClip.visible = true;						}					}					else					{						_newWeaponTile = null;						//weaponMarker_mc.visible = false;						//newWeaponContainer_mc.visible = true;						newWeaponContainer_mc.x = localPosition.x;						newWeaponContainer_mc.y = localPosition.y;						newWeaponContainer_mc.alpha = .5;						newWeaponRange_mc.x = newWeaponContainer_mc.x;						newWeaponRange_mc.y = newWeaponContainer_mc.y;												//_weaponPlacementClip.stopAnimation();						//_weaponPlacementClip.contentClip.visible = false;						stopWeaponRangeClipsAnimation();					}				}							/** handleDeleteWeaponMouseUp			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */			 	protected function handleDeleteWeaponMouseUp( event:MouseEvent ):void				{					_contentClip.stage.removeEventListener( MouseEvent.MOUSE_MOVE, handleDeleteWeaponMouseMove );					_contentClip.stage.removeEventListener( MouseEvent.MOUSE_UP, handleDeleteWeaponMouseUp );										if( _newWeaponTile != null )					{						//dispatchEvent( new CustomEvent("onDeleteWeaponByUser") );						_gameboardController.removeWeaponInTile( _newWeaponTile );						_newWeaponTile = null;						//weaponMarker_mc.visible = false;						newWeaponContainer_mc.visible = false;						newWeaponRange_mc.visible = false;						resetWeaponIcon();					}					else					{						newWeaponContainer_mc.visible = true;						var position:Point = UtilFunctions.localToLocal( _gameboardMenuClip.delete_mc, newWeaponContainer_mc.parent );						TweenLite.to( newWeaponContainer_mc, .5, {x:position.x+18, y:position.y+20, ease:Circ.easeOut, onComplete:handleAnimateBackComplete});												SoundEffectPlayer.getInstance().playLibrarySound( "buzzer.wav", false, "buzzer.wav", "buzzer.wav", SoundEffectPlayer.SOUND_PLAYER_SFX );						//dispatchEvent( new BoogaEvent(BoogaEvent.ON_DELETE_WEAPON_ON_INVALID_SPOT) );						onWeaponDeletedOnInvalidSpot.dispatch();					}										stopWeaponRangeClipsAnimation();					_weaponRangeClips[0].contentClip.transform.colorTransform = new ColorTransform( 0, 0, 0, 1, 143, 237, 237, 0 );										_gameboardMenuClip.resetMenu();					//resetWeaponIcon();										_gameboardController.weaponDisplayObjectController.enableInteraction();				}							/** handleSlotSpinStarts			  *	---------------------------------------------------------------------------- *			  *	This event is fired when slot spin starts.			  *	---------------------------------------------------------------------------- */			 	//protected function handleSlotSpinStarts( event:GameLevelEvent ):void				protected function handleSlotSpinStarted():void				{					//dispatchEvent( new GameLevelEvent(GameLevelEvent.ON_SLOT_SPIN_STARTS) );					onSlotSpinStarted.dispatch();				}							/** handleSlotSpinEnds			  *	---------------------------------------------------------------------------- *			  *	This event is fired when the slot spin ends.			  *	---------------------------------------------------------------------------- */			 	//protected function handleSlotSpinEnds( event:GameLevelEvent ):void				protected function handleSlotSpinEnded( win:Boolean, winningModifier:Number ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( "Gameboard", "handleSlotSpinEnds();" );										//dispatchEvent( new GameLevelEvent(GameLevelEvent.ON_SLOT_SPIN_ENDS, event.customParameters) );					onSlotSpinEnded.dispatch( win, winningModifier );				}							/** getTilesForPath			  *	---------------------------------------------------------------------------- *			  *	Get the actual tiles when the data for the path is passed in.			  *	---------------------------------------------------------------------------- */			 	public function getTilesForPath( path:Array ):Vector.<GameboardTile>				{					var tiles:Vector.<GameboardTile> = new Vector.<GameboardTile>;										for( var i:int=0; i<path.length; ++i )					{						tiles.push( _tiles[path[i].r][path[i].c] );					}										for( i=0; i<_gateTiles.length; ++i )					{						if( _gateTiles[i].column == path[path.length-1].c )						{							tiles.push( _gateTiles[i] );							break;						}					}										return tiles;				}								public function getTilesForSpawnPath( spawnPath:Array, area:int ):Vector.<GameboardTile>				{					var tiles:Vector.<GameboardTile> = new Vector.<GameboardTile>;					var diggingTiles:Vector.<Vector.<DiggingTile>>;										if( area == 0 )						diggingTiles = _diggingTiles1;					else if( area == 1 )						diggingTiles = _diggingTiles2;					else if( area == 2 )						diggingTiles = _diggingTiles3;										for( var i:int=0; i<spawnPath.length; ++i )					{						tiles.push( diggingTiles[spawnPath[i].r][spawnPath[i].c] );					}										return tiles;				}							/** handleLanguageChanged			  *	---------------------------------------------------------------------------- *			  *	When a language is changed, update the text accordingly.			  *	---------------------------------------------------------------------------- */				protected function handleLanguageChanged( customParameters:Object ):void				{					digText_mc.digTextAnimation_mc.label1_txt.setTextFormat( _digTextOriginalTextFormat );					digText_mc.digTextAnimation_mc.label2_txt.setTextFormat( _digText2OriginalTextFormat );										TextFormatting.formatTextWithFontName( digText_mc.digTextAnimation_mc.label1_txt, StringsIndex.getInstance().getStringByName("DIG_DIG"), "Lithos Pro Black", false, TextFieldAutoSize.CENTER );					TextFormatting.formatTextWithFontName( digText_mc.digTextAnimation_mc.label2_txt, StringsIndex.getInstance().getStringByName("DIG_DIG"), "Lithos Pro Black", false, TextFieldAutoSize.CENTER );					var digTextTF:TextFormat = digText_mc.digTextAnimation_mc.label1_txt.getTextFormat();					var digText2TF:TextFormat = digText_mc.digTextAnimation_mc.label2_txt.getTextFormat();										while( digText_mc.digTextAnimation_mc.label1_txt.width > _digTextMaxWidth )					{						digTextTF.size = Number(digTextTF.size) - 1;						digText_mc.digTextAnimation_mc.label1_txt.setTextFormat( digTextTF );											}										digText2TF.size = digTextTF.size;					digText_mc.digTextAnimation_mc.label2_txt.setTextFormat( digText2TF );				}		}	}	