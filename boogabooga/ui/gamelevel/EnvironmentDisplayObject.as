/** EnvironmentDisplayObject  *	---------------------------------------------------------------------------- *  *	@desc:  *		This is the display object clip for the environments.  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.gamelevel	{		import flash.display.Bitmap;		import flash.display.BitmapData;		import flash.display.BlendMode;		import flash.display.DisplayObject;		import flash.display.DisplayObjectContainer;		import flash.display.MovieClip;		import flash.events.Event;		import flash.events.TimerEvent;		import flash.geom.ColorTransform;		import flash.geom.Matrix;		import flash.geom.Point;		import flash.geom.Rectangle;		import flash.utils.getDefinitionByName;				import com.greensock.TweenLite;		import com.avatarlabs.utils.cache.BitmapDataManager;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.loader.CustomLoader;		import com.avatarlabs.utils.UtilFunctions;		import com.avatarlabs.utils.timers.CustomTimer;		import com.avatarlabs.utils.userinterface.UILabel;		import com.desuade.partigen.emitters.Emitter;		import com.desuade.partigen.events.ParticleEvent;				//import com.gamelevel.data.*;		import com.boogabooga.data.gamelevel.AbstractGameObject;		import com.boogabooga.data.gamelevel.GameLevelEnvironmentObject;		import com.boogabooga.data.gamelevel.Weapon;		import com.boogabooga.ui.gamelevel.AnimationDisplayObject;		import com.boogabooga.ui.gamelevel.GameboardTile;		import com.boogabooga.ui.gamelevel.GameLevelAttackingDisplayObject;		import com.boogabooga.ui.gamelevel.GameLevelDisplayObject;		import com.boogabooga.utils.GameLevelUtil;		import flash.events.MouseEvent;		import com.boogabooga.data.gamelevel.EnvironmentObject;				public class EnvironmentDisplayObject extends GameLevelDisplayObject		{			//protected var _row:int;			//protected var _column:int;			//protected var _offsetPosition:Point;			//protected var _layer:int;			protected var _gameLevelEnvironmentObject:GameLevelEnvironmentObject;			//protected var _environmentObject:EnvironmentObject;			//protected var _environmentObjectId:int;						protected var _editable:Boolean;						/** Constructor			  *	---------------------------------------------------------------------- */				public function EnvironmentDisplayObject()				{					//_offsetPosition = new Point();										_editable = false;				}								override public function kill():void				{					super.kill();										//_offsetPosition = null;				}				/*				public function set row( i:int ):void { _row = i; }				public function get row():int { return _row; }								public function set column( i:int ):void { _column = i; }				public function get column():int { return _column; }								public function set offsetPosition( p:Point ):void { _offsetPosition = p; }				public function get offsetPosition():Point { return _offsetPosition; }								public function set layer( i:int ):void { _layer = i; }				public function get layer():int { return _layer; }								public function set environmentObjectId( i:int ):void { _environmentObjectId = i; }				public function get environmentObjectId():int { return _environmentObjectId; }				*/								public function set gameLevelEnvironmentObject( g:GameLevelEnvironmentObject ):void { _gameLevelEnvironmentObject = g; }				public function get gameLevelEnvironmentObject():GameLevelEnvironmentObject { return _gameLevelEnvironmentObject; }								public function set editable( b:Boolean ):void				{					_editable = b;										if( _editable )					{						_contentClip.buttonMode = true;						//_contentClip.addEventListener( MouseEvent.CLICK, handleClicked, false, 0, true );						//_contentClip.addEventListener( MouseEvent.MOUSE_UP, handleMouseUp, false, 0, true );						_contentClip.addEventListener( MouseEvent.MOUSE_DOWN, handleMouseDown, false, 0, true );					}					else					{						_contentClip.buttonMode = false;						//_contentClip.removeEventListener( MouseEvent.CLICK, handleClicked );						//_contentClip.removeEventListener( MouseEvent.MOUSE_UP, handleMouseUp );						_contentClip.removeEventListener( MouseEvent.MOUSE_DOWN, handleMouseDown );					}				}								override public function pause():void				{					super.pause();										_contentClip.stop();				}								override public function unpause():void				{					super.unpause();										if( _contentClip.totalFrames > 1 )						_contentClip.play();				}								protected function handleClicked( event:MouseEvent ):void				{					ConsoleBroadcaster.broadcast( "EnvironmentDisplayObject", "handleClicked();" );					//dispatchEvent( new CustomEvent("onClick") );				}								protected function handleMouseDown( event:MouseEvent ):void				{					ConsoleBroadcaster.broadcast( "EnvironmentDisplayObject", "handleMouseDown();" );										dispatchEvent( new CustomEvent("onClick") );				}								protected function handleMouseUp( event:MouseEvent ):void				{					ConsoleBroadcaster.broadcast( "EnvironmentDisplayObject", "handleMouseUp();" );				}		}	}