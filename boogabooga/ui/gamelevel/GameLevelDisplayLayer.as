/** GameLevelDisplayLayer  *	---------------------------------------------------------------------------- *  *	@desc:  *		This class organizes the layering system of GameLevelDisplayObjects  *		The layering system goes from the furthest tile, the top right tile, as  *		layer #1 all the way to the bottom left tile as layer #15.  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */	package com.boogabooga.ui.gamelevel	{		import flash.display.MovieClip;		import flash.events.*;		import flash.errors.*;		import flash.utils.getDefinitionByName;		import flash.utils.Timer;				import com.greensock.TweenLite;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;						public class GameLevelDisplayLayer extends EventDispatcher		{			protected var _contentClip:MovieClip;			protected var _layers:Vector.<GameLevelDisplayLayerItem>;						/**	Stage Instances **/			/*			public var layer1_mc:MovieClip;			public var layer2_mc:MovieClip;			public var layer3_mc:MovieClip;			public var layer4_mc:MovieClip;			public var layer5_mc:MovieClip;			public var layer6_mc:MovieClip;			public var layer7_mc:MovieClip;			public var layer8_mc:MovieClip;			public var layer9_mc:MovieClip;			public var layer10_mc:MovieClip;			public var layer11_mc:MovieClip;			public var layer12_mc:MovieClip;			public var layer13_mc:MovieClip;			public var layer14_mc:MovieClip;			public var layer15_mc:MovieClip;			*/			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------- */				public function GameLevelDisplayLayer()				{					//init();										//TODO:					//	We might have to have layers inside these layer movie clips					//	if we are going to have different layers for things on the stage.					//	e.g. if we were to have shadows from the enemies that are always					//	going to be on top of weapons, etc.				}								public function set contentClip( m:MovieClip ):void				{					_contentClip = m;					_contentClip.gotoAndStop(1);									}				public function get contentClip():MovieClip { return _contentClip; }							/** set/get gameboardReference			  *	---------------------------------------------------------------------- 				public function set gameboardReference( _g:Gameboard ):void				{					this._gameboardReference = _g;				}				public function get gameboardReference():Gameboard				{					return this._gameboardReference;				}*/								public function get layers():Vector.<GameLevelDisplayLayerItem> { return _layers; }							/** init			  *	---------------------------------------------------------------------- *			  *	Initialize GameLevelDisplayLayer Clip.			  *	---------------------------------------------------------------------- */				public function init():void				{					_layers = new Vector.<GameLevelDisplayLayerItem>;										var layerClip:GameLevelDisplayLayerItem;										for( var i:int=0; i<32; i++ )					{						//layerClip = new MovieClip();						layerClip = new GameLevelDisplayLayerItem();						layerClip.contentClip = new (getDefinitionByName("Gameboard.DisplayLayer.Item") as Class)();						layerClip.contentClip.name = "layer"+i+"_mc";						//layerClip.mouseChildren = false;						layerClip.contentClip.mouseEnabled = false;						_contentClip.addChild( layerClip.contentClip );												_layers.push( layerClip );					}										_contentClip.mouseEnabled = false;										//trace( "layer1_mc: "+layer1_mc );														}							/** moveClipToLayer			  *	---------------------------------------------------------------------- *			  *	Moves clip to a a layer view.			  *	If the clip is coming from a higher layer, it will be added on top			  *	in the new layer. If the clip is coming from a lower layer, it will be			  *	added in the back.			  *	---------------------------------------------------------------------- */				public function moveClipToLayer( clip:MovieClip, layerNumber:int, layerItem:int=1 ):void				{					//trace( "moveClipToLayer("+clip+", "+layerNumber+");" );										var prevLayerNumber:int = 0;										if( clip.layerNumber == undefined )					{						//trace( "first time setting it, no layer number" );						clip.layerNumber = 0;					}					else					{						prevLayerNumber = clip.layerNumber;					}										if( clip.parent && prevLayerNumber != layerNumber )					{						/*						for( var i:uint=0; i<_layers.length; ++i )						{							if( clip.parent == _layers[i] )							{								prevLayerNumber = i;								break;							}						}						*/												clip.parent.removeChild( clip );					}										//trace( "prevLayerNumber: "+prevLayerNumber );					//trace( "layerNumber: "+layerNumber );										if( prevLayerNumber == 0 )						_layers[layerNumber].getLayerClip(layerItem).addChild( clip );					else if( prevLayerNumber < layerNumber )						_layers[layerNumber].getLayerClip(layerItem).addChildAt( clip, 0 );					else if( prevLayerNumber > layerNumber )						_layers[layerNumber].getLayerClip(layerItem).addChild( clip );										clip.layerNumber = layerNumber;										//_layers[layerNumber].addChildAt( clip, 0 );									}								public function addClipToLayerInFront( clip:MovieClip, layerNumber:int, layerItem:int=1 ):void				{					_layers[layerNumber].getLayerClip(layerItem).addChild( clip );				}								public function addClipToLayerInBack( clip:MovieClip, layerNumber:int, layerItem:int=1 ):void				{					_layers[layerNumber].getLayerClip(layerItem).addChildAt( clip, 0 );				}							/** kill			  *	---------------------------------------------------------------------- *			  *	Removes all the layer movie clips			  *	---------------------------------------------------------------------- */				public function kill():void				{					//trace(this + ' : kill : ');					if( _layers != null )					{						var layersLength:uint = _layers.length;												for( var i:uint=0; i<layersLength; i++ )						{							//while( _layers[i].numChildren > 0 )								//delete _layers[i].removeChildAt(0);							_layers[i].kill();						}					}				}						}			}