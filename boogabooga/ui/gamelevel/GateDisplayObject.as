/** GateDisplayObject  *	---------------------------------------------------------------------------- *  *	@desc:  *		This is the display object clip that will represent Gate in the village  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.gamelevel	{		import flash.display.Bitmap;		import flash.display.BitmapData;		import flash.display.BlendMode;		import flash.display.DisplayObject;		import flash.display.DisplayObjectContainer;		import flash.display.MovieClip;		import flash.display.Sprite;		import flash.events.Event;		import flash.events.TimerEvent;		import flash.geom.ColorTransform;		import flash.geom.Matrix;		import flash.geom.Point;		import flash.geom.Rectangle;		import flash.utils.getDefinitionByName;				import com.greensock.TweenLite;		import com.avatarlabs.utils.UtilFunctions;		import com.avatarlabs.utils.VectorUtil;		import com.avatarlabs.utils.cache.BitmapDataManager;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.loader.CustomLoader;		import com.avatarlabs.utils.timers.CustomTimer;		import com.avatarlabs.utils.userinterface.UILabel;		import org.osflash.signals.Signal;				import com.boogabooga.data.SettingsIndex;		import com.boogabooga.data.gamelevel.AbstractGameObject;		import com.boogabooga.data.gamelevel.AnimationObject;		import com.boogabooga.data.gamelevel.Gate;		import com.boogabooga.data.gamelevel.GameLevelDataIndex;		import com.boogabooga.events.GameLevelEvent;		import com.boogabooga.ui.gamelevel.GameLevelDisplayObject;		import com.boogabooga.ui.gamelevel.enemies.EnemyDisplayObject;				public class GateDisplayObject extends GameLevelAttackingDisplayObject		{			protected var _healthPerAnimation:Number;			protected var _isInPath:Boolean;						//protected var _hitByLaserEnemies:Vector.<EnemyDisplayObject>;						protected var _animationClip:AnimationDisplayObject;			protected var _fireAnimationClip:AnimationDisplayObject;						protected var _toStringOutput:String;									public var onRecovered:Signal;			public var onRevived:Signal;						/**	Stage Instances **/			public var animation_mc:MovieClip;			public var fireAnimation_mc:MovieClip;			public var hitarea_mc:MovieClip;			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function GateDisplayObject()				{					//init();				}								override public function set contentClip( m:MovieClip ):void				{					super.contentClip = m;										animation_mc = _contentClip.animation_mc;					fireAnimation_mc = _contentClip.fireAnimation_mc;					fireAnimation_mc.visible = false;					hitarea_mc = _contentClip.hitarea_mc;										_animationClip = new AnimationDisplayObject();					_animationClip.contentClip = animation_mc;					_animationClip.init();					if( !SettingsIndex.getInstance().getPerformanceItemToggled(SettingsIndex.PERFORMANCE_ITEM_GATE_SMOOTHING) )					{						_animationClip.smoothing = false;					}				}											/** set/get attackingGameObject			  *	---------------------------------------------------------------------------- */				override public function set attackingGameObject( a:AbstractGameObject ):void				{					_attackingGameObject = UtilFunctions.clone(a) as Gate;										_animationClip.animationObject = Gate(_attackingGameObject).animationObject;					_animationClip.sourceBD = BitmapDataManager.getInstance().getBitmapData( Gate(_attackingGameObject).animationObject.cacheId ).bitmapData;					_animationClip.initCanvas( false );					_animationClip.showAnimation( 0 );					_animationClip.contentClip.visible = true;										_healthPerAnimation = _attackingGameObject.maxHealth / (_animationClip.animationObject.animationCount-1);										showAnimation();				}								public function set isInPath( b:Boolean ):void { _isInPath = b; }				public function get isInPath():Boolean { return _isInPath; }								public function get isFullHealth():Boolean { return _attackingGameObject.maxHealth == _attackingGameObject.health };							/** init			  *	---------------------------------------------------------------------------- */				override public function init():void				{					//trace( "GateDisplayObject: init();" );										super.init();										onRecovered = new Signal();					onRevived = new Signal( GateDisplayObject );										_animationClip.contentClip.visible = false;										_debug = true;					_isInPath = false;					_alive = true;										//_hitByLaserEnemies = new Vector.<EnemyDisplayObject>;										_toStringOutput = "";				}							/** pause			  *	---------------------------------------------------------------------------- */				override public function pause():void				{					super.pause();										if( _fireAnimationClip != null )					{						//_fireAnimationClip.pause();						_fireAnimationClip.stopAnimation();					}				}							/** unpause			  *	---------------------------------------------------------------------------- */				override public function unpause():void				{					if( _fireAnimationClip != null )					{						//_fireAnimationClip.unpause();						_fireAnimationClip.startAnimation(true);					}				}							/** kill			  *	---------------------------------------------------------------------------- */				override public function kill():void				{					ConsoleBroadcaster.broadcast( toString(), "kill();" );										//VectorUtil.removeAll( _hitByLaserEnemies );					_needToBeUpdatedOnEnterFrame = false;										_animationClip.stopAnimation();					_animationClip.kill();					_animationClip = null;										if( _fireAnimationClip != null )					{						_fireAnimationClip.stopAnimation();						_fireAnimationClip.kill();						_fireAnimationClip = null;					}										onRecovered = null;					onRevived = null;										super.kill();				}							/** updateOnEnterFrame			  *	---------------------------------------------------------------------------- *			  *	This updates the display object on every enter frame loop.			  *	---------------------------------------------------------------------------- */				override public function updateOnEnterFrame():void				{					//_animationClip.showNextAnimation();										if( _needToBeUpdatedOnEnterFrame )					{						if( _fireAnimationClip != null )						{							_fireAnimationClip.showNextAnimation();						}					}				}							/** die			  *	---------------------------------------------------------------------------- */				override public function die():void				{					//if( _debug ) ConsoleBroadcaster.broadcast( toString(), "die();" );										if( _alive )					{						super.die();												_alive = false;												_animationClip.showAnimation( _animationClip.animationObject.animationCount-1 );												//dispatchEvent( new GameLevelEvent(GameLevelEvent.DIE) );					}									}							/** hit			  *	---------------------------------------------------------------------------- */				override public function hit( gameObject:AbstractGameObject, power:Number, oneHitKill:Boolean=false ):void				{					//if( _debug ) ConsoleBroadcaster.broadcast( toString(), "hit("+power+");" );										if( _alive )					{						_attackingGameObject.health -= power;												showAnimation();												//dispatchEvent( new GameLevelEvent(GameLevelEvent.HIT, {power:power}) );						onHit.dispatch( this );												if( _attackingGameObject.health <= 0 )						{							//die();							_attackingGameObject.health = 0;							_alive = false;							_contentClip.visible = false;							trace( "dead" );							//dispatchEvent( new GameLevelEvent(GameLevelEvent.DIE) );							onDied.dispatch( this );						}						else						{							startHitColorChangeTimer();						}					}				}							/** recover			  *	---------------------------------------------------------------------------- *			  *	Recovers the health of the game object. It can only add health up to the 			  *	maximum health, it does not go over.			  *	---------------------------------------------------------------------------- */				override public function recover( gameObject:AbstractGameObject ):void				{					ConsoleBroadcaster.broadcast( toString(), "recover();" );										//trace( "_alive: "+_alive );					//trace( "health before heal "+_attackingGameObject.health );					//trace( "power: "+gameObject.power );					//trace( "maxHealth: "+_attackingGameObject.maxHealth );										//if( true )					//{						//_attackingGameObject.health += power;												if( _attackingGameObject.health + gameObject.power > _attackingGameObject.maxHealth )							_attackingGameObject.health = _attackingGameObject.maxHealth;						else							_attackingGameObject.health += gameObject.power;												//trace( "health after heal "+_attackingGameObject.health );												showAnimation();												//trace( "_alive: "+_alive );												//dispatchEvent( new GameLevelEvent(GameLevelEvent.ON_GATE_RECOVERED) );						onRecovered.dispatch();												if( !_alive )						{							//trace( "revive the gate object" );							_alive = true;							_contentClip.visible = true;							//dispatchEvent( new GameLevelEvent(GameLevelEvent.ON_GATE_REVIVED) );							onRevived.dispatch( this );						}					//}				}							/** initLeftGateFire			  *	---------------------------------------------------------------------------- *			  *	Initializes the left part of the gate's fire			  *	---------------------------------------------------------------------------- */				public function initLeftGateFire():void				{					ConsoleBroadcaster.broadcast( "GateDisplayObject", "initLeftGateFire();" );										var animationObject:AnimationObject = GameLevelDataIndex.getInstance().getAnimationObjectByCacheId("Fence_PostFire");										_fireAnimationClip = new AnimationDisplayObject();					_fireAnimationClip.contentClip = fireAnimation_mc;					_fireAnimationClip.init();					_fireAnimationClip.animationObject = animationObject;					_fireAnimationClip.sourceBD = BitmapDataManager.getInstance().getBitmapData(animationObject.cacheId).bitmapData;					_fireAnimationClip.initCanvas();					_fireAnimationClip.contentClip.visible = true;					_fireAnimationClip.startAnimation(true);					fireAnimation_mc.x = animation_mc.x - 20;					fireAnimation_mc.y = animation_mc.y - 134;										//trace( "fireAnimation_mc.x: "+fireAnimation_mc.x );					//trace( "fireAnimation_mc.y: "+fireAnimation_mc.y );										animationObject = null;				}							/** initRightGateFire			  *	---------------------------------------------------------------------------- *			  *	Initializes the right part of the gate's fire			  *	---------------------------------------------------------------------------- */				public function initRightGateFire():void				{					ConsoleBroadcaster.broadcast( "GateDisplayObject", "initRightGateFire();" );										var animationObject:AnimationObject = GameLevelDataIndex.getInstance().getAnimationObjectByCacheId("Fence_PostFire");										_fireAnimationClip = new AnimationDisplayObject();					_fireAnimationClip.contentClip = fireAnimation_mc;					_fireAnimationClip.init();					_fireAnimationClip.animationObject = animationObject;					_fireAnimationClip.sourceBD = BitmapDataManager.getInstance().getBitmapData(animationObject.cacheId).bitmapData;					_fireAnimationClip.initCanvas();					_fireAnimationClip.contentClip.visible = true;					_fireAnimationClip.startAnimation(true);					fireAnimation_mc.x = animation_mc.x + 18;					fireAnimation_mc.y = animation_mc.y - 149;										//trace( "fireAnimation_mc.x: "+fireAnimation_mc.x );					//trace( "fireAnimation_mc.y: "+fireAnimation_mc.y );										animationObject = null;				}								public function hideLeftGateForTutorial():void				{					animation_mc.visible = false;										fireAnimation_mc.x += 4;					fireAnimation_mc.y += 7;				}								public function showLeftGateAfterTutorial():void				{					animation_mc.visible = true;										fireAnimation_mc.x -= 4;					fireAnimation_mc.y -= 7;				}							/** showAnimation			  *	---------------------------------------------------------------------------- *			  *	Shows the animation of the gate based on the health.			  *	---------------------------------------------------------------------------- */				protected function showAnimation():void				{					if( _attackingGameObject.health < _healthPerAnimation )					{						_animationClip.showAnimation( 5 );												if( _fireAnimationClip != null )						{							_fireAnimationClip.stopAnimation();							_fireAnimationClip.contentClip.visible = false;						}					}					else if( _attackingGameObject.health < _healthPerAnimation*2 )					{						_animationClip.showAnimation( 4 );						if( _fireAnimationClip != null )						{							_fireAnimationClip.stopAnimation();							_fireAnimationClip.contentClip.visible = false;						}					}					else if( _attackingGameObject.health < _healthPerAnimation*3 )					{						_animationClip.showAnimation( 3 );						if( _fireAnimationClip != null )						{							_fireAnimationClip.stopAnimation();							_fireAnimationClip.contentClip.visible = false;						}					}					else if( _attackingGameObject.health < _healthPerAnimation*4 )					{						_animationClip.showAnimation( 2 );						if( _fireAnimationClip != null )						{							_fireAnimationClip.stopAnimation();							_fireAnimationClip.contentClip.visible = false;						}					}					else if( _attackingGameObject.health < _healthPerAnimation*5 )					{						_animationClip.showAnimation( 1 );						if( _fireAnimationClip != null )						{							_fireAnimationClip.stopAnimation();							_fireAnimationClip.contentClip.visible = false;						}					}					else					{						_animationClip.showAnimation( 0 );						if( _fireAnimationClip != null )						{							_fireAnimationClip.startAnimation(true);							_fireAnimationClip.contentClip.visible = true;						}					}				}							/** toString			  *	---------------------------------------------------------------------------- */				override public function toString():String				{					if( _toStringOutput == "" )						_toStringOutput = "Gate_"+_currentTile.row+"_"+_currentTile.column;										return _toStringOutput;				}		}			}