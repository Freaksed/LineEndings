/** GodDisplayObject  *	---------------------------------------------------------------------------- *  *	@desc:  *		This is the display object clip that will represent God class.  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.gamelevel	{		import flash.display.Bitmap;		import flash.display.BitmapData;		import flash.display.BlendMode;		import flash.display.DisplayObject;		import flash.display.DisplayObjectContainer;		import flash.display.MovieClip;		import flash.events.Event;		import flash.events.FullScreenEvent;		import flash.events.IOErrorEvent;		import flash.events.ProgressEvent;		import flash.events.TimerEvent;		import flash.geom.ColorTransform;		import flash.geom.Matrix;		import flash.geom.Point;		import flash.geom.Rectangle;		import flash.utils.getDefinitionByName;				import com.greensock.TweenLite;		import com.avatarlabs.utils.cache.BitmapDataManager;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.loader.CustomLoader;		import com.avatarlabs.utils.userinterface.UILabel;		import com.avatarlabs.utils.sound.SoundEffectPlayer;		import com.avatarlabs.utils.timers.CustomTimer;		import org.osflash.signals.Signal;				//import com.gamelevel.data.*;		import com.boogabooga.data.SoundData;		import com.boogabooga.data.SoundsIndex;		import com.boogabooga.data.StringsIndex;		import com.boogabooga.data.gamelevel.God;		import com.boogabooga.events.BoogaEvent;		import com.boogabooga.events.GameLevelEvent;		import com.boogabooga.ui.gamelevel.GameLevelDisplayObject;				public class GodDisplayObject extends GameLevelDisplayObject		{			protected var _god:God;			protected var _currentTile:GameboardTile;			//protected var _enemiesAttacked:Array;						//private var _summonAnimation:MovieClip;			//private var _attackAnimation:MovieClip;						protected var _summoning:Boolean;			protected var _attacking:Boolean;			protected var _attackTimer:CustomTimer;						protected var _summonAnimationClip:AnimationDisplayObject;						protected var _toStringOutput;						public var onSummoned:Signal;			public var onAttackInit:Signal;			public var onAttacked:Signal;			public var onAttackEnded:Signal;						/**	Stage Instances **/			//public var tempName_mc:UILabel;			public var summonAnimation_mc:MovieClip;			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function GodDisplayObject()				{					//init();				}								override public function set contentClip( m:MovieClip ):void				{					super.contentClip = m;										summonAnimation_mc = _contentClip.summonAnimation_mc;										_summonAnimationClip = new AnimationDisplayObject();					_summonAnimationClip.contentClip = summonAnimation_mc;					_summonAnimationClip.init();					//_summonAnimationClip.addEventListener( BoogaEvent.ON_ANIMATION_EVENT, handleSummonAnimationEvent );					//_summonAnimationClip.addEventListener( BoogaEvent.ON_SOUND_EVENT, handleSummonSoundEvent );					//_summonAnimationClip.addEventListener( BoogaEvent.ON_ANIMATION_ENDS, handleSummonAnimationEnds );					_summonAnimationClip.onAnimationEventFired.add( handleSummonAnimationEventFired );					_summonAnimationClip.onSoundEventFired.add( handleSummonSoundEventFired );					_summonAnimationClip.onAnimationEnded.add( handleSummonAnimationEnded );				}							/** set/get god			  *	---------------------------------------------------------------------------- */			  	public function set god( g:God ):void				{					_god = g;										//tempName_mc.textField = MovieClip(tempName_mc).label_txt;					//tempName_mc.fontName = "Rockwell";					//tempName_mc.embedFonts = true;										//tempName_mc.setText( _god.name );										_summonAnimationClip.animationObject = _god.animationObject;					_summonAnimationClip.sourceBD = BitmapDataManager.getInstance().getBitmapData(_god.animationObject.cacheId).bitmapData;					_summonAnimationClip.initCanvas();					_summonAnimationClip.showAnimation(0);									}				public function get god():God { return _god; }								public function set currentTile( t:GameboardTile ):void { _currentTile = t; }				public function get currentTile():GameboardTile { return _currentTile; }								//public function get attackAnimation():MovieClip { return _attackAnimation; }							/** init			  *	---------------------------------------------------------------------------- */				override public function init():void				{					//trace( "GodDisplayObject: init();" );										super.init();										_debug = true;										//_enemiesAttacked = new Array();										_summoning = false;					_attacking = false;										//_summonAnimationClip.visible = false;					_toStringOutput = '';										onSummoned = new Signal();					onAttackInit = new Signal( GodDisplayObject );					onAttacked = new Signal( GodDisplayObject );					onAttackEnded = new Signal( GodDisplayObject );				}							/** pause			  *	---------------------------------------------------------------------------- */				override public function pause():void				{					//If during summoning, pause the summoning animation					if( _summoning )					{						//_summonAnimation.stop();						_summonAnimationClip.stopAnimation();					}										if( _attacking )					{						//_attackAnimation.stop();						_attackTimer.pause();					}				}							/** unpause			  *	---------------------------------------------------------------------------- */				override public function unpause():void				{					if( _summoning )					{						//_summonAnimation.play();						_summonAnimationClip.startAnimation(false, _summonAnimationClip.tileIndex);					}										if( _attacking )					{						//_attackAnimation.play();						_attackTimer.unpause();					}				}							/** kill			  *	---------------------------------------------------------------------------- */				override public function kill():void				{					ConsoleBroadcaster.broadcast( toString(), "kill();" );										_needToBeUpdatedOnEnterFrame = false;					//TODO:					//	Still need to remove the god properly										if( _summoning )					{						//TODO:						//	Stop the summoning animation						stopSummoning();					}										if( _attacking )					{						_attacking = false;												stopAttackTimer();												//TODO:						//	Stop the attacking animation						//_attackAnimation.stop();					}										//_summonAnimationClip.removeEventListener( BoogaEvent.ON_ANIMATION_EVENT, handleSummonAnimationEvent );					//_summonAnimationClip.removeEventListener( BoogaEvent.ON_SOUND_EVENT, handleSummonSoundEvent );					//_summonAnimationClip.removeEventListener( BoogaEvent.ON_ANIMATION_ENDS, handleSummonAnimationEnds );					_summonAnimationClip.onAnimationEventFired.remove( handleSummonAnimationEventFired );					_summonAnimationClip.onSoundEventFired.remove( handleSummonSoundEventFired );					_summonAnimationClip.onAnimationEnded.remove( handleSummonAnimationEnded );										onSummoned = null;					onAttackInit = null;					onAttacked = null;					onAttackEnded = null;										super.kill();				}							/** updateOnEnterFrame			  *	---------------------------------------------------------------------------- *			  *	This updates the display object on every enter frame loop.			  *	---------------------------------------------------------------------------- */				override public function updateOnEnterFrame():void				{					if( _needToBeUpdatedOnEnterFrame )					{						if( _summoning )						{							//trace( _summonAnimationClip.tileIndex );							_summonAnimationClip.showNextAnimation();						}					}				}							/** startSummoning			  *	---------------------------------------------------------------------------- *			  *	Starts the summoning animation			  *	---------------------------------------------------------------------------- */				public function startSummoning():void				{					if( _debug ) ConsoleBroadcaster.broadcast( toString(), "startSummoning();" );										_summoning = true;										_summonAnimationClip.startAnimation(false);										/*					_summonAnimation = new ( getDefinitionByName(_god.linkageId) as Class)();					_summonAnimation.addEventListener( "onAttackStarts", handleAttackStarts );					_summonAnimation.addEventListener( "onSummonEnds", handleSummonEnds );					_summonAnimation.x = _contentClip.x;					_summonAnimation.y = _contentClip.y;					*/										//trace( "_summonAnimation.x: "+_summonAnimation.x );					//trace( "_summonAnimation.y: "+_summonAnimation.y );										//dispatchEvent( new GameLevelEvent(GameLevelEvent.ON_GOD_SUMMONED, {summonAnimation:_summonAnimationClip}) );					onSummoned.dispatch();										//TODO:					//	We need to play the summoning animation here.					//	When the summoning animation stops, the attack will start					//stopSummoning();					//initAttack();				}							/** stopSummoning			  *	---------------------------------------------------------------------------- *			  *	Finishes the summoning animation.			  *	---------------------------------------------------------------------------- */				public function stopSummoning( startAttack:Boolean=false ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( toString(), "stopSummoning();" );										//_summonAnimation.stop();										_summoning = false;										_summonAnimationClip.stopAnimation();					/*					_summonAnimation.removeEventListener( "onAttackStarts", handleAttackStarts );					_summonAnimation.removeEventListener( "onSummonEnds", handleSummonEnds );					_summonAnimation.parent.removeChild( _summonAnimation );					_summonAnimation = null;					*/					//dispatchEvent( new CustomEvent("onSummonEnds") );									}								//protected function handleSummonAnimationEvent( event:BoogaEvent ):void				protected function handleSummonAnimationEventFired():void				{					initAttack();				}								//protected function handleSummonSoundEvent( event:BoogaEvent ):void				protected function handleSummonSoundEventFired( soundDataId:int ):void				{					trace( "handleSummonSoundEvent "+soundDataId );										var soundData:SoundData = SoundsIndex.getInstance().getSoundById(soundDataId);					SoundEffectPlayer.getInstance().playLibrarySound( soundData.soundId, false, _contentClip.name, soundData.soundId );					soundData = null;				}								//protected function handleSummonAnimationEnds( event:BoogaEvent ):void				protected function handleSummonAnimationEnded( animationDisplayObject:AnimationDisplayObject ):void				{					_summonAnimationClip.stopAnimation();					_summonAnimationClip.contentClip.visible = false;				}								private function stopAttackTimer():void				{					//_attackTimer.removeEventListener( TimerEvent.TIMER, handleAttackTimerFired );					//_attackTimer.removeEventListener( TimerEvent.TIMER_COMPLETE, handleAttackTimerCompleted );					_attackTimer.stop();					_attackTimer.onTimerFired.remove( handleAttackTimerFired );					_attackTimer.onTimerCompleted.remove( handleAttackTimerCompleted );					_attackTimer.kill();					_attackTimer = null;				}							/** initAttack			  *	---------------------------------------------------------------------------- *			  *	Initializes the attack animation.			  *	---------------------------------------------------------------------------- */				public function initAttack():void				{					if( _debug ) ConsoleBroadcaster.broadcast( toString(), "initAttack();" );										//_attackAnimation = new (getDefinitionByName("GodAttackExample") as Class)();					//_attackAnimation.addEventListener( GameLevelEvent.ON_GOD_ATTACK, handleAttack, false, 0, true );					//_attackAnimation.addEventListener( GameLevelEvent.ON_GOD_ATTACK_ENDED, handleAttackEnds, false, 0, true );										//dispatchEvent( new CustomEvent(GameLevelEvent.ON_GOD_INIT_ATTACK, {attackAnimation:_attackAnimation}) );										_attacking = true;										_attackTimer = new CustomTimer(300, 12);					//_attackTimer.addEventListener( TimerEvent.TIMER, handleAttackTimerFired, false, 0, true );					//_attackTimer.addEventListener( TimerEvent.TIMER_COMPLETE, handleAttackTimerCompleted, false, 0, true );					_attackTimer.onTimerFired.add( handleAttackTimerFired );					_attackTimer.onTimerCompleted.add( handleAttackTimerCompleted );					_attackTimer.start();										//dispatchEvent( new GameLevelEvent(GameLevelEvent.ON_GOD_INIT_ATTACK) );					onAttackInit.dispatch( this );										handleAttackTimerFired(null);				}							/** startAttacking			  *	---------------------------------------------------------------------------- *			  *	Starts the attack animation			  *	---------------------------------------------------------------------------- */				public function startAttacking():void				{					if( _debug ) ConsoleBroadcaster.broadcast( toString(), "startAttacking();" );										_contentClip.visible = false;										_attacking = true;										//_attackAnimation.gotoAndPlay(2);				}				/*				public function attackEnemies( event:Event=null ):void				{					dispatchEvent( new CustomEvent("onAttackEnemies") );				}								public function stopAttackingAnimation():void				{					dispatchEvent( new CustomEvent("onAttackingAnimationEnds") );				}				*/							/** handleSummonEnds			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				protected function handleSummonEnds( event:Event ):void				{					stopSummoning(false);				}							/** handleAttackStarts			  *	---------------------------------------------------------------------------- *			  *	When the attack starts			  *	---------------------------------------------------------------------------- */				protected function handleAttackStarts( event:Event ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( toString(), "handleAttackStarts();" );										//event.stopPropagation();										//dispatchEvent( new CustomEvent(GameLevelEvent.ON_GOD_INIT_ATTACK) );					initAttack();				}							/** handleAttackTimerFired			  *	---------------------------------------------------------------------------- *			  *	Dispatches event to attack the enemies.			  *	---------------------------------------------------------------------------- */				protected function handleAttackTimerFired( timer:CustomTimer ):void				{					//if( _debug ) ConsoleBroadcaster.broadcast( toString(), "handleAttackTimerFired();" );										//dispatchEvent( new GameLevelEvent(GameLevelEvent.ON_GOD_ATTACK) );					onAttacked.dispatch( this );				}								protected function handleAttackTimerCompleted( timer:CustomTimer ):void				{					//if( _debug ) ConsoleBroadcaster.broadcast( toString(), "handleAttackTimerCompleted();" );										stopAttackTimer();										_attacking = false;										//dispatchEvent( new GameLevelEvent(GameLevelEvent.ON_GOD_ATTACK_ENDED) );					onAttackEnded.dispatch( this );				}							/** handleAttackEnds			  *	---------------------------------------------------------------------------- *			  *	Dispatches event to end the attack.			  *	---------------------------------------------------------------------------- 				protected function handleAttackEnds( event:Event ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( toString(), "handleAttackEnds();" );										_attacking = false;										dispatchEvent( new CustomEvent(GameLevelEvent.ON_GOD_ATTACK_ENDED) );				}*/				/*				public function addEnemyAttacked( displayObject:EnemyDisplayObject ):void				{					_enemiesAttacked.push( displayObject );				}				*/			/** toString			  *	---------------------------------------------------------------------------- */				override public function toString():String				{					if( _toStringOutput == '' )						_toStringOutput = StringsIndex.getInstance().getString(String(_god.name));										return _toStringOutput;				}		}			}