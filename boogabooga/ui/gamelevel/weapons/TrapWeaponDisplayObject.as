/** TrapWeaponDisplayObject  *	---------------------------------------------------------------------------- *  *	@desc:  *		This is the display object clip that will represent Weapon class.  *		Weapon properties ( Create classes to represent these different weapons )  *			- single lane / multiple lane  *			- shoots one direction / all directions  *			- affect flying enemies / not  *			- affect digging enemies / not  *			- projectile / close range / blocking / trap / instant  *			- one hit kill  *			- element properties ( fire, ice, poison )  *			- modifier ( can add attributes to existing weapons )  *			- area of effect on hit  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.gamelevel.weapons	{		import flash.display.Bitmap;		import flash.display.BitmapData;		import flash.display.BlendMode;		import flash.display.DisplayObject;		import flash.display.DisplayObjectContainer;		import flash.display.MovieClip;		import flash.events.Event;		import flash.events.TimerEvent;		import flash.geom.ColorTransform;		import flash.geom.Matrix;		import flash.geom.Point;		import flash.geom.Rectangle;		import flash.utils.getDefinitionByName;				import com.avatarlabs.utils.cache.BitmapDataManager;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.loader.CustomLoader;		import com.avatarlabs.utils.UtilFunctions;		import com.avatarlabs.utils.timers.CustomTimer;		import com.avatarlabs.utils.userinterface.UILabel;		import com.desuade.partigen.emitters.Emitter;		import com.desuade.partigen.events.ParticleEvent;		import com.greensock.TweenLite;		import org.osflash.signals.Signal;				//import com.gamelevel.data.*;		import com.boogabooga.data.gamelevel.AbstractGameObject;		import com.boogabooga.data.gamelevel.Weapon;		import com.boogabooga.events.BoogaEvent;		import com.boogabooga.events.GameLevelEvent;		import com.boogabooga.ui.gamelevel.AnimationDisplayObject;		import com.boogabooga.ui.gamelevel.GameLevelAttackingDisplayObject;		import com.boogabooga.ui.gamelevel.GameLevelDisplayObject;		import com.boogabooga.ui.gamelevel.weapons.WeaponDisplayObject;		import com.boogabooga.utils.GameLevelUtil;				public class TrapWeaponDisplayObject extends WeaponDisplayObject		{			public var onTrapFired:Signal;						/**	Stage Instances **/			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function TrapWeaponDisplayObject( contentClip:MovieClip=null )				{					super( contentClip );										//init();				}								/*				public function set deathParticleEmitter( e:Emitter ):void				{					trace( "set deathParticleEmitter" );										_deathParticleEmitter = e;					_deathParticleEmitter.addEventListener( ParticleEvent.DIED, handleDeathParticleEmitterDied, false, 0, true );				}				*/							/** init			  *	---------------------------------------------------------------------------- */				override public function init():void				{					//trace( "TrapWeaponDisplayObject: init();" );										super.init();										_debug = true;										_attacking = false;					_ignoredByEnemy = true;										onTrapFired = new Signal( TrapWeaponDisplayObject, Number );				}							/** pause			  *	---------------------------------------------------------------------------- */				override public function pause():void				{					if( _attacking )					{						_attackTimer.pause();					}				}							/** unpause			  *	---------------------------------------------------------------------------- */				override public function unpause():void				{					if( _attacking )					{						_attackTimer.unpause();					}				}							/** kill			  *	---------------------------------------------------------------------------- */				override public function kill():void				{					if( _debug ) ConsoleBroadcaster.broadcast( "TrapWeaponDisplayObject", "kill();" );										onTrapFired = null;										super.kill();									}							/** die			  *	---------------------------------------------------------------------------- */				override public function die():void				{					//if( _debug ) ConsoleBroadcaster.broadcast( "TrapWeaponDisplayObject", "die();" );										if( _alive )					{						/*						_alive = false;												stopAttacking();												//TODO:						//	Play the death animation												_currentAnimationDisplayObject.stopAnimation();						_currentAnimationDisplayObject.visible = false;												dispatchEvent( new GameLevelEvent(GameLevelEvent.DIE) );						dispatchEvent( new GameLevelEvent(GameLevelEvent.REMOVE_FROM_GAME) );						*/												super.die();					}										//trace( "_tilesWatching: "+_tilesWatching );										//var i:uint;										//kill();				}							/** placedOnBoard			  *	---------------------------------------------------------------------------- *			  *	Called when WeaponDisplayObject gets added to the stage.			  *	Each weapon type is going to do different things ( either going to just stay			  *	static or actually going to start animating ).			  *	---------------------------------------------------------------------------- */				override public function placedOnBoard():void				{					_currentAnimationDisplayObject.showAnimation(0);					_currentAnimationDisplayObject.startIdleAnimation();				}				/*				public function triggerTrap():void				{					if( _attackingGameObject.oneDirectionOnly )					{						upAnimation_mc.startAnimation( false, 0 );						_currentAnimationDisplayObject = upAnimation_mc;					}					else					{						switch( direction )						{							case GameLevelUtil.DIRECTION_UP:								upAnimation_mc.initCanvas( false );								_currentAnimationDisplayObject = upAnimation_mc;								break;														case GameLevelUtil.DIRECTION_RIGHT:								upAnimation_mc.initCanvas( true );								_currentAnimationDisplayObject = upAnimation_mc;								break;														case GameLevelUtil.DIRECTION_DOWN:								downAnimation_mc.initCanvas( false );								_currentAnimationDisplayObject = downAnimation_mc;								break;														case GameLevelUtil.DIRECTION_LEFT:								downAnimation_mc.initCanvas( true );								_currentAnimationDisplayObject = downAnimation_mc;								break;						}												_currentAnimationDisplayObject.visible = true;						_currentAnimationDisplayObject.startAnimation( false, 0 );					}				}				*/			/** attackTargets			  *	---------------------------------------------------------------------------- *			  *	See if this object can attack one of the targets that are given.			  *	It always attacks the closest target.			  *	---------------------------------------------------------------------------- */				override public function attackTargets( targets:Vector.<GameLevelAttackingDisplayObject> ):GameLevelAttackingDisplayObject				{					if( !_attacking && targets.length > 0 )					{						//trace( this.toString() + " attacking something" );												//TODO:						//	Check if it can attack any of the targets, the one with shortest distance or the first one in the list.						targets = sortTargetsByDistance(targets);												for( var i:uint=0; i<targets.length; ++i )						{							if( canAttackTarget(targets[i]) )							{								//ConsoleBroadcaster.broadcast( "TrapWeaponDisplayObject", this.toString()+" attack "+targets[i].toString() );								//targets[i].hit( _attackingGameObject, _attackingGameObject.power );																_attacking = true;								return targets[i];							}						}					}										return null;				}							/** canAttackTarget			  *	---------------------------------------------------------------------------- *			  *	Check to see if this object can attack the target. Override this function			  *	in the attacking object as the requirement is different for reach one.			  *	---------------------------------------------------------------------------- */				override protected function canAttackTarget( target:GameLevelDisplayObject ):Boolean				{					//if( (target as GameLevelAtt.attackingGameObject.hasAttackProperty					var distance:Number = (_positionIn2D.x - target.positionIn2D.x)*(_positionIn2D.x - target.positionIn2D.x) + (_positionIn2D.y - target.positionIn2D.y)*(_positionIn2D.y - target.positionIn2D.y);					if( target is GameLevelAttackingDisplayObject && distance <= 1000 )					{						if( GameLevelAttackingDisplayObject(target).attackingGameObject.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_FLYER_INDEX) ||							GameLevelAttackingDisplayObject(target).attackingGameObject.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_JUMPER_INDEX) ||							GameLevelAttackingDisplayObject(target).attackingGameObject.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_SUPER_JUMPER_INDEX) )						{							return false;						}					}										return true;				}							/** startAttackAnimation			  *	---------------------------------------------------------------------------- *			  *	Shows the attack animation of the displayObject. You can also do anything			  *	extra when it attacks. Separating this from attackTargets function so that			  *	extended classes can just override this function instead of overriding that 			  *	function.			  *	---------------------------------------------------------------------------- */				override public function startAttackAnimation():void				{					if( _debug ) ConsoleBroadcaster.broadcast( "TrapWeaponDisplayObject", "startAttackAnimation();" );										//_currentAnimationDisplayObject.addEventListener( BoogaEvent.ON_ANIMATION_ENDS, handleAnimationEnded, false, 0, true );					//_currentAnimationDisplayObject.addEventListener( BoogaEvent.ON_ANIMATION_EVENT, handleAnimationEventFired, false, 0, true );					_currentAnimationDisplayObject.onAnimationEnded.add( handleAnimationEnded );					_currentAnimationDisplayObject.onAnimationEventFired.add( handleAnimationEventFired );					_currentAnimationDisplayObject.startAnimation( false );				}							/** handleAnimationEventFired			  *	---------------------------------------------------------------------------- */				override protected function handleAnimationEventFired():void				{					ConsoleBroadcaster.broadcast( "TrapWeaponDisplayObject", "handleAnimationEventFired();" );										//dispatchEvent( new GameLevelEvent(GameLevelEvent.TRAP_FIRE, {range:45+(_attackingGameObject.range-1)*90}) );					onTrapFired.dispatch( this, 45+(_attackingGameObject.range-1)*90 );										//if( _alive && _attackedTarget != null )					//{						//TODO:						//	Depending on the type of weapons, it will either 						//_attackedTarget.hit( _attackingGameObject, _attackingGameObject.power );						//_attackedTarget = null;												//_hasFired = true;						//trace( "shootTo: "+_attackedTarget.positionIn2D );					//}				}								protected function handleAnimationEnded( animationDisplayObject:AnimationDisplayObject ):void				{					//_currentAnimationDisplayObject.removeEventListener( BoogaEvent.ON_ANIMATION_EVENT, handleAnimationEventFired );					//_currentAnimationDisplayObject.removeEventListener( BoogaEvent.ON_ANIMATION_ENDS, handleAnimationEnded );					_currentAnimationDisplayObject.onAnimationEnded.remove( handleAnimationEnded );					_currentAnimationDisplayObject.onAnimationEventFired.remove( handleAnimationEventFired );										//dispatchEvent( new GameLevelEvent(GameLevelEvent.REMOVE_FROM_GAME) );					onRemovedFromGame.dispatch( this );				}						}			}