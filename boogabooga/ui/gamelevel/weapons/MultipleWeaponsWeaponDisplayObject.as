/** MultipleWeaponsWeaponDisplayObject  *	---------------------------------------------------------------------------- *  *	@desc:  *		This is the display object clip that will represent Weapon class.  *		Weapon properties ( Create classes to represent these different weapons )  *			- single lane / multiple lane  *			- shoots one direction / all directions  *			- affect flying enemies / not  *			- affect digging enemies / not  *			- projectile / close range / blocking / trap / instant  *			- one hit kill  *			- element properties ( fire, ice, poison )  *			- modifier ( can add attributes to existing weapons )  *			- area of effect on hit  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.gamelevel.weapons	{		import flash.display.Bitmap;		import flash.display.BitmapData;		import flash.display.BlendMode;		import flash.display.DisplayObject;		import flash.display.DisplayObjectContainer;		import flash.display.MovieClip;		import flash.display.Sprite;		import flash.events.Event;		import flash.events.TimerEvent;		import flash.geom.ColorTransform;		import flash.geom.Matrix;		import flash.geom.Point;		import flash.geom.Rectangle;		import flash.utils.getDefinitionByName;				import com.greensock.TweenLite;		import com.avatarlabs.utils.cache.BitmapDataManager;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.loader.CustomLoader;		import com.avatarlabs.utils.UtilFunctions;		import com.avatarlabs.utils.timers.CustomTimer;		import com.avatarlabs.utils.userinterface.UILabel;		import com.desuade.partigen.emitters.Emitter;		import com.desuade.partigen.events.ParticleEvent;		import org.osflash.signals.Signal;				//import com.gamelevel.data.*;		import com.boogabooga.data.SettingsIndex;		import com.boogabooga.data.gamelevel.AbstractGameObject;		import com.boogabooga.data.gamelevel.Weapon;		import com.boogabooga.events.BoogaEvent;		import com.boogabooga.events.GameLevelEvent;		import com.boogabooga.ui.gamelevel.AnimationDisplayObject;		import com.boogabooga.ui.gamelevel.GameLevelAttackingDisplayObject;		import com.boogabooga.ui.gamelevel.GameLevelDisplayObject;		import com.boogabooga.ui.gamelevel.weapons.WeaponDisplayObject;		import com.boogabooga.utils.GameLevelUtil;				public class MultipleWeaponsWeaponDisplayObject extends WeaponDisplayObject		{			protected var _attackingGameObject2:AbstractGameObject;						protected var _currentWeaponIndex:int;			protected var _attackingGameObjects:Vector.<AbstractGameObject>;			protected var _switchToOtherWeaponTimer:CustomTimer;			protected var _switching:Boolean;						protected var _switchWeaponOneAnimationClip:AnimationDisplayObject;			protected var _switchWeaponTwoAnimationClip:AnimationDisplayObject;						public var onMultipleWeaponsFired:Signal;						/**	Stage Instances **/			public var switchWeaponOneAnimation_mc:MovieClip;			public var switchWeaponTwoAnimation_mc:MovieClip;			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function MultipleWeaponsWeaponDisplayObject( contentClip:MovieClip=null )				{					super( contentClip );										//init();				}							/** set/get attackingGameObject			  *	---------------------------------------------------------------------------- */				override public function set attackingGameObject( a:AbstractGameObject ):void				{					super.attackingGameObject = a;										_switchWeaponOneAnimationClip.animationObject = Weapon(_attackingGameObject).switchWeaponOneAnimationObject;					_switchWeaponOneAnimationClip.sourceBD = BitmapDataManager.getInstance().getBitmapData( Weapon(_attackingGameObject).switchWeaponOneAnimationObject.cacheId ).bitmapData;					_switchWeaponOneAnimationClip.animationObject = _attackingGameObject.switchWeaponOneAnimationObject;										_switchWeaponTwoAnimationClip.animationObject = Weapon(_attackingGameObject).switchWeaponTwoAnimationObject;					_switchWeaponTwoAnimationClip.sourceBD = BitmapDataManager.getInstance().getBitmapData( Weapon(_attackingGameObject).switchWeaponTwoAnimationObject.cacheId ).bitmapData;					_switchWeaponTwoAnimationClip.animationObject = _attackingGameObject.switchWeaponTwoAnimationObject;										_attackingGameObjects[0] = attackingGameObject;				}							/** set/get contentClip			  *	---------------------------------------------------------------------------- */				override public function set contentClip( m:MovieClip ):void				{					super.contentClip = m;										switchWeaponOneAnimation_mc = _contentClip.switchWeaponOneAnimation_mc;					switchWeaponTwoAnimation_mc = _contentClip.switchWeaponTwoAnimation_mc;										switchWeaponOneAnimation_mc.visible = false;					switchWeaponTwoAnimation_mc.visible = false;										//_upAnimationClip.addEventListener( BoogaEvent.ON_ANIMATION_EVENT, handleAnimationEventFired, false, 0, true );					//_upAnimationClip.addEventListener( BoogaEvent.ON_ANIMATION_ENDS, handleAnimationEnds, false, 0, true );					//_downAnimationClip.addEventListener( BoogaEvent.ON_ANIMATION_EVENT, handleAnimationEventFired, false, 0, true );					//_downAnimationClip.addEventListener( BoogaEvent.ON_ANIMATION_ENDS, handleAnimationEnds, false, 0, true );					_upAnimationClip.onAnimationEventFired.add( handleAnimationEventFired );					_upAnimationClip.onAnimationEnded.add( handleAnimationEnded );					_downAnimationClip.onAnimationEventFired.add( handleAnimationEventFired );					_downAnimationClip.onAnimationEnded.add( handleAnimationEnded );										_switchWeaponOneAnimationClip = new AnimationDisplayObject();					_switchWeaponOneAnimationClip.contentClip = switchWeaponOneAnimation_mc;					_switchWeaponOneAnimationClip.init();					//_switchWeaponOneAnimationClip.addEventListener( BoogaEvent.ON_ANIMATION_ENDS, handleSwitchWeaponAnimationEnds, false, 0, true );					_switchWeaponOneAnimationClip.onAnimationEnded.add( handleSwitchWeaponAnimationEnded );					if( !SettingsIndex.getInstance().getPerformanceItemToggled(SettingsIndex.PERFORMANCE_ITEM_WEAPON_SMOOTHING) )					{						_switchWeaponOneAnimationClip.smoothing = false;					}										_switchWeaponTwoAnimationClip = new AnimationDisplayObject();					_switchWeaponTwoAnimationClip.contentClip = switchWeaponTwoAnimation_mc;					_switchWeaponTwoAnimationClip.init();					//_switchWeaponTwoAnimationClip.addEventListener( BoogaEvent.ON_ANIMATION_ENDS, handleSwitchWeaponAnimationEnds, false, 0, true );					_switchWeaponTwoAnimationClip.onAnimationEnded.add( handleSwitchWeaponAnimationEnded );					if( !SettingsIndex.getInstance().getPerformanceItemToggled(SettingsIndex.PERFORMANCE_ITEM_WEAPON_SMOOTHING) )					{						_switchWeaponTwoAnimationClip.smoothing = false;					}				}								public function set attackingGameObject2( a:AbstractGameObject ):void				{					_attackingGameObject2 = UtilFunctions.clone(a) as Weapon;										_attackingGameObjects[1] = _attackingGameObject2;				}				public function get attackingGameObject2():AbstractGameObject { return _attackingGameObject2; }								public function get currentWeaponIndex():int { return _currentWeaponIndex; }				public function get currentAttackingGameObject():AbstractGameObject				{					if( _currentWeaponIndex == 0 )						return _attackingGameObject;										return _attackingGameObject2;				}							/** init			  *	---------------------------------------------------------------------------- */				override public function init():void				{					//trace( "MultipleWeaponsWeaponDisplayObject: init();" );										super.init();										_debug = true;										_attacking = false;					_switching = false;										_currentWeaponIndex = 0;					_attackingGameObjects = new Vector.<AbstractGameObject>;										onMultipleWeaponsFired = new Signal( MultipleWeaponsWeaponDisplayObject, Point, Number );				}							/** pause			  *	---------------------------------------------------------------------------- */				override public function pause():void				{					if( _attacking )					{						_attackTimer.pause();					}										_currentAnimationDisplayObject.pause();				}							/** unpause			  *	---------------------------------------------------------------------------- */				override public function unpause():void				{					if( _attacking )					{						_attackTimer.unpause();					}										_currentAnimationDisplayObject.unpause();				}							/** kill			  *	---------------------------------------------------------------------------- */				override public function kill():void				{					if( _debug ) ConsoleBroadcaster.broadcast( "MultipleWeaponsWeaponDisplayObject", "kill();" );										//_upAnimationClip.removeEventListener( BoogaEvent.ON_ANIMATION_EVENT, handleAnimationEventFired );					//_upAnimationClip.removeEventListener( BoogaEvent.ON_ANIMATION_ENDS, handleAnimationEnds );					//_downAnimationClip.removeEventListener( BoogaEvent.ON_ANIMATION_EVENT, handleAnimationEventFired );					//_downAnimationClip.removeEventListener( BoogaEvent.ON_ANIMATION_ENDS, handleAnimationEnds );					_upAnimationClip.onAnimationEventFired.remove( handleAnimationEventFired );					_upAnimationClip.onAnimationEnded.remove( handleAnimationEnded );					_downAnimationClip.onAnimationEventFired.remove( handleAnimationEventFired );					_downAnimationClip.onAnimationEnded.remove( handleAnimationEnded );										//_switchWeaponOneAnimationClip.removeEventListener( BoogaEvent.ON_ANIMATION_ENDS, handleSwitchWeaponAnimationEnds );					//_switchWeaponTwoAnimationClip.removeEventListener( BoogaEvent.ON_ANIMATION_ENDS, handleSwitchWeaponAnimationEnds );					_switchWeaponOneAnimationClip.onAnimationEnded.remove( handleSwitchWeaponAnimationEnded );					_switchWeaponTwoAnimationClip.onAnimationEnded.remove( handleSwitchWeaponAnimationEnded );										super.kill();				}							/** die			  *	---------------------------------------------------------------------------- */				override public function die():void				{					//if( _debug ) ConsoleBroadcaster.broadcast( "MultipleWeaponsWeaponDisplayObject", "die();" );										if( _alive )					{						/*						_alive = false;												stopAttacking();												//TODO:						//	Play the death animation												_currentAnimationDisplayObject.stopAnimation();						_currentAnimationDisplayObject.visible = false;												dispatchEvent( new GameLevelEvent(GameLevelEvent.DIE) );						dispatchEvent( new GameLevelEvent(GameLevelEvent.REMOVE_FROM_GAME) );						*/												super.die();					}										//trace( "_tilesWatching: "+_tilesWatching );										//var i:uint;										//kill();									}							/** placedOnBoard			  *	---------------------------------------------------------------------------- *			  *	Called when WeaponDisplayObject gets added to the stage.			  *	Each weapon type is going to do different things ( either going to just stay			  *	static or actually going to start animating ).			  *	---------------------------------------------------------------------------- */				override public function placedOnBoard():void				{					_currentAnimationDisplayObject.showAnimation( 0 );					_currentAnimationDisplayObject.startIdleAnimation();				}							/** attackTargets			  *	---------------------------------------------------------------------------- *			  *	See if this object can attack one of the targets that are given.			  *	It always attacks the closest target.			  *	---------------------------------------------------------------------------- */				override public function attackTargets( targets:Vector.<GameLevelAttackingDisplayObject> ):GameLevelAttackingDisplayObject				{					//trace( this.toString()+"   _attacking: "+_attacking );					//trace( this.toString()+"   targets.length: "+targets.length );										if( !_attacking && !_switching && targets.length > 0 )					{						//trace( this.toString() + " attacking something" );												//TODO:						//	Check if it can attack any of the targets, the one with shortest distance or the first one in the list.						targets = sortTargetsByDistance(targets);												for( var i:uint=0; i<targets.length; ++i )						{							if( canAttackTarget(targets[i]) )							{								//ConsoleBroadcaster.broadcast( "GameLevelAttackingDisplayObject", this.toString()+" attack "+targets[i].toString() );								//targets[i].hit( _attackingGameObject, _attackingGameObject.power );																_attackedTarget = targets[i];								//_attacking = true;								//_attackTimer.start();								return targets[i];							}						}					}										//_attackedTarget = null;					return null;				}											/** handleAttackTimerFired			  *	---------------------------------------------------------------------------- 				override protected function handleAttackTimerFired( event:TimerEvent ):void				{					//trace( "handleAttackTimerFired();" );										_attacking = false;					_attackTimer.stop();										//dispatchEvent( new GameLevelEvent(GameLevelEvent.ATTACK_TIMER_FIRE) );					onAttackTimerFired.dispatch( this );				}*/								public function switchToOtherWeapon():void				{					_currentAnimationDisplayObject.stopAnimation();					_currentAnimationDisplayObject.contentClip.visible = false;					//_currentAnimationDisplayObject.kill();										if( _currentWeaponIndex == 0 )					{						_currentWeaponIndex = 1;												switch( _direction )						{							case GameLevelUtil.DIRECTION_UP:								//_switchWeaponOneAnimationClip.animationObject = _attackingGameObject.switchWeaponOneAnimationObject;								_switchWeaponOneAnimationClip.initCanvas( false );								_currentAnimationDisplayObject = _switchWeaponOneAnimationClip;								break;															case GameLevelUtil.DIRECTION_RIGHT:								//_switchWeaponOneAnimationClip.animationObject = _attackingGameObject.switchWeaponOneAnimationObject;								_switchWeaponOneAnimationClip.initCanvas( true );								_currentAnimationDisplayObject = _switchWeaponOneAnimationClip;								break;														case GameLevelUtil.DIRECTION_DOWN:								_switchWeaponTwoAnimationClip.initCanvas( false );								_currentAnimationDisplayObject = _switchWeaponTwoAnimationClip;								break;														case GameLevelUtil.DIRECTION_LEFT:								_switchWeaponTwoAnimationClip.initCanvas( true );								_currentAnimationDisplayObject = _switchWeaponTwoAnimationClip;								break;						}					}					else if( _currentWeaponIndex == 1 )					{						_currentWeaponIndex = 0;												switch( _direction )						{							case GameLevelUtil.DIRECTION_UP:								_switchWeaponTwoAnimationClip.initCanvas( false );								_currentAnimationDisplayObject = _switchWeaponTwoAnimationClip;								break;															case GameLevelUtil.DIRECTION_RIGHT:								_switchWeaponTwoAnimationClip.initCanvas( true );								_currentAnimationDisplayObject = _switchWeaponTwoAnimationClip;								break;														case GameLevelUtil.DIRECTION_DOWN:								_switchWeaponOneAnimationClip.initCanvas( false );								_currentAnimationDisplayObject = _switchWeaponOneAnimationClip;								break;														case GameLevelUtil.DIRECTION_LEFT:								_switchWeaponOneAnimationClip.initCanvas( true );								_currentAnimationDisplayObject = _switchWeaponOneAnimationClip;								break;						}					}										_currentAnimationDisplayObject.contentClip.visible = true;					_currentAnimationDisplayObject.startAnimation( false, 0 );										_switching = true;				}							/** handleAnimationEventFired			  *	---------------------------------------------------------------------------- */				override protected function handleAnimationEventFired():void				{					ConsoleBroadcaster.broadcast( "MultipleWeaponsWeaponDisplayObject", "handleAnimationEventFired();" );										if( _alive && _attackedTarget != null )					{						//TODO:						//	Depending on the type of weapons, it will either 						//_attackedTarget.hit( _attackingGameObject, _attackingGameObject.power );						//_attackedTarget = null;												//trace( "shootTo: "+_attackedTarget.positionIn2D );												//dispatchEvent( new GameLevelEvent(GameLevelEvent.MULTIPLE_WEAPONS_FIRE, {shootTo:_attackedTarget.positionIn2D, altitude:_attackedTarget.altitude}) );						onMultipleWeaponsFired.dispatch( this, _attackedTarget.positionIn2D, _attackedTarget.altitude );					}				}							/** handleAnimationEnded			  *	---------------------------------------------------------------------------- *			  *	Dispatched when the attack animation ends. It will play the switch to other			  *	weapon animation next.			  *	---------------------------------------------------------------------------- */				protected function handleAnimationEnded( animationDisplayObject:AnimationDisplayObject ):void				{					ConsoleBroadcaster.broadcast( "MultipleWeaponsWeaponDisplayObject", "handleAnimationEnded" );					switchToOtherWeapon();				}							/** handleSwitchWeaponAnimationEnded			  *	---------------------------------------------------------------------------- *			  *	Dispatched when the switching animation ends.			  *	---------------------------------------------------------------------------- */				protected function handleSwitchWeaponAnimationEnded( animationObject:AnimationDisplayObject ):void				{					ConsoleBroadcaster.broadcast( "MultipleWeaponsWeaponDisplayObject", "handleSwitchWeaponAnimationEnded" );										_switching = false;										_currentAnimationDisplayObject.contentClip.visible = false;										if( _direction == GameLevelUtil.DIRECTION_UP || _direction == GameLevelUtil.DIRECTION_RIGHT )					{						//_upAnimationClip.kill();						_upAnimationClip.animationObject = Weapon(_attackingGameObjects[_currentWeaponIndex]).upAnimationObject;						_upAnimationClip.sourceBD = BitmapDataManager.getInstance().getBitmapData( Weapon(_attackingGameObjects[_currentWeaponIndex]).upAnimationObject.cacheId ).bitmapData;						_upAnimationClip.initCanvas( _direction == GameLevelUtil.DIRECTION_RIGHT );						_currentAnimationDisplayObject = _upAnimationClip;					}					else if ( _direction == GameLevelUtil.DIRECTION_DOWN || _direction == GameLevelUtil.DIRECTION_LEFT )					{						//_downAnimationClip.kill();						//_downAnimationClip.init();						_downAnimationClip.animationObject = Weapon(_attackingGameObjects[_currentWeaponIndex]).downAnimationObject;						_downAnimationClip.sourceBD = BitmapDataManager.getInstance().getBitmapData( Weapon(_attackingGameObjects[_currentWeaponIndex]).downAnimationObject.cacheId ).bitmapData;						_downAnimationClip.initCanvas( _direction == GameLevelUtil.DIRECTION_LEFT );						_currentAnimationDisplayObject = _downAnimationClip;					}										_currentAnimationDisplayObject.showAnimation(0);					_currentAnimationDisplayObject.contentClip.visible = true;				}		}			}