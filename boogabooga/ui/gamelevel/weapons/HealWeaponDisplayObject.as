/** HealWeaponDisplayObject  *	---------------------------------------------------------------------------- *  *	@desc:  *		This is the display object clip that will represent Weapon class.  *		Weapon properties ( Create classes to represent these different weapons )  *			- single lane / multiple lane  *			- shoots one direction / all directions  *			- affect flying enemies / not  *			- affect digging enemies / not  *			- projectile / close range / blocking / trap / instant  *			- one hit kill  *			- element properties ( fire, ice, poison )  *			- modifier ( can add attributes to existing weapons )  *			- area of effect on hit  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.gamelevel.weapons	{		import flash.display.Bitmap;		import flash.display.BitmapData;		import flash.display.BlendMode;		import flash.display.DisplayObject;		import flash.display.DisplayObjectContainer;		import flash.display.MovieClip;		import flash.events.Event;		import flash.events.TimerEvent;		import flash.geom.ColorTransform;		import flash.geom.Matrix;		import flash.geom.Point;		import flash.geom.Rectangle;		import flash.utils.getDefinitionByName;				import com.greensock.TweenLite;		import com.avatarlabs.utils.cache.BitmapDataManager;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.loader.CustomLoader;		import com.avatarlabs.utils.UtilFunctions;		import com.avatarlabs.utils.timers.CustomTimer;		import com.avatarlabs.utils.userinterface.UILabel;		import com.desuade.partigen.emitters.Emitter;		import com.desuade.partigen.events.ParticleEvent;				//import com.gamelevel.data.*;		import com.boogabooga.data.gamelevel.AbstractGameObject;		import com.boogabooga.data.gamelevel.Weapon;		import com.boogabooga.events.GameLevelEvent;		import com.boogabooga.ui.gamelevel.AnimationDisplayObject;		import com.boogabooga.ui.gamelevel.GameLevelAttackingDisplayObject;		import com.boogabooga.ui.gamelevel.GameLevelDisplayObject;		import com.boogabooga.ui.gamelevel.weapons.WeaponDisplayObject;		import com.boogabooga.utils.GameLevelUtil;				public class HealWeaponDisplayObject extends WeaponDisplayObject		{						/**	Stage Instances **/			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function HealWeaponDisplayObject( contentClip:MovieClip=null )				{					super( contentClip );										//init();				}								/*				public function set deathParticleEmitter( e:Emitter ):void				{					trace( "set deathParticleEmitter" );										_deathParticleEmitter = e;					_deathParticleEmitter.addEventListener( ParticleEvent.DIED, handleDeathParticleEmitterDied, false, 0, true );				}				*/							/** init			  *	---------------------------------------------------------------------------- */				override public function init():void				{					//trace( "HealWeaponDisplayObject: init();" );										super.init();										_debug = true;										_attacking = false;					_ignoredByEnemy = true;									}							/** pause			  *	---------------------------------------------------------------------------- */				override public function pause():void				{					if( _attacking )					{						_attackTimer.pause();					}				}							/** unpause			  *	---------------------------------------------------------------------------- */				override public function unpause():void				{					if( _attacking )					{						_attackTimer.unpause();					}				}							/** kill			  *	---------------------------------------------------------------------------- */				override public function kill():void				{					if( _debug ) ConsoleBroadcaster.broadcast( "HealWeaponDisplayObject", "kill();" );										super.kill();									}							/** die			  *	---------------------------------------------------------------------------- */				override public function die():void				{					//if( _debug ) ConsoleBroadcaster.broadcast( "HealWeaponDisplayObject", "die();" );										if( _alive )					{						_alive = false;												stopAttacking();												//TODO:						//	Play the death animation												_currentAnimationDisplayObject.stopAnimation();						_currentAnimationDisplayObject.contentClip.visible = false;												//dispatchEvent( new GameLevelEvent(GameLevelEvent.DIE) );						//dispatchEvent( new GameLevelEvent(GameLevelEvent.REMOVE_FROM_GAME) );						onRemovedFromGame.dispatch( this );					}										//trace( "_tilesWatching: "+_tilesWatching );										//var i:uint;										//kill();				}							/** placedOnBoard			  *	---------------------------------------------------------------------------- *			  *	Called when WeaponDisplayObject gets added to the stage.			  *	Each weapon type is going to do different things ( either going to just stay			  *	static or actually going to start animating ).			  *	---------------------------------------------------------------------------- */				override public function placedOnBoard():void				{									}						}			}