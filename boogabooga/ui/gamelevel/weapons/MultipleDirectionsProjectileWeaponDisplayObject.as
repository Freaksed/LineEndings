/** MultipleDirectionsProjectileWeaponDisplayObject  *	---------------------------------------------------------------------------- *  *	@desc:  *		This is the display object clip that will represent Weapon class.  *		Weapon properties ( Create classes to represent these different weapons )  *			- single lane / multiple lane  *			- shoots one direction / all directions  *			- affect flying enemies / not  *			- affect digging enemies / not  *			- projectile / close range / blocking / trap / instant  *			- one hit kill  *			- element properties ( fire, ice, poison )  *			- modifier ( can add attributes to existing weapons )  *			- area of effect on hit  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.gamelevel.weapons	{		import flash.display.Bitmap;		import flash.display.BitmapData;		import flash.display.BlendMode;		import flash.display.DisplayObject;		import flash.display.DisplayObjectContainer;		import flash.display.MovieClip;		import flash.display.Sprite;		import flash.events.Event;		import flash.events.TimerEvent;		import flash.geom.ColorTransform;		import flash.geom.Matrix;		import flash.geom.Point;		import flash.geom.Rectangle;		import flash.utils.getDefinitionByName;				import com.greensock.TweenLite;		import com.avatarlabs.utils.cache.BitmapDataManager;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.loader.CustomLoader;		import com.avatarlabs.utils.UtilFunctions;		import com.avatarlabs.utils.timers.CustomTimer;		import com.avatarlabs.utils.userinterface.UILabel;		import com.desuade.partigen.emitters.Emitter;		import com.desuade.partigen.events.ParticleEvent;		import org.osflash.signals.Signal;				//import com.gamelevel.data.*;		import com.boogabooga.data.gamelevel.AbstractGameObject;		import com.boogabooga.data.gamelevel.Weapon;		import com.boogabooga.events.BoogaEvent;		import com.boogabooga.events.GameLevelEvent;		import com.boogabooga.ui.gamelevel.AnimationDisplayObject;		import com.boogabooga.ui.gamelevel.GameLevelDisplayObject;		import com.boogabooga.ui.gamelevel.weapons.WeaponDisplayObject;		import com.boogabooga.utils.GameLevelUtil;				public class MultipleDirectionsProjectileWeaponDisplayObject extends WeaponDisplayObject		{			//protected var _tilesWatching:Array;						//protected var _enemiesAttacked:Array;						//protected var _oldDirection:int;			//protected var _canAttackFlyer:Boolean;			//protected var _canAttackDigger:Boolean;						//protected var _attackedTarget:GameLevelAttackingDisplayObject;			//protected var _currentAnimationDisplayObject:AnimationDisplayObject;						//protected var _deathParticleEmitter:Emitter;						//protected var _hasFired:Boolean;						public var onMultipleDirectionsProjectileFired:Signal;						/**	Stage Instances **/			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function MultipleDirectionsProjectileWeaponDisplayObject( contentClip:MovieClip=null )				{					super( contentClip );										//init();				}							/** set/get contentClip			  *	---------------------------------------------------------------------------- */				override public function set contentClip( m:MovieClip ):void				{					super.contentClip = m;										//_upAnimationClip.addEventListener( BoogaEvent.ON_ANIMATION_EVENT, handleAnimationEventFired, false, 0, true );					_upAnimationClip.onAnimationEventFired.add( handleAnimationEventFired );				}							/** init			  *	---------------------------------------------------------------------------- */				override public function init():void				{					//trace( "MultipleDirectionsProjectileWeaponDisplayObject: init();" );										super.init();										_debug = true;										_attacking = false;					//_hasFired = false;										onMultipleDirectionsProjectileFired = new Signal( MultipleDirectionsProjectileWeaponDisplayObject, Point, Point, Point, Point, Number );				}							/** pause			  *	---------------------------------------------------------------------------- */				override public function pause():void				{					if( _attacking )					{						_attackTimer.pause();					}										_currentAnimationDisplayObject.pause();				}							/** unpause			  *	---------------------------------------------------------------------------- */				override public function unpause():void				{					if( _attacking )					{						_attackTimer.unpause();					}										_currentAnimationDisplayObject.unpause();				}							/** kill			  *	---------------------------------------------------------------------------- */				override public function kill():void				{					if( _debug ) ConsoleBroadcaster.broadcast( "MultipleDirectionsProjectileWeaponDisplayObject", "kill();" );										//_upAnimationClip.removeEventListener( BoogaEvent.ON_ANIMATION_EVENT, handleAnimationEventFired );					_upAnimationClip.onAnimationEventFired.remove( handleAnimationEventFired );										super.kill();				}							/** die			  *	---------------------------------------------------------------------------- */				override public function die():void				{					//if( _debug ) ConsoleBroadcaster.broadcast( "MultipleDirectionsProjectileWeaponDisplayObject", "die();" );										if( _alive )					{						/*						_alive = false;												stopAttacking();												//TODO:						//	Play the death animation												_currentAnimationDisplayObject.stopAnimation();						_currentAnimationDisplayObject.visible = false;												dispatchEvent( new GameLevelEvent(GameLevelEvent.DIE) );						dispatchEvent( new GameLevelEvent(GameLevelEvent.REMOVE_FROM_GAME) );						*/												super.die();					}										//trace( "_tilesWatching: "+_tilesWatching );										//var i:uint;										//kill();									}							/** placedOnBoard			  *	---------------------------------------------------------------------------- *			  *	Called when WeaponDisplayObject gets added to the stage.			  *	Each weapon type is going to do different things ( either going to just stay			  *	static or actually going to start animating ).			  *	---------------------------------------------------------------------------- */				override public function placedOnBoard():void				{					_currentAnimationDisplayObject.showAnimation( 0 );					_currentAnimationDisplayObject.startIdleAnimation();				}							/** startAttackAnimation			  *	---------------------------------------------------------------------------- *			  *	Shows the attack animation of the displayObject. You can also do anything			  *	extra when it attacks. Separating this from attackTargets function so that			  *	extended classes can just override this function instead of overriding that 			  *	function.			  *	---------------------------------------------------------------------------- 				override public function startAttackAnimation():void				{					if( _debug ) ConsoleBroadcaster.broadcast( toString(), "startAttackAnimation();" );										//Not sure if this is the better way of doing it like this					if( _attackedTarget != null && _attackingGameObject.power > 0 )					{						if( _attackTimer == null )						{							_attackTimer = new CustomTimer( 1000 * _attackingGameObject.rateOfFire );							//_attackTimer.addEventListener( TimerEvent.TIMER, handleAttackTimerFired, false, 0, true );							_attackTimer.onTimerFired.add( handleAttackTimerFired );						}												_attacking = true;						_attackTimer.start();												showAnimation( _direction );					}				}*/							/** showAnimation			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */				override protected function showAnimation( direction:int ):void				{					if( _debug ) ConsoleBroadcaster.broadcast( toString(), "showAnimation("+direction+");" );										if( _attacking )					{						_upAnimationClip.initCanvas( false );						//_upAnimationClip.startAnimation( false, 0 );						_currentAnimationDisplayObject = _upAnimationClip;						_currentAnimationDisplayObject.contentClip.visible = true;						_currentAnimationDisplayObject.startAnimation( false, 0 );												//trace( "is animation looping ? "+_currentAnimationDisplayObject.looping );					}					else if( !_alive )					{											}					else					{						_upAnimationClip.initCanvas( false );						_currentAnimationDisplayObject = _upAnimationClip;					}										_currentAnimationDisplayObject.contentClip.visible = true;				}							/** handleAnimationEventFired			  *	---------------------------------------------------------------------------- */				override protected function handleAnimationEventFired():void				{					ConsoleBroadcaster.broadcast( "MultipleDirectionsProjectileWeaponDisplayObject", "handleAnimationEventFired();" );										if( _alive && _attackedTarget != null )					{						//TODO:						//	Depending on the type of weapons, it will either 						//_attackedTarget.hit( _attackingGameObject, _attackingGameObject.power );						//_attackedTarget = null;												//_hasFired = true;						//trace( "shootTo: "+_attackedTarget.positionIn2D );						/*						dispatchEvent( new GameLevelEvent(GameLevelEvent.MULTIPLE_DIRECTIONS_PROJECTILE_FIRE, {shootToUp:new Point(_positionIn2D.x, _positionIn2D.y-GameLevelUtil.TILE_2D_HEIGHT), 																												shootToRight:new Point(_positionIn2D.x+GameLevelUtil.TILE_2D_WIDTH, _positionIn2D.y),																												shootToDown:new Point(_positionIn2D.x, _positionIn2D.y+GameLevelUtil.TILE_2D_HEIGHT), 																												shootToLeft: new Point(_positionIn2D.x-GameLevelUtil.TILE_2D_WIDTH, _positionIn2D.y),																												altitude:_attackedTarget.altitude}) );						*/												onMultipleDirectionsProjectileFired.dispatch( this, new Point(_positionIn2D.x, _positionIn2D.y-GameLevelUtil.TILE_2D_HEIGHT), new Point(_positionIn2D.x+GameLevelUtil.TILE_2D_WIDTH, _positionIn2D.y),																		new Point(_positionIn2D.x, _positionIn2D.y+GameLevelUtil.TILE_2D_HEIGHT), new Point(_positionIn2D.x-GameLevelUtil.TILE_2D_WIDTH, _positionIn2D.y),																		_attackedTarget.altitude );											}				}						}			}