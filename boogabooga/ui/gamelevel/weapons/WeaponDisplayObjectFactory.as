/** WeaponDisplayObjectFactory  *	---------------------------------------------------------------------------- *  *	@desc:  *		Factory class for weapon display objects.  *		It will create specific class depending on the attack properties.  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.gamelevel.weapons	{		import flash.events.EventDispatcher;		import flash.utils.getDefinitionByName;				import com.avatarlabs.utils.cache.HashTable;		import com.boogabooga.data.gamelevel.GameLevelDataIndex;		import com.boogabooga.data.gamelevel.Weapon;		import com.boogabooga.ui.gamelevel.GameLevelAttackingDisplayObject;		import com.boogabooga.ui.gamelevel.weapons.*;		import com.boogabooga.utils.GameLevelUtil;				public class WeaponDisplayObjectFactory extends EventDispatcher		{						/** Constructor			  *	---------------------------------------------------------------------------- */				public function WeaponDisplayObjectFactory()				{									}								public static function createWeaponDisplayObject( weapon:Weapon ):WeaponDisplayObject				{					var weaponDisplayObject:WeaponDisplayObject;					var weaponLibraryClip:String = "WeaponDisplayObjectLibrary";										if( weapon.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_MULTIPLE_WEAPONS_INDEX) )					{						weaponDisplayObject = new MultipleWeaponsWeaponDisplayObject();						weaponLibraryClip = "MultipleWeaponsWeaponDisplayObjectLibrary";					}					else if( weapon.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_CATAPULT_INDEX) )					{						weaponDisplayObject = new CatapultWeaponDisplayObject();						trace( "weapon.additionalAttackValue: "+weapon.additionalAttackValue );					}					else if( weapon.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_PROJECTILE_INDEX) )					{						weaponDisplayObject = new ProjectileWeaponDisplayObject();					}					else if( weapon.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_TRAP_INDEX) || weapon.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_SPRING_TRAP_INDEX) )					{						weaponDisplayObject = new TrapWeaponDisplayObject();					}					else if( weapon.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_MULTIPLE_DIRECTIONS_PROJECTILE_INDEX) )					{						weaponDisplayObject = new MultipleDirectionsProjectileWeaponDisplayObject();					}					else if( weapon.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_HEALING_INDEX) )					{						weaponDisplayObject = new HealWeaponDisplayObject();					}					else if( weapon.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_BOMB_INDEX) )					{						weaponDisplayObject = new BombWeaponDisplayObject();					}					else if( weapon.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_PATH_INDEX) )					{						weaponDisplayObject = new PathWeaponDisplayObject();					}					else if( weapon.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_ADDITION_INDEX) )					{						weaponDisplayObject = new AdditionWeaponDisplayObject();					}					else if( weapon.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_SHIELD_INDEX) )					{						weaponDisplayObject = new ShieldWeaponDisplayObject();					}					else					{						weaponDisplayObject = new WeaponDisplayObject();					}										weaponDisplayObject.contentClip = new (getDefinitionByName(weaponLibraryClip) as Class)();					weaponDisplayObject.init();					weaponDisplayObject.attackingGameObject = weapon;										if( weapon.hasAttackProperty(GameLevelUtil.ATTACK_PROPERTY_MULTIPLE_WEAPONS_INDEX) )					{						weaponDisplayObject.attackingGameObject2 = GameLevelDataIndex.getInstance().getWeapon( weapon.otherWeaponId );					}										return weaponDisplayObject;				}						}			}