/** BombWeaponDisplayObject  *	---------------------------------------------------------------------------- *  *	@desc:  *		This is the display object clip that will represent Weapon class.  *		Weapon properties ( Create classes to represent these different weapons )  *			- single lane / multiple lane  *			- shoots one direction / all directions  *			- affect flying enemies / not  *			- affect digging enemies / not  *			- projectile / close range / blocking / trap / instant  *			- one hit kill  *			- element properties ( fire, ice, poison )  *			- modifier ( can add attributes to existing weapons )  *			- area of effect on hit  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.gamelevel.weapons	{		import flash.display.Bitmap;		import flash.display.BitmapData;		import flash.display.BlendMode;		import flash.display.DisplayObject;		import flash.display.DisplayObjectContainer;		import flash.display.MovieClip;		import flash.display.Sprite;		import flash.events.Event;		import flash.events.TimerEvent;		import flash.geom.ColorTransform;		import flash.geom.Matrix;		import flash.geom.Point;		import flash.geom.Rectangle;		import flash.utils.getDefinitionByName;				import com.greensock.TweenLite;		import com.avatarlabs.utils.UtilFunctions;		import com.avatarlabs.utils.cache.BitmapDataManager;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.loader.CustomLoader;		import com.avatarlabs.utils.sound.SoundEffectPlayer;		import com.avatarlabs.utils.timers.CustomTimer;		import com.avatarlabs.utils.userinterface.UILabel;		import com.desuade.partigen.emitters.Emitter;		import com.desuade.partigen.events.ParticleEvent;		import org.osflash.signals.Signal;				//import com.gamelevel.data.*;		import com.boogabooga.data.SoundData;		import com.boogabooga.data.SoundsIndex;		import com.boogabooga.data.gamelevel.AbstractGameObject;		import com.boogabooga.data.gamelevel.Weapon;		import com.boogabooga.events.BoogaEvent;		import com.boogabooga.events.GameLevelEvent;		import com.boogabooga.ui.gamelevel.AnimationDisplayObject;		import com.boogabooga.ui.gamelevel.GameLevelDisplayObject;		import com.boogabooga.ui.gamelevel.weapons.WeaponDisplayObject;		import com.boogabooga.utils.GameLevelUtil;				public class BombWeaponDisplayObject extends WeaponDisplayObject		{			protected var _explodeTimer:CustomTimer;						public var onBombExploded:Signal;						/**	Stage Instances **/			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function BombWeaponDisplayObject( contentClip:MovieClip=null )				{					super( contentClip );										//init();				}								/*				public function set deathParticleEmitter( e:Emitter ):void				{					trace( "set deathParticleEmitter" );										_deathParticleEmitter = e;					_deathParticleEmitter.addEventListener( ParticleEvent.DIED, handleDeathParticleEmitterDied, false, 0, true );				}				*/							/** set/get contentClip			  *	---------------------------------------------------------------------------- 				override public function set contentClip( m:MovieClip ):void				{					_contentClip = m;					_contentClip.mouseChildren = false;					_contentClip.mouseEnabled = false;										upAnimation_mc = _contentClip.upAnimation_mc;					downAnimation_mc = _contentClip.downAnimation_mc;					hitarea_mc = _contentClip.hitarea_mc;										upAnimation_mc.visible = false;					downAnimation_mc.visible = false;				}*/							/** init			  *	---------------------------------------------------------------------------- */				override public function init():void				{					//trace( "BombWeaponDisplayObject: init();" );										super.init();										_debug = true;										_attacking = false;					_ignoredByEnemy = true;										onBombExploded = new Signal( BombWeaponDisplayObject, Number );				}							/** pause			  *	---------------------------------------------------------------------------- */				override public function pause():void				{					_currentAnimationDisplayObject.pause();										if( _explodeTimer != null )					{						_explodeTimer.pause();					}				}							/** unpause			  *	---------------------------------------------------------------------------- */				override public function unpause():void				{					_currentAnimationDisplayObject.unpause();										if( _explodeTimer != null )					{						_explodeTimer.unpause();					}				}							/** kill			  *	---------------------------------------------------------------------------- */				override public function kill():void				{					//ConsoleBroadcaster.broadcast( "BombWeaponDisplayObject", "kill();" );										onBombExploded = null;										super.kill();										if( _explodeTimer.isRunning )						_explodeTimer.stop();										//_explodeTimer.removeEventListener( TimerEvent.TIMER_COMPLETE, handleExplodeTimerCompleted );					_explodeTimer.onTimerCompleted.remove( handleExplodeTimerCompleted );					_explodeTimer.kill();					_explodeTimer = null;					/*					upAnimation_mc.stopAnimation();					upAnimation_mc.kill();										downAnimation_mc.stopAnimation();					downAnimation_mc.kill();					*/					_currentAnimationDisplayObject = null;				}							/** die			  *	---------------------------------------------------------------------------- */				override public function die():void				{					//if( _debug ) ConsoleBroadcaster.broadcast( "BombWeaponDisplayObject", "die();" );										if( _alive )					{						/*						_alive = false;												stopAttacking();												//TODO:						//	Play the death animation												_currentAnimationDisplayObject.stopAnimation();						_currentAnimationDisplayObject.visible = false;												dispatchEvent( new GameLevelEvent(GameLevelEvent.DIE) );						dispatchEvent( new GameLevelEvent(GameLevelEvent.REMOVE_FROM_GAME) );						*/												super.die();					}				}							/** placedOnBoard			  *	---------------------------------------------------------------------------- *			  *	Called when WeaponDisplayObject gets added to the stage.			  *	Each weapon type is going to do different things ( either going to just stay			  *	static or actually going to start animating ).			  *	---------------------------------------------------------------------------- */				override public function placedOnBoard():void				{					startExplodeTimer();				}							/** handleSoundEventFired			  *	---------------------------------------------------------------------------- */				override protected function handleSoundEventFired( soundDataId:int ):void				{					//_currentAnimationDisplayObject.removeEventListener( BoogaEvent.ON_SOUND_EVENT, handleSoundEventFired );					_currentAnimationDisplayObject.onSoundEventFired.remove( handleSoundEventFired );										super.handleSoundEventFired( soundDataId );				}							/** startExplodeTimer			  *	---------------------------------------------------------------------------- */				public function startExplodeTimer():void				{					_explodeTimer = new CustomTimer( _attackingGameObject.additionalAttackValue*1000, 1 );					//_explodeTimer.addEventListener( TimerEvent.TIMER_COMPLETE, handleExplodeTimerCompleted, false, 0, true );					_explodeTimer.onTimerCompleted.add( handleExplodeTimerCompleted );					_explodeTimer.start();										//trace( "_currentAnimationDisplayObject: "+_currentAnimationDisplayObject );										_upAnimationClip.initCanvas( false );					_upAnimationClip.offsetX = _attackingGameObject.upAnimationObject.offset.x;					_upAnimationClip.offsetY = _attackingGameObject.upAnimationObject.offset.y;					_upAnimationClip.startAnimation( true );					_currentAnimationDisplayObject = _upAnimationClip;				}							/** handleAnimationEventFired			  *	---------------------------------------------------------------------------- 				override protected function handleAnimationEventFired( event:CustomEvent ):void				{					ConsoleBroadcaster.broadcast( "BombWeaponDisplayObject", "handleAnimationEventFired();" );										if( _alive && _attackedTarget != null )					{						//TODO:						//	Depending on the type of weapons, it will either 						//_attackedTarget.hit( _attackingGameObject, _attackingGameObject.power );						//_attackedTarget = null;												//trace( "shootTo: "+_attackedTarget.positionIn2D );											}				}*/							/** handleExplodeTimerCompleted			  *	---------------------------------------------------------------------------- */				protected function handleExplodeTimerCompleted( timer:CustomTimer ):void				{					//ConsoleBroadcaster.broadcast( "BombWeaponDisplayObject", "handleExplodeTimerCompleted();" );										//_upAnimationClip.contentClip.stop();										if( _attackingGameObject.hitSoundDataIds.length > 0 )					{						var randomIndex:int = int( Math.random()*_attackingGameObject.hitSoundDataIds.length );						var soundData:SoundData = SoundsIndex.getInstance().getSoundById(_attackingGameObject.hitSoundDataIds[randomIndex]);						SoundEffectPlayer.getInstance().playLibrarySound( soundData.soundId, false, _contentClip.name, soundData.soundId );						soundData = null;					}										//dispatchEvent( new GameLevelEvent(GameLevelEvent.BOMB_EXPLODE, {range:45+(_attackingGameObject.range-1)*90}) );					onBombExploded.dispatch( this, 45+(_attackingGameObject.range-1)*90 );										die();				}		}			}