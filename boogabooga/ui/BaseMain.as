/** BaseMain  *	---------------------------------------------------------------------------- *  *	@desc: Base Main Class that should take care of all the preloading of  *		the necessary files for the game.  *	@author:  *		Christian Widodo [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui	{		import flash.display.MovieClip;		import flash.display.Stage;		import flash.display.StageAlign;		import flash.display.StageScaleMode;		import flash.events.Event;		import flash.events.IOErrorEvent;		import flash.events.FullScreenEvent;		import flash.events.ProgressEvent;		import flash.external.ExternalInterface;		import flash.net.URLLoader;		import flash.net.URLRequest;		import flash.net.URLRequestMethod;		import flash.net.URLVariables;		import flash.system.Security;		import flash.text.Font;		import flash.ui.ContextMenu;		import flash.utils.getDefinitionByName;				import com.greensock.plugins.TweenPlugin;		import com.greensock.plugins.ColorTransformPlugin;		import com.greensock.plugins.FrameLabelPlugin;		import com.greensock.plugins.FramePlugin;		import com.desuade.partigen.emitters.Emitter;		import com.desuade.partigen.renderers.StandardRenderer;		import com.desuade.partigen.renderers.Renderer;		import net.kaegi.events.FontManagerEvent;		import net.kaegi.utils.FontManager;				import com.avatarlabs.utils.cache.AssetLoader;		import com.avatarlabs.utils.cache.AssetsIndex;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.AssetLoaderEvent;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.sound.SoundEffectPlayer;				import com.boogabooga.data.SettingsIndex;		import com.boogabooga.data.SoundData;		import com.boogabooga.data.SoundsIndex;		import com.boogabooga.utils.GameLevelUtil;				public class BaseMain extends MovieClip		{			protected var _debug:Boolean = false;						/**	Stage Instances **/			//public var assetContainer_mc:MovieClip;			//public var audioAssetContainer_mc:MovieClip;			//public var particleAssetContainer_mc:MovieClip;			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function BaseMain()				{					this.loaderInfo.addEventListener( ProgressEvent.PROGRESS, handlePreloadProgress, false, 0, true );					this.loaderInfo.addEventListener( Event.COMPLETE, handlePreloadComplete, false, 0, true );										stop();										var cm:ContextMenu = new ContextMenu();						//cm.hideBuiltInItems();						cm.builtInItems.forwardAndBack = false;						cm.builtInItems.loop = false;						cm.builtInItems.play = false;						cm.builtInItems.print = false;						cm.builtInItems.quality = false;						cm.builtInItems.rewind = false;						cm.builtInItems.save = false;					contextMenu = cm;										GameLevelUtil.hash();					TweenPlugin.activate([FramePlugin, FrameLabelPlugin, ColorTransformPlugin]);				}							/** handlePreloadProgress			  *	---------------------------------------------------------------------------- */				protected function handlePreloadProgress( event:ProgressEvent ):void				{					//ConsoleBroadcaster.broadcast( "BaseMain", "handlePreloadProgress():" );				}							/** handlePreloadComplete			  *	---------------------------------------------------------------------------- */				protected function handlePreloadComplete( event:Event ):void				{					//ConsoleBroadcaster.broadcast( "BaseMain", "handlePreloadComplete();" );										event.currentTarget.removeEventListener( ProgressEvent.PROGRESS, handlePreloadProgress );					event.currentTarget.removeEventListener( Event.COMPLETE, handlePreloadComplete );										Security.allowDomain("*");					Security.allowInsecureDomain("*");										if( this.loaderInfo.parameters.debug == "false" )					{						ConsoleBroadcaster.enabled = false;					}										if( this.loaderInfo.parameters.contentURL != undefined )					{						SettingsIndex.getInstance().contentURL = this.loaderInfo.parameters.contentURL;					}										ConsoleBroadcaster.broadcast( "BaseMain", "contentURL: "+SettingsIndex.getInstance().contentURL );										if( this.loaderInfo.parameters.baseURL != undefined )					{						SettingsIndex.getInstance().baseURL = this.loaderInfo.parameters.baseURL;					}										if( this.loaderInfo.parameters.fbId != undefined )					{						SettingsIndex.getInstance().fbId = this.loaderInfo.parameters.fbId;					}										if( this.loaderInfo.parameters.appId != undefined )					{						SettingsIndex.getInstance().appId = this.loaderInfo.parameters.appId;					}										if( this.loaderInfo.parameters.locale != undefined )					{						SettingsIndex.getInstance().locale = this.loaderInfo.parameters.locale;					}										if( this.loaderInfo.parameters.accessToken != undefined )					{						SettingsIndex.getInstance().accessToken = this.loaderInfo.parameters.accessToken;					}										if( this.loaderInfo.parameters.requests != undefined )					{						SettingsIndex.getInstance().requests = this.loaderInfo.parameters.requests;					}										if( this.loaderInfo.parameters.bbuo != undefined )					{						SettingsIndex.getInstance().origin = this.loaderInfo.parameters.bbuo;					}										SettingsIndex.getInstance().stage = stage;										loadRequiredFiles();				}								protected function loadRequiredFiles():void				{					ConsoleBroadcaster.broadcast( "BaseMain", "loadRequiredFiles();" );					//NOTE:					//	If there are assets to load					/*					var assetLoader:AssetLoader = new AssetLoader();						assetLoader.addEventListener( AssetLoaderEvent.COMPLETE, handleLoadRequiredFilesComplete, false, 0, true );						assetLoader.addEventListener( AssetLoaderEvent.ERROR, handleLoadRequiredFilesError, false, 0, true );						assetLoader.addEventListener( AssetLoaderEvent.PROGRESS, handleLoadRequiredFilesProgress, false, 0, true );												//assetLoader.addAssetToLoad( "files/assets/swfs/fonts.swf", "fonts" );						//assetLoader.startLoadAssets();					*/										//NOTE:					//	If there are no assets to load					//finishedLoadingRequiredFiles();					loadFonts();				}								protected function finishedLoadingRequiredFiles():void				{					//TODO:					//	Overwrite this function in your main class				}								protected function handleLoadRequiredFilesComplete( event:AssetLoaderEvent ):void				{					event.currentTarget.removeEventListener( AssetLoaderEvent.COMPLETE, handleLoadRequiredFilesComplete );					event.currentTarget.removeEventListener( AssetLoaderEvent.ERROR, handleLoadRequiredFilesError );					event.currentTarget.removeEventListener( AssetLoaderEvent.PROGRESS, handleLoadRequiredFilesProgress );										//finishedLoadingRequiredFiles();					loadFonts();				}								protected function handleLoadRequiredFilesError( event:AssetLoaderEvent ):void				{					event.currentTarget.removeEventListener( AssetLoaderEvent.COMPLETE, handleLoadRequiredFilesComplete );					event.currentTarget.removeEventListener( AssetLoaderEvent.ERROR, handleLoadRequiredFilesError );					event.currentTarget.removeEventListener( AssetLoaderEvent.PROGRESS, handleLoadRequiredFilesProgress );				}								protected function handleLoadRequiredFilesProgress( event:AssetLoaderEvent ):void				{					//NOTE:					//	Use this for the preloader progress				}								protected function loadFonts():void				{					if( SettingsIndex.getInstance().fontManager == null )					{						var fontManager:FontManager = new FontManager();							fontManager.addEventListener( FontManagerEvent.LOAD_PROGRESS, handleFontManagerLoadProgress, false, 0, true );							fontManager.addEventListener( FontManagerEvent.LOAD_COMPLETE, handleFontManagerLoadComplete, false, 0, true );							fontManager.addEventListener( FontManagerEvent.LOAD_ERROR, handleFontManagerLoadError, false, 0, true );							fontManager.init( SettingsIndex.getInstance().contentURL+"files/assets/swfs/fonts.swf", SettingsIndex.getInstance().contentURL+"files/css/style.css" );												SettingsIndex.getInstance().fontManager = fontManager;					}					else					{						finishedLoadingFonts();					}				}								protected function finishedLoadingFonts():void				{					//TODO:					//	Overwrite this function in your main class					//finishedLoadingRequiredFiles();										loadSoundDataFile();				}								protected function handleFontManagerLoadProgress( event:FontManagerEvent ):void				{									}								protected function handleFontManagerLoadComplete( event:FontManagerEvent ):void				{					event.currentTarget.removeEventListener( FontManagerEvent.LOAD_PROGRESS, handleFontManagerLoadProgress );					event.currentTarget.removeEventListener( FontManagerEvent.LOAD_COMPLETE, handleFontManagerLoadComplete );					event.currentTarget.removeEventListener( FontManagerEvent.LOAD_ERROR, handleFontManagerLoadError );										trace("FontManager LOAD Complete!");					trace(event.params.displayFonts);					trace(event.params.cssFileOutput);										trace( Font.enumerateFonts(false) );										finishedLoadingFonts();				}								protected function handleFontManagerLoadError( event:FontManagerEvent ):void				{					event.currentTarget.removeEventListener( FontManagerEvent.LOAD_PROGRESS, handleFontManagerLoadProgress );					event.currentTarget.removeEventListener( FontManagerEvent.LOAD_COMPLETE, handleFontManagerLoadComplete );					event.currentTarget.removeEventListener( FontManagerEvent.LOAD_ERROR, handleFontManagerLoadError );				}								protected function loadSoundDataFile():void				{					ConsoleBroadcaster.broadcast( "BaseMain", "loadSoundDataFile();" );										var urlLoader:URLLoader = new URLLoader();						urlLoader.addEventListener( Event.COMPLETE, handleLoadSoundDataFileComplete, false, 0, true );						urlLoader.addEventListener( IOErrorEvent.IO_ERROR, handleLoadSoundDataFileError, false, 0, true );						urlLoader.load( new URLRequest(SettingsIndex.getInstance().contentURL+"files/assets/sounds/sound_setting.xml") );				}								protected function handleLoadSoundDataFileComplete( event:Event ):void				{					event.currentTarget.removeEventListener( Event.COMPLETE, handleLoadSoundDataFileComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleLoadSoundDataFileError );										var xml:XML = new XML(event.currentTarget.data);					var sounds:XMLList = xml.sound;										for( var i:int=0; i<sounds.length(); ++i )					{						SoundsIndex.getInstance().addSound( Number(sounds[i].id.text()), sounds[i].asset_url.text(), sounds[i].linkage_id.text(), Number(sounds[i].volume.text()) );						SoundEffectPlayer.getInstance().addSound( sounds[i].linkage_id.text(), sounds[i].linkage_id.text() );						SoundEffectPlayer.getInstance().setVolume( Number(sounds[i].volume.text()), 0, sounds[i].linkage_id.text() );												//trace( "setting volume of "+sounds[i].linkage_id.text()+" to "+Number(sounds[i].volume.text()) );					}										finishedLoadingRequiredFiles();				}								protected function handleLoadSoundDataFileError( event:IOErrorEvent ):void				{					event.currentTarget.removeEventListener( Event.COMPLETE, handleLoadSoundDataFileComplete );					event.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, handleLoadSoundDataFileError );				}		}			}