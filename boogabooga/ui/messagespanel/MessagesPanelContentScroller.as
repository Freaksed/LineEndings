/** MessagesPanelContentScroller  *	---------------------------------------------------------------------------- *  *	@desc:  *		Scroller for the available messages to display in the panel.  *	@authors:  *		Christian Widodo [christian@avatarlabs.com]  *		Brett Cook [brett@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.boogabooga.ui.messagespanel	{		import flash.display.MovieClip;		import flash.events.Event;		import flash.events.IOErrorEvent;		import flash.events.MouseEvent;		import flash.events.ProgressEvent;		import flash.events.TimerEvent;		import flash.filters.GlowFilter;		import flash.geom.Point;		import flash.geom.Rectangle;		import flash.utils.Timer;				import com.greensock.TweenLite;		import com.avatarlabs.utils.VectorUtil;		import com.avatarlabs.utils.cache.HashTable;		import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.loader.CustomLoader;		import com.avatarlabs.utils.userinterface.DynamicUIButton;		import com.avatarlabs.utils.userinterface.DynamicUIScroller;		//		import com.boogabooga.ui.gamelevel.Gameboard;//		import com.boogabooga.ui.gamelevel.GameLevelDisplayObject;		import com.boogabooga.ui.messagespanel.MessagesPanelContentSlider;		import com.boogabooga.ui.messagespanel.MessagesPanelContentRow;		import com.boogabooga.data.gamelevel.AbstractGameObject;		import com.boogabooga.data.gamelevel.GameLevelCurrentData;		import com.boogabooga.data.gamelevel.Weapon;				public class MessagesPanelContentScroller extends DynamicUIScroller		{			public static const ROW_X:uint = 0;			public static const ROW_HEIGHT:uint = 60;						protected var _debug:Boolean;						protected var _menuRows:Vector.<MessagesPanelContentRow>;			protected var _currentRow:DynamicUIButton;						protected var _sliderClip:MessagesPanelContentSlider;						/**	Stage Instances **/			public var mask_mc:MovieClip;			public var slider_mc:MovieClip;			public var content_mc:MovieClip;			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function MessagesPanelContentScroller()				{					//stop();										//init();				}								override public function set dynamicClip( m:MovieClip ):void				{					super.dynamicClip = m;										mask_mc = _dynamicClip.mask_mc;					content_mc = _dynamicClip.content_mc;					slider_mc = _dynamicClip.slider_mc;										_sliderClip = new MessagesPanelContentSlider();					_sliderClip.dynamicClip = slider_mc;					_sliderClip.dynamicInit();				}							/** init			  *	---------------------------------------------------------------------------- */				override public function dynamicInit():void				{					super.dynamicInit();										_dynamicClip.mouseChildren = true;					_dynamicClip.mouseEnabled = false;										_debug = true;										_menuRows = new Vector.<MessagesPanelContentRow>;										setProperty( "y" );					setContent( content_mc );					setMask( mask_mc );					setSlider( _sliderClip );					toggleSlider();										//EventNotificationCenter.getInstance().addEventListener( "onRowDeleted", handleRowDeleted, false, 0, true );					//this.addEventListener( "onRowDeleted", handleRowDeleted, false, 0, true);				}							/** kill			  *	---------------------------------------------------------------------------- */				public function kill():void				{					if( _debug ) ConsoleBroadcaster.broadcast( "MessagesPanelContentScroller", "kill();" );										for( var i:uint=0; i<_menuRows.length; ++i )					{						//_menuRows[i].removeEventListener( "onClick", handleRowClicked );						_menuRows[i].removeEventListener( "onRowDeleted", handleRowDeleted );//						_menuRows[i].removeEventListener( "onRowAccepted", handleRowAccepted );						content_mc.removeChild( _menuRows[i].contentClip );						_menuRows[i] = null;					}										VectorUtil.removeAll( _menuRows );				}							/** addMenuRow			  *	---------------------------------------------------------------------------- */				public function addMenuRow( row:MessagesPanelContentRow ):void				{					//trace("addMenuRow\n");					row.contentClip.x = ROW_X;					row.contentClip.y = _menuRows.length == 0 ? 0 : (_menuRows[_menuRows.length-1].contentClip.y + _menuRows[_menuRows.length-1].contentClip.height);					//row.setId( _menuRows.length );					content_mc.addChild( row.contentClip );										//_menuIcons.push( {item:item, icon:icon} );					_menuRows.push( row );															row.addEventListener( "onRowDeleted", handleRowDeleted, false, 0, true);					//row.addEventListener( "onRowAccepted", handleRowAccepted, false, 0, true);										//row.addEventListener( MouseEvent.MOUSE_DOWN, handleRowClicked, false, 0, true );										toggleSlider();				}								public function removeMenuRow( row:MessagesPanelContentRow ):void				{					//row.removeEventListener( "onClick", handleRowClicked );					row.removeEventListener( "onRowDeleted", handleRowDeleted );					//row.removeEventListener( "onRowAccepted", handleRowAccepted );					content_mc.removeChild( row.contentClip );					for ( var i:uint=0; i<_menuRows.length; ++i )					{						if ( _menuRows[i] == row )						{							_menuRows.splice(i,1);							break;						}					}										update();//					_menuRows[ row.getId() ] = null;					//_menuRows.pop(row);				}								public function getRow( which:uint ):MessagesPanelContentRow				{					return _menuRows[which];				}								public function getNumRows():uint				{					return _menuRows.length;				}							/** reset			  *	---------------------------------------------------------------------------- */				public function reset():void				{					for( var i:uint=0; i<_menuRows.length; ++i )					{						_menuRows[i].removeEventListener( "onRowDeleted", handleRowDeleted );						content_mc.removeChild( _menuRows[i].contentClip );						//_menuRows[i].setActive(true);					}					VectorUtil.removeAll( _menuRows );									}							/**	update			  *	---------------------------------------------------------------------------- */				public function update():void				{					var newY:Number = 0;										for( var i:uint=0; i<_menuRows.length; ++i )					{						//_menuRows[i].contentClip.x = ROW_X;						//_menuRows[i].contentClip.y = ROW_HEIGHT * i;						_menuRows[i].updateHeight();												if( i == 0 )						{													}						else						{							//newY = int(newY + _menuRows[i-1].currentHeight);							TweenLite.to( _menuRows[i].contentClip, .25, {y:newY} );						}												newY = int(newY + _menuRows[i].currentHeight);					}				}							/** handleRowClicked			  *	---------------------------------------------------------------------------- */				protected function handleRowClicked( event:Event ):void				{					//trace("handleRowClicked()\n");										dispatchEvent( new CustomEvent("onRowClick", {row:event.currentTarget as MessagesPanelContentRow}) );				}								protected function handleRowDeleted( event:CustomEvent ):void				{					//trace("scroll handleRowDeleted");					var row:MessagesPanelContentRow = event.currentTarget as MessagesPanelContentRow;					removeMenuRow( row );				}				protected function handleRowAccepted( event:CustomEvent ):void				{					//trace("scroll handleRowAccepted");					var row:MessagesPanelContentRow = event.currentTarget as MessagesPanelContentRow;					removeMenuRow( row );				}		}			}