/**	VideoSelectorButtons  * ------------------------------------------------------------ */	package com.avatarlabs.video	{		import flash.display.MovieClip;		import flash.display.DisplayObject;		import flash.display.SimpleButton;		import flash.events.MouseEvent;		import flash.events.Event;				import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.userinterface.UIButton;						public class VideoSelectorButtons extends MovieClip		{			private var videoController:MovieClip;						private var _buttons:Array;			private var _enabled:Boolean;											/**	Constructor		 * ------------------------------------------------------------ */			public function VideoSelectorButtons()			{				_buttons = [];				_enabled = false;							}					/**	enable / disable		 * ------------------------------------------------------------ */		 	public function enable():void			{				ConsoleBroadcaster.broadcast("VideoSelectorButtons","enable()");								_enabled = true;								for(var i:uint = 0; i<_buttons.length; i++)				{					_buttons[i].enabled = true;					_buttons[i].alpha = 1;				}			}						public function disable():void			{				ConsoleBroadcaster.broadcast("VideoSelectorButtons","disable()");				_enabled = false;								for(var i:uint = 0; i<_buttons.length; i++)				{					_buttons[i].enabled = false;					_buttons[i].alpha = 0.5;				}			}					/**	setters / getters		 * ------------------------------------------------------------ */			public function set playerReference(pr:MovieClip)			{				ConsoleBroadcaster.broadcast("VideoSelectorButtons","playerReference(" + pr + ")");				videoController = pr;			}						public function get buttons():Array			{				return _buttons;			}						public function addButton(obj:DisplayObject):void			{				_buttons.push(obj);				addButtonListener(obj);			}								/**	init		 * ------------------------------------------------------------ */			public function init():void			{				ConsoleBroadcaster.broadcast("VideoSelectorButtons","init()");								if(!videoController)				{					throw new Error("Please set a player reference for the video buttons controller");				}				else				{					if(videoController.isPlaying) 					{						updateVisuals(new CustomEvent("onVideoPlay", {videoIndex:videoController.videoIndex, isMuted: videoController.videoMuted }) );					}					else					{						if(videoController.isPaused)							updateVisuals(new CustomEvent("onVideoPause", {videoIndex:videoController.videoIndex, isMuted: videoController.videoMuted }) );						else							disable();					}										addVideoControllerListeners();				}			}					/**	addButtonListeners		 * ------------------------------------------------------------ */			private function addButtonListener(obj:DisplayObject):void			{				if(obj is SimpleButton)				{					obj.addEventListener(MouseEvent.CLICK, handleOnClick);				}				else if(obj is UIButton)				{					obj.addEventListener("onClick", handleOnClick);				}			}					/**	addVideoControllerListeners		 * ------------------------------------------------------------ */			private function addVideoControllerListeners():void			{				ConsoleBroadcaster.broadcast("VideoSelectorButtons","addVideoControllerListeners()");								videoController.addEventListener("onVideoPlay", updateVisuals);				videoController.addEventListener("onVideoComplete", updateVisuals);				videoController.addEventListener("onVideoPause", updateVisuals);				videoController.addEventListener("onVideoReplay", updateVisuals);				videoController.addEventListener("onVideoStop", updateVisuals);			}					/**	handleOnClick		 * ------------------------------------------------------------ */			private function handleOnClick(event:Event):void			{								if(_enabled)				{										ConsoleBroadcaster.broadcast("VideoSelectorButtons","buttons are enabled");										for(var i:uint = 0; i<_buttons.length; i++)					{						if(_buttons[i] == event.target)						{							videoController.playVideo(i, false);							break;						}					}				}			}		/**	updateVisuals		 * ------------------------------------------------------------ */		 	private function updateVisuals(event:CustomEvent):void			{				ConsoleBroadcaster.broadcast("VideoSelectorButtons","updateVisuals(" + event.type + ")");												switch(event.type)				{					case "onVideoPlay":					case "onVideoReplay":					case "onVideoPause":						if(!_enabled) enable();						for( var i:int=0; i<_buttons.length; i++ )						{							if ( event.customParameters.videoIndex == i )								_buttons[i].setDeactive(true);							else								_buttons[i].setActive(true);						}						break;					case "onVideoComplete":					case "onVideoStop":						//disable();						break;				}			}		}	}