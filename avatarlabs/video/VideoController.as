/**VideoController  * ------------------------------------------------------------ */	package com.avatarlabs.video	{		import flash.display.MovieClip;		import flash.events.Event;		import flash.events.AsyncErrorEvent;		import flash.events.IOErrorEvent;		import flash.events.NetStatusEvent;		import flash.events.SecurityErrorEvent;		import flash.media.Video;		import flash.media.SoundTransform;		import flash.net.NetConnection;		import flash.net.NetStream;			import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;			public class VideoController extends MovieClip		{			private var nc:NetConnection;			private var ns:NetStream;				private var videoDisplay:Video;			private var metaObject:Object;			private var sndTransform:SoundTransform;				private var _buffer:Number;			private var _duration:Number;			private var _percentage:Number;				private var _videoIndex:int;			private var _videos:Array;				private var _metaInit:Boolean;				private var _isPlaying:Boolean;			private var _isMuted:Boolean;			private var _isPaused:Boolean;			private var _isComplete:Boolean;			/** VideoController		  * ------------------------------------------------------------ */			public function VideoController()			{				_videoIndex=0;				_videos=[];					_buffer=0;				_duration=0;				_percentage=0;					_metaInit=false;				_isPlaying=false;				_isMuted=false;				_isPaused=false;				_isComplete=false;			}			/** public: init		  * ------------------------------------------------------------ */			public function init():void 			{				ConsoleBroadcaster.broadcast( "VideoController", "init()");					nc = new NetConnection();				nc.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);				nc.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);				nc.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);				nc.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);				nc.connect(null);					ns=new NetStream(nc);				ns.bufferTime=_buffer;					metaObject = new Object();				metaObject.onMetaData = onMetaData;				metaObject.onCuePoint = onCuePoint;				ns.client=metaObject;					_metaInit=false;			}			/** private: onMetaData		  * ------------------------------------------------------------ */			private function onMetaData(data:Object):void 			{				ConsoleBroadcaster.broadcast( "VideoController", "OnMetaData: _duration " + data.duration);					/*for(var i in data)				{				trace( i + ": " + data[i]);				}*/				_duration=data.duration;				_metaInit=true;			}					/** private: onCuePoint		  * ------------------------------------------------------------ */			private function onCuePoint( data:Object ):void			{ 				ConsoleBroadcaster.broadcast( "VideoController", "onCuePoint()");								ConsoleBroadcaster.broadcast( "VideoController", "cuepoint: time=" + data.time + " name=" + data.name + " type=" + data.type); 				dispatchEvent( new CustomEvent("onVideoCuePoint", {videoIndex:_videoIndex, time: data.time, name: data.name, type: data.type}) );			}			/** private: netStatusHandler		  * ------------------------------------------------------------ */			private function netStatusHandler(event:NetStatusEvent):void 			{				switch ( event.info.code ) 				{					case "NetConnection.Connect.Success" :						ConsoleBroadcaster.broadcast( "VideoController", "NetConnection.Connect.Success");						dispatchEvent( new CustomEvent("onVideoInit", {videoIndex:_videoIndex, text: "NetConnection.Connect.Success"}) );						break;					case "NetStream.Play.StreamNotFound" :						ConsoleBroadcaster.broadcast( "VideoController", "Stream not found");						dispatchEvent( new CustomEvent("onVideoError", {videoIndex:_videoIndex, text: "NetStream.Play.StreamNotFound"}) );						break;					case "NetStream.Play.Start" :						ConsoleBroadcaster.broadcast( "VideoController", "NetStream.Play.Start");						_isPlaying=true;						dispatchEvent( new CustomEvent("onVideoPlay", {videoIndex:_videoIndex, isMuted: _isMuted}) );						break;					case "NetStream.Play.Stop" :						ConsoleBroadcaster.broadcast( "VideoController", "NetStream.Play.Stop");						_isPlaying=false;						_isComplete=true;						dispatchEvent( new CustomEvent("onVideoComplete", {videoIndex:_videoIndex, isMuted: _isMuted, isComplete: _isComplete}) );						break;					case "NetStream.Buffer.Full":						ConsoleBroadcaster.broadcast( "VideoController", "NetStream.Buffer.Full");						dispatchEvent( new CustomEvent("onVideoBuffered", {videoIndex:_videoIndex, isMuted: _isMuted}) );						break;				}			}			/** private: errorHandler		  * ------------------------------------------------------------ */			private function errorHandler(event:IOErrorEvent):void			{				//nc.removeEventListener(IOErrorEvent.IO_ERROR, errorHandler);				ConsoleBroadcaster.broadcast( "VideoController", "Error: "+ event.text);			}			/** private: asyncErrorHandler		  * ------------------------------------------------------------ */			private function asyncErrorHandler(event:AsyncErrorEvent):void 			{				//nc.removeEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);				ConsoleBroadcaster.broadcast( "VideoController", "Error: "+ event.text);			}			/** private: securityErrorHandler		  * ------------------------------------------------------------ */			private function securityErrorHandler(event:SecurityErrorEvent):void			{				//nc.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);				ConsoleBroadcaster.broadcast( "VideoController", "Error: "+ event.text);			}			/** public: setBuffer		  * ------------------------------------------------------------ */			public function setBuffer(b:Number):void			{				ConsoleBroadcaster.broadcast( "VideoController", "setBuffer(" + b + ")");				_buffer=b;			}			/** public: setDisplay		  * ------------------------------------------------------------ */			public function setVideo(_video:Video):void 			{				videoDisplay=_video;			}			/** get videoIndex		  * ------------------------------------------------------------ */			public function get videoIndex():int			{				return _videoIndex;			}			/** get hasNext		  * ------------------------------------------------------------ */			public function get hasNext():Boolean 			{				var _hasNext:Boolean;								ConsoleBroadcaster.broadcast( "VideoController", "videoIndex: " + _videoIndex)				ConsoleBroadcaster.broadcast( "VideoController", "length: " + _videos.length)					if (_videoIndex>=_videos.length-1) 				{					_hasNext=false;				} else 				{					_hasNext=true;				}					return _hasNext;			}			/** get videoMuted		  * ------------------------------------------------------------*/			public function get videoMuted():Boolean 			{				return _isMuted;			}			/** get isPlaying		  * ------------------------------------------------------------*/			public function get isPlaying():Boolean			{				return _isPlaying;			}			/** get isPaused		  * ------------------------------------------------------------*/			public function get isPaused():Boolean 			{				return _isPaused;			}			/** get isComplete		  * ------------------------------------------------------------*/			public function get isComplete():Boolean 			{				return _isComplete;			}			/** get loaded		  * ------------------------------------------------------------*/			public function get loaded():Number 			{				return ns.bytesLoaded/ns.bytesTotal;			}			/** get progress		  * ------------------------------------------------------------*/			public function get progress():Number			{				if (_metaInit) 				{					_percentage = Math.round((ns.time/_duration)*100)/100;				}					return _percentage;			}			/** get duration		  * ------------------------------------------------------------*/			public function get duration():Number 			{				return _duration;			}			/** public: addVideo		  * ------------------------------------------------------------ */			public function addVideo( videoURL:String, reportIdentifier:String ):void			{				if (videoURL==null) 				{					throw new Error("Video URL needs to be defined!!");					return;				}					if (reportIdentifier==null) 				{					throw new Error("Video reportIdentifier needs to be defined!!");					return;				}					_videos.push( {videoURL:videoURL,  reportIdentifier:reportIdentifier} );			}			/** public: playVideo		  * ------------------------------------------------------------ */			public function playVideo( index:int, automute:Boolean=true ):void			{				ConsoleBroadcaster.broadcast( "VideoController",  "playVideo(index: " + index + ", muted: " + automute +  ")" );					if (_isPlaying) stopVideo();								_videoIndex = index;					videoDisplay.attachNetStream(ns);				ns.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);				ConsoleBroadcaster.broadcast( "VideoController", "playing video: " + _videos[index].videoURL);				ns.play( _videos[index].videoURL );					if (automute) muteVideo();			}					/** public: playVideoByURL		  * ------------------------------------------------------------ */			public function playVideoByURL( url:String, automute:Boolean=true ):void			{				ConsoleBroadcaster.broadcast( "VideoController",  "playVideoByURL(url: "+url+", automute: "+automute+");" );								if ( _isPlaying ) stopVideo();								videoDisplay.attachNetStream(ns);				ns.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);				ns.play( url );								if (automute) muteVideo();			}					/** public: pauseVideo		  * ------------------------------------------------------------ */			public function pauseVideo():void			{				ConsoleBroadcaster.broadcast( "VideoController", "pauseVideo()");					if (_isPlaying)				{					ns.pause();					_isPlaying=false;				}					_isPaused=true;					dispatchEvent( new CustomEvent("onVideoPause",  {videoIndex:_videoIndex, isMuted: _isMuted}) );			}			/** public: unpauseVideo		  * ------------------------------------------------------------ */			public function unpauseVideo():void			{				ConsoleBroadcaster.broadcast( "VideoController", "unpauseVideo()");					if (! _isPlaying) 				{					if (_isPaused) 					{						dispatchEvent( new CustomEvent("onVideoUnpause", {videoIndex:_videoIndex, isMuted: _isMuted}) );						_isPaused=false;					}						ns.resume();					_isPlaying=true;					_isPaused=false;				}			}			/** public: muteVideo		  * ------------------------------------------------------------ */			public function muteVideo():void 			{				ConsoleBroadcaster.broadcast( "VideoController", "muteVideo()");					ns.soundTransform=new SoundTransform(0);					_isMuted=true;					dispatchEvent( new CustomEvent("onVideoMute", {videoIndex:_videoIndex, isMuted: _isMuted}) );			}			/** public: unmuteVideo		  * ------------------------------------------------------------ */			public function unmuteVideo():void 			{				ConsoleBroadcaster.broadcast( "VideoController", "unmuteVideo()");					ns.soundTransform=new SoundTransform(1);					_isMuted=false;					dispatchEvent( new CustomEvent("onVideoUnmute", {videoIndex:_videoIndex, isMuted: _isMuted}) );			}			/** public: stopVideo		  * ------------------------------------------------------------ */			public function stopVideo():void			{				if (_isPlaying)				{					ns.seek(0);					ns.pause();					_isPlaying=false;					_isPaused=false;				}					dispatchEvent( new CustomEvent("onVideoStop", {videoIndex:_videoIndex, isMuted: _isMuted, isComplete: _isComplete}) );			}			/** public: restartVideo		  * ------------------------------------------------------------ */			public function restartVideo():void 			{				ConsoleBroadcaster.broadcast( "VideoController", "restartVideo()");					ns.seek(0);				ns.resume();					if (_isComplete) 				{					dispatchEvent( new CustomEvent("onVideoReplay", {videoIndex:_videoIndex, isMuted: _isMuted}) );					_isComplete=false;				}				else				{					dispatchEvent( new CustomEvent("onVideoPlay", {videoIndex:_videoIndex, isMuted: _isMuted}) );				}					_isPlaying=true;				_isPaused=false;			}			/** public: videoSeek		  * ------------------------------------------------------------ */			public function videoSeek(per:Number):void 			{				ConsoleBroadcaster.broadcast( "VideoController", "videoSeek(" + per + ")");								var target:Number = per * _duration;								ns.seek(target);			}		}	}