/**	VideoControllerButtons  * ------------------------------------------------------------ */	package com.avatarlabs.video	{		import flash.display.MovieClip;		import flash.display.DisplayObject;		import flash.display.StageDisplayState;		import flash.display.SimpleButton;		import flash.events.MouseEvent;		import flash.events.Event;				import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.events.EventNotificationCenter;		import com.avatarlabs.utils.userinterface.UIButton;						public class VideoControllerButtons extends MovieClip		{			private var videoController:MovieClip;						private var _playButton:DisplayObject;			private var _pauseButton:DisplayObject;			private var _muteButton:DisplayObject;			private var _unmuteButton:DisplayObject;			private var _stopButton:DisplayObject;			private var _restartButton:DisplayObject;			private var _audioButton:DisplayObject;			private var _fullscreenButton:DisplayObject;						private var _buttons:Array;			private var _enabled:Boolean;											/**	Constructor		 * ------------------------------------------------------------ */			public function VideoControllerButtons()			{				_buttons = [];				_enabled = false;								addEventListener(Event.REMOVED_FROM_STAGE, removeAllListeners);							}					/**	enable / disable		 * ------------------------------------------------------------ */		 	public function enable():void			{				ConsoleBroadcaster.broadcast( "VideoControllerButtons", "enable()");								_enabled = true;								for(var i:uint = 0; i<_buttons.length; i++)				{					_buttons[i].enabled = true;					_buttons[i].alpha = 1;				}			}						public function disable():void			{				ConsoleBroadcaster.broadcast( "VideoControllerButtons", "disable()");				_enabled = false;								for(var i:uint = 0; i<_buttons.length; i++)				{					_buttons[i].enabled = false;					_buttons[i].alpha = 1;				}								//default disabled view;				_pauseButton.visible = false;				_muteButton.visible = false;				_playButton.visible = true;				_unmuteButton.visible = true;			}					/**	setters / getters		 * ------------------------------------------------------------ */			public function set playerReference(pr:MovieClip)			{				ConsoleBroadcaster.broadcast( "VideoControllerButtons", "playerReference(" + pr + ")");				videoController = pr;			}						public function set playButton(obj:DisplayObject):void			{				_playButton = obj;				_buttons.push(_playButton);				addButtonListener(obj);			}						public function set pauseButton(obj:DisplayObject):void			{				_pauseButton = obj;				_buttons.push(_pauseButton);				addButtonListener(obj);			}						public function set muteButton(obj:DisplayObject):void			{				_muteButton = obj;				_buttons.push(_muteButton);				addButtonListener(obj);			}						public function set unmuteButton(obj:DisplayObject):void			{				_unmuteButton = obj;				_buttons.push(_unmuteButton);				addButtonListener(obj);			}						public function set stopButton(obj:DisplayObject):void			{				_stopButton = obj;				_buttons.push(_stopButton);				addButtonListener(obj);			}						public function set restartButton(obj:DisplayObject):void			{				_restartButton = obj;				_buttons.push(_restartButton);				addButtonListener(obj);			}						public function set audioButton(obj:DisplayObject):void			{				_audioButton = obj;				_buttons.push(_audioButton);				addButtonListener(obj);			}						public function set fullscreenButton(obj:DisplayObject):void			{				_fullscreenButton = obj;				_buttons.push(_fullscreenButton);				addButtonListener(obj);			}					/**	init		 * ------------------------------------------------------------ */			public function init():void			{				ConsoleBroadcaster.broadcast( "VideoControllerButtons", "init()");								if(!videoController)				{					throw new Error("Please set a player reference for the video buttons controller");				}				else				{					if(videoController.isPlaying) 					{						updateVisuals(new CustomEvent("onVideoPlay", {videoIndex:videoController.videoIndex, isMuted: videoController.videoMuted }) );					}					else					{						if(videoController.isPaused)							updateVisuals(new CustomEvent("onVideoPause", {videoIndex:videoController.videoIndex, isMuted: videoController.videoMuted }) );						else							disable();					}										addVideoControllerListeners();				}			}					/**	addButtonListeners		 * ------------------------------------------------------------ */			private function addButtonListener(obj:DisplayObject):void			{				if(obj is SimpleButton)				{					obj.addEventListener(MouseEvent.CLICK, handleOnClick);				}				else if(obj is UIButton)				{					obj.addEventListener("onClick", handleOnClick);				}			}					/**	addVideoControllerListeners		 * ------------------------------------------------------------ */			private function addVideoControllerListeners():void			{				ConsoleBroadcaster.broadcast( "VideoControllerButtons", "addVideoControllerListeners()");								videoController.addEventListener("onVideoPlay", updateVisuals);				videoController.addEventListener("onVideoPause", updateVisuals);				videoController.addEventListener("onVideoUnpause", updateVisuals);				videoController.addEventListener("onVideoMute", updateVisuals);				videoController.addEventListener("onVideoUnmute", updateVisuals);				videoController.addEventListener("onVideoComplete", updateVisuals);				videoController.addEventListener("onVideoReplay", updateVisuals);				videoController.addEventListener("onVideoStop", updateVisuals);							}					/** removeAllListeners		  * ----------------------------------------------------------- */		  	private function removeAllListeners(event:Event = null):void			{				ConsoleBroadcaster.broadcast( "VideoControllerButtons", "removeAllListeners()");								videoController.removeEventListener("onVideoPlay", updateVisuals);				videoController.removeEventListener("onVideoPause", updateVisuals);				videoController.removeEventListener("onVideoUnpause", updateVisuals);				videoController.removeEventListener("onVideoMute", updateVisuals);				videoController.removeEventListener("onVideoUnmute", updateVisuals);				videoController.removeEventListener("onVideoComplete", updateVisuals);				videoController.removeEventListener("onVideoReplay", updateVisuals);				videoController.removeEventListener("onVideoStop", updateVisuals);												for(var i:uint = 0; i<_buttons.length; i++)				{					if(_buttons[i] is SimpleButton)					{						_buttons[i].removeEventListener(MouseEvent.CLICK, handleOnClick);					}					else if(_buttons[i] is UIButton)					{						_buttons[i].removeEventListener("onClick", handleOnClick);					}				}								_buttons = [];			}					/**	handleOnClick		 * ------------------------------------------------------------ */			private function handleOnClick(event:Event):void			{				ConsoleBroadcaster.broadcast( "VideoControllerButtons", "handleOnClick(" + event.target.name + ")");								if(_enabled)				{					switch(event.target)					{						case _playButton:							videoController.unpauseVideo();							videoController.videoMuted ? videoController.unmuteVideo() : null;							break;						case _pauseButton:							videoController.pauseVideo();							break;						case _muteButton:							videoController.muteVideo();							break;						case _unmuteButton:						case _audioButton:							videoController.unmuteVideo();							break;						case _stopButton:							videoController.stopVideo();							break;						case _restartButton:							videoController.restartVideo();							videoController.videoMuted ? videoController.unmuteVideo() : null;							break;						case _fullscreenButton:							if ( stage.displayState == StageDisplayState.NORMAL )								stage.displayState = StageDisplayState.FULL_SCREEN;							else								stage.displayState = StageDisplayState.NORMAL;							break;					}				}			}		/**	updateVisuals		 * ------------------------------------------------------------ */		 	private function updateVisuals(event:CustomEvent):void			{				ConsoleBroadcaster.broadcast( "VideoControllerButtons", "updateVisuals(" + event.type + ")");								if(!_enabled) enable();									//ConsoleBroadcaster.broadcast( "VideoControllerButtons", "isMuted: " + event.customParameters.isMuted  + ", isComplete: " + event.customParameters.isComplete);								switch(event.type)				{					case "onVideoPlay":					case "onVideoUnpause":					case "onVideoReplay":						_playButton.visible = false;						_pauseButton.visible = true;						break;					case "onVideoPause":						_playButton.visible = true;						_pauseButton.visible = false;						break;					case "onVideoMute":						break;					case "onVideoUnmute":						break;					case "onVideoComplete":					case "onVideoStop":						disable();						break;				}								if(event.customParameters.isMuted)				{					_muteButton.visible = false;					_unmuteButton.visible = true;										if ( _audioButton )						_audioButton.visible = true;				}				else 				{					_muteButton.visible = true;					_unmuteButton.visible = false;										if ( _audioButton )						_audioButton.visible = false;				}			}		}	}