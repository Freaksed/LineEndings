package com.avatarlabs.video{	import flash.display.DisplayObject;		import flash.geom.Rectangle;	import flash.events.Event;	import flash.events.EventDispatcher;			import com.avatarlabs.utils.console.ConsoleBroadcaster;	import com.avatarlabs.utils.events.CustomEvent;		public class VisualVideoController extends EventDispatcher	{		private var objects:Array;		private var playerReference:DisplayObject;		private var stageReference:DisplayObject;		private var boundsReference:DisplayObject;		private var bounds:Rectangle;		private var timerInterval:Number;		private var enabled:Boolean;		private var userInteraction:Boolean;		private var userInteractionTime:Number;		private var initialPlay:Boolean;				public function VisualVideoController()		{			objects = [];			timerInterval = 5000;			initialPlay = true;			userInteraction = true;			userInteractionTime = 0;			bounds = new Rectangle();		}				public function addDisplayObject(obj:DisplayObject):void		{			ConsoleBroadcaster.broadcast("VisualVideoController","addDisplayObject(" + obj + ")");						objects.push(obj);		}				public function addPLayerReference(vo:DisplayObject):void		{			playerReference = vo;		}				public function addStageReference(so:DisplayObject):void		{			stageReference = so;		}				public function addBoundsReference(bo:DisplayObject):void		{			ConsoleBroadcaster.broadcast("VisualVideoController","addBoundsReference(" + bo + ")");			boundsReference = bo;		}				public function init():void		{			ConsoleBroadcaster.broadcast("VisualVideoController","init()");					bounds = boundsReference.getBounds(playerReference);						addListeners();		}				private function addListeners():void		{			ConsoleBroadcaster.broadcast("VisualVideoController","addListeners()");									playerReference.addEventListener("onVideoPlay", handleVideoEvent);			playerReference.addEventListener("onVideoReplay", handleVideoEvent);			playerReference.addEventListener("onVideoComplete", handleVideoEvent);			playerReference.addEventListener("onVideoStop", handleVideoEvent);			boundsReference.addEventListener(Event.ENTER_FRAME, updateVisuals);		}				private function removeListeners():void		{			ConsoleBroadcaster.broadcast("VisualVideoController","remvoeListeners()");									playerReference.removeEventListener("onVideoPlay", handleVideoEvent);			playerReference.removeEventListener("onVideoReplay", handleVideoEvent);			playerReference.removeEventListener("onVideoComplete", handleVideoEvent);			playerReference.removeEventListener("onVideoStop", handleVideoEvent);			boundsReference.removeEventListener(Event.ENTER_FRAME, updateVisuals);		}				private function handleVideoEvent(event:CustomEvent):void		{			ConsoleBroadcaster.broadcast("VisualVideoController","handleVideoEvent(" + event.type + ")");			switch(event.type)			{				case "onVideoPlay":				case "onVideoReplay":					enabled = true;					break;				case "onVideoComplete":				case "onVideoStop":					enabled = false;					hideObjects();					break;			}		}				public function reset():void		{			ConsoleBroadcaster.broadcast("VisualVideoController","reset()");						objects = [];						removeListeners();		}						private function showObjects():void		{			//ConsoleBroadcaster.broadcast("VisualVideoController","showObjects()");						for(var i:uint = 0; i<objects.length; i++)			{				if(objects[i].visible == false)					objects[i].visible = true;					objects[i].alpha = 1;			}		}				private function hideObjects():void		{			//ConsoleBroadcaster.broadcast("VisualVideoController","hideObjects()");						for(var i:uint = 0; i<objects.length; i++)			{				if(objects[i].visible == true)				objects[i].visible = false;				objects[i].alpha = 0;			}		}				private function updateVisuals(event:Event):void		{													//ConsoleBroadcaster.broadcast("VisualVideoController","updateVisuals()");			if(enabled)			{				if(stageReference.mouseX > bounds.left && stageReference.mouseX < bounds.right && stageReference.mouseY > bounds.top && stageReference.mouseY < bounds.bottom)				{					initialPlay = false;					userInteraction = true;					userInteractionTime = 0;				}				else				{					userInteractionTime++;				}								if ( userInteractionTime >= 30 )					userInteraction = false;									if ( userInteraction )				{					showObjects();				}				else if(!userInteraction && !initialPlay)				{					hideObjects();				}			}		}	}}