/** FPS  *	---------------------------------------------------------------------------- *  *	@desc:  *		This class displays the current FPS (roughly).  *	---------------------------------------------------------------------------- */	package com.avatarlabs.utils.fps	{		import flash.display.Stage;		import flash.events.Event;		import flash.text.TextField;		import flash.utils.getTimer;		//import com.avatarlabs.utils.events.CustomEvent;		import org.osflash.signals.Signal;				public class FPS extends Object		{			private var _startTime:Number;			private var _framesNumber:Number;			private var _currentFPS:Number;			private var _running:Boolean;						private var _thresholdTime:int;			private var _thresholds:Vector.<int>;			private var _thresholdsLength:int;			private var _currentThresholdIndex:int;			private var _currentThresholdTime:int;						public var onFPSUpdated:Signal;			public var onFPSThresholdPassed:Signal;						public var stage:Stage;						//public var fps_txt:TextField;						/**	Constructor			  *	---------------------------------------------------------------------- */			  	public function FPS()				{					//startFPSCounter();					_framesNumber = 0;					_thresholds = new Vector.<int>;					_thresholdsLength = 0;										_currentThresholdIndex = 0;					_currentThresholdTime = 0;					_thresholdTime = 3;										onFPSUpdated = new Signal( Number );					onFPSThresholdPassed = new Signal( Number );										_running = false;				}								//we can set the time in seconds				public function set thresholdTime( i:int ):void { _thresholdTime = i; }								public function kill():void				{					onFPSUpdated = null;					onFPSThresholdPassed = null;					_thresholds = null;					stage = null;					_running = false;				}							/**	startFPSCounter			  *	---------------------------------------------------------------------- */			  	public function startFPSCounter():void				{					if( !_running )					{						_running = true;						_startTime = getTimer();						stage.addEventListener(Event.ENTER_FRAME, checkFPS);					}				}								public function stopFPSCounter():void				{					if( _running )					{						_running = false;						stage.removeEventListener( Event.ENTER_FRAME, checkFPS );					}				}							/**	checkFPS			  *	---------------------------------------------------------------------- *			  *	Checks if current fps is lower than current threshold setting.			  *	If it is, make sure to update the threshold time, and when the threshold			  *		time			  *	If at any point, the fps goes higher than the current fps threshold,			  *		we will reset the threshold time.			  *	---------------------------------------------------------------------- */			  	private function checkFPS(e:Event):void				{					//trace( "checkFPS();" );										var currentTime:Number = (getTimer() - _startTime) / 1000;										_framesNumber++;										if (currentTime > 1)					{						//fps_txt.text = "FPS: " + (Math.floor((_framesNumber/currentTime)*10.0)/10.0);						//dispatchEvent( new CustomEvent("onFPSUpdate", {fps:(Math.floor((_framesNumber/currentTime)*10.0)/10.0)}) );												_currentFPS = int((_framesNumber/currentTime)*10.0)*0.1;						_currentFPS = int( _currentFPS );												//trace( "_currentFPS: "+_currentFPS );						//trace( "_currentThresholdIndex: "+_currentThresholdIndex );												if( _currentThresholdIndex < _thresholdsLength )						{							if( _currentFPS < _thresholds[_currentThresholdIndex] )							{								++_currentThresholdTime;								if( _currentThresholdTime > _thresholdTime )								{									++_currentThresholdIndex;									_currentThresholdTime = 0;									onFPSThresholdPassed.dispatch( _currentFPS );								}																//trace( "_currentThresholdTime: "+_currentThresholdTime );							}							else							{								_currentThresholdTime = 0;							}						}												onFPSUpdated.dispatch( _currentFPS );												_startTime = getTimer();						_framesNumber = 0;					}				}							/**	addThreshold			  *	---------------------------------------------------------------------- */			  	public function addThreshold( n:Number ):void				{					_thresholds.push( n );					_thresholdsLength = _thresholds.length;				}					}	}