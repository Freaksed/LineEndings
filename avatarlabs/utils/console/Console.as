/*	Console *	------------------------------------------------------------------------------------------------------------------------ * *	@desc: debuging tool, catches broadcasts via LocalConnection at runtime; *	@developer: Aaron Buchanan, [aaron@avatarlabs.com] *	------------------------------------------------------------------------------------------------------------------------ */ 	package src.com.avatarlabs.utils.console	{			import flash.net.LocalConnection;		import flash.events.StatusEvent;		import src.com.avatarlabs.utils.console.*;				public class Console		{			private static var instance:Console;			private static var lc:LocalConnection;			private static var subscribers:Array;			private static var consoleChannels:ConsoleChannelManager;			private static var consoleDomain:String = "_com.lab-media.FlashConsole"			private static var defaultChannel:String = "All"						/*	constructor			 *	-------------------------------------------------------------------------------------------------------------------- */				private function Console ( obj:Object )				{					subscribers = new Array();					subscribe(obj);										consoleChannels = new ConsoleChannelManager(defaultChannel);					consoleChannels.openChannel(defaultChannel);					consoleChannels.setDefaultChannel(defaultChannel);										lc = new LocalConnection();					lc.allowDomain = function( cd:String		 ){ return true; };					lc.onBroadcast = function( cm:ConsoleMessage ){ instance.onChannelBroadcast( cm ); }					lc.connect(consoleDomain);					updateSubscribers();				}						/*	singleton - constructor			 *	-------------------------------------------------------------------------------------------------------------------- */				public static function getInstance ( obj:Object ):Console				{					if( instance != undefined )						{  return instance; }						else { instance = new Console( obj ); return instance; }				}							/*	private			 *	-------------------------------------------------------------------------------------------------------------------- */				private function updateSubscribers ():void				{					for (var i in subscribers){						subscribers[i].onBroadcast();					}				}				private function onChannelBroadcast ( cm:ConsoleMessage ):void				{					consoleChannels.onChannelBroadcast( cm );					updateSubscribers();				}							/*	public			 *	-------------------------------------------------------------------------------------------------------------------- */				public function getChannels ():Array				{					return consoleChannels.getChannels();				}				public function getChannelLog (channel:String):Array				{					var cL:Array = consoleChannels.getChannelLog(channel);					return cL;				}				public function clearChannelLog ( channel:String ):void				{					consoleChannels.clearChannelLog( channel );					updateSubscribers();				}				public function subscribe ( obj:Object ):void				{					subscribers.push(obj);				}				public function getDefautChannel ():String				{					return defaultChannel;				}		}	}