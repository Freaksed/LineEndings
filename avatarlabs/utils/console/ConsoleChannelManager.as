/*	ConsoleChannelManager *	------------------------------------------------------------------------------------------------------------------------ * *	@desc:  *	@developer: Aaron Buchanan, [aaron@avatarlabs.com] *	------------------------------------------------------------------------------------------------------------------------ */ 	package com.avatarlabs.utils.console	{			import src.com.avatarlabs.utils.console.*;				public class ConsoleChannelManager		{			private var consoleChannels:Array;			private static var defaultChannel:String;						/*	constructor			 *	-------------------------------------------------------------------------------------------------------------------- */				public function ConsoleChannelManager ( dC:String )				{					consoleChannels = new Array();					defaultChannel = dC;				}							/*	public			 *	-------------------------------------------------------------------------------------------------------------------- */				public function onChannelBroadcast( cm:ConsoleMessage ):void				{					if( consoleChannels[cm.channel] != undefined ){						var channel:ConsoleChannel = consoleChannels[cm.channel];							channel.onChannelBroadcast(cm);					} else {						openChannel(cm.channel);												var channel:ConsoleChannel = consoleChannels[cm.channel];							channel.onChannelBroadcast(cm);					}										var master:ConsoleChannel = consoleChannels[defaultChannel];						master.onChannelBroadcast(cm);				}				public function openChannel(channel:String):Array				{					consoleChannels[channel] = new ConsoleChannel(channel);					return consoleChannels[channel];				}				public function getChannels (channel:ConsoleChannel):Array				{					var consoleList = new Array();					for(var i in consoleChannels){						consoleList.push({ label:i, data:null });					}					return consoleList				}				public function clearChannelLog (channel:String):void				{					consoleChannels[channel].clearChannelLog();				}				public function getChannelLog ( channel:String ):Array				{					if( channel != undefined ){						if( consoleChannels[channel] != undefined ){							return consoleChannels[channel].getChannelLog();						} else {							for(var i in consoleChannels){ trace(i) };							return [{ label:"Error: no open [ "+channel+" ] channel found.", data:null }];						}					} else {						return consoleChannels[defaultChannel].getChannelLog();					}				}				public function setDefaultChannel (c:String):void				{					var channel:ConsoleChannel = consoleChannels[c];						channel.setDefault(true);				}		}	}