/**	ConsoleBroadcaster  *	------------------------------------------------------------ *  *	@desc:   *		debuging tool, broadcasts over LocalConnection  *	@author:  *		Christian Widodo [christian@avatarlabs.com]  *	@updates:  *		2.0	- This new version will use the singleton class to broadcast the messages to the tool.  *		This will hopefully save some memory and processing since it's only using one LocalConnection  *		instead of each class creating its own LocalConnection.  *		ConsoleBroadcaster is also connected to com.avatarlabs.utils.DebuggerUtil class.  *		Usage:  *			ConsoleBroadcaster.enabled = true;  *			ConsoleBroadcaster.broadcast( "ChannelName", "message" );  *	------------------------------------------------------------ */ 	package com.avatarlabs.utils.console	{		import flash.events.AsyncErrorEvent;		import flash.events.EventDispatcher;		import flash.events.SecurityErrorEvent;		import flash.events.StatusEvent;		import flash.net.LocalConnection;				import com.avatarlabs.utils.DebuggerUtil;		import com.avatarlabs.utils.console.*;				public class ConsoleBroadcaster extends EventDispatcher		{			protected static var _instance:ConsoleBroadcaster;						//protected var _channel:String;			protected var _lc:LocalConnection;			protected var _traceOutput:Boolean;			protected var _consoleDomain:String = "_com.apps.avatarlabs.FlashConsole";			protected var _enabled:Boolean;			protected var _useSingleton:Boolean = false;						public static const version:String = "2.0";						/** Constructor			  *	---------------------------------------------------------------------------- */			 	public function ConsoleBroadcaster(c:String="", t:Boolean=false)				{					_traceOutput = true;					_useSingleton = false;					_enabled = false;				}							/** static setters/getters			  *	---------------------------------------------------------------------------- */			 	public static function get initialized():Boolean { return (_instance != null); }				public static function set traceOutput( b:Boolean ):void { init(); _instance.traceOutput = b; }				public static function set enabled( b:Boolean ):void { init(); _instance.enabled = b; }				public static function get enabled():Boolean { init(); return _instance.enabled; }							/** static init			  *	---------------------------------------------------------------------------- */			 	protected static function init():void				{					if( _instance == null )					{						_instance = new ConsoleBroadcaster();						_instance.init();						_instance._useSingleton = true;												trace( "Initializing ConsoleBroadcaster "+version );					}				}							/** static broadcast			  *	---------------------------------------------------------------------------- */			 	public static function broadcast( channel:String="Default", msg:String="---------------------" ):void				{					init();					_instance.broadcast( channel, msg );				}							/** set/get			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */			 	public function set traceOutput( b:Boolean ):void { _traceOutput = b; }				public function set enabled( b:Boolean ):void				{					trace( "ConsoleBroadcaster enabled ? "+b );										_lc.send( _consoleDomain, "onBroadcast", new ConsoleMessage("ConsoleBroadcaster", ( b ? " is enabled" : " is disabled" ), {date:new Date().toString()}) );										_enabled = b;				}				public function get enabled():Boolean { return _enabled; }							/** init			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */			 	public function init():void				{					if( _lc == null )					{						_lc = new LocalConnection();						_lc.addEventListener( StatusEvent.STATUS, handleStatus, false, 0, true );						_lc.addEventListener( AsyncErrorEvent.ASYNC_ERROR, handleAsyncError, false, 0, true );						_lc.addEventListener( SecurityErrorEvent.SECURITY_ERROR, handleSecurityError, false, 0, true );						_traceOutput = true;					}				}							/** broadcast			  *	---------------------------------------------------------------------------- *			  *	---------------------------------------------------------------------------- */			 	public function broadcast( channel:String="Default", msg:String="---------------------" ):void				{					//trace( "_traceOutput: "+_traceOutput );										if( !_useSingleton ) { trace( "***** !!! This class has changed, use ConsoleBroadcaster.broadcast() instead of creating a new ConsoleBroadcaster instance! *****" ); }										if( !_enabled ) return;										if( _traceOutput )					{						trace( channel+": "+msg );					}										_lc.send( _consoleDomain, "onBroadcast", new ConsoleMessage(channel, msg, {date:new Date().toString()}) );				}								protected function handleStatus( event:StatusEvent ):void				{					//trace( event.level );				}								protected function handleAsyncError( event:AsyncErrorEvent ):void				{									}								protected function handleSecurityError( event:SecurityError ):void				{									}						}	}