/**	UINavigationButton *	------------------------------------------------------------------------------------ * *	Updates: 080820-James Safechuck: added functions releaseListeners/init *	------------------------------------------------------------------------------------ *	 *	------------------------------------------------------------------------------------ */	package com.avatarlabs.utils.navigation	{		import flash.events.*;		import flash.display.MovieClip;		import com.avatarlabs.utils.console.*;		import com.avatarlabs.utils.userinterface.PlayToRewindTo;				public class UINavigationButton extends MovieClip		{			protected var _dynamicClip:MovieClip;						protected var _id:*;			protected var _active:Boolean;						protected var _ptrt:PlayToRewindTo;						/**	Constructor			  *	------------------------------------------------------------ */								public function UINavigationButton()				{					//addEventListener( Event.REMOVED_FROM_STAGE, releaseListeners );					//addEventListener( Event.ADDED_TO_STAGE, init );										init();				}							/**	init			  *	------------------------------------------------------------ */				public function init( event:Event=null ):void				{					_dynamicClip = this;					_dynamicClip.gotoAndStop(1);										//trace("UINavigationButton: init");					_dynamicClip.gotoAndStop(1);										_dynamicClip.buttonMode = true;					//_dynamicClip.mouseEnabled = false;					_dynamicClip.tabEnabled = false;										_ptrt = new PlayToRewindTo( _dynamicClip );										_dynamicClip.addEventListener( MouseEvent.CLICK, handleClick, false, 0, true );					_dynamicClip.addEventListener( MouseEvent.ROLL_OVER, focus, false, 0, true );					_dynamicClip.addEventListener( MouseEvent.ROLL_OUT, blur, false, 0, true );				}							/**	setActive			  *	------------------------------------------------------------ */				public function setActive( a:Boolean )				{					//ConsoleBroadcaster.broadcast( "UINavigationButton","setActive( "+a+" )");										_active = a;										dispatchEvent( new Event("onSetActive") );				}							/**	activate			  *	------------------------------------------------------------ */				public function activate()				{					ConsoleBroadcaster.broadcast( "UINavigationButton","activate()");										setActive( true );					_dynamicClip.removeEventListener( MouseEvent.CLICK, handleClick );					_dynamicClip.removeEventListener( MouseEvent.ROLL_OVER, focus );					_dynamicClip.removeEventListener( MouseEvent.ROLL_OUT, blur );										//_dynamicClip.useHandCursor = false;					_dynamicClip.buttonMode = false;										updateStatus();				}								public function deactivate()				{					ConsoleBroadcaster.broadcast( "UINavigationButton","deactivate()");										_dynamicClip.addEventListener( MouseEvent.CLICK, handleClick );					_dynamicClip.addEventListener( MouseEvent.ROLL_OVER, focus, false, 0, true );					_dynamicClip.addEventListener( MouseEvent.ROLL_OUT, blur, false, 0, true );					setActive( false );										//_dynamicClip.useHandCursor = true;					_dynamicClip.buttonMode = true;										updateStatus();				}							/**	setId/getId			  *	------------------------------------------------------------ */				public function setId( i:* )				{					//ConsoleBroadcaster.broadcast( "UINavigationButton","setId( "+i+" )");					_id = i;				}								public function getId():*				{					//ConsoleBroadcaster.broadcast( "UINavigationButton","getId()");					return _id;				}							/**	Event Handlers			  *	------------------------------------------------------------ */				public function handleClick( event:MouseEvent ):void				{					//ConsoleBroadcaster.broadcast( "UINavigationButton","handleClick()");					if( !_active )					{						dispatchEvent(new Event("onClick"));						dispatchEvent(new Event("onKillFocus"));					}				}								public function focus( event:MouseEvent ):void				{					//ConsoleBroadcaster.broadcast( "UINavigationButton", "focus();" );										//_ptrt.playTo( 0, function(){ trace("-------playTo Callback"); });										if( !_active )					{						_ptrt.playTo( 0 );						dispatchEvent(new Event("onSetFocus"));					}				}								public function blur( event:MouseEvent ):void				{					//ConsoleBroadcaster.broadcast( "UINavigationButton", "blur();" );										//!_active ? _ptrt.rewindTo( 0, function(){ trace("rewindTo callback"); }) : null;					if( !_active )					{						!_active ? _ptrt.rewindTo(0) : null;												dispatchEvent(new Event("onKillFocus"));					}				}								public function getActive():Boolean				{					return _active;				}							/**	releaseListeners			  *	------------------------------------------------------------ */				private function releaseListeners( event:Event ):void				{					//trace("UINavigationButton: releaseListeners()");										//_dynamicClip.removeEventListener( Event.ADDED_TO_STAGE, init );					//_dynamicClip.removeEventListener( Event.REMOVED_FROM_STAGE, releaseListeners );					_dynamicClip.hasEventListener( MouseEvent.ROLL_OVER ) ? _dynamicClip.removeEventListener( MouseEvent.ROLL_OVER, focus ) : null;					_dynamicClip.hasEventListener( MouseEvent.ROLL_OUT ) ? _dynamicClip.removeEventListener( MouseEvent.ROLL_OUT, blur ) : null;					_dynamicClip.hasEventListener( MouseEvent.CLICK ) ? _dynamicClip.removeEventListener( MouseEvent.CLICK, handleClick ) : null;				}							/**	check focus			  *	------------------------------------------------------------ */				protected function updateStatus():void				{					//ConsoleBroadcaster.broadcast( "UINavigationButton","updateStatus()");					!_active ? _ptrt.rewindTo(0) : _ptrt.playTo(0);									}		}			}