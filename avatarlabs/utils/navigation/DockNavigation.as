/** DockNavigation  *	---------------------------------------------------------------------------- *  *	@desc:  *		This is a dock navigation class.  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.avatarlabs.utils.navigation	{		import flash.display.DisplayObject;		import flash.display.DisplayObjectContainer;		import flash.display.MovieClip;				import com.avatarlabs.utils.VectorUtil;		import com.avatarlabs.utils.userinterface.DynamicUIButton;		import com.greensock.TweenLite;		import org.osflash.signals.Signal;		import flash.events.Event;		import flash.geom.Rectangle;				public class DockNavigation extends Object		{			private var _contentClip:MovieClip;			private var _dockNavigationItems:Vector.<DockNavigationItem>;			private var _currentDockNavigationItemIndex:int;			private var _spacing:Number;						private var _nextClip:DynamicUIButton;			private var _prevClip:DynamicUIButton;						/**	Stage Instances **/			public var container_mc:MovieClip;			public var mask_mc:MovieClip;			public var next_mc:MovieClip;			public var prev_mc:MovieClip;			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function DockNavigation()				{									}							/** set/get contentClip			  *	---------------------------------------------------------------------------- */				public function set contentClip( m:MovieClip ):void				{					_contentClip = m;					container_mc = _contentClip.container_mc;					mask_mc = _contentClip.mask_mc;										next_mc = _contentClip.next_mc;					prev_mc = _contentClip.prev_mc;										if( next_mc != null )					{						_nextClip = new DynamicUIButton();						_nextClip.dynamicClip = next_mc;						_nextClip.dynamicInit();						_nextClip.addEventListener( "onClick", handleNextClicked );					}										if( prev_mc != null )					{						_prevClip = new DynamicUIButton();						_prevClip.dynamicClip = prev_mc;						_prevClip.dynamicInit();						_prevClip.addEventListener( "onClick", handlePrevClicked );					}				}				public function get contentClip():MovieClip { return _contentClip; }								public function set spacing( n:Number ):void { _spacing = n; }							/** init			  *	---------------------------------------------------------------------------- */				public function init():void				{					_dockNavigationItems = new Vector.<DockNavigationItem>;										_spacing = 25;									}							/** kill			  *	---------------------------------------------------------------------------- */				public function kill():void				{					for( var i:int=0; i<_dockNavigationItems.length; ++i )					{						_dockNavigationItems[i].onClicked.remove( handleDockNavigationItemClicked );						container_mc.removeChild( _dockNavigationItems[i].contentClip );						_dockNavigationItems[i].kill();					}										VectorUtil.removeAll( _dockNavigationItems );				}							/** addItem			  *	---------------------------------------------------------------------------- */				public function addItem( item:DockNavigationItem ):void				{					item.onClicked.add( handleDockNavigationItemClicked );					item.contentClip.scaleX = item.contentClip.scaleY = .5;										if( _dockNavigationItems.length > 0 )						item.contentClip.x = _dockNavigationItems[ _dockNavigationItems.length-1 ].contentClip.x + _dockNavigationItems[ _dockNavigationItems.length-1 ].contentClip.width + int(item.originalWidth*0.5);										/*					var bound:Rectangle = item.contentClip.getBounds(item.contentClip);					trace( 'bound: '+bound );					trace( 'bound.left: '+bound.left );					trace( 'bound.top: '+bound.top );					item.contentClip.x += int(item.originalWidth*0.5);					item.contentClip.y += int(item.originalHeight*0.5);					*/					container_mc.addChild( item.contentClip );					_dockNavigationItems.push( item );										if( container_mc.width > mask_mc.width )					{						if( _nextClip != null ) _nextClip.dynamicClip.visible = true;						if( _prevClip != null ) _prevClip.dynamicClip.visible = true;					}					else					{						if( _nextClip != null ) _nextClip.dynamicClip.visible = true;						if( _prevClip != null ) _prevClip.dynamicClip.visible = true;					}				}								public function navigateToIndex( i:int ):void				{					if( i >= 0 && i < _dockNavigationItems.length )					{						_currentDockNavigationItemIndex = i;						updateUI();					}				}							/** handleDockNavigationItemClicked			  *	---------------------------------------------------------------------------- */				private function handleDockNavigationItemClicked( item:DockNavigationItem ):void				{					for( var i:int=0; i<_dockNavigationItems.length; ++i )					{						if( _dockNavigationItems[i] == item )							_currentDockNavigationItemIndex = i;					}										updateUI();				}							/** updateUI			  *	---------------------------------------------------------------------------- */				private function updateUI():void				{					//trace( '_currentDockNavigationItemIndex: '+_currentDockNavigationItemIndex );					if( _currentDockNavigationItemIndex == 0 )					{						_prevClip.dynamicClip.visible = false;					}					else					{						_prevClip.dynamicClip.visible = true;					}										if( _currentDockNavigationItemIndex == _dockNavigationItems.length-1 )					{						_nextClip.dynamicClip.visible = false;					}					else					{						_nextClip.dynamicClip.visible = true;					}										for( var i:int=0; i<_dockNavigationItems.length; ++i )					{						if( i == _currentDockNavigationItemIndex-1 || i == _currentDockNavigationItemIndex+1 )						{							TweenLite.to( _dockNavigationItems[i].contentClip, .4, {scaleX:.7, scaleY:.7} );						}						else if( i == _currentDockNavigationItemIndex )						{							TweenLite.to( _dockNavigationItems[i].contentClip, .4, {scaleX:1, scaleY:1} );						}						else						{							TweenLite.to( _dockNavigationItems[i].contentClip, .4, {scaleX:0.5, scaleY:0.5} );						}					}										var bound:Rectangle = _dockNavigationItems[_currentDockNavigationItemIndex].contentClip.getBounds(container_mc);					TweenLite.to( container_mc, .5, {x:mask_mc.width/2-(bound.x+bound.width/2)} );				}							/** handleNextClicked			  *	---------------------------------------------------------------------------- */				private function handleNextClicked( event:Event ):void				{					++_currentDockNavigationItemIndex;										updateUI();				}							/** handlePrevClicked			  *	---------------------------------------------------------------------------- */				private function handlePrevClicked( event:Event ):void				{					--_currentDockNavigationItemIndex;										updateUI();				}						}			}