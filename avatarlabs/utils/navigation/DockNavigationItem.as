/** DockNavigationItem  *	---------------------------------------------------------------------------- *  *	@desc:  *		This is a dock navigation class.  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */ 	package com.avatarlabs.utils.navigation	{		import flash.display.DisplayObject;		import flash.display.DisplayObjectContainer;		import flash.display.MovieClip;		import flash.events.Event;		import flash.events.MouseEvent;				import org.osflash.signals.Signal;				public class DockNavigationItem extends Object		{			private var _contentClip:MovieClip;			private var _id:*;			private var _active:Boolean;						private var _originalWidth:Number;			private var _originalHeight:Number;						public var onClicked:Signal;			public var onRolledOver:Signal;			public var onRolledOut:Signal;						/**	Stage Instances **/			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function DockNavigationItem()				{									}							/** set/get contentClip			  *	---------------------------------------------------------------------------- */				public function set contentClip( m:MovieClip ):void				{					_contentClip = m;					_contentClip.buttonMode = true;					_contentClip.mouseChildren = false;										_originalWidth = _contentClip.width;					_originalHeight = _contentClip.height;				}				public function get contentClip():MovieClip { return _contentClip; }								public function set id( i:* ):void { _id = i; }				public function get id():* { return _id; }								public function get originalWidth():Number { return _originalWidth; }				public function get originalHeight():Number { return _originalHeight; }							/** init			  *	---------------------------------------------------------------------------- */				public function init():void				{					_active = false;										onClicked = new Signal( DockNavigationItem );					onRolledOver = new Signal( DockNavigationItem );					onRolledOut = new Signal( DockNavigationItem );										setActive( true );				}							/** kill			  *	---------------------------------------------------------------------------- */				public function kill():void				{					if( _contentClip.hasEventListener(MouseEvent.CLICK) ) _contentClip.removeEventListener( MouseEvent.CLICK, handleClicked );					if( _contentClip.hasEventListener(MouseEvent.ROLL_OVER) ) _contentClip.removeEventListener( MouseEvent.ROLL_OVER, handleRolledOver );					if( _contentClip.hasEventListener(MouseEvent.ROLL_OUT) ) _contentClip.removeEventListener( MouseEvent.ROLL_OUT, handleRolledOut );										onClicked = null;					onRolledOver = null;					onRolledOut = null;				}							/** setActive			  *	---------------------------------------------------------------------------- */				public function setActive( a:Boolean ):void				{					_active = a;										if( _active )					{						if( !_contentClip.hasEventListener(MouseEvent.CLICK) ) _contentClip.addEventListener( MouseEvent.CLICK, handleClicked, false, 0, true );						if( !_contentClip.hasEventListener(MouseEvent.ROLL_OVER) ) _contentClip.addEventListener( MouseEvent.ROLL_OVER, handleRolledOver, false, 0, true );						if( !_contentClip.hasEventListener(MouseEvent.ROLL_OUT) ) _contentClip.addEventListener( MouseEvent.ROLL_OUT, handleRolledOut, false, 0, true );					}					else					{						if( _contentClip.hasEventListener(MouseEvent.CLICK) ) _contentClip.removeEventListener( MouseEvent.CLICK, handleClicked );						if( _contentClip.hasEventListener(MouseEvent.ROLL_OVER) ) _contentClip.removeEventListener( MouseEvent.ROLL_OVER, handleRolledOver );						if( _contentClip.hasEventListener(MouseEvent.ROLL_OUT) ) _contentClip.removeEventListener( MouseEvent.ROLL_OUT, handleRolledOut );					}				}								private function handleClicked( event:MouseEvent ):void				{					//trace( 'handleClicked();' );					//trace( _active );					if( _active )					{						onClicked.dispatch( this );						onRolledOver.dispatch( this );					}				}								private function handleRolledOver( event:MouseEvent ):void				{					if( _active )						onRolledOver.dispatch( this );				}								private function handleRolledOut( event:MouseEvent ):void				{					if( _active )						onRolledOut.dispatch( this );				}		}			}