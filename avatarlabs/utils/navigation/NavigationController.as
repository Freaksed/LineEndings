/**	NavigationController *	dev: James Safechuck (james@avatarlabs.com) *	--------------------------------------------------------------------------------------------------------------- * *	Notes: *	Keeps a table of functions to call when a UINavigation gets triggered. *	--------------------------------------------------------------------------------------------------------------- * *	NavigationController.getInstance().registerListenerInScopeForGroup(sampleFunction, this, "MainNav"); *	sampleFunction( id:String ); *	NavigationController.getInstance().removeListenerInScopeForGroup(sampleFunction, this, "MainNav"); *	--------------------------------------------------------------------------------------------------------------- */	package com.avatarlabs.utils.navigation	{		import com.avatarlabs.utils.console.*;		import com.avatarlabs.utils.events.*;				import flash.display.MovieClip;		import flash.events.*;		import flash.utils.getQualifiedClassName;				public class NavigationController extends EventDispatcher		{			private static var _instance:NavigationController;						private var _registeredFunctions:Array;						/*	constructor:Gskinner			 *	---------------------------------------------------------------------------- */				public function NavigationController()				{					if( _registeredFunctions == null )						_registeredFunctions = [];				}						/*	singleton			 *	---------------------------------------------------------------------------- */				public static function getInstance():NavigationController				{										if( _instance==null ) _instance = new NavigationController();					return _instance;				}									/*	navigateTo			 *	---------------------------------------------------------------------------- */				public function navigateTo( contentId:*, groupId:String ):void				{					ConsoleBroadcaster.broadcast( "NavigationController","navigateTo( "+contentId+", "+groupId+" )");					notifyListenerFunction(groupId, contentId);										dispatchEvent( new CustomEvent( "onNavigate_"+groupId, { navigationGroupId:groupId, contentId:contentId } ) );				}							/*	registerListenerForGroup			 *	---------------------------------------------------------------------------- */				public function registerListenerForGroup( f:Function, g:String ):void				{					ConsoleBroadcaster.broadcast( "NavigationController","registerListenerForGroup( function "+f+" group "+g+")");										//trace( "_registeredFunctions: "+_registeredFunctions );										if( _registeredFunctions[g] == undefined ) 					{						ConsoleBroadcaster.broadcast( "NavigationController","this is first time adding to list with id: "+g);												_registeredFunctions[g] = new Array();					}										_registeredFunctions[g].push({ callback:f });										//trace("_registeredFunctions[g].length "+_registeredFunctions[g].length);				}								/*	removeListenerForGroup			 *	---------------------------------------------------------------------------- */				public function removeListenerForGroup( f:Function, g:String ):void				{					ConsoleBroadcaster.broadcast( "NavigationController","removeListenerForGroup( function "+f+" group "+g+")");										if( _registeredFunctions[g] != undefined ) 					{						var targetFunction:Function;												for( var i:int=0; i<_registeredFunctions[g].length; i++ ) 						{							targetFunction = _registeredFunctions[g][i].callback;														if( targetFunction === f  )							{								_registeredFunctions[g].splice(i, 1);								//trace("found function to remove _registeredFunctions[g] "+_registeredFunctions[g]);								break;							}						}												//trace("_registeredFunctions[g][i].length "+_registeredFunctions[g].length);					}					else 					{						ConsoleBroadcaster.broadcast( "NavigationController","group does not exist");					}				}							/*	notifyListenerFunction			 *	---------------------------------------------------------------------------- */				private function notifyListenerFunction(g:String, contentId:*):void				{					ConsoleBroadcaster.broadcast( "NavigationController","notifyListenerFunction( group "+g+" contentId "+contentId+")");										if( _registeredFunctions[g] != undefined )					{						var f:Function;												for( var i:int=0; i<_registeredFunctions[g].length; i++ )						{							f = _registeredFunctions[g][i].callback;							f.apply( _registeredFunctions[g][i].scope, [contentId] );						}					}else					{						ConsoleBroadcaster.broadcast( "NavigationController","callback function not registered for group");					}				}		}	}		