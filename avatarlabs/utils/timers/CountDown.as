/**	CountDown *	------------------------------------------------------------------------------------ * *	by:James Safechuck *	------------------------------------------------------------------------------------ */	package com.avatarlabs.utils.timers	{		import flash.events.*;		import flash.utils.Timer;				import com.avatarlabs.utils.ArrayUtil;		import com.avatarlabs.utils.events.CustomEvent;				public class CountDown extends EventDispatcher		{			protected var _timer:Timer;			protected var _delay:Number;						protected var _startTime:Number;			protected var _targetTimes:Array;			protected var _targetTimeIndex:Number = 0;						/*	constructor			 *	---------------------------------------------------------------------------- */				public function CountDown()				{					_targetTimes = new Array();					_startTime = 0;					_delay = 70;				}								public function set delay( n:Number ):void { _delay = n; }				public function get delay():Number { return _delay; }								public function set startTime( n:Number ):void { _startTime = n; }							/*	addDate			 *	---------------------------------------------------------------------------- */			 	public function addTargetTime( n:Number ):void				{					trace( "addTargetTime("+n+")" );										_targetTimes.push( n );					_targetTimes.sort( sort );				}								protected function sort( a, b ):int				{					if( a < b )						return -1;					else if( a > b )						return 1;										return 0;				}								public function startCountDown():void				{					trace( "startCountDown();" );										if( _timer == null )					{						_timer = new Timer( _delay );						_timer.addEventListener( TimerEvent.TIMER, handleTimerFired );					}										if( _startTime == 0 )						_startTime = new Date().getTime();										_targetTimeIndex = 0;										_timer.start();				}								public function stopCountDown():void				{					trace( "stopCountDown()" );										ArrayUtil.removeAll( _targetTimes );										_timer.stop();					_timer.reset();				}								protected function handleTimerFired( event:TimerEvent ):void				{					//trace( "_timer.currentCount: "+_timer.currentCount );					//trace( "_delay: "+_delay );					//trace( "_startTime: "+_startTime );					//trace( "_targetTimes["+_targetTimeIndex+"]: "+_targetTimes[_targetTimeIndex] );										if( _timer.currentCount * _delay + _startTime >= _targetTimes[_targetTimeIndex])					{						++_targetTimeIndex;												if( _targetTimeIndex >= _targetTimes.length-1 )						{							dispatchEvent( new CustomEvent("onStop") );							stopCountDown();						}						else						{							dispatchEvent( new CustomEvent("onPassTargetTime", {index:_targetTimeIndex, time:_targetTimes[_targetTimeIndex-1]}) );						}					}					else					{						var difference:Number = _targetTimes[_targetTimeIndex] - (_timer.currentCount * _delay + _startTime);						dispatchEvent( new CustomEvent("onChange", {remainingTime:difference, delay:_delay}) );											}				}							/*	handleCountdownTimerUpdate			 *	---------------------------------------------------------------------------- 				private function handleCountdownTimerUpdate( event:TimerEvent )				{					var now:Date = new Date();					var difference:Number = countdownDate - now.getTime();					var seconds:Number = difference / 1000;					var minutes:Number = seconds / 60;					var hours:Number	= minutes / 60;					var days:Number	= hours / 24;										dispatchEvent( new CustomEvent( "onTimeChange", { days:days, hours:hours, minutes:minutes, seconds:seconds } ) );									}*/		}	}		