package com.avatarlabs.utils.timers{    /** StopWatch *	---------------------------------------------------------------------------- * *	Game Timer *  Developer: James Safechuck ( james@avatarlabs.com ) *	---------------------------------------------------------------------------- */	import flash.events.EventDispatcher;	import flash.events.TimerEvent;	import flash.utils.Timer;	import flash.errors.IllegalOperationError;		import com.avatarlabs.utils.console.ConsoleBroadcaster;	import com.avatarlabs.utils.events.CustomEvent;		public class StopWatch extends EventDispatcher	{				private static var instance			:StopWatch;				private var watch					:Timer;				private var totalDuration			:Number;		private var additionalDuration		:Number = 0;				private var _currentTime:String;		/*	constructor	 *	--------------------------------------------------------------------------- */		public function StopWatch()		{			if ( !instance )			{				_currentTime = "";								watch = new Timer( 90 );				watch.addEventListener( TimerEvent.TIMER, timerHandler );			}		}				/*	singleton - constructor	 *	---------------------------------------------------------------------------- */		public static function getInstance():StopWatch		{								if( instance==null ) instance = new StopWatch();			return instance;		}				/*	setDuration	 *	---------------------------------------------------------------------------- */		public function setDuration( t:Number, autoStart:Boolean = false ):void		{			ConsoleBroadcaster.broadcast( "StopWatch", "setDuration("+t+")");			resetTime();			totalDuration = t;						if( autoStart )				startTimer();		}				/*	addTime	 *	---------------------------------------------------------------------------- */		public function addTime( t:Number = 0 ):void		{			ConsoleBroadcaster.broadcast( "StopWatch", "addTime("+t+")");			totalDuration = totalDuration + t;		}				/*	startTimer	 *	---------------------------------------------------------------------------- */		public function startTimer():void		{			watch.start();		}				/*	stopTimer	 *	---------------------------------------------------------------------------- */		public function stopTimer():void		{			watch.stop();		}				/*	resetTimer	 *	---------------------------------------------------------------------------- */		public function resetTime():void		{			watch.reset();		}				/*	getTotalTime	 *	---------------------------------------------------------------------------- */		public function getTotalTime():Number		{			return totalDuration;		}				/*	timerHandler	 *	---------------------------------------------------------------------------- */		private function timerHandler( event:TimerEvent ):void		{			var currentDuration = event.target.delay * event.target.currentCount;				var difference = ( totalDuration * 1000 ) - currentDuration;			var milsec = difference;			var sec = difference/1000;			var min = sec/60;						var outputMill = Math.floor( ( milsec % 1000 ) / 10 );			var outputSec = Math.floor( sec % 60 );			var outputMin = Math.floor( min );						if ( outputMill < 10 )			{				outputMill = "0"+outputMill;			}						if( outputSec < 10 )			{				outputSec = "0"+outputSec;			}						if ( outputMin < 10 )			{				outputMin = "0"+ outputMin;			}						var output = outputMin+":"+outputSec+":"+outputMill;						//trace( output );						_currentTime = output;						dispatchEvent( new CustomEvent( "onTimeChange", { timeRemaining:output } ) );		}				public function getCurrentTime():String		{			return _currentTime;		}	}}