/*	SiteMusic *	------------------------------------------------------------ * *	@desc: root level music player for mini-site *	@developer: James Safechuck, [james@avatarlabs.com] *	------------------------------------------------------------ */ 	package com.avatarlabs.utils.sound	{				import com.avatarlabs.utils.console.*;		import com.avatarlabs.utils.events.*;		import flash.events.*;		import flash.media.*;		import flash.net.URLRequest;		import flash.utils.Timer;				public class SiteMusic extends EventDispatcher		{						private static var instance			:SiteMusic;			private var soundChannel			:SoundChannel;			private var snd						:Sound;						private var volume					:Number = 0;			private var defaultVolume			:Number = .8;						private var position				:int = 0;						private var isMuted					:Boolean = true;			private var playing					:Boolean = false;						private var timer					:Timer;									/*	constructor:Gskinner			 *	---------------------------------------------------------------------------- */				public function SiteMusic()				{					if ( !instance )					{						snd = new Sound();						snd.addEventListener( Event.COMPLETE, startAudio );						snd.addEventListener( IOErrorEvent.IO_ERROR, loadError );																		soundChannel = new SoundChannel();												timer = new Timer( 100 );						timer.addEventListener( TimerEvent.TIMER, handleTimerEvent );											}				}						/*	singleton - constructor:Gskinner			 *	---------------------------------------------------------------------------- */				public static function getInstance():SiteMusic				{															if( instance==null ) instance = new SiteMusic();					return instance;				}						/*	public functions			 *	---------------------------------------------------------------------------- */								public function loadSound( s:String ):void				{					var request:URLRequest = new URLRequest( s );										snd.load( request );				}								public function mute():void				{					ConsoleBroadcaster.broadcast("SiteMusic","mute()");					timer.start();										!isMuted ? dispatchEvent( new CustomEvent( "onAudioStop", { playing:false } ) ) : null;										if( !playing )					{						resumeAudio();					} 									}						/*	private functions			 *	---------------------------------------------------------------------------- */				private function startAudio( event:Event ):void				{					ConsoleBroadcaster.broadcast("SiteMusic","startAudio()");					resumeAudio();					timer.start();				}								private function stopAudio():void				{					ConsoleBroadcaster.broadcast("SiteMusic","stopAudio()");					position = soundChannel.position;					soundChannel.stop();					playing = false;										dispatchEvent( new CustomEvent( "onAudioStopComplete", { playing:playing } ) );				}								private function resumeAudio():void				{					ConsoleBroadcaster.broadcast("SiteMusic","resumeAudio()");										playing = true;										soundChannel = snd.play( position, 0 , new SoundTransform( volume ) );										/**	ADDED BY CHRISTIAN					  *	snd.play will return a new SoundChannel Class					  *	that overwrites the old one					  *	---------------------------------------------------- */					soundChannel.addEventListener( Event.SOUND_COMPLETE, playDone );										dispatchEvent( new CustomEvent( "onAudioStart", { playing:playing } ) );				}						/*	eventHandlers			 *	---------------------------------------------------------------------------- */				private function handleTimerEvent( event:Event ):void				{					ConsoleBroadcaster.broadcast("SiteMusic","handleTimerEvent()");										switch ( isMuted )					{						case false:							if( volume >= 0 )							{								volume -= .2;								var sndTransform:SoundTransform = new SoundTransform( volume );									soundChannel.soundTransform = sndTransform;															} else							{								isMuted = true;								stopAudio();								timer.stop();							}							break;						case true:							if( volume <= defaultVolume )								{									volume += .2;									var sndTransform1:SoundTransform = new SoundTransform( volume );										soundChannel.soundTransform = sndTransform1;																	} else								{									var sndTransform2:SoundTransform = new SoundTransform( defaultVolume );									soundChannel.soundTransform = sndTransform2;									timer.stop();									isMuted = false;								}							break;					}									}								private function loadError( event:IOErrorEvent ):void				{					ConsoleBroadcaster.broadcast("SiteMusic","loadError("+event+")");				}								private function playDone( event:Event ):void				{					ConsoleBroadcaster.broadcast("SiteMusic","playDone()");										/** ADDED BY CHRISTIAN					  *	removes event listener from the soundChannel					  *	------------------------------------------------------------ */					if ( soundChannel.hasEventListener( Event.SOUND_COMPLETE ) )						soundChannel.removeEventListener( Event.SOUND_COMPLETE, playDone );										position = 0;					resumeAudio();				}		}	}