/** SoundEffectPlayer *	---------------------------------------------------------------------------- * *	Responsible for loading and playing sound from library *  Developer James Safechuck *	---------------------------------------------------------------------------- * *	Revised 2010/11/11 by Christian *	Modified this class so it can be used to play multiple sounds, and it can *	also play the sound looping. *	---------------------------------------------------------------------------- * *  Revised 080418: now not singleton to play more than one sound at a time *  added volume, start, stop, onComplete methods *	---------------------------------------------------------------------------- */ 	package com.avatarlabs.utils.sound	{		import flash.events.*;		import flash.media.*;		import flash.net.URLRequest;		import flash.utils.getDefinitionByName;		import flash.utils.getTimer;				import com.avatarlabs.utils.VectorUtil;		import com.avatarlabs.utils.console.*;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.sound.SoundEffectObject;		import com.avatarlabs.utils.timers.CustomTimer;				public class SoundEffectPlayer extends EventDispatcher		{			protected var sounds:Array = new Array();						protected var _soundChannel:SoundChannel;			protected var snd:Sound;			protected var _soundsPlaying:Vector.<SoundEffectObject>;			protected var _soundsEnding:Vector.<SoundEffectObject>;			protected var _musicsPlaying:Vector.<SoundEffectObject>;			protected var _musicsEnding:Vector.<SoundEffectObject>;			protected var _defaultSoundGroup:String;						protected var currentSound:String;			protected var currentSoundTransform:SoundTransform;			protected var _soundTransforms:Array; 						protected var _soundsQueue:Array;			protected var _isQueuePlaying:Boolean;			protected var _soundsQueueDelayTimer:CustomTimer;			protected var _sameSoundLimit:int;			protected var _soundsMuted:Boolean;			protected var _musicsMuted:Boolean;						public static const SOUND_PLAYER_SFX:int = 0;			public static const SOUND_PLAYER_MUSIC:int = 1;						protected static var _instance:SoundEffectPlayer;						/*	constructor			 *	---------------------------------------------------------------------------- */				public function SoundEffectPlayer():void				{					_soundsPlaying = new Vector.<SoundEffectObject>;					_soundsEnding = new Vector.<SoundEffectObject>;					_musicsPlaying = new Vector.<SoundEffectObject>;					_musicsEnding = new Vector.<SoundEffectObject>;										//snd = new Sound();					//snd.addEventListener( Event.COMPLETE, startAudio );					//snd.addEventListener( IOErrorEvent.IO_ERROR, loadError );										_soundChannel = new SoundChannel();										_defaultSoundGroup = "DefaultSoundGroup";										currentSoundTransform = new SoundTransform( 1, 0 );										_soundTransforms = new Array();					_soundTransforms[ _defaultSoundGroup ] = new SoundTransform(currentSoundTransform.volume, currentSoundTransform.pan);										_soundsQueue = new Array();										_sameSoundLimit = 1;				}								public function set sameSoundLimit( i:int ):void { _sameSoundLimit = i; }								//public function set soundsMuted( b:Boolean ):void { _soundsMuted = b; }				public function get soundsMuted():Boolean { return _soundsMuted; }				public function get musicsMuted():Boolean { return _musicsMuted; }								public function get soundTransforms():Array { return _soundTransforms; }							/** reset			  *	---------------------------------------------------------------------- */				public static function reset():void				{					_instance = null;				}							/** getInstance			  *	---------------------------------------------------------------------- */				public static function getInstance():SoundEffectPlayer				{					if( _instance==null ) _instance = new SoundEffectPlayer();					return _instance;				}								public function isSoundPlaying( customId:String, groupId:String="DefaultSoundGroup" ):Boolean				{					for( var i in _soundsPlaying )					{						if( _soundsPlaying[i].id == customId && _soundsPlaying[i].groupId == groupId )						{							return true;						}					}										return false;				}							/*	public:playSound			 *	--------------------------------------------------------------------------- */				public function playRemoteSound( linkage:String ):void				{					//ConsoleBroadcaster.broadcast("SoundEffectPlayer","playRemoteSound("+linkage+")");										var request:URLRequest = new URLRequest( sounds[ linkage ] );										//snd.load( request );										//Create new sound object and add it to the array					//var sound:Sound = new Sound();				}							/**	playLibrarySound			  *	--------------------------------------------------------------------------- *			  *	requires linkage of the library sound			  *	second parameter is optional, true if you want the sound to loop			  *	returns the id of the sound that is playing, you can use the same id to stop			  *		the sound from playing			  *	--------------------------------------------------------------------------- */				public function playLibrarySound( soundId:String, loop:Boolean=false, customId:String="", groupId:String="DefaultSoundGroup", type:int=0 ):String				{					//trace("SoundEffectPlayer","playLibrarySound("+soundId+")");					/*					if( currentSound != soundId )					{						var classRef:Class = getDefinitionByName( sounds[ soundId ] ) as Class;												snd = new classRef();												currentSound = soundId;						startAudio();											}else					{						ConsoleBroadcaster.broadcast("SoundEffectPlayer","playLibrarySound=> "+soundId+" already playing!)");					}					*/										//Create new sound object and add it to the array					//When it's finished playing, remove it from the array										//Check if we already have more than the number of the sound limit playing at a time.					//If there are, dont play more sounds					var playedTime:Number = getTimer();					var count:int = 0;					var i:int;										for( i=0; i<_soundsPlaying.length; ++i )					{						if( _soundsPlaying[i].soundId == soundId && playedTime - _soundsPlaying[i].playedTime < 100 )						{							++count;						}												if( count >= _sameSoundLimit )						{							//trace( "max number of sound limit has been reached, don't play the sound" );							return "";						}					}										try					{						//var classRef:Class = getDefinitionByName( sounds[soundId] ) as Class;						//NOTE:						//	I don't see much advantage of adding the sound id to an array and get the linkage from it.. not sure if we still want to keep that.						var classRef:Class;						try						{							classRef = getDefinitionByName( sounds[soundId] ) as Class;						}						catch( e:Error )						{							classRef = getDefinitionByName( soundId ) as Class;							if( classRef == null )							{								ConsoleBroadcaster.broadcast( "SoundEffectPlayer", "Can't find linkage for the soundId: "+soundId );								return "";							}						}						var sound:Sound = new classRef();												//trace( "classRef: "+classRef );												if( _soundTransforms[ groupId ] == undefined )							_soundTransforms[ groupId ] = new SoundTransform(currentSoundTransform.volume, currentSoundTransform.pan);												//trace( "_soundTransforms[ "+groupId+" ].volume: "+_soundTransforms[ groupId ].volume);												var soundChannel:SoundChannel;												if( type == SOUND_PLAYER_SFX )						{							if( _soundsMuted )							{								soundChannel = sound.play( 0, 0, new SoundTransform(0, 0) );							}							else							{								soundChannel = sound.play( 0, 0, _soundTransforms[groupId] );							}							//trace( "play sfx sound id "+soundId+", group of "+groupId+" with volume of "+soundChannel.soundTransform.volume );														for( i=0; i<_soundsPlaying.length; ++i )							{								if( _soundsPlaying[i].soundId == soundId )									++count;							}						}						else if( type == SOUND_PLAYER_MUSIC )						{							if( _musicsMuted )							{								soundChannel = sound.play( 0, 0, new SoundTransform(0, 0) );							}							else							{								soundChannel = sound.play( 0, 0, _soundTransforms[groupId] );							}							//trace( "play music sound id "+soundId+", group of "+groupId+" with volume of "+soundChannel.soundTransform.volume );														for( i=0; i<_musicsPlaying.length; ++i )							{								if( _musicsPlaying[i].soundId == soundId )									++count;							}						}												//if( _muted )							//soundChannel = sound.play( 0, 0, new SoundTransform(0, 0) );						//else							//soundChannel = sound.play(0, 0, _soundTransforms[groupId]);												//soundChannel.soundTransform = currentSoundTransform;						soundChannel.addEventListener( Event.SOUND_COMPLETE, handleSoundComplete );						//trace( "play sound with volume of "+soundChannel.soundTransform.volume );												count = 0;												if( customId == "" )						{							//var newId:String = soundId+String(count);							customId = soundId+String(count);						}												var soundEffectObject:SoundEffectObject = new SoundEffectObject();							soundEffectObject.id = customId;							soundEffectObject.groupId = groupId;							soundEffectObject.soundId = soundId;							soundEffectObject.type = type;							soundEffectObject.sound = sound;							soundEffectObject.soundChannel = soundChannel;							soundEffectObject.loop = loop;							soundEffectObject.playedTime = playedTime;												if( type == SOUND_PLAYER_SFX )							_soundsPlaying.push( soundEffectObject );						else if( type == SOUND_PLAYER_MUSIC )							_musicsPlaying.push( soundEffectObject );												//_soundsPlaying.push( {groupId:groupId, id:customId, soundId:soundId, sound:sound, soundChannel:soundChannel, loop:loop, time:time} );						/*						for( i=0; i<_soundsPlaying.length; ++i )						{							trace( "_soundsPlaying["+i+"].soundId: "+_soundsPlaying[i].soundId );							trace( "_soundsPlaying["+i+"].groupId: "+_soundsPlaying[i].groupId );							trace( "_soundsPlaying["+i+"].id: "+_soundsPlaying[i].id );							trace( "_soundsPlaying["+i+"].soundChannel: "+_soundsPlaying[i].soundChannel );							trace( "_soundsPlaying["+i+"].sound: "+_soundsPlaying[i].sound );							trace( "_soundsPlaying["+i+"].loop: "+_soundsPlaying[i].loop );						}												for( i=0; i<_soundsEnding.length; ++i )						{							trace( "_soundsEnding["+i+"].soundId: "+_soundsEnding[i].soundId );							trace( "_soundsEnding["+i+"].groupId: "+_soundsEnding[i].groupId );							trace( "_soundsEnding["+i+"].id: "+_soundsEnding[i].id );							trace( "_soundsEnding["+i+"].soundChannel: "+_soundsEnding[i].soundChannel );							trace( "_soundsEnding["+i+"].sound: "+_soundsEnding[i].sound );							trace( "_soundsEnding["+i+"].loop: "+_soundsEnding[i].loop );						}						*/						//trace( _soundsPlaying );												return customId;					}					catch( e:Error )					{						ConsoleBroadcaster.broadcast("SoundEffectPlayer", "Error in playing sound: "+soundId+", "+e.message );						dispatchEvent( new CustomEvent("onPlaySoundError"));					}										return "";				}							/**	handleSoundComplete			  *	--------------------------------------------------------------------------- */				protected function handleSoundComplete( event:Event ):void				{					//ConsoleBroadcaster.broadcast( "SoundEffectPlayer", "handleSoundComplete("+event.currentTarget+");" );										event.currentTarget.removeEventListener( Event.SOUND_COMPLETE, handleSoundComplete );										var soundObject:SoundEffectObject;					var found:Boolean = false;										for( var i:int=0; i<_soundsPlaying.length; ++i )					{						soundObject = _soundsPlaying[i];												//trace( "soundChannel in array : "+soundObject.soundChannel );						//trace( "event.currentTarget: "+event.currentTarget );												if( soundObject.soundChannel == event.currentTarget )						{							found = true;							if( soundObject.loop )							{								var tempSoundTransform:SoundTransform = soundObject.soundChannel.soundTransform;																if( soundObject.endingTimer != null )								{									soundObject.endingTimer.stop();									soundObject.endingTimer.removeEventListener( TimerEvent.TIMER, handleFadingOutSoundTimerFired );									soundObject.endingTimer = null;								}																soundObject.soundChannel = null;								soundObject.soundChannel = soundObject.sound.play(0);																if( !soundObject.ending )								{									if( _soundsMuted )										soundObject.soundChannel.soundTransform = new SoundTransform(0, 0);									else										soundObject.soundChannel.soundTransform = _soundTransforms[soundObject.groupId];								}								else								{									soundObject.soundChannel.soundTransform = tempSoundTransform;								}																	soundObject.soundChannel.addEventListener( Event.SOUND_COMPLETE, handleSoundComplete );							}							else							{								stopSound( soundObject.soundId, soundObject.id, soundObject.groupId, soundObject.type );							}							break;						}					}										if( !found )					{						for( i=0; i<_musicsPlaying.length; ++i )						{							soundObject = _musicsPlaying[i];														//trace( "soundChannel in array : "+soundObject.soundChannel );							//trace( "event.currentTarget: "+event.currentTarget );														if( soundObject.soundChannel == event.currentTarget )							{								if( soundObject.loop )								{									var tempSoundTransform:SoundTransform = soundObject.soundChannel.soundTransform;																		if( soundObject.endingTimer != null )									{										soundObject.endingTimer.stop();										soundObject.endingTimer.removeEventListener( TimerEvent.TIMER, handleFadingOutMusicTimerFired );										soundObject.endingTimer = null;									}																		soundObject.soundChannel = null;									soundObject.soundChannel = soundObject.sound.play(0);																		if( !soundObject.ending )									{										if( _musicsMuted )											soundObject.soundChannel.soundTransform = new SoundTransform(0, 0);										else											soundObject.soundChannel.soundTransform = _soundTransforms[soundObject.groupId];									}									else									{										soundObject.soundChannel.soundTransform = tempSoundTransform;									}																			soundObject.soundChannel.addEventListener( Event.SOUND_COMPLETE, handleSoundComplete );								}								else								{									stopSound( soundObject.soundId, soundObject.id, soundObject.groupId, soundObject.type );								}								break;							}						}					}										//trace( "_soundsPlaying.length: "+_soundsPlaying.length );					//trace( "_musicsPlaying.length: "+_musicsPlaying.length );				}							/**	stopSound			  *	--------------------------------------------------------------------------- *			  *	requires id to be passed in to stop a certain sound			  *	--------------------------------------------------------------------------- */				public function stopSound( soundId:String, customId:String="", groupId:String="DefaultSoundGroup", type:int=0 ):void				{					//ConsoleBroadcaster.broadcast( "SoundEffectPlayer", "stopSound("+soundId+", "+customId+", "+groupId+");" );										var soundObject:Object;					var i:int = 0;										if( type == SOUND_PLAYER_SFX )					{						for( i=0; i<_soundsPlaying.length; ++i )						{							//trace( "soundId: "+_soundsPlaying[i].soundId );							//trace( "id: "+_soundsPlaying[i].id );							//trace( "groupId: "+_soundsPlaying[i].groupId );														if( customId == "" )							{								//Stop all sounds with the soundId								if( _soundsPlaying[i].soundId == soundId && !_soundsPlaying[i].ending )								{									_soundsPlaying[i].ending = true;									if( _soundsPlaying[i].loop )									{										//trace( "stopping sound..." );										_soundsEnding.push( _soundsPlaying[i] );										_soundsPlaying[i].soundChannel.removeEventListener( Event.SOUND_COMPLETE, handleSoundComplete );										stopLoopingSoundByFadingOut( _soundsPlaying[i] );										//_soundsPlaying.splice( i, 1 );									}									else									{										_soundsPlaying[i].soundChannel.stop();										_soundsPlaying[i].soundChannel.removeEventListener( Event.SOUND_COMPLETE, handleSoundComplete );										soundObject = _soundsPlaying.splice( i, 1 )[0];										soundObject = null;										--i;									}								}							}							else if( customId != "" && _soundsPlaying[i].id == customId && _soundsPlaying[i].soundId == soundId && _soundsPlaying[i].groupId == groupId )							{								//trace( "stopping the sound: "+_soundsPlaying[i].soundId+", id: "+_soundsPlaying[i].id+", loop: "+_soundsPlaying[i].loop );								_soundsPlaying[i].ending = true;								if( _soundsPlaying[i].loop )								{									//trace( "stopping sound..." );									_soundsEnding.push( _soundsPlaying[i] );									_soundsPlaying[i].soundChannel.removeEventListener( Event.SOUND_COMPLETE, handleSoundComplete );									stopLoopingSoundByFadingOut( _soundsPlaying[i] );									//_soundsPlaying.splice( i, 1 );									break;								}								else								{									_soundsPlaying[i].soundChannel.stop();									_soundsPlaying[i].soundChannel.removeEventListener( Event.SOUND_COMPLETE, handleSoundComplete );									soundObject = _soundsPlaying.splice( i, 1 )[0];									soundObject = null;									break;								}							}						}					}					else if( type == SOUND_PLAYER_MUSIC )					{						for( i=0; i<_musicsPlaying.length; ++i )						{							if( customId == "" )							{								//Stop all sounds with the soundId								if( _musicsPlaying[i].soundId == soundId && !_musicsPlaying[i].ending )								{									//trace( "found music: "+_musicsPlaying[i] );									_musicsPlaying[i].ending = true;									if( _musicsPlaying[i].loop )									{										//trace( "stopping sound..." );										_musicsEnding.push( _musicsPlaying[i] );										stopLoopingMusicByFadingOut( _musicsPlaying[i] );										//_musicsPlaying.splice( i, 1 );									}									else									{										_musicsPlaying[i].soundChannel.stop();										_musicsPlaying[i].soundChannel.removeEventListener( Event.SOUND_COMPLETE, handleSoundComplete );										soundObject = _musicsPlaying.splice( i, 1 )[0];										soundObject = null;										--i;									}								}							}							else if( customId != "" && _musicsPlaying[i].id == customId && _musicsPlaying[i].soundId == soundId && _musicsPlaying[i].groupId == groupId )							{								//trace( "found music: "+_musicsPlaying[i] );								_musicsPlaying[i].ending = true;								if( _musicsPlaying[i].loop )								{									//trace( "stopping sound..." );									_musicsEnding.push( _musicsPlaying[i] );									stopLoopingMusicByFadingOut( _musicsPlaying[i] );									//_musicsPlaying.splice( i, 1 );									break;								}								else								{									_musicsPlaying[i].soundChannel.stop();									_musicsPlaying[i].soundChannel.removeEventListener( Event.SOUND_COMPLETE, handleSoundComplete );									soundObject = _musicsPlaying.splice( i, 1 )[0];									soundObject = null;									break;								}							}						}					}										//trace( "_musicsPlaying.lengtH: "+_musicsPlaying.length );				}							/**	stopLoopingSoundByFadingOut			  *	--------------------------------------------------------------------------- *			  *	Fades out the looping sound and stop it when volume reaches 0.			  *	--------------------------------------------------------------------------- */				protected function stopLoopingSoundByFadingOut( soundEffectObject:SoundEffectObject ):void				{					//ConsoleBroadcaster.broadcast( "SoundEffectPlayer", "handleLoopingSoundByFadingOut("+soundEffectObject.id+");" );										var timer:CustomTimer = new CustomTimer(100);						//timer.addEventListener( TimerEvent.TIMER, handleFadingOutSoundTimerFired, false, 0, true );						timer.onTimerFired.add( handleFadingOutSoundTimerFired );										var copiedSoundTransform:SoundTransform = new SoundTransform( soundEffectObject.soundChannel.soundTransform.volume, soundEffectObject.soundChannel.soundTransform.pan );					soundEffectObject.soundChannel.soundTransform = copiedSoundTransform;					soundEffectObject.endingTimer = timer;					timer.start();				}								protected function handleFadingOutSoundTimerFired( timer:CustomTimer ):void				{					//trace( "handleFadingOutSoundTimerFired();" );										var j:int;										for( var i:int=0; i<_soundsEnding.length; ++i )					{						if( _soundsEnding[i].endingTimer == timer )						{							//trace( "_soundsEnding[i].soundChannel.soundTransform.volume: "+_soundsEnding[i].soundChannel.soundTransform.volume );							var tempSoundTransform:SoundTransform = _soundsEnding[i].soundChannel.soundTransform;								tempSoundTransform.volume -= .2;							_soundsEnding[i].soundChannel.soundTransform = tempSoundTransform;														if( _soundsEnding[i].soundChannel.soundTransform.volume <= 0 )							{								_soundsEnding[i].endingTimer.stop();								//_soundsEnding[i].endingTimer.removeEventListener( TimerEvent.TIMER, handleFadingOutSoundTimerFired );								_soundsEnding[i].endingTimer.onTimerFired.remove( handleFadingOutSoundTimerFired );								_soundsEnding[i].endingTimer.kill();								_soundsEnding[i].endingTimer = null;								_soundsEnding[i].soundChannel.stop();								_soundsEnding[i].soundChannel.removeEventListener( Event.SOUND_COMPLETE, handleSoundComplete );																var soundEffectObject:SoundEffectObject = _soundsEnding.splice( i, 1 )[0];																//trace( "_soundsPlaying: "+_soundsPlaying );																for( j=0; j<_soundsPlaying.length; ++j )								{									//trace( "_soundsPlaying[j].id: "+_soundsPlaying[j].id );									if( _soundsPlaying[j] == soundEffectObject )									{										//trace( "_soundsPlaying[j].id: "+_soundsPlaying[j].id );										//trace( "remove from _soundsPlaying too" );										_soundsPlaying.splice( j, 1 );										break;									}								}																//trace( "id: "+soundEffectObject.id );								//trace( "remove from _soundsEnding" );								//_soundsEnding.splice( i, 1 );							}							break;						}					}				}							/**	stopLoopingMusicByFadingOut			  *	--------------------------------------------------------------------------- *			  *	Fades out the looping music and stop it when volume reaches 0.			  *	--------------------------------------------------------------------------- */				protected function stopLoopingMusicByFadingOut( soundEffectObject:SoundEffectObject ):void				{					//ConsoleBroadcaster.broadcast( "SoundEffectPlayer", "stopLoopingMusicByFadingOut("+soundEffectObject.id+");" );										var timer:CustomTimer = new CustomTimer(100);						//timer.addEventListener( TimerEvent.TIMER, handleFadingOutMusicTimerFired, false, 0, true );						timer.onTimerFired.add( handleFadingOutMusicTimerFired );										var copiedSoundTransform:SoundTransform = new SoundTransform( soundEffectObject.soundChannel.soundTransform.volume, soundEffectObject.soundChannel.soundTransform.pan );					soundEffectObject.soundChannel.soundTransform = copiedSoundTransform;					soundEffectObject.endingTimer = timer;					timer.start();				}								protected function handleFadingOutMusicTimerFired( timer:CustomTimer ):void				{					var j:int;										for( var i:int=0; i<_musicsEnding.length; ++i )					{						if( _musicsEnding[i].endingTimer == timer )						{							//trace( "_musicsEnding[i].soundChannel.soundTransform.volume: "+_musicsEnding[i].soundChannel.soundTransform.volume );							var tempSoundTransform:SoundTransform = _musicsEnding[i].soundChannel.soundTransform;								tempSoundTransform.volume -= .2;							_musicsEnding[i].soundChannel.soundTransform = tempSoundTransform;														if( _musicsEnding[i].soundChannel.soundTransform.volume <= 0 )							{								_musicsEnding[i].endingTimer.stop();								//_musicsEnding[i].endingTimer.removeEventListener( TimerEvent.TIMER, handleFadingOutMusicTimerFired );								_musicsEnding[i].endingTimer.onTimerFired.remove( handleFadingOutMusicTimerFired );								_musicsEnding[i].endingTimer.kill();								_musicsEnding[i].endingTimer = null;								_musicsEnding[i].soundChannel.stop();								_musicsEnding[i].soundChannel.removeEventListener( Event.SOUND_COMPLETE, handleSoundComplete );																var soundEffectObject:SoundEffectObject = _musicsEnding.splice( i, 1 )[0];																for( j=0; j<_musicsPlaying.length; ++j )								{									if( _musicsPlaying[j] == soundEffectObject )									{										//trace( "remove from _soundsPlaying too" );										_musicsPlaying.splice( j, 1 );										break;									}								}																//_musicsEnding.splice( i, 1 );							}							break;						}					}				}							/**	muteSounds			  *	--------------------------------------------------------------------------- *			  *	Mute current playing sounds and future ones.			  *	--------------------------------------------------------------------------- */				public function muteSounds():void				{					//ConsoleBroadcaster.broadcast( "SoundEffectPlayer", "muteSounds();" );										_soundsMuted = true;					/*					var timer:CustomTimer;					var copiedSoundTransform:SoundTransform;										for( var i:int=0; i<_soundsPlaying.length; ++i )					{						timer = new CustomTimer(100);						timer.addEventListener( TimerEvent.TIMER, handleMuteSoundTimerFired, false, 0, true );												copiedSoundTransform = new SoundTransform( _soundsPlaying[i].soundChannel.soundTransform.volume, _soundsPlaying[i].soundChannel.soundTransform.pan );						_soundsPlaying[i].soundChannel.soundTransform = copiedSoundTransform;						_soundsPlaying[i].muteTimer = timer;												timer.start();					}					*/										var copiedSoundTransform:SoundTransform;										for( var i:int=0; i<_soundsPlaying.length; ++i )					{						//copiedSoundTransform = new SoundTransform( 0, _soundsPlaying[i].soundChannel.soundTransform.pan );						_soundsPlaying[i].soundChannel.soundTransform = new SoundTransform( 0, _soundsPlaying[i].soundChannel.soundTransform.pan );					}				}							/**	handleMuteSoundTimerFired			  *	--------------------------------------------------------------------------- *			  *				  *	--------------------------------------------------------------------------- */				protected function handleMuteSoundTimerFired( event:TimerEvent ):void				{					for( var i:int=0; i<_soundsPlaying.length; ++i )					{											}				}							/**	unmuteSounds			  *	--------------------------------------------------------------------------- *			  *	Unmute the sounds.			  *	--------------------------------------------------------------------------- */				public function unmuteSounds():void				{					_soundsMuted = false;										for( var i:int=0; i<_soundsPlaying.length; ++i )					{						_soundsPlaying[i].soundChannel.soundTransform = _soundTransforms[ _soundsPlaying[i].groupId ];					}				}							/**	muteMusics			  *	--------------------------------------------------------------------------- *			  *	Mute current playing musics and future ones.			  *	--------------------------------------------------------------------------- */				public function muteMusics():void				{					//ConsoleBroadcaster.broadcast( "SoundEffectPlayer", "muteMusics();" );										_musicsMuted = true;										for( var i:int=0; i<_musicsPlaying.length; ++i )					{						_musicsPlaying[i].soundChannel.soundTransform = new SoundTransform( 0, _musicsPlaying[i].soundChannel.soundTransform.pan );					}				}							/**	unmuteMusics			  *	--------------------------------------------------------------------------- *			  *	Unmute the musics.			  *	--------------------------------------------------------------------------- */				public function unmuteMusics():void				{					//ConsoleBroadcaster.broadcast( "SoundEffectPlayer", "unmuteMusics();" );										_musicsMuted = false;										for( var i:int=0; i<_musicsPlaying.length; ++i )					{						//trace( "groupId: "+_musicsPlaying[i].groupId );						//trace( "_soundTransforms[ groupId ]: "+_soundTransforms[ _musicsPlaying[i].groupId ].volume );						_musicsPlaying[i].soundChannel.soundTransform = _soundTransforms[ _musicsPlaying[i].groupId ];					}				}							/**	stopAllSoundsForId			  *	--------------------------------------------------------------------------- *			  *	Stops all sounds for a specific customId			  *	--------------------------------------------------------------------------- */				public function stopAllSoundsForId( customId:String, groupId:String="DefaultSoundGroup" ):void				{					var soundObject:Object;										for( var i:int=0; i<_soundsPlaying.length; ++i )					{						//trace( "_soundsPlaying[i].id: "+_soundsPlaying[i].id );												if( customId == _soundsPlaying[i].id && groupId == _soundsPlaying[i].groupId )						{							_soundsPlaying[i].soundChannel.stop();							_soundsPlaying[i].soundChannel.removeEventListener( Event.SOUND_COMPLETE, handleSoundComplete );							soundObject = _soundsPlaying.splice( i, 1 )[0];							soundObject = null;							--i;						}					}										for( i=0; i<_musicsPlaying.length; ++i )					{						//trace( "_musicsPlaying[i].id: "+_musicsPlaying[i].id );												if( customId == _musicsPlaying[i].id && groupId == _musicsPlaying[i].groupId )						{							_musicsPlaying[i].soundChannel.stop();							_musicsPlaying[i].soundChannel.removeEventListener( Event.SOUND_COMPLETE, handleSoundComplete );							soundObject = _musicsPlaying.splice( i, 1 )[0];							soundObject = null;							--i;						}					}				}							/**	stopAllSounds			  *	--------------------------------------------------------------------------- *			  *	Stops all sounds that are currently playing.			  *	--------------------------------------------------------------------------- */				public function stopAllSounds():void				{					for( var i:int=0; i<_soundsPlaying.length; ++i )					{						_soundsPlaying[i].soundChannel.stop();						_soundsPlaying[i].soundChannel.removeEventListener( Event.SOUND_COMPLETE, handleSoundComplete );						_soundsPlaying[i] = null;					}					//_soundsPlaying = new Array();					VectorUtil.removeAll( _soundsPlaying );										for( i=0; i<_musicsPlaying.length; ++i )					{						_musicsPlaying[i].soundChannel.stop();						_musicsPlaying[i].soundChannel.removeEventListener( Event.SOUND_COMPLETE, handleSoundComplete );						_musicsPlaying[i] = null;					}					VectorUtil.removeAll( _musicsPlaying );				}							/**	pause			  *	--------------------------------------------------------------------------- *			  *	Pauses all sounds and musics.			  *	--------------------------------------------------------------------------- */				public function pause():void				{					for( var i:int=0; i<_soundsPlaying.length; ++i )					{						if( !_soundsPlaying[i].ending )						{							_soundsPlaying[i].pausedTime = _soundsPlaying[i].soundChannel.position;							_soundsPlaying[i].soundChannel.removeEventListener( Event.SOUND_COMPLETE, handleSoundComplete );							_soundsPlaying[i].soundChannel.stop();							_soundsPlaying[i].paused = true;							//trace( "sound length: "+_soundsPlaying[i].sound.length );							//trace( "sound pausedTime: "+_soundsPlaying[i].pausedTime );														if( !_soundsPlaying[i].loop && _soundsPlaying[i].sound.length == _soundsPlaying[i].pausedTime )							{								_soundsPlaying.splice( i, 1 );								--i;							}						}					}										for( i=0; i<_musicsPlaying.length; ++i )					{						if( !_musicsPlaying[i].ending )						{							_musicsPlaying[i].pausedTime = _musicsPlaying[i].soundChannel.position;							_musicsPlaying[i].soundChannel.removeEventListener( Event.SOUND_COMPLETE, handleSoundComplete );							_musicsPlaying[i].soundChannel.stop();							_musicsPlaying[i].paused = true;						}					}				}							/**	unpause			  *	--------------------------------------------------------------------------- *			  *	Unpauses all sounds and musics.			  *	--------------------------------------------------------------------------- */				public function unpause():void				{					for( var i:int=0; i<_soundsPlaying.length; ++i )					{						if( !_soundsPlaying[i].ending && _soundsPlaying[i].paused )						{							//trace( "_soundsPlaying[i]: "+_soundsPlaying[i] );							//trace( "_soundsPlaying[i].soundChannel: "+_soundsPlaying[i].soundChannel );							//trace( "_soundsPlaying[i].sound: "+_soundsPlaying[i].sound );														if( _soundsMuted )							{								//soundChannel = sound.play( 0, 0, new SoundTransform(0, 0) );								_soundsPlaying[i].soundChannel = _soundsPlaying[i].sound.play( _soundsPlaying[i].pausedTime, 0, new SoundTransform(0) );								_soundsPlaying[i].soundChannel.addEventListener( Event.SOUND_COMPLETE, handleSoundComplete );							}							else							{								//soundChannel = sound.play( 0, 0, _soundTransforms[groupId] );								_soundsPlaying[i].soundChannel = _soundsPlaying[i].sound.play( _soundsPlaying[i].pausedTime, 0, _soundTransforms[_soundsPlaying[i].groupId] );								_soundsPlaying[i].soundChannel.addEventListener( Event.SOUND_COMPLETE, handleSoundComplete );							}							//trace( "_soundsPlaying[i].soundChannel: "+_soundsPlaying[i].soundChannel );							_soundsPlaying[i].paused = false;						}					}										for( i=0; i<_musicsPlaying.length; ++i )					{						if( !_musicsPlaying[i].ending && _musicsPlaying[i].paused )						{							//trace( "_musicsPlaying[i]: "+_musicsPlaying[i] );							//trace( "_musicsPlaying[i].soundChannel: "+_musicsPlaying[i].soundChannel );							//trace( "_musicsPlaying[i].sound: "+_musicsPlaying[i].sound );														if( _musicsMuted )							{								_musicsPlaying[i].soundChannel = _musicsPlaying[i].sound.play( _musicsPlaying[i].pausedTime, 0, new SoundTransform(0) );								_musicsPlaying[i].soundChannel.addEventListener( Event.SOUND_COMPLETE, handleSoundComplete );							}							else							{								_musicsPlaying[i].soundChannel = _musicsPlaying[i].sound.play( _musicsPlaying[i].pausedTime, 0, _soundTransforms[_musicsPlaying[i].groupId] );								_musicsPlaying[i].soundChannel.addEventListener( Event.SOUND_COMPLETE, handleSoundComplete );							}							//trace( "_musicsPlaying[i].soundChannel: "+_musicsPlaying[i].soundChannel );							_musicsPlaying[i].paused = false;						}					}				}							/**	addSound			  *	--------------------------------------------------------------------------- */				public function addSound( id:String, linkage:String ):void				{					//ConsoleBroadcaster.broadcast("SoundEffectPlayer","addSound( id: "+id+" linkage: "+linkage+")");										sounds[ linkage ] = id;				}					/*	startAudio			 *	--------------------------------------------------------------------------- 				protected function startAudio( event:Event = null ):void				{					//ConsoleBroadcaster.broadcast("SoundEffectPlayer","startAudio("+event+")");					_soundChannel = snd.play();					_soundChannel.soundTransform = currentSoundTransform;					_soundChannel.addEventListener(Event.SOUND_COMPLETE, soundCompleteHandler);				}*/							/*	stopAudio			 *	--------------------------------------------------------------------------- 				public function stopAudio( event:Event = null ):void				{					//ConsoleBroadcaster.broadcast("SoundEffectPlayer","stopAudio("+event+")");					_soundChannel.stop();					_soundChannel.removeEventListener(Event.SOUND_COMPLETE, soundCompleteHandler);					currentSound = null;				}*/								public function addLibrarySoundToQueue( soundId:String, delay:Number=0, customId:String="", groupId:String="DefaultSoundGroup" ):String				{					try					{						var classRef:Class = getDefinitionByName( sounds[soundId] ) as Class;						var sound:Sound = new classRef();												//trace( "currentSoundTransform.volume: "+currentSoundTransform.volume);												if( _soundTransforms[ groupId ] == undefined )							_soundTransforms[ groupId ] = new SoundTransform(currentSoundTransform.volume, currentSoundTransform.pan);												//var soundChannel:SoundChannel = sound.play(0, 0, _soundTransforms[groupId]);							//soundChannel.addEventListener( Event.SOUND_COMPLETE, handleSoundComplete );												var count:int = 0;												for( var i:int=0; i<_soundsPlaying.length; ++i )						{							if( _soundsPlaying[i].soundId == soundId )								++count;						}												if( customId == "" )						{							customId = soundId+String(count);						}												_soundsQueue.push( {groupId:groupId, id:customId, delay:delay, soundId:soundId, sound:sound} );												//trace( _soundsPlaying );												return customId;					}					catch( e:Error )					{						ConsoleBroadcaster.broadcast("SoundEffectPlayer", "Error in playing sound: "+soundId+", "+e.message );						dispatchEvent( new CustomEvent("onPlaySoundError"));					}										return "";				}								public function startSoundQueue():void				{					if( !_isQueuePlaying && _soundsQueue.length > 0 )					{						_isQueuePlaying = true;												playNextSoundInQueue();					}				}								protected function playNextSoundInQueue():void				{					if( _soundsQueue.length > 0 )					{						var soundObject:Object = _soundsQueue.splice(0, 1)[0];						var soundChannel:SoundChannel = soundObject.sound.play(0, 0, _soundTransforms[soundObject.groupId] );							soundChannel.addEventListener( Event.SOUND_COMPLETE, handleSoundInQueueComplete );					}					else					{						_isQueuePlaying = false;					}				}								protected function handleSoundInQueueComplete( event:Event ):void				{					event.currentTarget.removeEventListener( Event.SOUND_COMPLETE, handleSoundInQueueComplete );										if( _soundsQueue.length > 0 )					{						if( _soundsQueue[0].delay > 0 )						{							if( _soundsQueueDelayTimer == null )							{								_soundsQueueDelayTimer = new CustomTimer(100, 1);								//_soundsQueueDelayTimer.addEventListener( TimerEvent.TIMER_COMPLETE, handleSoundsQueueDelayTimerComplete );								_soundsQueueDelayTimer.onTimerCompleted.add( handleSoundsQueueDelayTimerComplete );							}														_soundsQueueDelayTimer.delay = _soundsQueue[0].delay;							_soundsQueueDelayTimer.start();						}						else						{							playNextSoundInQueue();						}					}					else					{						_isQueuePlaying = false;					}				}								protected function handleSoundsQueueDelayTimerComplete( timer:CustomTimer ):void				{					_soundsQueueDelayTimer.reset();										playNextSoundInQueue();				}															/**	setVolumeForAllGroups			  *	--------------------------------------------------------------------------- *			  *	Sets the volume for all the groups and all the sounds playing.			  *	--------------------------------------------------------------------------- */				public function setVolumeForAllGroups( v:Number, p:Number=0 ):void				{					//ConsoleBroadcaster.broadcast("SoundEffectPlayer", "setVolumeForAllGroups("+v+", "+p+");" );										for( var i in _soundTransforms )					{						_soundTransforms[i].volume = v;						_soundTransforms[i].pan = p;					}										currentSoundTransform.volume = v;					currentSoundTransform.pan = p;										for( var j:uint=0; j<_soundsPlaying.length; ++j )					{						//trace( "_soundsPlaying.id: "+_soundsPlaying[j].soundId );						_soundsPlaying[j].soundChannel.soundTransform = _soundTransforms[_soundsPlaying[j].groupId];						//trace( "_soundsPlaying.volume: "+SoundChannel(_soundsPlaying[j].soundChannel).soundTransform.volume );					}				}							/*	setVolume			 *	--------------------------------------------------------------------------- */				public function setVolume( v:Number, p:Number = 0, groupId:String="DefaultSoundGroup" ):void				{					//ConsoleBroadcaster.broadcast("SoundEffectPlayer","setVolume(volume "+v+" panning: "+p+", "+groupId+")");					//currentSoundTransform = new SoundTransform( v, p );										currentSoundTransform.volume = v;					currentSoundTransform.pan = p;										if( _soundTransforms[ groupId ] == undefined )					{						//trace( "soundTransform for "+groupId+" not found" );						_soundTransforms[ groupId ] = new SoundTransform(v, p);					}					else					{						SoundTransform(_soundTransforms[ groupId ]).volume = v;						SoundTransform(_soundTransforms[ groupId ]).pan = p;					}					/*					for( var j in _soundTransforms )					{						trace( "_soundTransforms["+j+"]: "+_soundTransforms[j].volume );					}					*/										//trace( "_soundsPlaying.length: "+_soundsPlaying.length );										for( var i:int=0; i<_soundsPlaying.length; ++i )					{						//trace( "sound.volume: "+_soundsPlaying[i].soundChannel.soundTransform.volume );												//SoundChannel(_soundsPlaying[i].soundChannel).soundTransform.volume = v;						//SoundChannel(_soundsPlaying[i].soundChannel).soundTransform.pan = p;												if( _soundsPlaying[i].groupId == groupId )						{							//trace( "setting volume on sound with id "+_soundsPlaying[i].soundId+", and group "+_soundsPlaying[i].groupId );							SoundChannel(_soundsPlaying[i].soundChannel).soundTransform = _soundTransforms[groupId];						}					}				}							/*	getVolume			 *	--------------------------------------------------------------------------- */				public function getVolume( groupId:String="DefaultSoundGroup" ):Number				{					if( _soundTransforms[groupId] == undefined )						_soundTransforms[groupId] = new SoundTransform(currentSoundTransform.volume, currentSoundTransform.pan);										return _soundTransforms[groupId].volume;				}					/*	loadError			 *	--------------------------------------------------------------------------- */				protected function loadError( event:IOErrorEvent ):void				{					//ConsoleBroadcaster.broadcast("SoundEffectPlayer","loadError("+event+")");				}					/*	soundCompleteHandler			 *	--------------------------------------------------------------------------- 				protected function soundCompleteHandler( event:Event ):void				{					//ConsoleBroadcaster.broadcast("SoundEffectPlayer","soundCompleteHandler("+event+")");					_soundChannel.removeEventListener(Event.SOUND_COMPLETE, soundCompleteHandler);					currentSound = null;					dispatchEvent( new CustomEvent( "soundEffectPlayComplete", { soundId:currentSound } ) );				}*/		}	}