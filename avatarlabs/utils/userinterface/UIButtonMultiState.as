/**	UIButtonMultiState *	------------------------------------------------------------------------------------ * *	This class must be associated to a MovieClip, via the library element's linkage info *	------------------------------------------------------------------------------------ */  	package com.avatarlabs.utils.userinterface	{		import flash.events.*;		import flash.display.MovieClip;				import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.userinterface.PlayToRewindTo;		import com.avatarlabs.utils.userinterface.UILabel;				public class UIButtonMultiState extends MovieClip		{			//private var label:UILabel;						private var buttonId:String;			private var buttonLabel:String;						private var ptrt:PlayToRewindTo;					private var hitAreaClip:MovieClip;					/**	Constructor		  * ---------------------------------------------------------------------------- */		  	public function UIButtonMultiState()			{				/*				ptrt = new PlayToRewindTo( this );				*/								//mouseChildren = true;								//setActive();							}						public function setHitArea( mc:MovieClip )			{				hitAreaClip = mc;			}						private function handleSetFocus( event:MouseEvent ):void			{				ConsoleBroadcaster.broadcast("UIButtonMultiState","handleSetFocus");				//ptrt.playTo();				gotoAndPlay( "over" );				dispatchEvent( new Event( "onSetFocus" ) );			}						private function handleKillFocus( event:MouseEvent ):void			{				ConsoleBroadcaster.broadcast("UIButtonMultiState","handleKillFocus");				//ptrt.rewindTo();				gotoAndPlay( "out" );				dispatchEvent( new Event( "onKillFocus" ) );			}						private function handleClick( event:MouseEvent ):void			{				ConsoleBroadcaster.broadcast("UIButtonMultiState","handleClick");				//ptrt.rewindTo();				gotoAndPlay( "out" );				dispatchEvent( new Event( "onClick" ) );			}						public function setId( id:String ):void			{				buttonId = id;			}						public function getId():String			{				return buttonId;			}						public function setActive():void			{				//ConsoleBroadcaster.broadcast( "UIButtonMultiState", "setActive();" );				//ConsoleBroadcaster.broadcast( "UIButtonMultiState", "hitAreaClip = "+hitAreaClip );								if ( hitAreaClip != null )				{					!hitAreaClip.hasEventListener( MouseEvent.MOUSE_OVER ) ? hitAreaClip.addEventListener( MouseEvent.MOUSE_OVER,	handleSetFocus ) : null;					!hitAreaClip.hasEventListener( MouseEvent.MOUSE_OUT ) ? hitAreaClip.addEventListener( MouseEvent.MOUSE_OUT,		handleKillFocus ) : null;					!hitAreaClip.hasEventListener( MouseEvent.MOUSE_UP ) ? hitAreaClip.addEventListener( MouseEvent.MOUSE_UP,		handleClick		) : null;					hitAreaClip.buttonMode = true;				}				else				{					!hasEventListener( MouseEvent.MOUSE_OVER ) ? addEventListener( MouseEvent.MOUSE_OVER,	handleSetFocus ) : null;					!hasEventListener( MouseEvent.MOUSE_OUT ) ? addEventListener( MouseEvent.MOUSE_OUT,		handleKillFocus ) : null;					!hasEventListener( MouseEvent.MOUSE_UP ) ? addEventListener( MouseEvent.MOUSE_UP,		handleClick		) : null;					buttonMode = true;				}			}						public function setDeactive():void			{				if ( hitAreaClip != null )				{					hitAreaClip.removeEventListener( MouseEvent.MOUSE_OVER,		handleSetFocus );					hitAreaClip.removeEventListener( MouseEvent.MOUSE_OUT,		handleKillFocus );					hitAreaClip.removeEventListener( MouseEvent.MOUSE_UP,		handleClick		);					hitAreaClip.buttonMode = false;				}				else				{					removeEventListener( MouseEvent.MOUSE_OVER,		handleSetFocus );					removeEventListener( MouseEvent.MOUSE_OUT,		handleKillFocus );					removeEventListener( MouseEvent.MOUSE_UP,		handleClick		);					buttonMode = false;				}			}						/*public function setUILabel( l:UILabel ):void			{				label = l;				label.setLabel( buttonLabel ); 			}						public function setLabel ( l:String ):void			{				buttonLabel = l;				label.setLabel( buttonLabel ); 			}*/		}	}