/** UIVerticleScroller *	---------------------------------------------------------------------------- * *	@dev:	James Safechuck [james@avatarlabs.com] *	@desc:	General purpose Verticle Scroller. Scrolls content  *	when user moves their mouse up and down within a user set active area *	example: *	scroller_mc.createMask( 0, 0, 200, 20 ); *	scroller_mc.setActiveArea( 75 ); *	scroller_mc.setScrollSpeed( 5 ); *	scroller_mc.setActive(true); *	---------------------------------------------------------------------------- */ 	package com.avatarlabs.utils.userinterface	{		import flash.display.MovieClip;		import flash.display.Sprite;		import flash.events.MouseEvent;		import flash.events.Event;		import flash.errors.IllegalOperationError;				public class UIVerticleScroller extends MovieClip		{			private static const UP:String = "up";			private static const DOWN:String = "down";						private var contentContainer:Sprite;			private var contentMask:Sprite;						private var active:Boolean;						private var displayChildren:Array;						private var spacing:uint = 5;			private var per:Number = 0;			private var scrollSpeed:Number = 2;						private var currentDirection:String;						private var bounds:Sprite;						private var activeArea:Object;					/*	Constructor		 *	------------------------------------------------------------ */			public function UIVerticleScroller()			{				displayChildren = new Array();				contentContainer = new Sprite();				contentMask = new Sprite();				activeArea = new Object();								currentDirection = "";								addChild( contentContainer );				addChild( contentMask );							}					/*	createMask		 *	sets dimentions of two sprites. one used for mask and the 		 *	other is used for mouse per		 *	------------------------------------------------------------ */			public function createMask( x:Number, y:Number, width, height ):void			{				contentMask.graphics.beginFill(0xFFCC00);				contentMask.graphics.lineStyle(0, 0x0000CC, 1);				contentMask.graphics.drawRect( x, y, width, height );				contentMask.graphics.endFill();								bounds = new Sprite();				bounds.graphics.beginFill(0xFFCC00, 0);				bounds.graphics.lineStyle(0, 0, 0);				bounds.graphics.drawRect( x, y, width, height );				bounds.graphics.endFill();				bounds.mouseChildren = false;								addChild( bounds );				swapChildren( bounds, contentContainer );								contentContainer.mask = contentMask;			}					/*	setActiveArea		 *	this will set the active area for the scroll		 * 	if user makes this number bigger than half the bounds area		 *	it defaults to half.		 *	------------------------------------------------------------ */			public function setActiveArea( h:int ):void			{				//trace( "setActiveArea("+h+")");								if( !bounds )				{					throw new IllegalOperationError("ERROR MUST USE createMask() FUNCTION BEFORE YOU CALL setActiveArea()");				}								if( h > (bounds.height / 2) )					h = ( bounds.height/2);								activeArea.startY1 = 0;				activeArea.endY1 = h;								activeArea.endY2 = bounds.height;				activeArea.startY2 = bounds.height - h;			}					/*	setActiveArea		 *	sets the direction and per depending on where the mouse is		 *	------------------------------------------------------------ */			protected function setPer( event:MouseEvent ):void			{				//trace( "MouseEvent.localY "+event.localY );								var mouse_y = event.localY;								if( (mouse_y >= activeArea.startY1) && ( mouse_y <= activeArea.endY1 ) )				{					//trace( "is in activeArea 1");					var offset:Number = activeArea.endY1 - mouse_y;					per = Math.abs(offset / activeArea.endY1);					//trace( per );					currentDirection = UIVerticleScroller.UP;									}else if( (mouse_y <= activeArea.endY2) && ( mouse_y >= activeArea.startY2 ) )				{					var currentActiveArea:Number = activeArea.endY2 - activeArea.startY2;					per = Math.abs( (activeArea.startY2 - mouse_y) / currentActiveArea );					//trace( per );					currentDirection = UIVerticleScroller.DOWN;					//trace( "is in activeArea 2");				}else				{					per = 0;					currentDirection = "";				}			}					/*	scrollContent		 *	scrols the content using the direction and per		 *	------------------------------------------------------------ */			private function scrollContent( event:Event ):void			{				switch ( currentDirection )				{					case UIVerticleScroller.UP:						if(canMoveDown())							contentContainer.y += (per * scrollSpeed);					break;					case UIVerticleScroller.DOWN:						if( canMoveUp() )							contentContainer.y -= (per * scrollSpeed);					break;					case "":					break;				}			}					/*	canMoveFoward		 *	------------------------------------------------------------ */			protected function canMoveUp():Boolean			{				var condition = (contentContainer.y + contentContainer.height) > (contentMask.y + contentMask.height );								if( condition  )				{					return true;				}else				{					return false;				}			}					/*	canMoveBackward		 *	------------------------------------------------------------ */			protected function canMoveDown():Boolean			{				var condition = (contentContainer.y <= activeArea.startY1);								if( condition )				{					return true;				}else				{					return false;				}			}					/*	setActive		 *	turn this off and on to start and stop scrolling		 *	------------------------------------------------------------ */			public function setActive( a:Boolean ):void			{				active = a;								//trace( bounds );								if( active )				{					bounds.addEventListener( Event.ENTER_FRAME, scrollContent );					bounds.addEventListener( MouseEvent.MOUSE_MOVE, setPer );				}else				{					bounds.removeEventListener( Event.ENTER_FRAME, scrollContent );					bounds.removeEventListener( MouseEvent.MOUSE_MOVE, setPer );				}			}					/*	getters/setters		 *	------------------------------------------------------------ */			public function getActive():Boolean			{				return active;			}						public function setScrollSpeed( s:Number ):void			{				scrollSpeed = s;			}						public function getScrollSpeed():Number 			{				return scrollSpeed;			}						public function setSpacing( s:Number ):void			{				spacing = s;			}					/*	addDisplayChild		 *	------------------------------------------------------------ */			public function addDisplayChild( child:Sprite ):void			{				//trace( "addDisplayChild("+child+")");								contentContainer.addChild( child );				displayChildren.push( child );								child.y = (child.height + spacing) * (displayChildren.length -1);			}		}	}