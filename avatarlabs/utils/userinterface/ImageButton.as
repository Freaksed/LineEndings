/** ImageButton *	---------------------------------------------------------------------------- * *	@dev:	James Safechuck [james@avatarlabs.com] *	@desc:	ImageButton Holds an image with button functionality *	---------------------------------------------------------------------------- */ 	package com.avatarlabs.utils.userinterface {				import flash.events.Event;		import flash.display.MovieClip;				import com.avatarlabs.utils.console.ConsoleBroadcaster;				import com.avatarlabs.utils.navigation.UINavigationButton;				import com.avatarlabs.utils.loader.CustomLoader;				import com.avatarlabs.utils.events.CustomEvent;						public class ImageButton extends UINavigationButton		{						private var _imageButtonId:String;			private var _imageURL:String;						private var cLoader:CustomLoader;								/** Constructor		  *	-------------------------------------------------------------- */			public function ImageButton() {								cLoader = new CustomLoader();				cLoader.addEventListener( "onLoadComplete", handleOnLoadComplete );				cLoader.addEventListener( "onLoadProgress", handleOnLoadProgress );								super();			}					/** initWithId		  *	-------------------------------------------------------------- */			public function initWithId( id:String, url:String ):void			{				ConsoleBroadcaster.broadcast("ImageButton",("initWithId( id:"+id+" url:"+url+" )");								this._imageURL = url;				this._imageButtonId = id;								cLoader.loadAsset( this, _imageURL );			}						private function handleOnLoadProgress( event:CustomEvent ):void			{				dispatchEvent( new CustomEvent( "onLoadProgress", { loaded:event.customParameters.loaded, total:event.customParameters.total } ) );			}					/** handleOnLoadComplete		  *	-------------------------------------------------------------- */			private function handleOnLoadComplete( event:CustomEvent ):void			{				//trace( "ImageButton::handleOnloadComplete()");				cLoader.removeEventListener( "onLoadProgress", handleOnLoadProgress );				cLoader.removeEventListener( "onLoadComplete", handleOnLoadComplete );				dispatchEvent( new CustomEvent( "onLoadComplete", { button:this } ) );			}					/** _imageButtonId		  *	-------------------------------------------------------------- */			public function get imageButtonId():String			{				return _imageButtonId;			}					}			}