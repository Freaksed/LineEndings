/** UIMouseScroller *	---------------------------------------------------------------------------- * *	@dev:	Christian W [christian@avatalrabs.com] *	@desc:	Abstract class for the section containers *	---------------------------------------------------------------------------- */ 	package com.avatarlabs.utils.userinterface	{		import flash.display.MovieClip;		import flash.events.Event;		import flash.events.MouseEvent;		import flash.geom.Rectangle;		import flash.utils.getDefinitionByName;				import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;				import gs.TweenLite;				public class UIMouseScroller extends MovieClip		{			protected var _contentClip:MovieClip;			protected var _maskClip:MovieClip;						protected var _looping:Boolean;			protected var _duplicateLinkageId:String;			protected var contentWidth:Number;			protected var displayWidth:Number;			protected var center:Number;			protected var duplicatesNeeded:Number;			protected var maskBounds:Rectangle;			protected var contentBounds:Rectangle;			protected var tx:Number;			protected var startTween:Boolean;			protected var _tweenAmount:Number;			protected var _padding:Number;					/** Constructor		  *	-------------------------------------------------------------- */			public function UIMouseScroller()			{				startTween = false;				_tweenAmount = 15;				_padding = 10;				_looping = true;							}					/** init		  *	-------------------------------------------------------------- */			public function init():void			{				ConsoleBroadcaster.broadcast("UIMouseScroller","init()");								contentWidth = _contentClip.width;				displayWidth = this.stage.width;				center = this.x;				duplicatesNeeded = Math.floor((displayWidth/(2 * contentWidth)) + 1);								if ( _looping && _duplicateLinkageId != "" )					createDuplicates();													addListeners();																}					/** set contentclip		  *	-------------------------------------------------------------- */			public function set contentClip(mc:MovieClip):void			{				_contentClip = mc;				tx = _contentClip.x;								contentBounds = _contentClip.getBounds(this);			}					/** set maskClip		  *	-------------------------------------------------------------- */			public function set maskClip(mc:MovieClip):void			{				_maskClip = mc;				//maskBounds = this.getBounds(_maskClip);				maskBounds = _maskClip.getBounds(this);			}					/** set looping		  *	-------------------------------------------------------------- */			public function set looping( l:Boolean ):void			{				_looping = l;			}					/** set duplicateLinkageId		  *	-------------------------------------------------------------- */			public function set duplicateLinkageId( id:String ):void			{				_duplicateLinkageId = id;			}					/** set padding		  *	-------------------------------------------------------------- */			public function set padding( _p:Number ):void			{				_padding = _p;			}					/** set tweenAmount		  *	-------------------------------------------------------------- */			public function set tweenAmount( _t:Number ):void			{				_tweenAmount = _t;			}					/** addListeners		  *	-------------------------------------------------------------- */			protected function addListeners():void			{				ConsoleBroadcaster.broadcast("UIMouseScroller","addListeners()");											addEventListener(Event.REMOVED_FROM_STAGE, removeListeners);				addEventListener(Event.ENTER_FRAME, updateVisuals);			}					/** removeListeners		  *	-------------------------------------------------------------- */			protected function removeListeners(event:Event=null):void			{				ConsoleBroadcaster.broadcast("UIMouseScroller","removeListeners()");											removeEventListener(Event.REMOVED_FROM_STAGE, removeListeners);				removeEventListener(Event.ENTER_FRAME, updateVisuals);			}					/** onOut		  *	-------------------------------------------------------------- */			protected function onOut(event:MouseEvent):void			{				trace("onOut()");			}					/** updateVisuals		  *	-------------------------------------------------------------- */			protected function updateVisuals(event:Event):void			{				var currentX:Number;				/*trace("========================== tween tween");				trace("========================================================maskBounds.left  = " + maskBounds.left);				trace("========================================================maskBounds.right  = " + maskBounds.right);				trace("mouseX = " + this.mouseX); */								if(this.mouseX > maskBounds.left && this.mouseX < maskBounds.right && this.mouseY > maskBounds.top && this.mouseY < maskBounds.bottom)				{					//Tweener.removeAllTweens();					TweenLite.killTweensOf( _contentClip );										//TODO:					// Work on this for the non looping scrolling					/*					contentBounds = _contentClip.getBounds(this);										if ( !_looping )					{						if ( this.mouseX > 0 )						{							if ( (contentBounds.right + (this.mouseX * .1)) < maskBounds.right )							{								_contentClip.x += maskBounds.right - contentBounds.right;							}							else							{								_contentClip.x -= this.mouseX * .1;							}						}						else if ( this.mouseX < 0 )						{							if ( (contentBounds.left - (this.mouseX * .1)) > maskBounds.left )							{								_contentClip.x -= contentBounds.left - maskBounds.left;							}							else							{								_contentClip.x -= this.mouseX * .1;							}						}						else						{							_contentClip.x -= this.mouseX * .1;							}					}					else					{						_contentClip.x -= this.mouseX * .1;					}					*/					_contentClip.x -= this.mouseX * .1;					tx = _contentClip.x;					startTween = true;				}				else				{					//trace("==========================stop tween");					if(startTween)					{						//if(this.mouseX < 0)						//	Tweener.addTween(_contentClip, {x: (tx + _tweenAmount), time:5});						//if(this.mouseX > 0)						//	Tweener.addTween(_contentClip, {x:(tx - _tweenAmount), time:5});												contentBounds = _contentClip.getBounds(this);												if ( this.mouseX < 0 )						{							TweenLite.to( _contentClip, 5, {x:(tx + _tweenAmount)} );						}												if ( this.mouseX > 0 )						{							TweenLite.to( _contentClip, 5, {x:(tx - _tweenAmount)} );						}												startTween = false;					}				}								if (_contentClip.x > (contentWidth/2))				{					_contentClip.x -= contentWidth;				} 				else if (_contentClip.x < -(contentWidth/2))				{					_contentClip.x += contentWidth;				}							}					/** createDuplicates		  *	-------------------------------------------------------------- */			protected function createDuplicates():void			{				ConsoleBroadcaster.broadcast("UIMouseScroller","createDuplicates()");								var duplicateClass = getDefinitionByName(_duplicateLinkageId) as Class;								trace( "duplicatesNeeded: "+duplicatesNeeded );								for (var i:uint = 0; i<duplicatesNeeded; i++)				{					var rightDuplicate:uint = 2*i;					var leftDuplicate:uint = (2*i)+1;										var right = new duplicateClass();					right.name = "content" + rightDuplicate; 					right.x = (i+1) * (contentWidth + _padding);					_contentClip.addChild(right);										var left = new duplicateClass();					left.name = "content" + leftDuplicate;					left.x = -((i+1) * (contentWidth + _padding));					_contentClip.addChild(left);				}								contentBounds = _contentClip.getBounds(this);			}		}	}