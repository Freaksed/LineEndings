/**	UIButton *	------------------------------------------------------------------------------------ * *	This class must be associated to a MovieClip, via the library element's linkage info *	Updates * 	Jun 20 2008: Developer: James Safechuck Added: init() and releaseListeners() *	------------------------------------------------------------------------------------ */  	package com.avatarlabs.utils.userinterface	{		import flash.display.MovieClip;		import flash.events.*;		import flash.text.TextField;				import com.avatarlabs.utils.userinterface.PlayToRewindTo;				public class UIButton extends MovieClip		{			protected var _dynamicClip:MovieClip;			protected var _buttonId:*;			protected var _buttonLabel:String;						protected var _ptrt:PlayToRewindTo;				/**	Constructor		  * ---------------------------------------------------------------------------- */		  	public function UIButton()			{				init();			}						protected function init( event:Event=null ):void			{				//trace("UIButton: init");								_dynamicClip = this;								_ptrt = new PlayToRewindTo( _dynamicClip );								//_dynamicClip.mouseChildren = false;				_dynamicClip.tabEnabled = false;								_dynamicClip.addEventListener( Event.REMOVED_FROM_STAGE, releaseListeners );				//addEventListener( Event.ADDED_TO_STAGE, init );								_dynamicClip.gotoAndStop(1);				setActive();			}						protected function handleSetFocus( event:Event ):void			{				//trace("UIButton: handleSetFocus");				_ptrt.playTo();				dispatchEvent( new Event( "onSetFocus" ) );			}						protected function handleKillFocus( event:Event ):void			{				//trace("handleKillFocus");				_ptrt.rewindTo();				dispatchEvent( new Event( "onKillFocus" ) );			}						protected function handleClick( event:Event ):void			{				//trace("handleClick");				_ptrt.rewindTo();				dispatchEvent( new Event( "onKillFocus" ) );				dispatchEvent( new Event( "onClick" ) );			}						public function setId( id:* ):void			{				_buttonId = id;			}						public function getId():*			{				return _buttonId;			}						public function setActive( rewindTo:Boolean=false ):void			{				_dynamicClip.buttonMode = true;								if ( rewindTo )					_ptrt.rewindTo();								!_dynamicClip.hasEventListener( MouseEvent.ROLL_OVER ) ? _dynamicClip.addEventListener( MouseEvent.ROLL_OVER, handleSetFocus ) : null;				!_dynamicClip.hasEventListener( MouseEvent.ROLL_OUT ) ? _dynamicClip.addEventListener( MouseEvent.ROLL_OUT,	handleKillFocus ) : null;				!_dynamicClip.hasEventListener( MouseEvent.CLICK ) ? _dynamicClip.addEventListener( MouseEvent.CLICK, handleClick ) : null;			}						public function setDeactive( playTo:Boolean=false ):void			{				//trace( "_dynamicClip: "+_dynamicClip );								_dynamicClip.buttonMode = false;								if ( playTo )					_ptrt.playTo();								_dynamicClip.hasEventListener( MouseEvent.ROLL_OVER ) ? _dynamicClip.removeEventListener( MouseEvent.ROLL_OVER,	handleSetFocus ) : null;				_dynamicClip.hasEventListener( MouseEvent.ROLL_OUT ) ? _dynamicClip.removeEventListener( MouseEvent.ROLL_OUT, handleKillFocus ) : null;				_dynamicClip.hasEventListener( MouseEvent.CLICK ) ? _dynamicClip.removeEventListener( MouseEvent.CLICK, handleClick ) : null;			}									protected function releaseListeners( event:Event ):void			{				//trace("UIButton: releaseListeners()");								_dynamicClip.removeEventListener( Event.ADDED_TO_STAGE, init );				_dynamicClip.removeEventListener( Event.REMOVED_FROM_STAGE, releaseListeners );				_dynamicClip.hasEventListener( MouseEvent.MOUSE_OVER ) ? _dynamicClip.removeEventListener( MouseEvent.MOUSE_OVER, handleSetFocus ) : null;				_dynamicClip.hasEventListener( MouseEvent.MOUSE_UP ) ? _dynamicClip.removeEventListener( MouseEvent.MOUSE_OUT, handleKillFocus ) : null;				_dynamicClip.hasEventListener( MouseEvent.MOUSE_UP ) ? _dynamicClip.removeEventListener( MouseEvent.MOUSE_UP, handleClick ) : null;			}		}	}