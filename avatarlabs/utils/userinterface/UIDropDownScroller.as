/** UIDropDownScroller Class  *	------------------------------------------------------------------------------------  *	@dev: 	Christian Widodo [christian@avatarlabs.com]  *	@desc:	A DropDownMenu class with a scroller for the content inside  *			This is created since Flash's drop down ComboBox is not flexible enough  *			to fit the needs of a project  *	------------------------------------------------------------------------------------*/  	package com.avatarlabs.utils.userinterface	{		import flash.display.MovieClip;		import flash.events.Event;		import flash.events.MouseEvent;		import flash.geom.Rectangle;		import flash.utils.getDefinitionByName;				import com.avatarlabs.utils.console.ConsoleBroadcaster;		import com.avatarlabs.utils.events.CustomEvent;		import com.avatarlabs.utils.userinterface.DynamicUIButton;		import com.avatarlabs.utils.userinterface.UIScroller;				public class UIDropDownScroller extends MovieClip		{			protected var _dynamicClip:MovieClip;			protected var _contentItemRenderer:Function;			protected var _selectedContentItemRenderer:Function;			protected var _dropDownContentItemLinkage:String;			protected var _dropDownContentItemClass:Class;			protected var _dp:Array;	// { label, id }, { label, id }			protected var _opened:Boolean;			protected var _contentItems:Array;			protected var _selectedItemId:String;			protected var _scrollerClip:*;						/**	Stage Instances **/			public var scroller_mc:*;			public var selectedLabel_mc:*;			/**	End of Stage Instances **/						/** Constructor			  *	---------------------------------------------------------------------------- */				public function UIDropDownScroller()				{					init();				}							/** init			  *	---------------------------------------------------------------------------- */				public function init():void				{					_dynamicClip = this;										_scrollerClip = scroller_mc;										_contentItems = new Array();					_dp = new Array();										_dropDownContentItemLinkage = "DropDownContent.item";					_dropDownContentItemClass = getDefinitionByName(_dropDownContentItemLinkage) as Class;										selectedLabel_mc.buttonMode = true;					//selectedLabel_mc.addEventListener( MouseEvent.CLICK, handleSelectedLabelClicked, false, 0, true );					selectedLabel_mc.addEventListener( "onClick", handleSelectedLabelClicked, false, 0, true );					selectedLabel_mc.mouseChildren = false;										var contentItem:MovieClip;										for( var i:int=0; i<_dp.length; i++ )					{						contentItem = new DynamicUIButton();						contentItem.dynamicClip = new _dropDownContentItemClass();						contentItem.dynamicClip.mouseChildren = false;						contentItem.dynamicClip.label_mc.label_txt.text = _dp[i].label;						contentItem.dynamicInit();						//contentItem.buttonMode = true;						contentItem.addEventListener( "onClick", handleContentItemClicked, false, 0, true );						contentItem.addEventListener( "onSetFocus", handleContentItemRolledOver, false, 0, true );						contentItem.addEventListener( "onKillFocus", handleContentItemRolledOut, false, 0, true );						contentItem.dynamicClip.x = 0;						contentItem.dynamicClip.y = _scrollerClip.dynamicClip.content_mc.numChildren * contentItem.dynamicClip.height;												_scrollerClip.dynamicClip.content_mc.addChild( contentItem.dynamicClip );												_contentItems.push( contentItem );					}										_scrollerClip.dynamicClip.visible = false;										_opened = false;					_dynamicClip.tabEnabled = false;					_dynamicClip.tabChildren = false;										/*					trace( "scroller_mc: "+scroller_mc );					//trace( "scroller_mc.toggleSlider: "+scroller_mc.toggleSlider );										if( scroller_mc )					{						trace( scroller_mc.toggleSlider );						scroller_mc.toggleSlider();					}					*/										try					{						_scrollerClip.toggleSlider();					}					catch( e:Error )					{						_scrollerClip.addEventListener( Event.INIT, handleScrollerInit, false, 0, true );					}				}							/** set/get dp			  *	---------------------------------------------------------------------------- */			  	public function set dp( _dp:Array ):void				{					this._dp = _dp;										//trace( "_scrollerClip: "+_scrollerClip );					//trace( "contentClip: "+_scrollerClip.dynamicClip.content_mc );										var contentClip:MovieClip = _scrollerClip.dynamicClip.content_mc;					var contentItem:MovieClip;										while( contentClip.numChildren > 0 )					{						contentClip.removeChildAt(0);					}										_contentItems = new Array();										for( var i:int=0; i<_dp.length; i++ )					{						contentItem = new _dropDownContentItemClass();						contentItem.dynamicClip.mouseChildren = false;						contentItem.dynamicClip.label_mc.label_txt.text = _dp[i].label;						contentItem.dynamicInit();						//contentItem.buttonMode = true;						contentItem.addEventListener( "onClick", handleContentItemClicked, false, 0, true );						contentItem.addEventListener( "onSetFocus", handleContentItemRolledOver, false, 0, true );						contentItem.addEventListener( "onKillFocus", handleContentItemRolledOut, false, 0, true );						contentItem.dynamicClip.x = 0;						contentItem.dynamicClip.y = _scrollerClip.dynamicClip.content_mc.numChildren * contentItem.dynamicClip.height;												_scrollerClip.dynamicClip.content_mc.addChild( contentItem.dynamicClip );												_contentItems.push( contentItem );					}										//trace( _dp.length );					//trace( "contentHeight: "+MovieClip(_scrollerClip).content_mc.height );										try					{						_scrollerClip.toggleSlider();					}					catch( e:Error )					{						_scrollerClip.addEventListener( Event.INIT, handleScrollerInit, false, 0, true );					}				}				public function get dp():Array				{					return this._dp;				}							/** get opened			  *	---------------------------------------------------------------------------- */				public function get opened():Boolean				{					return this._opened;				}							/** set dropDownContentItemLinkage			  *	---------------------------------------------------------------------------- */				public function set dropDownContentItemLinkage( _l:String ):void				{					this._dropDownContentItemLinkage = _l;					_dropDownContentItemClass = getDefinitionByName(_dropDownContentItemLinkage) as Class;				}								public function setScroller( s:UIScroller ):void				{					_scrollerClip = s;				}							/** handleScrollerInit			  *	---------------------------------------------------------------------------- */				protected function handleScrollerInit( event:Event ):void				{					//trace( "handleScrollerInit();" );					//trace( MovieClip(_scrollerClip).content_mc.height );					_scrollerClip.removeEventListener( Event.INIT, handleScrollerInit );					_scrollerClip.toggleSlider();				}							/** open			  *	---------------------------------------------------------------------------- */				public function open():void				{					if( !opened )					{						for( var i:int=0; i<_contentItems.length; i++ )						{							//trace( _contentItems[i] );							if( _dp[i].id == _selectedItemId )							{								_contentItems[i].setDeactive(true);								//break;							}							else							{								_contentItems[i].setActive(true);							}						}												_scrollerClip.dynamicClip.visible = true;						_opened = true;					}				}							/** close			  *	---------------------------------------------------------------------------- */				public function close():void				{					if( opened )					{						_scrollerClip.dynamicClip.visible = false;						_opened = false;					}				}							/** setSelectedItem			  *	---------------------------------------------------------------------------- */				public function set selectedItemId( id:String ):void				{					for( var i:int=0; i<_dp.length; i++ )					{						if( _dp[i].id == id )						{							_selectedItemId = id;							MovieClip(selectedLabel_mc).label_mc.label_txt.text = _dp[i].label;							break;						}					}				}								public function get selectedItem():Object				{					for( var i:int=0; i<_dp.length; i++ )					{						if( _dp[i].id == _selectedItemId )						{							return _dp[i];						}					}										return null;				}								public function get selectedItemId():String				{					return this._selectedItemId;				}							/** handleSelectedLabelClicked			  *	---------------------------------------------------------------------------- */				protected function handleSelectedLabelClicked( event:Event ):void				{					trace( "handleSelectedLabelClicked();" );										if( !_opened )					{						//_scrollerClip.dynamicClip.visible = true;						//_opened = true;						open();					}					else					{						//_scrollerClip.dynamicClip.visible = false;						//_opened = false;						close();					}				}							/** handleContentItemClicked			  *	---------------------------------------------------------------------------- */				protected function handleContentItemClicked( event:Event ):void				{					//trace( "handleContentItemClicked();" );										for( var i:int=0; i<_contentItems.length; i++ )					{						if( _contentItems[i] == event.currentTarget )						{							_selectedItemId = _dp[i].id;							MovieClip(selectedLabel_mc).label_mc.label_txt.text = _dp[i].label;						}					}										close();										dispatchEvent( new CustomEvent("onContentItemClick", {contentId:_selectedItemId}) );										//trace( "_selectedItemId: "+_selectedItemId );				}							/** handleContentItemRolledOver			  *	---------------------------------------------------------------------------- */				protected function handleContentItemRolledOver( event:Event ):void				{					var contentId:String;										for( var i:int=0; i<_contentItems.length; i++ )					{						if( _contentItems[i] == event.currentTarget )						{							contentId = _dp[i].id;							break;						}					}										//trace( "roll over "+contentId );										dispatchEvent( new CustomEvent("onContentItemRollOver", {contentId:contentId}) );				}							/** handleContentItemRolledOut			  *	---------------------------------------------------------------------------- */				protected function handleContentItemRolledOut( event:Event ):void				{					var contentId:String;										for( var i:int=0; i<_contentItems.length; i++ )					{						if( _contentItems[i] == event.currentTarget )						{							contentId = _dp[i].id;							break;						}					}										dispatchEvent( new CustomEvent("onContentItemRollOut", {contentId:contentId}) );				}							/** setContentItemRenderer			  *	This function will make it so users can easily adjust the code of how			  *	the content items are rendered.			  *	Not sure if this is needed though.			  *	---------------------------------------------------------------------------- */				public function setContentItemRenderer( f:Function ):void				{					_contentItemRenderer = f;										//trace( _contentItemRenderer );					_contentItemRenderer( selectedLabel_mc );				}							/** setSelectedContentItemRenderer			  *	This function will make it so users can easily adjust the code of how 			  *	the selected item is rendered.			  *	---------------------------------------------------------------------------- */				public function setSelectedContentItemRenderer( f:Function ):void				{									}		}	}