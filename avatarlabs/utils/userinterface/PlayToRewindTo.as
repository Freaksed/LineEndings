/**	PlayToRewindTo *	------------------------------------------------------------------------------------ * *	@desc: Allows the reciver movieclip to move foward and backward on timeline *	@developer: James Safechuck, [james@avatarlabs.com] *	------------------------------------------------------------------------------------ */ 	package com.avatarlabs.utils.userinterface	{		import flash.display.MovieClip;		import flash.events.*;		import flash.utils.Timer;				public class PlayToRewindTo extends EventDispatcher		{			// movieclip to recieve functionality			private var _reciever:MovieClip;						// timers			protected var playToTimer:Timer;			protected var rewindToTimer:Timer;						// variables			protected var playToStopFrame:Number;			protected var rewindToStopFrame:Number;						protected var _frameRate:Number = 0;						protected var callback:Function;								/**	Constructor		  *	---------------------------------------------------------------------- */			public function PlayToRewindTo( reciever:MovieClip = null ):void			{				this._reciever = reciever;								if( _reciever != null )				{					_reciever.stage == null ? _reciever.addEventListener( Event.ADDED_TO_STAGE, initPlayToRewindTo ) : initPlayToRewindTo();										//_reciever.addEventListener( Event.REMOVED, handleRecieverRemoved, false, 0, true );				}			}					/**	set/get reciever		  *	---------------------------------------------------------------------- */			public function set reciever( reciever:MovieClip ):void			{				this._reciever = reciever;								// Question to James:				// Why check for Event.ADDED_TO_STAGE to initialize the timers ?								if( ( playToTimer == null ) && ( rewindToTimer == null ) )					_reciever.stage == null ? _reciever.addEventListener( Event.ADDED_TO_STAGE, initPlayToRewindTo ) : initPlayToRewindTo();							}						public function get reciever():MovieClip			{				return _reciever;			}			/*			protected function handleRecieverRemoved( event:Event ):void			{				//stop();								//_reciever.removeEventListener( Event.REMOVED, handleRecieverRemoved );								if( playToTimer != null )					playToTimer.removeEventListener( TimerEvent.TIMER, handlePlayTo );								if( rewindToTimer != null )					rewindToTimer.removeEventListener( TimerEvent.TIMER, handleRewindTo );			}			*/					/**	initPlayToRewindTo		  *	---------------------------------------------------------------------- */		 	protected function initPlayToRewindTo( event:Event = null ):void			{				//trace( "initPlayToRewindTo()");								_frameRate = _reciever.stage.frameRate;								playToTimer = new Timer( _frameRate );								rewindToTimer = new Timer( _frameRate );								_reciever.hasEventListener( Event.ADDED_TO_STAGE ) ? _reciever.removeEventListener( Event.ADDED_TO_STAGE, initPlayToRewindTo ) : null;				//_reciever.addEventListener( Event.REMOVED, handleRecieverRemoved );			}				/**	playTo		  *	---------------------------------------------------------------------- */			public function playTo( stopFrame:Number = 0, callback:Function = null ):void			{				//trace( "playTo();" );								rewindToTimer.stop();				rewindToTimer.hasEventListener( TimerEvent.TIMER ) ? rewindToTimer.removeEventListener( TimerEvent.TIMER, handleRewindTo ) : null;								if (stopFrame==0)					playToStopFrame = _reciever.totalFrames;				else					playToStopFrame = stopFrame;								this.callback = callback;								playToTimer.addEventListener( TimerEvent.TIMER, handlePlayTo );				playToTimer.start();							}					/**	handlePlayTo		  *	---------------------------------------------------------------------- */			protected function handlePlayTo( event:Event ):void			{				if ( _reciever.currentFrame != playToStopFrame)				{					_reciever.nextFrame();				}				else				{					_reciever.gotoAndStop( playToStopFrame );					playToTimer.stop();					playToTimer.removeEventListener( TimerEvent.TIMER, handlePlayTo );										if ( callback!=null )						callback();				}			}				/**	rewindTo		  *	---------------------------------------------------------------------- */			public function rewindTo( stopFrame:Number = 0, callback:Function = null ):void			{				playToTimer.stop();				playToTimer.hasEventListener( TimerEvent.TIMER ) ? playToTimer.removeEventListener( TimerEvent.TIMER, handlePlayTo ): null;								if (!stopFrame || stopFrame<1)					rewindToStopFrame = 1;				else					rewindToStopFrame = stopFrame;								this.callback = callback;								rewindToTimer.addEventListener( TimerEvent.TIMER, handleRewindTo );				rewindToTimer.start();			}					/** handleRewindTo		  *	---------------------------------------------------------------------- *		  *	Stops the playTo or rewindTo animation		  *	---------------------------------------------------------------------- */			protected function handleRewindTo( event:Event ):void			{				if( _reciever.currentFrame > rewindToStopFrame )				{					_reciever.prevFrame();				}				else				{					_reciever.gotoAndStop( rewindToStopFrame );					rewindToTimer.stop();					rewindToTimer.removeEventListener( TimerEvent.TIMER, handleRewindTo );										if ( callback!=null )						callback();				}			}				/** stop		  *	---------------------------------------------------------------------- *		  *	Stops the playTo or rewindTo animation		  *	---------------------------------------------------------------------- */			public function stop():void			{				if( playToTimer.running )				{					playToTimer.stop();					//playToTimer.removeEventListener( TimerEvent.TIMER, handlePlayTo );				}				else if( rewindToTimer.running )				{					rewindToTimer.stop();					//rewindToTimer.removeEventListener( TimerEvent.TIMER, handleRewindTo );				}			}		}	}