/**	LocalObject *	------------------------------------------------------------------------------------ * *	by:James Safechuck *	------------------------------------------------------------------------------------ */	package com.avatarlabs.utils.data	{		import flash.events.*;		import flash.net.*;				public class LocalObject		{			private static var instance:LocalObject;						private var sharedObjectId:String = "AvatarLabs_Default";			private var sharedObjectPath:String = "/";						private var my_so:SharedObject;						/*	constructor			 *	---------------------------------------------------------------------------- */				public function LocalObject()				{					if ( !instance )					{											}				}						/*	singleton - constructor			 *	---------------------------------------------------------------------------- */				public static function getInstance():LocalObject				{															if( instance==null ) instance = new LocalObject();					return instance;				}						/*	init			 *	---------------------------------------------------------------------------- */			 	public function init( id:String = "", path:String = "/" ):void				{					//trace( "setId(id: "+id+" path: "+path+")");					sharedObjectId = id;					sharedObjectPath = path;					my_so = SharedObject.getLocal( sharedObjectId, sharedObjectPath );										//my_so.clear();					//trace('my_so-'+my_so);				}							/*	setValue			 *	---------------------------------------------------------------------------- */			 	public function setValue( valueId:String = "", value:String = "" ):void				{					//trace( "setValue( valueId: "+valueId+" value:"+value+")");										my_so.data[valueId] = value;										var flushStatus:String = null;					try					{						flushStatus = my_so.flush(10000);					} catch (error:Error)					{						trace("Error...Could not write SharedObject to disk\n");					}					if (flushStatus != null)					{						switch (flushStatus)						{							case SharedObjectFlushStatus.PENDING:								trace("Requesting permission to save object...\n");								my_so.addEventListener(NetStatusEvent.NET_STATUS, onFlushStatus);								break;							case SharedObjectFlushStatus.FLUSHED:								trace("Value flushed to disk.\n");								break;						}					}				}						/*	getValue			 *	---------------------------------------------------------------------------- */			 	public function getValue( id:String = "" ):*				{					//trace( "getValue("+id+"): "+my_so.data[id]);										if( my_so.data[id] == undefined )						return null;					else						return my_so.data[id];				}			/** onFlushStatus			  * -------------------------------------------------------------- */				function onFlushStatus(event:NetStatusEvent):void				{					trace("User closed permission dialog...\n");					switch (event.info.code)					{						case "SharedObject.Flush.Success":							trace("User granted permission -- value saved.\n");							break;						case "SharedObject.Flush.Failed":							trace("User denied permission -- value not saved.\n");							break;					}															my_so.removeEventListener(NetStatusEvent.NET_STATUS, onFlushStatus);				}		}	}		