/**	DebuggerUtil  *	------------------------------------------------------------ *  *	@desc:   *		debuging tool. It can enable/disable the debugging tools  *		that are used in the project.  *	@author:  *		Christian Widodo [christian@avatarlabs.com]  *	------------------------------------------------------------ */ 	package com.avatarlabs.utils	{		import flash.display.Stage;		import flash.events.EventDispatcher;		import flash.events.KeyboardEvent;		import flash.events.StatusEvent;		import flash.net.LocalConnection;		import flash.utils.getDefinitionByName;				import com.avatarlabs.utils.console.ConsoleBroadcaster;				public class DebuggerUtil extends EventDispatcher		{			protected static var _instance:DebuggerUtil;						protected var _enabled:Boolean;			protected var _stage:Stage;			protected var _keywords:Vector.<String>;			protected var _currentKeywordIndex:int;			protected var _currentKeySequences:Array;						/** Constructor			  *	---------------------------------------------------------------------------- */			 	public function DebuggerUtil( stage:Stage=null )				{					_stage = stage;										_keywords = new Vector.<String>;					_keywords.push( "CONSOLE" );					_keywords.push( "MONSTER" );					_keywords.fixed = true;										_currentKeySequences = new Array();										this.enabled = true;				}							/** Initialize the debugger class			  *	---------------------------------------------------------------------------- */			 	public static function init( stage:Stage ):void				{					if( _instance == null )					{						_instance = new DebuggerUtil(stage);					}				}							/** static set enabled			  *	---------------------------------------------------------------------------- */			 	public static function set enabled( b:Boolean ):void { _instance.enabled = b; }							/** set enabled			  *	---------------------------------------------------------------------------- */			 	public function set enabled( b:Boolean ):void				{					if( _enabled && !b )					{						_enabled = b;												if( _stage != null )						{							_stage.removeEventListener( KeyboardEvent.KEY_DOWN, handleKeyDown );						}						else						{							ConsoleBroadcaster.broadcast( "DebuggerUtil", "stage property is not set yet" );						}					}					else if( !_enabled && b )					{						_enabled = b;												if( _stage != null )						{							_stage.addEventListener( KeyboardEvent.KEY_DOWN, handleKeyDown );						}						else						{							ConsoleBroadcaster.broadcast( "DebuggerUtil", "stage property is not set yet" );						}					}				}								public function set stage( s:Stage ):void { _stage = s; }							/** handleKeyDown			  *	---------------------------------------------------------------------------- *			  *	It'll record the key that was pressed down by the user.			  *	---------------------------------------------------------------------------- */			 	protected function handleKeyDown( event:KeyboardEvent ):void				{					if( event.keyCode >= 65 && event.keyCode <= 90 )					{						_currentKeySequences.push( String.fromCharCode(event.keyCode) );												checkForKeywords();					}					else					{						resetCurrentKeySequences();					}				}							/** resetCurrentKeySequences			  *	---------------------------------------------------------------------------- *			  *	Resets current key sequences and the keyword index when user doesn't type			  *	the right keyword.			  *	---------------------------------------------------------------------------- */			 	protected function resetCurrentKeySequences():void				{					//trace( "resetCurrentKeySeqeuences();" );										_currentKeySequences = [];					_currentKeywordIndex = -1;				}							/** checkForKeywords			  *	---------------------------------------------------------------------------- *			  *	Compares the recorded sequences with the keywords. If it doesn't find a 			  *	matching keyword, it resets the key sequences.			  *	If keyword matches CONSOLE, it will enable/disable ConsoleBroadcaster.			  *	If keyword matches MONSTER, it will enable/disable MonsterDebugger.			  *	---------------------------------------------------------------------------- */			 	protected function checkForKeywords():void				{					//trace( "_currentKeySequences: "+_currentKeySequences );										var joinedSequences:String = _currentKeySequences.join("");					_currentKeywordIndex = -1;										for( var i:int=0; i<_keywords.length; ++i )					{						if( _keywords[i].search( joinedSequences ) == 0 )						{							_currentKeywordIndex = i;							break;						}					}										//trace( "_currentKeywordIndex: "+_currentKeywordIndex );										if( _currentKeywordIndex < 0 )					{						resetCurrentKeySequences();					}					else					{						//	Keyword is found !						//trace( "_keyword length: "+_keywords[_currentKeywordIndex].length );						//trace( "joinedSequences length: "+joinedSequences.length );						if( _keywords[_currentKeywordIndex].length == joinedSequences.length )						{							switch( _currentKeywordIndex )							{								case 0:									ConsoleBroadcaster.enabled = !ConsoleBroadcaster.enabled;									//trace( "ConsoleBroadcaster.enabled ? "+ConsoleBroadcaster.enabled );									break;																case 1:									try									{										//com.demonsters.debugger.MonsterDebugger.enabled = !MonsterDebugger.enabled;									}									catch( e:Error )									{										ConsoleBroadcaster.broadcast( "DebuggerUtil", "MonsterDebugger not included" );									}									//trace( "MonsterDebugger.enabled ? "+MonsterDebugger.enabled );									break;							}														resetCurrentKeySequences();						}					}				}						}	}