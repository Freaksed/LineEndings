/** VectorUtil  *	---------------------------------------------------------------------------- *  *	@desc:  *		Array utility functions.  *	@author:   *		Christian Widodo, [christian@avatarlabs.com]  *	---------------------------------------------------------------------------- */	package com.avatarlabs.utils	{		import flash.utils.getQualifiedClassName;				public class VectorUtil extends Object		{						/** Constructor			  *	---------------------------------------------------------------------- */				public function VectorUtil()				{									}							/** find			  *	---------------------------------------------------------------------- *			  *	Finds an element, needle, inside the array, haystack.			  *	You can also find the element using a custom property instead of			  *		comparing the objects directly.			  *	---------------------------------------------------------------------- */				public static function find( haystack:*, needle:*, customProperty:*=null ):*				{					var haystackLength:int = haystack.length;										for( var i:uint=0; i<haystackLength; ++i )					{						if( customProperty != null )						{							if( haystack[i][customProperty] == needle[customProperty] )								return haystack[i];						}						else						{							if( haystack[i] == needle )								return haystack[i];						}					}										return null;				}							/** remove			  *	---------------------------------------------------------------------- *			  *	Removes an element, needle, from the array, haystack.			  *	You can also remove the element using a custom property instead of			  *		comparing the objects directly.			  *	---------------------------------------------------------------------- */				public static function remove( haystack:*, needle:*, customProperty:*=null ):*				{					var haystackLength:int = haystack.length;										for( var i:uint=0; i<haystackLength; ++i )					{						if( customProperty != null && haystack[i][customProperty] == needle[customProperty] )						{							//haystack[i] = null;							return haystack.splice( i, 1 )[0];							//return true;						}						else if( haystack[i] == needle )						{							//haystack[i] = null;							return haystack.splice( i, 1 )[0];							//return true;						}					}										return null;				}							/** removeAll			  *	---------------------------------------------------------------------- *			  *	Removes an element, needle, from the array, haystack.			  *	You can also remove the element using a custom property instead of			  *		comparing the objects directly.			  *	---------------------------------------------------------------------- */				public static function removeAll( haystack:* ):void				{					while( haystack.length > 0 )					{						haystack[0] = null;						haystack.splice( 0, 1 );					}				}								public static function randomSort( a:Object, b:Object ):int				{					return Math.round( Math.random() * 2 ) - 1;				}								public static function toString( vectors:* ):String				{					var outputString:String = "";					var vectorsLength:int = vectors.length;										for( var i:uint=0; i<vectorsLength; ++i )					{						outputString += vectors[i].toString()+"\n";					}										return outputString;				}		}			}