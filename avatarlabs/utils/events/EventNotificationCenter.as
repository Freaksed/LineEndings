/**	EventNotificationCenter *	------------------------------------------------------------------------------------ * *	by:James Safechuck: james@avatarlabs.com *	This class works as a communicator for objects in different scopes. *	You ask this class to dispatch an event for you. *	Pass a reference to yourself; *	You can also pass along with an object of additional information. *	------------------------------------------------------------------------------------ */	package com.avatarlabs.utils.events	{		import flash.events.*;		import flash.display.Sprite;		import flash.display.MovieClip;		//import flash.errors.*;				import com.avatarlabs.utils.console.*;		import com.avatarlabs.utils.events.CustomEvent;				import org.osflash.signals.Signal;				public class EventNotificationCenter extends EventDispatcher		{			private static var _instance:EventNotificationCenter;						private var _signal:Signal;			private var _signalListeners:Array;						/*	Constructor			 *	---------------------------------------------------------------------------- */				public function EventNotificationCenter()				{					if ( !_instance )					{						_signal = new Signal( Object );						_signalListeners = new Array();					}else					{						throw new Error( "Singleton and can only be accessed through Singleton.getInstance()" );					}				}						/*	singleton			 *	---------------------------------------------------------------------------- */				public static function getInstance():EventNotificationCenter				{										if( _instance==null ) _instance = new EventNotificationCenter();					return _instance;				}								public function get signal():Signal { return _signal; }						/*	sendNotification			 *	---------------------------------------------------------------------------- */				public function sendNotification( _type:String, _sender:EventDispatcher ):void				{									dispatchEvent( new CustomEvent( _type, { sender:_sender } ) );				}						/*	sendNotificationWithParameters			 *	---------------------------------------------------------------------------- */				public function sendNotificationWithParameters( _type:String, _sender:EventDispatcher, _p:Object ):void				{									_p.sender = _sender;										dispatchEvent( new CustomEvent( _type, _p ) );				}							/**	sendSignal			  *	---------------------------------------------------------------------------- */				public function sendSignal( signalType:String, signalSender:EventDispatcher, customParameters:Object=null ):void				{					var signalParameters:Object = customParameters == null ? new Object() : customParameters;						signalParameters.signalType = signalType;						signalParameters.signalSender = signalSender;										//_signal.dispatch( signalParameters );					notifySignalListener( signalType, signalParameters );				}							/**	addSignalListener			  *	---------------------------------------------------------------------------- */				public function addSignalListener( type:String, func:Function, scope:EventDispatcher ):void				{					if( _signalListeners[type] == undefined )					{						_signalListeners[type] = new Array();					}										_signalListeners[type].push( {callback:func, scope:scope} );				}							/**	removeSignalListener			  *	---------------------------------------------------------------------------- */				public function removeSignalListener( type:String, func:Function ):void				{					if( _signalListeners[type] != undefined )					{						for( var i:int=0; i<_signalListeners[type].length; ++i )						{							if( _signalListeners[type][i].callback === func )							{								_signalListeners[type].splice( i, 1 );								trace( _signalListeners[type].length );								break;							}						}					}				}							/**	notifySignalListener			  *	---------------------------------------------------------------------------- */				private function notifySignalListener( type:String, customParameters:Object ):void				{					//trace( 'notifySignalListener('+type+');' );										if( _signalListeners[type] != undefined )					{						var func:Function;												//trace( '_signalListeners[type]: '+_signalListeners[type] );												for( var i:int=0; i<_signalListeners[type].length; ++i )						{							func = _signalListeners[type][i].callback;							//trace( 'scope: '+_signalListeners[type][i].scope );							func.apply( _signalListeners[type][i].scope, [customParameters] );						}					}				}							};	}		